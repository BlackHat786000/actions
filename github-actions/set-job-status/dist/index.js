var $4UN2M$buffer = require("buffer");
var $4UN2M$process = require("process");
var $4UN2M$net = require("net");
var $4UN2M$tls = require("tls");
var $4UN2M$http = require("http");
var $4UN2M$https = require("https");
var $4UN2M$events = require("events");
var $4UN2M$assert = require("assert");
var $4UN2M$util = require("util");
var $4UN2M$utiltypes = require("util/types");
var $4UN2M$streamweb = require("stream/web");
var $4UN2M$nodestream = require("node:stream");
var $4UN2M$nodeutil = require("node:util");
var $4UN2M$nodeevents = require("node:events");
var $4UN2M$stream = require("stream");
var $4UN2M$querystring = require("querystring");
var $4UN2M$perf_hooks = require("perf_hooks");
var $4UN2M$worker_threads = require("worker_threads");
var $4UN2M$async_hooks = require("async_hooks");
var $4UN2M$zlib = require("zlib");
var $4UN2M$string_decoder = require("string_decoder");
var $4UN2M$diagnostics_channel = require("diagnostics_channel");
var $4UN2M$path = require("path");
var $4UN2M$os = require("os");
var $4UN2M$crypto = require("crypto");
var $4UN2M$fs = require("fs");
var $4UN2M$console = require("console");
var $4UN2M$url = require("url");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global = globalThis;
    
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire7f5f"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire7f5f"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("geX44", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.checkBypass = module.exports.getProxyUrl = void 0;
function $bd2bc52790b39d6b$var$getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === "https:";
    if ($bd2bc52790b39d6b$var$checkBypass(reqUrl)) return undefined;
    const proxyVar = (()=>{
        if (usingSsl) return undefined;
        else return undefined;
    })();
    if (proxyVar) try {
        return new URL(proxyVar);
    } catch (_a) {
        if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://")) return new URL(`http://${proxyVar}`);
    }
    else return undefined;
}
module.exports.getProxyUrl = $bd2bc52790b39d6b$var$getProxyUrl;
function $bd2bc52790b39d6b$var$checkBypass(reqUrl) {
    if (!reqUrl.hostname) return false;
    const reqHost = reqUrl.hostname;
    if ($bd2bc52790b39d6b$var$isLoopbackAddress(reqHost)) return true;
    const noProxy = "";
    if (!noProxy) return false;
    // Determine the request port
    let reqPort;
    if (reqUrl.port) reqPort = Number(reqUrl.port);
    else if (reqUrl.protocol === "http:") reqPort = 80;
    else if (reqUrl.protocol === "https:") reqPort = 443;
    // Format the request hostname and hostname with port
    const upperReqHosts = [
        reqUrl.hostname.toUpperCase()
    ];
    if (typeof reqPort === "number") upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy.split(",").map((x)=>x.trim().toUpperCase()).filter((x)=>x)){
        if (upperNoProxyItem === "*" || upperReqHosts.some((x)=>x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) return true;
    }
    return false;
}
module.exports.checkBypass = $bd2bc52790b39d6b$var$checkBypass;
function $bd2bc52790b39d6b$var$isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
}

});

parcelRegister("igS5R", function(module, exports) {

module.exports = (parcelRequire("HDusA"));

});
parcelRegister("HDusA", function(module, exports) {

$parcel$export(module.exports, "httpOverHttp", () => $0832a63766fa1596$export$25cbd437c61a3835, (v) => $0832a63766fa1596$export$25cbd437c61a3835 = v);
$parcel$export(module.exports, "httpsOverHttp", () => $0832a63766fa1596$export$c06e3df7111bae43, (v) => $0832a63766fa1596$export$c06e3df7111bae43 = v);
$parcel$export(module.exports, "httpOverHttps", () => $0832a63766fa1596$export$5d50e36ef656139f, (v) => $0832a63766fa1596$export$5d50e36ef656139f = v);
$parcel$export(module.exports, "httpsOverHttps", () => $0832a63766fa1596$export$212d6605025321cc, (v) => $0832a63766fa1596$export$212d6605025321cc = v);
$parcel$export(module.exports, "debug", () => $0832a63766fa1596$export$1c9f709888824e05, (v) => $0832a63766fa1596$export$1c9f709888824e05 = v);
var $0832a63766fa1596$export$25cbd437c61a3835;
var $0832a63766fa1596$export$c06e3df7111bae43;
var $0832a63766fa1596$export$5d50e36ef656139f;
var $0832a63766fa1596$export$212d6605025321cc;
var $0832a63766fa1596$export$1c9f709888824e05;

var $0832a63766fa1596$require$Buffer = $4UN2M$buffer.Buffer;

"use strict";







$0832a63766fa1596$export$25cbd437c61a3835 = $0832a63766fa1596$var$httpOverHttp;
$0832a63766fa1596$export$c06e3df7111bae43 = $0832a63766fa1596$var$httpsOverHttp;
$0832a63766fa1596$export$5d50e36ef656139f = $0832a63766fa1596$var$httpOverHttps;
$0832a63766fa1596$export$212d6605025321cc = $0832a63766fa1596$var$httpsOverHttps;
function $0832a63766fa1596$var$httpOverHttp(options) {
    var agent = new $0832a63766fa1596$var$TunnelingAgent(options);
    agent.request = $4UN2M$http.request;
    return agent;
}
function $0832a63766fa1596$var$httpsOverHttp(options) {
    var agent = new $0832a63766fa1596$var$TunnelingAgent(options);
    agent.request = $4UN2M$http.request;
    agent.createSocket = $0832a63766fa1596$var$createSecureSocket;
    agent.defaultPort = 443;
    return agent;
}
function $0832a63766fa1596$var$httpOverHttps(options) {
    var agent = new $0832a63766fa1596$var$TunnelingAgent(options);
    agent.request = $4UN2M$https.request;
    return agent;
}
function $0832a63766fa1596$var$httpsOverHttps(options) {
    var agent = new $0832a63766fa1596$var$TunnelingAgent(options);
    agent.request = $4UN2M$https.request;
    agent.createSocket = $0832a63766fa1596$var$createSecureSocket;
    agent.defaultPort = 443;
    return agent;
}
function $0832a63766fa1596$var$TunnelingAgent(options) {
    var self = this;
    self.options = options || {};
    self.proxyOptions = self.options.proxy || {};
    self.maxSockets = self.options.maxSockets || $4UN2M$http.Agent.defaultMaxSockets;
    self.requests = [];
    self.sockets = [];
    self.on("free", function onFree(socket, host, port, localAddress) {
        var options = $0832a63766fa1596$var$toOptions(host, port, localAddress);
        for(var i = 0, len = self.requests.length; i < len; ++i){
            var pending = self.requests[i];
            if (pending.host === options.host && pending.port === options.port) {
                // Detect the request to connect same origin server,
                // reuse the connection.
                self.requests.splice(i, 1);
                pending.request.onSocket(socket);
                return;
            }
        }
        socket.destroy();
        self.removeSocket(socket);
    });
}
$4UN2M$util.inherits($0832a63766fa1596$var$TunnelingAgent, $4UN2M$events.EventEmitter);
$0832a63766fa1596$var$TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
    var self = this;
    var options = $0832a63766fa1596$var$mergeOptions({
        request: req
    }, self.options, $0832a63766fa1596$var$toOptions(host, port, localAddress));
    if (self.sockets.length >= this.maxSockets) {
        // We are over limit so we'll add it to the queue.
        self.requests.push(options);
        return;
    }
    // If we are under maxSockets create a new one.
    self.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
            self.emit("free", socket, options);
        }
        function onCloseOrRemove(err) {
            self.removeSocket(socket);
            socket.removeListener("free", onFree);
            socket.removeListener("close", onCloseOrRemove);
            socket.removeListener("agentRemove", onCloseOrRemove);
        }
    });
};
$0832a63766fa1596$var$TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
    var self = this;
    var placeholder = {};
    self.sockets.push(placeholder);
    var connectOptions = $0832a63766fa1596$var$mergeOptions({}, self.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
            host: options.host + ":" + options.port
        }
    });
    if (options.localAddress) connectOptions.localAddress = options.localAddress;
    if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new $0832a63766fa1596$require$Buffer(connectOptions.proxyAuth).toString("base64");
    }
    $0832a63766fa1596$var$debug("making CONNECT request");
    var connectReq = self.request(connectOptions);
    connectReq.useChunkedEncodingByDefault = false; // for v0.6
    connectReq.once("response", onResponse); // for v0.6
    connectReq.once("upgrade", onUpgrade); // for v0.6
    connectReq.once("connect", onConnect); // for v0.7 or later
    connectReq.once("error", onError);
    connectReq.end();
    function onResponse(res) {
        // Very hacky. This is necessary to avoid http-parser leaks.
        res.upgrade = true;
    }
    function onUpgrade(res, socket, head) {
        // Hacky.
        $4UN2M$process.nextTick(function() {
            onConnect(res, socket, head);
        });
    }
    function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
            $0832a63766fa1596$var$debug("tunneling socket could not be established, statusCode=%d", res.statusCode);
            socket.destroy();
            var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self.removeSocket(placeholder);
            return;
        }
        if (head.length > 0) {
            $0832a63766fa1596$var$debug("got illegal response body from proxy");
            socket.destroy();
            var error = new Error("got illegal response body from proxy");
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self.removeSocket(placeholder);
            return;
        }
        $0832a63766fa1596$var$debug("tunneling connection has established");
        self.sockets[self.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
    }
    function onError(cause) {
        connectReq.removeAllListeners();
        $0832a63766fa1596$var$debug("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
        var error = new Error("tunneling socket could not be established, cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self.removeSocket(placeholder);
    }
};
$0832a63766fa1596$var$TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
    var pos = this.sockets.indexOf(socket);
    if (pos === -1) return;
    this.sockets.splice(pos, 1);
    var pending = this.requests.shift();
    if (pending) // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
        pending.request.onSocket(socket);
    });
};
function $0832a63766fa1596$var$createSecureSocket(options, cb) {
    var self = this;
    $0832a63766fa1596$var$TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = $0832a63766fa1596$var$mergeOptions({}, self.options, {
            socket: socket,
            servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        // 0 is dummy port for v0.6
        var secureSocket = $4UN2M$tls.connect(0, tlsOptions);
        self.sockets[self.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
    });
}
function $0832a63766fa1596$var$toOptions(host, port, localAddress) {
    if (typeof host === "string") return {
        host: host,
        port: port,
        localAddress: localAddress
    };
    return host; // for v0.11 or later
}
function $0832a63766fa1596$var$mergeOptions(target) {
    for(var i = 1, len = arguments.length; i < len; ++i){
        var overrides = arguments[i];
        if (typeof overrides === "object") {
            var keys = Object.keys(overrides);
            for(var j = 0, keyLen = keys.length; j < keyLen; ++j){
                var k = keys[j];
                if (overrides[k] !== undefined) target[k] = overrides[k];
            }
        }
    }
    return target;
}
var $0832a63766fa1596$var$debug;
$0832a63766fa1596$var$debug = function() {};
$0832a63766fa1596$export$1c9f709888824e05 = $0832a63766fa1596$var$debug; // for test

});


parcelRegister("9Yodq", function(module, exports) {
module.exports = {
    kClose: Symbol("close"),
    kDestroy: Symbol("destroy"),
    kDispatch: Symbol("dispatch"),
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kConnecting: Symbol("connecting"),
    kHeadersList: Symbol("headers list"),
    kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kHeadersTimeout: Symbol("headers timeout"),
    kBodyTimeout: Symbol("body timeout"),
    kServerName: Symbol("server name"),
    kLocalAddress: Symbol("local address"),
    kHost: Symbol("host"),
    kNoRef: Symbol("no ref"),
    kBodyUsed: Symbol("used"),
    kRunning: Symbol("running"),
    kBlocking: Symbol("blocking"),
    kPending: Symbol("pending"),
    kSize: Symbol("size"),
    kBusy: Symbol("busy"),
    kQueued: Symbol("queued"),
    kFree: Symbol("free"),
    kConnected: Symbol("connected"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol.for("nodejs.stream.destroyed"),
    kMaxHeadersSize: Symbol("max headers size"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClients: Symbol("clients"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelining"),
    kSocket: Symbol("socket"),
    kHostHeader: Symbol("host header"),
    kConnector: Symbol("connector"),
    kStrictContentLength: Symbol("strict content length"),
    kMaxRedirections: Symbol("maxRedirections"),
    kMaxRequests: Symbol("maxRequestsPerClient"),
    kProxy: Symbol("proxy agent options"),
    kCounter: Symbol("socket request counter"),
    kInterceptors: Symbol("dispatch interceptors"),
    kMaxResponseSize: Symbol("max response size"),
    kHTTP2Session: Symbol("http2Session"),
    kHTTP2SessionState: Symbol("http2Session state"),
    kHTTP2BuildRequest: Symbol("http2 build request"),
    kHTTP1BuildRequest: Symbol("http1 build request"),
    kHTTP2CopyHeaders: Symbol("http2 copy headers"),
    kHTTPConnVersion: Symbol("http connection version"),
    kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
    kConstruct: Symbol("constructable")
};

});

parcelRegister("8gSQD", function(module, exports) {

var $605a5d0252430ad7$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $aBXT4 = parcelRequire("aBXT4");

var $dZB1o = parcelRequire("dZB1o");

var $7zBpt = parcelRequire("7zBpt");
var $605a5d0252430ad7$require$ReadableStreamFrom = $7zBpt.ReadableStreamFrom;
var $605a5d0252430ad7$require$isBlobLike = $7zBpt.isBlobLike;
var $605a5d0252430ad7$require$isReadableStreamLike = $7zBpt.isReadableStreamLike;
var $605a5d0252430ad7$require$readableStreamClose = $7zBpt.readableStreamClose;
var $605a5d0252430ad7$require$createDeferredPromise = $7zBpt.createDeferredPromise;
var $605a5d0252430ad7$require$fullyReadBody = $7zBpt.fullyReadBody;

var $haJy7 = parcelRequire("haJy7");
var $605a5d0252430ad7$require$FormData = $haJy7.FormData;

var $2cSZe = parcelRequire("2cSZe");
var $605a5d0252430ad7$require$kState = $2cSZe.kState;

var $7jIZt = parcelRequire("7jIZt");
var $605a5d0252430ad7$require$webidl = $7jIZt.webidl;

var $fUNmM = parcelRequire("fUNmM");
var $605a5d0252430ad7$require$DOMException = $fUNmM.DOMException;
var $605a5d0252430ad7$require$structuredClone = $fUNmM.structuredClone;

var $605a5d0252430ad7$require$Blob = $4UN2M$buffer.Blob;
var $605a5d0252430ad7$require$NativeFile = $4UN2M$buffer.File;

var $9Yodq = parcelRequire("9Yodq");
var $605a5d0252430ad7$require$kBodyUsed = $9Yodq.kBodyUsed;


var $dZB1o = parcelRequire("dZB1o");
var $605a5d0252430ad7$require$isErrored = $dZB1o.isErrored;

var $605a5d0252430ad7$require$isUint8Array = $4UN2M$utiltypes.isUint8Array;
var $605a5d0252430ad7$require$isArrayBuffer = $4UN2M$utiltypes.isArrayBuffer;

var $16TRK = parcelRequire("16TRK");
var $605a5d0252430ad7$require$UndiciFile = $16TRK.File;

var $h1hYV = parcelRequire("h1hYV");
var $605a5d0252430ad7$require$parseMIMEType = $h1hYV.parseMIMEType;
var $605a5d0252430ad7$require$serializeAMimeType = $h1hYV.serializeAMimeType;
let $605a5d0252430ad7$var$ReadableStream = globalThis.ReadableStream;
/** @type {globalThis['File']} */ const $605a5d0252430ad7$var$File = $605a5d0252430ad7$require$NativeFile ?? $605a5d0252430ad7$require$UndiciFile;
const $605a5d0252430ad7$var$textEncoder = new TextEncoder();
const $605a5d0252430ad7$var$textDecoder = new TextDecoder();

// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
function $605a5d0252430ad7$var$extractBody(object, keepalive = false) {
    if (!$605a5d0252430ad7$var$ReadableStream) $605a5d0252430ad7$var$ReadableStream = $4UN2M$streamweb.ReadableStream;
    // 1. Let stream be null.
    let stream = null;
    // 2. If object is a ReadableStream object, then set stream to object.
    if (object instanceof $605a5d0252430ad7$var$ReadableStream) stream = object;
    else if ($605a5d0252430ad7$require$isBlobLike(object)) // 3. Otherwise, if object is a Blob object, set stream to the
    //    result of running object’s get stream.
    stream = object.stream();
    else // 4. Otherwise, set stream to a new ReadableStream object, and set
    //    up stream.
    stream = new $605a5d0252430ad7$var$ReadableStream({
        async pull (controller) {
            controller.enqueue(typeof source === "string" ? $605a5d0252430ad7$var$textEncoder.encode(source) : source);
            queueMicrotask(()=>$605a5d0252430ad7$require$readableStreamClose(controller));
        },
        start () {},
        type: undefined
    });
    // 5. Assert: stream is a ReadableStream object.
    $4UN2M$assert($605a5d0252430ad7$require$isReadableStreamLike(stream));
    // 6. Let action be null.
    let action = null;
    // 7. Let source be null.
    let source = null;
    // 8. Let length be null.
    let length = null;
    // 9. Let type be null.
    let type = null;
    // 10. Switch on object:
    if (typeof object === "string") {
        // Set source to the UTF-8 encoding of object.
        // Note: setting source to a Uint8Array here breaks some mocking assumptions.
        source = object;
        // Set type to `text/plain;charset=UTF-8`.
        type = "text/plain;charset=UTF-8";
    } else if (object instanceof URLSearchParams) {
        // URLSearchParams
        // spec says to run application/x-www-form-urlencoded on body.list
        // this is implemented in Node.js as apart of an URLSearchParams instance toString method
        // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
        // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100
        // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
        source = object.toString();
        // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
        type = "application/x-www-form-urlencoded;charset=UTF-8";
    } else if ($605a5d0252430ad7$require$isArrayBuffer(object)) // BufferSource/ArrayBuffer
    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.slice());
    else if (ArrayBuffer.isView(object)) // BufferSource/ArrayBufferView
    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
    else if ($dZB1o.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
        const prefix = `--${boundary}\r\nContent-Disposition: form-data`;
        /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ const escape = (str)=>str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
        const normalizeLinefeeds = (value)=>value.replace(/\r?\n|\r/g, "\r\n");
        // Set action to this step: run the multipart/form-data
        // encoding algorithm, with object’s entry list and UTF-8.
        // - This ensures that the body is immutable and can't be changed afterwords
        // - That the content-length is calculated in advance.
        // - And that all parts are pre-encoded and ready to be sent.
        const blobParts = [];
        const rn = new Uint8Array([
            13,
            10
        ]) // '\r\n'
        ;
        length = 0;
        let hasUnknownSizeValue = false;
        for (const [name, value] of object)if (typeof value === "string") {
            const chunk = $605a5d0252430ad7$var$textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"` + `\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
            blobParts.push(chunk);
            length += chunk.byteLength;
        } else {
            const chunk = $605a5d0252430ad7$var$textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + "\r\n" + `Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
            blobParts.push(chunk, value, rn);
            if (typeof value.size === "number") length += chunk.byteLength + value.size + rn.byteLength;
            else hasUnknownSizeValue = true;
        }
        const chunk = $605a5d0252430ad7$var$textEncoder.encode(`--${boundary}--`);
        blobParts.push(chunk);
        length += chunk.byteLength;
        if (hasUnknownSizeValue) length = null;
        // Set source to object.
        source = object;
        action = async function*() {
            for (const part of blobParts)if (part.stream) yield* part.stream();
            else yield part;
        };
        // Set type to `multipart/form-data; boundary=`,
        // followed by the multipart/form-data boundary string generated
        // by the multipart/form-data encoding algorithm.
        type = "multipart/form-data; boundary=" + boundary;
    } else if ($605a5d0252430ad7$require$isBlobLike(object)) {
        // Blob
        // Set source to object.
        source = object;
        // Set length to object’s size.
        length = object.size;
        // If object’s type attribute is not the empty byte sequence, set
        // type to its value.
        if (object.type) type = object.type;
    } else if (typeof object[Symbol.asyncIterator] === "function") {
        // If keepalive is true, then throw a TypeError.
        if (keepalive) throw new TypeError("keepalive");
        // If object is disturbed or locked, then throw a TypeError.
        if ($dZB1o.isDisturbed(object) || object.locked) throw new TypeError("Response body object should not be disturbed or locked");
        stream = object instanceof $605a5d0252430ad7$var$ReadableStream ? object : $605a5d0252430ad7$require$ReadableStreamFrom(object);
    }
    // 11. If source is a byte sequence, then set action to a
    // step that returns source and length to source’s length.
    if (typeof source === "string" || $dZB1o.isBuffer(source)) length = $605a5d0252430ad7$require$Buffer.byteLength(source);
    // 12. If action is non-null, then run these steps in in parallel:
    if (action != null) {
        // Run action.
        let iterator;
        stream = new $605a5d0252430ad7$var$ReadableStream({
            async start () {
                iterator = action(object)[Symbol.asyncIterator]();
            },
            async pull (controller) {
                const { value: value, done: done } = await iterator.next();
                if (done) // When running action is done, close stream.
                queueMicrotask(()=>{
                    controller.close();
                });
                else // Whenever one or more bytes are available and stream is not errored,
                // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
                // bytes into stream.
                if (!$605a5d0252430ad7$require$isErrored(stream)) controller.enqueue(new Uint8Array(value));
                return controller.desiredSize > 0;
            },
            async cancel (reason) {
                await iterator.return();
            },
            type: undefined
        });
    }
    // 13. Let body be a body whose stream is stream, source is source,
    // and length is length.
    const body = {
        stream: stream,
        source: source,
        length: length
    };
    // 14. Return (body, type).
    return [
        body,
        type
    ];
}

// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
function $605a5d0252430ad7$var$safelyExtractBody(object, keepalive = false) {
    if (!$605a5d0252430ad7$var$ReadableStream) // istanbul ignore next
    $605a5d0252430ad7$var$ReadableStream = $4UN2M$streamweb.ReadableStream;
    // To safely extract a body and a `Content-Type` value from
    // a byte sequence or BodyInit object object, run these steps:
    // 1. If object is a ReadableStream object, then:
    if (object instanceof $605a5d0252430ad7$var$ReadableStream) {
        // Assert: object is neither disturbed nor locked.
        // istanbul ignore next
        $4UN2M$assert(!$dZB1o.isDisturbed(object), "The body has already been consumed.");
        // istanbul ignore next
        $4UN2M$assert(!object.locked, "The stream is locked.");
    }
    // 2. Return the results of extracting object.
    return $605a5d0252430ad7$var$extractBody(object, keepalive);
}
function $605a5d0252430ad7$var$cloneBody(body) {
    // To clone a body body, run these steps:
    // https://fetch.spec.whatwg.org/#concept-body-clone
    // 1. Let « out1, out2 » be the result of teeing body’s stream.
    const [out1, out2] = body.stream.tee();
    const out2Clone = $605a5d0252430ad7$require$structuredClone(out2, {
        transfer: [
            out2
        ]
    });
    // This, for whatever reasons, unrefs out2Clone which allows
    // the process to exit by itself.
    const [, finalClone] = out2Clone.tee();
    // 2. Set body’s stream to out1.
    body.stream = out1;
    // 3. Return a body whose stream is out2 and other members are copied from body.
    return {
        stream: finalClone,
        length: body.length,
        source: body.source
    };
}
async function* $605a5d0252430ad7$var$consumeBody(body) {
    if (body) {
        if ($605a5d0252430ad7$require$isUint8Array(body)) yield body;
        else {
            const stream = body.stream;
            if ($dZB1o.isDisturbed(stream)) throw new TypeError("The body has already been consumed.");
            if (stream.locked) throw new TypeError("The stream is locked.");
            // Compat.
            stream[$605a5d0252430ad7$require$kBodyUsed] = true;
            yield* stream;
        }
    }
}
function $605a5d0252430ad7$var$throwIfAborted(state) {
    if (state.aborted) throw new $605a5d0252430ad7$require$DOMException("The operation was aborted.", "AbortError");
}
function $605a5d0252430ad7$var$bodyMixinMethods(instance) {
    const methods = {
        blob () {
            // The blob() method steps are to return the result of
            // running consume body with this and the following step
            // given a byte sequence bytes: return a Blob whose
            // contents are bytes and whose type attribute is this’s
            // MIME type.
            return $605a5d0252430ad7$var$specConsumeBody(this, (bytes)=>{
                let mimeType = $605a5d0252430ad7$var$bodyMimeType(this);
                if (mimeType === "failure") mimeType = "";
                else if (mimeType) mimeType = $605a5d0252430ad7$require$serializeAMimeType(mimeType);
                // Return a Blob whose contents are bytes and type attribute
                // is mimeType.
                return new $605a5d0252430ad7$require$Blob([
                    bytes
                ], {
                    type: mimeType
                });
            }, instance);
        },
        arrayBuffer () {
            // The arrayBuffer() method steps are to return the result
            // of running consume body with this and the following step
            // given a byte sequence bytes: return a new ArrayBuffer
            // whose contents are bytes.
            return $605a5d0252430ad7$var$specConsumeBody(this, (bytes)=>{
                return new Uint8Array(bytes).buffer;
            }, instance);
        },
        text () {
            // The text() method steps are to return the result of running
            // consume body with this and UTF-8 decode.
            return $605a5d0252430ad7$var$specConsumeBody(this, $605a5d0252430ad7$var$utf8DecodeBytes, instance);
        },
        json () {
            // The json() method steps are to return the result of running
            // consume body with this and parse JSON from bytes.
            return $605a5d0252430ad7$var$specConsumeBody(this, $605a5d0252430ad7$var$parseJSONFromBytes, instance);
        },
        async formData () {
            $605a5d0252430ad7$require$webidl.brandCheck(this, instance);
            $605a5d0252430ad7$var$throwIfAborted(this[$605a5d0252430ad7$require$kState]);
            const contentType = this.headers.get("Content-Type");
            // If mimeType’s essence is "multipart/form-data", then:
            if (/multipart\/form-data/.test(contentType)) {
                const headers = {};
                for (const [key, value] of this.headers)headers[key.toLowerCase()] = value;
                const responseFormData = new $605a5d0252430ad7$require$FormData();
                let busboy;
                try {
                    busboy = new $aBXT4({
                        headers: headers,
                        preservePath: true
                    });
                } catch (err) {
                    throw new $605a5d0252430ad7$require$DOMException(`${err}`, "AbortError");
                }
                busboy.on("field", (name, value)=>{
                    responseFormData.append(name, value);
                });
                busboy.on("file", (name, value, filename, encoding, mimeType)=>{
                    const chunks = [];
                    if (encoding === "base64" || encoding.toLowerCase() === "base64") {
                        let base64chunk = "";
                        value.on("data", (chunk)=>{
                            base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                            const end = base64chunk.length - base64chunk.length % 4;
                            chunks.push($605a5d0252430ad7$require$Buffer.from(base64chunk.slice(0, end), "base64"));
                            base64chunk = base64chunk.slice(end);
                        });
                        value.on("end", ()=>{
                            chunks.push($605a5d0252430ad7$require$Buffer.from(base64chunk, "base64"));
                            responseFormData.append(name, new $605a5d0252430ad7$var$File(chunks, filename, {
                                type: mimeType
                            }));
                        });
                    } else {
                        value.on("data", (chunk)=>{
                            chunks.push(chunk);
                        });
                        value.on("end", ()=>{
                            responseFormData.append(name, new $605a5d0252430ad7$var$File(chunks, filename, {
                                type: mimeType
                            }));
                        });
                    }
                });
                const busboyResolve = new Promise((resolve, reject)=>{
                    busboy.on("finish", resolve);
                    busboy.on("error", (err)=>reject(new TypeError(err)));
                });
                if (this.body !== null) for await (const chunk of $605a5d0252430ad7$var$consumeBody(this[$605a5d0252430ad7$require$kState].body))busboy.write(chunk);
                busboy.end();
                await busboyResolve;
                return responseFormData;
            } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
                // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:
                // 1. Let entries be the result of parsing bytes.
                let entries;
                try {
                    let text = "";
                    // application/x-www-form-urlencoded parser will keep the BOM.
                    // https://url.spec.whatwg.org/#concept-urlencoded-parser
                    // Note that streaming decoder is stateful and cannot be reused
                    const streamingDecoder = new TextDecoder("utf-8", {
                        ignoreBOM: true
                    });
                    for await (const chunk of $605a5d0252430ad7$var$consumeBody(this[$605a5d0252430ad7$require$kState].body)){
                        if (!$605a5d0252430ad7$require$isUint8Array(chunk)) throw new TypeError("Expected Uint8Array chunk");
                        text += streamingDecoder.decode(chunk, {
                            stream: true
                        });
                    }
                    text += streamingDecoder.decode();
                    entries = new URLSearchParams(text);
                } catch (err) {
                    // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
                    // 2. If entries is failure, then throw a TypeError.
                    throw Object.assign(new TypeError(), {
                        cause: err
                    });
                }
                // 3. Return a new FormData object whose entries are entries.
                const formData = new $605a5d0252430ad7$require$FormData();
                for (const [name, value] of entries)formData.append(name, value);
                return formData;
            } else {
                // Wait a tick before checking if the request has been aborted.
                // Otherwise, a TypeError can be thrown when an AbortError should.
                await Promise.resolve();
                $605a5d0252430ad7$var$throwIfAborted(this[$605a5d0252430ad7$require$kState]);
                // Otherwise, throw a TypeError.
                throw $605a5d0252430ad7$require$webidl.errors.exception({
                    header: `${instance.name}.formData`,
                    message: "Could not parse content as FormData."
                });
            }
        }
    };
    return methods;
}
function $605a5d0252430ad7$var$mixinBody(prototype) {
    Object.assign(prototype.prototype, $605a5d0252430ad7$var$bodyMixinMethods(prototype));
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
 * @param {Response|Request} object
 * @param {(value: unknown) => unknown} convertBytesToJSValue
 * @param {Response|Request} instance
 */ async function $605a5d0252430ad7$var$specConsumeBody(object, convertBytesToJSValue, instance) {
    $605a5d0252430ad7$require$webidl.brandCheck(object, instance);
    $605a5d0252430ad7$var$throwIfAborted(object[$605a5d0252430ad7$require$kState]);
    // 1. If object is unusable, then return a promise rejected
    //    with a TypeError.
    if ($605a5d0252430ad7$var$bodyUnusable(object[$605a5d0252430ad7$require$kState].body)) throw new TypeError("Body is unusable");
    // 2. Let promise be a new promise.
    const promise = $605a5d0252430ad7$require$createDeferredPromise();
    // 3. Let errorSteps given error be to reject promise with error.
    const errorSteps = (error)=>promise.reject(error);
    // 4. Let successSteps given a byte sequence data be to resolve
    //    promise with the result of running convertBytesToJSValue
    //    with data. If that threw an exception, then run errorSteps
    //    with that exception.
    const successSteps = (data)=>{
        try {
            promise.resolve(convertBytesToJSValue(data));
        } catch (e) {
            errorSteps(e);
        }
    };
    // 5. If object’s body is null, then run successSteps with an
    //    empty byte sequence.
    if (object[$605a5d0252430ad7$require$kState].body == null) {
        successSteps(new Uint8Array());
        return promise.promise;
    }
    // 6. Otherwise, fully read object’s body given successSteps,
    //    errorSteps, and object’s relevant global object.
    await $605a5d0252430ad7$require$fullyReadBody(object[$605a5d0252430ad7$require$kState].body, successSteps, errorSteps);
    // 7. Return promise.
    return promise.promise;
}
// https://fetch.spec.whatwg.org/#body-unusable
function $605a5d0252430ad7$var$bodyUnusable(body) {
    // An object including the Body interface mixin is
    // said to be unusable if its body is non-null and
    // its body’s stream is disturbed or locked.
    return body != null && (body.stream.locked || $dZB1o.isDisturbed(body.stream));
}
/**
 * @see https://encoding.spec.whatwg.org/#utf-8-decode
 * @param {Buffer} buffer
 */ function $605a5d0252430ad7$var$utf8DecodeBytes(buffer) {
    if (buffer.length === 0) return "";
    // 1. Let buffer be the result of peeking three bytes from
    //    ioQueue, converted to a byte sequence.
    // 2. If buffer is 0xEF 0xBB 0xBF, then read three
    //    bytes from ioQueue. (Do nothing with those bytes.)
    if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) buffer = buffer.subarray(3);
    // 3. Process a queue with an instance of UTF-8’s
    //    decoder, ioQueue, output, and "replacement".
    const output = $605a5d0252430ad7$var$textDecoder.decode(buffer);
    // 4. Return output.
    return output;
}
/**
 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
 * @param {Uint8Array} bytes
 */ function $605a5d0252430ad7$var$parseJSONFromBytes(bytes) {
    return JSON.parse($605a5d0252430ad7$var$utf8DecodeBytes(bytes));
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
 * @param {import('./response').Response|import('./request').Request} object
 */ function $605a5d0252430ad7$var$bodyMimeType(object) {
    const { headersList: headersList } = object[$605a5d0252430ad7$require$kState];
    const contentType = headersList.get("content-type");
    if (contentType === null) return "failure";
    return $605a5d0252430ad7$require$parseMIMEType(contentType);
}
module.exports = {
    extractBody: $605a5d0252430ad7$var$extractBody,
    safelyExtractBody: $605a5d0252430ad7$var$safelyExtractBody,
    cloneBody: $605a5d0252430ad7$var$cloneBody,
    mixinBody: $605a5d0252430ad7$var$mixinBody
};

});
parcelRegister("aBXT4", function(module, exports) {
"use strict";

var $7b9bd071d5fd0e64$require$WritableStream = $4UN2M$nodestream.Writable;

var $7b9bd071d5fd0e64$require$inherits = $4UN2M$nodeutil.inherits;

var $gHv3L = parcelRequire("gHv3L");

var $9ElKC = parcelRequire("9ElKC");

var $jTg1s = parcelRequire("jTg1s");

var $irUBp = parcelRequire("irUBp");
function $7b9bd071d5fd0e64$var$Busboy(opts) {
    if (!(this instanceof $7b9bd071d5fd0e64$var$Busboy)) return new $7b9bd071d5fd0e64$var$Busboy(opts);
    if (typeof opts !== "object") throw new TypeError("Busboy expected an options-Object.");
    if (typeof opts.headers !== "object") throw new TypeError("Busboy expected an options-Object with headers-attribute.");
    if (typeof opts.headers["content-type"] !== "string") throw new TypeError("Missing Content-Type-header.");
    const { headers: headers, ...streamOptions } = opts;
    this.opts = {
        autoDestroy: false,
        ...streamOptions
    };
    $7b9bd071d5fd0e64$require$WritableStream.call(this, this.opts);
    this._done = false;
    this._parser = this.getParserByHeaders(headers);
    this._finished = false;
}
$7b9bd071d5fd0e64$require$inherits($7b9bd071d5fd0e64$var$Busboy, $7b9bd071d5fd0e64$require$WritableStream);
$7b9bd071d5fd0e64$var$Busboy.prototype.emit = function(ev) {
    if (ev === "finish") {
        if (!this._done) {
            this._parser?.end();
            return;
        } else if (this._finished) return;
        this._finished = true;
    }
    $7b9bd071d5fd0e64$require$WritableStream.prototype.emit.apply(this, arguments);
};
$7b9bd071d5fd0e64$var$Busboy.prototype.getParserByHeaders = function(headers) {
    const parsed = $irUBp(headers["content-type"]);
    const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers: headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
    };
    if ($9ElKC.detect.test(parsed[0])) return new $9ElKC(this, cfg);
    if ($jTg1s.detect.test(parsed[0])) return new $jTg1s(this, cfg);
    throw new Error("Unsupported Content-Type.");
};
$7b9bd071d5fd0e64$var$Busboy.prototype._write = function(chunk, encoding, cb) {
    this._parser.write(chunk, cb);
};
module.exports = $7b9bd071d5fd0e64$var$Busboy;
module.exports.default = $7b9bd071d5fd0e64$var$Busboy;
module.exports.Busboy = $7b9bd071d5fd0e64$var$Busboy;
module.exports.Dicer = $gHv3L;

});
parcelRegister("gHv3L", function(module, exports) {

var $c288c14da88b2bd3$require$Buffer = $4UN2M$buffer.Buffer;

"use strict";

var $c288c14da88b2bd3$require$WritableStream = $4UN2M$nodestream.Writable;

var $c288c14da88b2bd3$require$inherits = $4UN2M$nodeutil.inherits;

var $lLYtU = parcelRequire("lLYtU");

var $iZ9Ov = parcelRequire("iZ9Ov");

var $8zjzb = parcelRequire("8zjzb");
const $c288c14da88b2bd3$var$DASH = 45;
const $c288c14da88b2bd3$var$B_ONEDASH = $c288c14da88b2bd3$require$Buffer.from("-");
const $c288c14da88b2bd3$var$B_CRLF = $c288c14da88b2bd3$require$Buffer.from("\r\n");
const $c288c14da88b2bd3$var$EMPTY_FN = function() {};
function $c288c14da88b2bd3$var$Dicer(cfg) {
    if (!(this instanceof $c288c14da88b2bd3$var$Dicer)) return new $c288c14da88b2bd3$var$Dicer(cfg);
    $c288c14da88b2bd3$require$WritableStream.call(this, cfg);
    if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") throw new TypeError("Boundary required");
    if (typeof cfg.boundary === "string") this.setBoundary(cfg.boundary);
    else this._bparser = undefined;
    this._headerFirst = cfg.headerFirst;
    this._dashes = 0;
    this._parts = 0;
    this._finished = false;
    this._realFinish = false;
    this._isPreamble = true;
    this._justMatched = false;
    this._firstWrite = true;
    this._inHeader = true;
    this._part = undefined;
    this._cb = undefined;
    this._ignoreData = false;
    this._partOpts = {
        highWaterMark: cfg.partHwm
    };
    this._pause = false;
    const self = this;
    this._hparser = new $8zjzb(cfg);
    this._hparser.on("header", function(header) {
        self._inHeader = false;
        self._part.emit("header", header);
    });
}
$c288c14da88b2bd3$require$inherits($c288c14da88b2bd3$var$Dicer, $c288c14da88b2bd3$require$WritableStream);
$c288c14da88b2bd3$var$Dicer.prototype.emit = function(ev) {
    if (ev === "finish" && !this._realFinish) {
        if (!this._finished) {
            const self = this;
            $4UN2M$process.nextTick(function() {
                self.emit("error", new Error("Unexpected end of multipart data"));
                if (self._part && !self._ignoreData) {
                    const type = self._isPreamble ? "Preamble" : "Part";
                    self._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
                    self._part.push(null);
                    $4UN2M$process.nextTick(function() {
                        self._realFinish = true;
                        self.emit("finish");
                        self._realFinish = false;
                    });
                    return;
                }
                self._realFinish = true;
                self.emit("finish");
                self._realFinish = false;
            });
        }
    } else $c288c14da88b2bd3$require$WritableStream.prototype.emit.apply(this, arguments);
};
$c288c14da88b2bd3$var$Dicer.prototype._write = function(data, encoding, cb) {
    // ignore unexpected data (e.g. extra trailer data after finished)
    if (!this._hparser && !this._bparser) return cb();
    if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
            this._part = new $iZ9Ov(this._partOpts);
            if (this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
            else this._ignore();
        }
        const r = this._hparser.push(data);
        if (!this._inHeader && r !== undefined && r < data.length) data = data.slice(r);
        else return cb();
    }
    // allows for "easier" testing
    if (this._firstWrite) {
        this._bparser.push($c288c14da88b2bd3$var$B_CRLF);
        this._firstWrite = false;
    }
    this._bparser.push(data);
    if (this._pause) this._cb = cb;
    else cb();
};
$c288c14da88b2bd3$var$Dicer.prototype.reset = function() {
    this._part = undefined;
    this._bparser = undefined;
    this._hparser = undefined;
};
$c288c14da88b2bd3$var$Dicer.prototype.setBoundary = function(boundary) {
    const self = this;
    this._bparser = new $lLYtU("\r\n--" + boundary);
    this._bparser.on("info", function(isMatch, data, start, end) {
        self._oninfo(isMatch, data, start, end);
    });
};
$c288c14da88b2bd3$var$Dicer.prototype._ignore = function() {
    if (this._part && !this._ignoreData) {
        this._ignoreData = true;
        this._part.on("error", $c288c14da88b2bd3$var$EMPTY_FN);
        // we must perform some kind of read on the stream even though we are
        // ignoring the data, otherwise node's Readable stream will not emit 'end'
        // after pushing null to the stream
        this._part.resume();
    }
};
$c288c14da88b2bd3$var$Dicer.prototype._oninfo = function(isMatch, data, start, end) {
    let buf;
    const self = this;
    let i = 0;
    let r;
    let shouldWriteMore = true;
    if (!this._part && this._justMatched && data) {
        while(this._dashes < 2 && start + i < end)if (data[start + i] === $c288c14da88b2bd3$var$DASH) {
            ++i;
            ++this._dashes;
        } else {
            if (this._dashes) buf = $c288c14da88b2bd3$var$B_ONEDASH;
            this._dashes = 0;
            break;
        }
        if (this._dashes === 2) {
            if (start + i < end && this.listenerCount("trailer") !== 0) this.emit("trailer", data.slice(start + i, end));
            this.reset();
            this._finished = true;
            // no more parts will be added
            if (self._parts === 0) {
                self._realFinish = true;
                self.emit("finish");
                self._realFinish = false;
            }
        }
        if (this._dashes) return;
    }
    if (this._justMatched) this._justMatched = false;
    if (!this._part) {
        this._part = new $iZ9Ov(this._partOpts);
        this._part._read = function(n) {
            self._unpause();
        };
        if (this._isPreamble && this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
        else if (this._isPreamble !== true && this.listenerCount("part") !== 0) this.emit("part", this._part);
        else this._ignore();
        if (!this._isPreamble) this._inHeader = true;
    }
    if (data && start < end && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
            if (buf) shouldWriteMore = this._part.push(buf);
            shouldWriteMore = this._part.push(data.slice(start, end));
            if (!shouldWriteMore) this._pause = true;
        } else if (!this._isPreamble && this._inHeader) {
            if (buf) this._hparser.push(buf);
            r = this._hparser.push(data.slice(start, end));
            if (!this._inHeader && r !== undefined && r < end) this._oninfo(false, data, start + r, end);
        }
    }
    if (isMatch) {
        this._hparser.reset();
        if (this._isPreamble) this._isPreamble = false;
        else if (start !== end) {
            ++this._parts;
            this._part.on("end", function() {
                if (--self._parts === 0) {
                    if (self._finished) {
                        self._realFinish = true;
                        self.emit("finish");
                        self._realFinish = false;
                    } else self._unpause();
                }
            });
        }
        this._part.push(null);
        this._part = undefined;
        this._ignoreData = false;
        this._justMatched = true;
        this._dashes = 0;
    }
};
$c288c14da88b2bd3$var$Dicer.prototype._unpause = function() {
    if (!this._pause) return;
    this._pause = false;
    if (this._cb) {
        const cb = this._cb;
        this._cb = undefined;
        cb();
    }
};
module.exports = $c288c14da88b2bd3$var$Dicer;

});
parcelRegister("lLYtU", function(module, exports) {

var $fd9ce7195999dadf$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $fd9ce7195999dadf$require$EventEmitter = $4UN2M$nodeevents.EventEmitter;

var $fd9ce7195999dadf$require$inherits = $4UN2M$nodeutil.inherits;
function $fd9ce7195999dadf$var$SBMH(needle) {
    if (typeof needle === "string") needle = $fd9ce7195999dadf$require$Buffer.from(needle);
    if (!$fd9ce7195999dadf$require$Buffer.isBuffer(needle)) throw new TypeError("The needle has to be a String or a Buffer.");
    const needleLength = needle.length;
    if (needleLength === 0) throw new Error("The needle cannot be an empty String/Buffer.");
    if (needleLength > 256) throw new Error("The needle cannot have a length bigger than 256.");
    this.maxMatches = Infinity;
    this.matches = 0;
    this._occ = new Array(256).fill(needleLength) // Initialize occurrence table.
    ;
    this._lookbehind_size = 0;
    this._needle = needle;
    this._bufpos = 0;
    this._lookbehind = $fd9ce7195999dadf$require$Buffer.alloc(needleLength);
    // Populate occurrence table with analysis of the needle,
    // ignoring last letter.
    for(var i = 0; i < needleLength - 1; ++i)this._occ[needle[i]] = needleLength - 1 - i;
}
$fd9ce7195999dadf$require$inherits($fd9ce7195999dadf$var$SBMH, $fd9ce7195999dadf$require$EventEmitter);
$fd9ce7195999dadf$var$SBMH.prototype.reset = function() {
    this._lookbehind_size = 0;
    this.matches = 0;
    this._bufpos = 0;
};
$fd9ce7195999dadf$var$SBMH.prototype.push = function(chunk, pos) {
    if (!$fd9ce7195999dadf$require$Buffer.isBuffer(chunk)) chunk = $fd9ce7195999dadf$require$Buffer.from(chunk, "binary");
    const chlen = chunk.length;
    this._bufpos = pos || 0;
    let r;
    while(r !== chlen && this.matches < this.maxMatches)r = this._sbmh_feed(chunk);
    return r;
};
$fd9ce7195999dadf$var$SBMH.prototype._sbmh_feed = function(data) {
    const len = data.length;
    const needle = this._needle;
    const needleLength = needle.length;
    const lastNeedleChar = needle[needleLength - 1];
    // Positive: points to a position in `data`
    //           pos == 3 points to data[3]
    // Negative: points to a position in the lookbehind buffer
    //           pos == -2 points to lookbehind[lookbehind_size - 2]
    let pos = -this._lookbehind_size;
    let ch;
    if (pos < 0) {
        // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
        // search with character lookup code that considers both the
        // lookbehind buffer and the current round's haystack data.
        //
        // Loop until
        //   there is a match.
        // or until
        //   we've moved past the position that requires the
        //   lookbehind buffer. In this case we switch to the
        //   optimized loop.
        // or until
        //   the character to look at lies outside the haystack.
        while(pos < 0 && pos <= len - needleLength){
            ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
            if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
                this._lookbehind_size = 0;
                ++this.matches;
                this.emit("info", true);
                return this._bufpos = pos + needleLength;
            }
            pos += this._occ[ch];
        }
        // No match.
        if (pos < 0) // There's too few data for Boyer-Moore-Horspool to run,
        // so let's use a different algorithm to skip as much as
        // we can.
        // Forward pos until
        //   the trailing part of lookbehind + data
        //   looks like the beginning of the needle
        // or until
        //   pos == 0
        while(pos < 0 && !this._sbmh_memcmp(data, pos, len - pos))++pos;
        if (pos >= 0) {
            // Discard lookbehind buffer.
            this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
            this._lookbehind_size = 0;
        } else {
            // Cut off part of the lookbehind buffer that has
            // been processed and append the entire haystack
            // into it.
            const bytesToCutOff = this._lookbehind_size + pos;
            if (bytesToCutOff > 0) // The cut off data is guaranteed not to contain the needle.
            this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
            this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
            this._lookbehind_size -= bytesToCutOff;
            data.copy(this._lookbehind, this._lookbehind_size);
            this._lookbehind_size += len;
            this._bufpos = len;
            return len;
        }
    }
    pos += (pos >= 0) * this._bufpos;
    // Lookbehind buffer is now empty. We only need to check if the
    // needle is in the haystack.
    if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos);
        ++this.matches;
        if (pos > 0) this.emit("info", true, data, this._bufpos, pos);
        else this.emit("info", true);
        return this._bufpos = pos + needleLength;
    } else pos = len - needleLength;
    // There was no match. If there's trailing haystack data that we cannot
    // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
    // data is less than the needle size) then match using a modified
    // algorithm that starts matching from the beginning instead of the end.
    // Whatever trailing data is left after running this algorithm is added to
    // the lookbehind buffer.
    while(pos < len && (data[pos] !== needle[0] || $fd9ce7195999dadf$require$Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0))++pos;
    if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos));
        this._lookbehind_size = len - pos;
    }
    // Everything until pos is guaranteed not to contain needle data.
    if (pos > 0) this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
    this._bufpos = len;
    return len;
};
$fd9ce7195999dadf$var$SBMH.prototype._sbmh_lookup_char = function(data, pos) {
    return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
};
$fd9ce7195999dadf$var$SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
    for(var i = 0; i < len; ++i){
        if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) return false;
    }
    return true;
};
module.exports = $fd9ce7195999dadf$var$SBMH;

});

parcelRegister("iZ9Ov", function(module, exports) {
"use strict";

var $dd2589479d50027f$require$inherits = $4UN2M$nodeutil.inherits;

var $dd2589479d50027f$require$ReadableStream = $4UN2M$nodestream.Readable;
function $dd2589479d50027f$var$PartStream(opts) {
    $dd2589479d50027f$require$ReadableStream.call(this, opts);
}
$dd2589479d50027f$require$inherits($dd2589479d50027f$var$PartStream, $dd2589479d50027f$require$ReadableStream);
$dd2589479d50027f$var$PartStream.prototype._read = function(n) {};
module.exports = $dd2589479d50027f$var$PartStream;

});

parcelRegister("8zjzb", function(module, exports) {

var $63d0c520ddcae901$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $63d0c520ddcae901$require$EventEmitter = $4UN2M$nodeevents.EventEmitter;

var $63d0c520ddcae901$require$inherits = $4UN2M$nodeutil.inherits;

var $265jG = parcelRequire("265jG");

var $lLYtU = parcelRequire("lLYtU");
const $63d0c520ddcae901$var$B_DCRLF = $63d0c520ddcae901$require$Buffer.from("\r\n\r\n");
const $63d0c520ddcae901$var$RE_CRLF = /\r\n/g;
const $63d0c520ddcae901$var$RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/ // eslint-disable-line no-control-regex
;
function $63d0c520ddcae901$var$HeaderParser(cfg) {
    $63d0c520ddcae901$require$EventEmitter.call(this);
    cfg = cfg || {};
    const self = this;
    this.nread = 0;
    this.maxed = false;
    this.npairs = 0;
    this.maxHeaderPairs = $265jG(cfg, "maxHeaderPairs", 2000);
    this.maxHeaderSize = $265jG(cfg, "maxHeaderSize", 81920);
    this.buffer = "";
    this.header = {};
    this.finished = false;
    this.ss = new $lLYtU($63d0c520ddcae901$var$B_DCRLF);
    this.ss.on("info", function(isMatch, data, start, end) {
        if (data && !self.maxed) {
            if (self.nread + end - start >= self.maxHeaderSize) {
                end = self.maxHeaderSize - self.nread + start;
                self.nread = self.maxHeaderSize;
                self.maxed = true;
            } else self.nread += end - start;
            self.buffer += data.toString("binary", start, end);
        }
        if (isMatch) self._finish();
    });
}
$63d0c520ddcae901$require$inherits($63d0c520ddcae901$var$HeaderParser, $63d0c520ddcae901$require$EventEmitter);
$63d0c520ddcae901$var$HeaderParser.prototype.push = function(data) {
    const r = this.ss.push(data);
    if (this.finished) return r;
};
$63d0c520ddcae901$var$HeaderParser.prototype.reset = function() {
    this.finished = false;
    this.buffer = "";
    this.header = {};
    this.ss.reset();
};
$63d0c520ddcae901$var$HeaderParser.prototype._finish = function() {
    if (this.buffer) this._parseHeader();
    this.ss.matches = this.ss.maxMatches;
    const header = this.header;
    this.header = {};
    this.buffer = "";
    this.finished = true;
    this.nread = this.npairs = 0;
    this.maxed = false;
    this.emit("header", header);
};
$63d0c520ddcae901$var$HeaderParser.prototype._parseHeader = function() {
    if (this.npairs === this.maxHeaderPairs) return;
    const lines = this.buffer.split($63d0c520ddcae901$var$RE_CRLF);
    const len = lines.length;
    let m, h;
    for(var i = 0; i < len; ++i){
        if (lines[i].length === 0) continue;
        if (lines[i][0] === "	" || lines[i][0] === " ") // folded header content
        // RFC2822 says to just remove the CRLF and not the whitespace following
        // it, so we follow the RFC and include the leading whitespace ...
        {
            if (h) {
                this.header[h][this.header[h].length - 1] += lines[i];
                continue;
            }
        }
        const posColon = lines[i].indexOf(":");
        if (posColon === -1 || posColon === 0) return;
        m = $63d0c520ddcae901$var$RE_HDR.exec(lines[i]);
        h = m[1].toLowerCase();
        this.header[h] = this.header[h] || [];
        this.header[h].push(m[2] || "");
        if (++this.npairs === this.maxHeaderPairs) break;
    }
};
module.exports = $63d0c520ddcae901$var$HeaderParser;

});
parcelRegister("265jG", function(module, exports) {
"use strict";
module.exports = function getLimit(limits, name, defaultLimit) {
    if (!limits || limits[name] === undefined || limits[name] === null) return defaultLimit;
    if (typeof limits[name] !== "number" || isNaN(limits[name])) throw new TypeError("Limit " + name + " is not a valid number");
    return limits[name];
};

});



parcelRegister("9ElKC", function(module, exports) {

"use strict";

var $7068b8c5ce2a1f5a$require$Readable = $4UN2M$nodestream.Readable;

var $7068b8c5ce2a1f5a$require$inherits = $4UN2M$nodeutil.inherits;

var $gHv3L = parcelRequire("gHv3L");

var $irUBp = parcelRequire("irUBp");

var $4CrOC = parcelRequire("4CrOC");

var $h5iD9 = parcelRequire("h5iD9");

var $265jG = parcelRequire("265jG");
const $7068b8c5ce2a1f5a$var$RE_BOUNDARY = /^boundary$/i;
const $7068b8c5ce2a1f5a$var$RE_FIELD = /^form-data$/i;
const $7068b8c5ce2a1f5a$var$RE_CHARSET = /^charset$/i;
const $7068b8c5ce2a1f5a$var$RE_FILENAME = /^filename$/i;
const $7068b8c5ce2a1f5a$var$RE_NAME = /^name$/i;
$7068b8c5ce2a1f5a$var$Multipart.detect = /^multipart\/form-data/i;
function $7068b8c5ce2a1f5a$var$Multipart(boy, cfg) {
    let i;
    let len;
    const self = this;
    let boundary;
    const limits = cfg.limits;
    const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName)=>contentType === "application/octet-stream" || fileName !== undefined);
    const parsedConType = cfg.parsedConType || [];
    const defCharset = cfg.defCharset || "utf8";
    const preservePath = cfg.preservePath;
    const fileOpts = {
        highWaterMark: cfg.fileHwm
    };
    for(i = 0, len = parsedConType.length; i < len; ++i)if (Array.isArray(parsedConType[i]) && $7068b8c5ce2a1f5a$var$RE_BOUNDARY.test(parsedConType[i][0])) {
        boundary = parsedConType[i][1];
        break;
    }
    function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
            finished = false;
            self.end();
        }
    }
    if (typeof boundary !== "string") throw new Error("Multipart: Boundary not found");
    const fieldSizeLimit = $265jG(limits, "fieldSize", 1048576);
    const fileSizeLimit = $265jG(limits, "fileSize", Infinity);
    const filesLimit = $265jG(limits, "files", Infinity);
    const fieldsLimit = $265jG(limits, "fields", Infinity);
    const partsLimit = $265jG(limits, "parts", Infinity);
    const headerPairsLimit = $265jG(limits, "headerPairs", 2000);
    const headerSizeLimit = $265jG(limits, "headerSize", 81920);
    let nfiles = 0;
    let nfields = 0;
    let nends = 0;
    let curFile;
    let curField;
    let finished = false;
    this._needDrain = false;
    this._pause = false;
    this._cb = undefined;
    this._nparts = 0;
    this._boy = boy;
    const parserCfg = {
        boundary: boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
    };
    this.parser = new $gHv3L(parserCfg);
    this.parser.on("drain", function() {
        self._needDrain = false;
        if (self._cb && !self._pause) {
            const cb = self._cb;
            self._cb = undefined;
            cb();
        }
    }).on("part", function onPart(part) {
        if (++self._nparts > partsLimit) {
            self.parser.removeListener("part", onPart);
            self.parser.on("part", $7068b8c5ce2a1f5a$var$skipPart);
            boy.hitPartsLimit = true;
            boy.emit("partsLimit");
            return $7068b8c5ce2a1f5a$var$skipPart(part);
        }
        // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
        // us emit 'end' early since we know the part has ended if we are already
        // seeing the next part
        if (curField) {
            const field = curField;
            field.emit("end");
            field.removeAllListeners("end");
        }
        part.on("header", function(header) {
            let contype;
            let fieldname;
            let parsed;
            let charset;
            let encoding;
            let filename;
            let nsize = 0;
            if (header["content-type"]) {
                parsed = $irUBp(header["content-type"][0]);
                if (parsed[0]) {
                    contype = parsed[0].toLowerCase();
                    for(i = 0, len = parsed.length; i < len; ++i)if ($7068b8c5ce2a1f5a$var$RE_CHARSET.test(parsed[i][0])) {
                        charset = parsed[i][1].toLowerCase();
                        break;
                    }
                }
            }
            if (contype === undefined) contype = "text/plain";
            if (charset === undefined) charset = defCharset;
            if (header["content-disposition"]) {
                parsed = $irUBp(header["content-disposition"][0]);
                if (!$7068b8c5ce2a1f5a$var$RE_FIELD.test(parsed[0])) return $7068b8c5ce2a1f5a$var$skipPart(part);
                for(i = 0, len = parsed.length; i < len; ++i){
                    if ($7068b8c5ce2a1f5a$var$RE_NAME.test(parsed[i][0])) fieldname = parsed[i][1];
                    else if ($7068b8c5ce2a1f5a$var$RE_FILENAME.test(parsed[i][0])) {
                        filename = parsed[i][1];
                        if (!preservePath) filename = $h5iD9(filename);
                    }
                }
            } else return $7068b8c5ce2a1f5a$var$skipPart(part);
            if (header["content-transfer-encoding"]) encoding = header["content-transfer-encoding"][0].toLowerCase();
            else encoding = "7bit";
            let onData, onEnd;
            if (isPartAFile(fieldname, contype, filename)) {
                // file/binary field
                if (nfiles === filesLimit) {
                    if (!boy.hitFilesLimit) {
                        boy.hitFilesLimit = true;
                        boy.emit("filesLimit");
                    }
                    return $7068b8c5ce2a1f5a$var$skipPart(part);
                }
                ++nfiles;
                if (boy.listenerCount("file") === 0) {
                    self.parser._ignore();
                    return;
                }
                ++nends;
                const file = new $7068b8c5ce2a1f5a$var$FileStream(fileOpts);
                curFile = file;
                file.on("end", function() {
                    --nends;
                    self._pause = false;
                    checkFinished();
                    if (self._cb && !self._needDrain) {
                        const cb = self._cb;
                        self._cb = undefined;
                        cb();
                    }
                });
                file._read = function(n) {
                    if (!self._pause) return;
                    self._pause = false;
                    if (self._cb && !self._needDrain) {
                        const cb = self._cb;
                        self._cb = undefined;
                        cb();
                    }
                };
                boy.emit("file", fieldname, file, filename, encoding, contype);
                onData = function(data) {
                    if ((nsize += data.length) > fileSizeLimit) {
                        const extralen = fileSizeLimit - nsize + data.length;
                        if (extralen > 0) file.push(data.slice(0, extralen));
                        file.truncated = true;
                        file.bytesRead = fileSizeLimit;
                        part.removeAllListeners("data");
                        file.emit("limit");
                        return;
                    } else if (!file.push(data)) self._pause = true;
                    file.bytesRead = nsize;
                };
                onEnd = function() {
                    curFile = undefined;
                    file.push(null);
                };
            } else {
                // non-file field
                if (nfields === fieldsLimit) {
                    if (!boy.hitFieldsLimit) {
                        boy.hitFieldsLimit = true;
                        boy.emit("fieldsLimit");
                    }
                    return $7068b8c5ce2a1f5a$var$skipPart(part);
                }
                ++nfields;
                ++nends;
                let buffer = "";
                let truncated = false;
                curField = part;
                onData = function(data) {
                    if ((nsize += data.length) > fieldSizeLimit) {
                        const extralen = fieldSizeLimit - (nsize - data.length);
                        buffer += data.toString("binary", 0, extralen);
                        truncated = true;
                        part.removeAllListeners("data");
                    } else buffer += data.toString("binary");
                };
                onEnd = function() {
                    curField = undefined;
                    if (buffer.length) buffer = $4CrOC(buffer, "binary", charset);
                    boy.emit("field", fieldname, buffer, false, truncated, encoding, contype);
                    --nends;
                    checkFinished();
                };
            }
            /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
         broken. Streams2/streams3 is a huge black box of confusion, but
         somehow overriding the sync state seems to fix things again (and still
         seems to work for previous node versions).
      */ part._readableState.sync = false;
            part.on("data", onData);
            part.on("end", onEnd);
        }).on("error", function(err) {
            if (curFile) curFile.emit("error", err);
        });
    }).on("error", function(err) {
        boy.emit("error", err);
    }).on("finish", function() {
        finished = true;
        checkFinished();
    });
}
$7068b8c5ce2a1f5a$var$Multipart.prototype.write = function(chunk, cb) {
    const r = this.parser.write(chunk);
    if (r && !this._pause) cb();
    else {
        this._needDrain = !r;
        this._cb = cb;
    }
};
$7068b8c5ce2a1f5a$var$Multipart.prototype.end = function() {
    const self = this;
    if (self.parser.writable) self.parser.end();
    else if (!self._boy._done) $4UN2M$process.nextTick(function() {
        self._boy._done = true;
        self._boy.emit("finish");
    });
};
function $7068b8c5ce2a1f5a$var$skipPart(part) {
    part.resume();
}
function $7068b8c5ce2a1f5a$var$FileStream(opts) {
    $7068b8c5ce2a1f5a$require$Readable.call(this, opts);
    this.bytesRead = 0;
    this.truncated = false;
}
$7068b8c5ce2a1f5a$require$inherits($7068b8c5ce2a1f5a$var$FileStream, $7068b8c5ce2a1f5a$require$Readable);
$7068b8c5ce2a1f5a$var$FileStream.prototype._read = function(n) {};
module.exports = $7068b8c5ce2a1f5a$var$Multipart;

});
parcelRegister("irUBp", function(module, exports) {
/* eslint-disable object-property-newline */ "use strict";

var $4CrOC = parcelRequire("4CrOC");
const $d6e6a7a9e271f9e2$var$RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
const $d6e6a7a9e271f9e2$var$EncodedLookup = {
    "%00": "\0",
    "%01": "\x01",
    "%02": "\x02",
    "%03": "\x03",
    "%04": "\x04",
    "%05": "\x05",
    "%06": "\x06",
    "%07": "\x07",
    "%08": "\b",
    "%09": "	",
    "%0a": "\n",
    "%0A": "\n",
    "%0b": "\v",
    "%0B": "\v",
    "%0c": "\f",
    "%0C": "\f",
    "%0d": "\r",
    "%0D": "\r",
    "%0e": "\x0e",
    "%0E": "\x0e",
    "%0f": "\x0f",
    "%0F": "\x0f",
    "%10": "\x10",
    "%11": "\x11",
    "%12": "\x12",
    "%13": "\x13",
    "%14": "\x14",
    "%15": "\x15",
    "%16": "\x16",
    "%17": "\x17",
    "%18": "\x18",
    "%19": "\x19",
    "%1a": "\x1a",
    "%1A": "\x1a",
    "%1b": "\x1b",
    "%1B": "\x1b",
    "%1c": "\x1c",
    "%1C": "\x1c",
    "%1d": "\x1d",
    "%1D": "\x1d",
    "%1e": "\x1e",
    "%1E": "\x1e",
    "%1f": "\x1f",
    "%1F": "\x1f",
    "%20": " ",
    "%21": "!",
    "%22": '"',
    "%23": "#",
    "%24": "$",
    "%25": "%",
    "%26": "&",
    "%27": "'",
    "%28": "(",
    "%29": ")",
    "%2a": "*",
    "%2A": "*",
    "%2b": "+",
    "%2B": "+",
    "%2c": ",",
    "%2C": ",",
    "%2d": "-",
    "%2D": "-",
    "%2e": ".",
    "%2E": ".",
    "%2f": "/",
    "%2F": "/",
    "%30": "0",
    "%31": "1",
    "%32": "2",
    "%33": "3",
    "%34": "4",
    "%35": "5",
    "%36": "6",
    "%37": "7",
    "%38": "8",
    "%39": "9",
    "%3a": ":",
    "%3A": ":",
    "%3b": ";",
    "%3B": ";",
    "%3c": "<",
    "%3C": "<",
    "%3d": "=",
    "%3D": "=",
    "%3e": ">",
    "%3E": ">",
    "%3f": "?",
    "%3F": "?",
    "%40": "@",
    "%41": "A",
    "%42": "B",
    "%43": "C",
    "%44": "D",
    "%45": "E",
    "%46": "F",
    "%47": "G",
    "%48": "H",
    "%49": "I",
    "%4a": "J",
    "%4A": "J",
    "%4b": "K",
    "%4B": "K",
    "%4c": "L",
    "%4C": "L",
    "%4d": "M",
    "%4D": "M",
    "%4e": "N",
    "%4E": "N",
    "%4f": "O",
    "%4F": "O",
    "%50": "P",
    "%51": "Q",
    "%52": "R",
    "%53": "S",
    "%54": "T",
    "%55": "U",
    "%56": "V",
    "%57": "W",
    "%58": "X",
    "%59": "Y",
    "%5a": "Z",
    "%5A": "Z",
    "%5b": "[",
    "%5B": "[",
    "%5c": "\\",
    "%5C": "\\",
    "%5d": "]",
    "%5D": "]",
    "%5e": "^",
    "%5E": "^",
    "%5f": "_",
    "%5F": "_",
    "%60": "`",
    "%61": "a",
    "%62": "b",
    "%63": "c",
    "%64": "d",
    "%65": "e",
    "%66": "f",
    "%67": "g",
    "%68": "h",
    "%69": "i",
    "%6a": "j",
    "%6A": "j",
    "%6b": "k",
    "%6B": "k",
    "%6c": "l",
    "%6C": "l",
    "%6d": "m",
    "%6D": "m",
    "%6e": "n",
    "%6E": "n",
    "%6f": "o",
    "%6F": "o",
    "%70": "p",
    "%71": "q",
    "%72": "r",
    "%73": "s",
    "%74": "t",
    "%75": "u",
    "%76": "v",
    "%77": "w",
    "%78": "x",
    "%79": "y",
    "%7a": "z",
    "%7A": "z",
    "%7b": "{",
    "%7B": "{",
    "%7c": "|",
    "%7C": "|",
    "%7d": "}",
    "%7D": "}",
    "%7e": "~",
    "%7E": "~",
    "%7f": "\x7f",
    "%7F": "\x7f",
    "%80": "\x80",
    "%81": "\x81",
    "%82": "\x82",
    "%83": "\x83",
    "%84": "\x84",
    "%85": "\x85",
    "%86": "\x86",
    "%87": "\x87",
    "%88": "\x88",
    "%89": "\x89",
    "%8a": "\x8a",
    "%8A": "\x8a",
    "%8b": "\x8b",
    "%8B": "\x8b",
    "%8c": "\x8c",
    "%8C": "\x8c",
    "%8d": "\x8d",
    "%8D": "\x8d",
    "%8e": "\x8e",
    "%8E": "\x8e",
    "%8f": "\x8f",
    "%8F": "\x8f",
    "%90": "\x90",
    "%91": "\x91",
    "%92": "\x92",
    "%93": "\x93",
    "%94": "\x94",
    "%95": "\x95",
    "%96": "\x96",
    "%97": "\x97",
    "%98": "\x98",
    "%99": "\x99",
    "%9a": "\x9a",
    "%9A": "\x9a",
    "%9b": "\x9b",
    "%9B": "\x9b",
    "%9c": "\x9c",
    "%9C": "\x9c",
    "%9d": "\x9d",
    "%9D": "\x9d",
    "%9e": "\x9e",
    "%9E": "\x9e",
    "%9f": "\x9f",
    "%9F": "\x9f",
    "%a0": "\xa0",
    "%A0": "\xa0",
    "%a1": "\xa1",
    "%A1": "\xa1",
    "%a2": "\xa2",
    "%A2": "\xa2",
    "%a3": "\xa3",
    "%A3": "\xa3",
    "%a4": "\xa4",
    "%A4": "\xa4",
    "%a5": "\xa5",
    "%A5": "\xa5",
    "%a6": "\xa6",
    "%A6": "\xa6",
    "%a7": "\xa7",
    "%A7": "\xa7",
    "%a8": "\xa8",
    "%A8": "\xa8",
    "%a9": "\xa9",
    "%A9": "\xa9",
    "%aa": "\xaa",
    "%Aa": "\xaa",
    "%aA": "\xaa",
    "%AA": "\xaa",
    "%ab": "\xab",
    "%Ab": "\xab",
    "%aB": "\xab",
    "%AB": "\xab",
    "%ac": "\xac",
    "%Ac": "\xac",
    "%aC": "\xac",
    "%AC": "\xac",
    "%ad": "\xad",
    "%Ad": "\xad",
    "%aD": "\xad",
    "%AD": "\xad",
    "%ae": "\xae",
    "%Ae": "\xae",
    "%aE": "\xae",
    "%AE": "\xae",
    "%af": "\xaf",
    "%Af": "\xaf",
    "%aF": "\xaf",
    "%AF": "\xaf",
    "%b0": "\xb0",
    "%B0": "\xb0",
    "%b1": "\xb1",
    "%B1": "\xb1",
    "%b2": "\xb2",
    "%B2": "\xb2",
    "%b3": "\xb3",
    "%B3": "\xb3",
    "%b4": "\xb4",
    "%B4": "\xb4",
    "%b5": "\xb5",
    "%B5": "\xb5",
    "%b6": "\xb6",
    "%B6": "\xb6",
    "%b7": "\xb7",
    "%B7": "\xb7",
    "%b8": "\xb8",
    "%B8": "\xb8",
    "%b9": "\xb9",
    "%B9": "\xb9",
    "%ba": "\xba",
    "%Ba": "\xba",
    "%bA": "\xba",
    "%BA": "\xba",
    "%bb": "\xbb",
    "%Bb": "\xbb",
    "%bB": "\xbb",
    "%BB": "\xbb",
    "%bc": "\xbc",
    "%Bc": "\xbc",
    "%bC": "\xbc",
    "%BC": "\xbc",
    "%bd": "\xbd",
    "%Bd": "\xbd",
    "%bD": "\xbd",
    "%BD": "\xbd",
    "%be": "\xbe",
    "%Be": "\xbe",
    "%bE": "\xbe",
    "%BE": "\xbe",
    "%bf": "\xbf",
    "%Bf": "\xbf",
    "%bF": "\xbf",
    "%BF": "\xbf",
    "%c0": "\xc0",
    "%C0": "\xc0",
    "%c1": "\xc1",
    "%C1": "\xc1",
    "%c2": "\xc2",
    "%C2": "\xc2",
    "%c3": "\xc3",
    "%C3": "\xc3",
    "%c4": "\xc4",
    "%C4": "\xc4",
    "%c5": "\xc5",
    "%C5": "\xc5",
    "%c6": "\xc6",
    "%C6": "\xc6",
    "%c7": "\xc7",
    "%C7": "\xc7",
    "%c8": "\xc8",
    "%C8": "\xc8",
    "%c9": "\xc9",
    "%C9": "\xc9",
    "%ca": "\xca",
    "%Ca": "\xca",
    "%cA": "\xca",
    "%CA": "\xca",
    "%cb": "\xcb",
    "%Cb": "\xcb",
    "%cB": "\xcb",
    "%CB": "\xcb",
    "%cc": "\xcc",
    "%Cc": "\xcc",
    "%cC": "\xcc",
    "%CC": "\xcc",
    "%cd": "\xcd",
    "%Cd": "\xcd",
    "%cD": "\xcd",
    "%CD": "\xcd",
    "%ce": "\xce",
    "%Ce": "\xce",
    "%cE": "\xce",
    "%CE": "\xce",
    "%cf": "\xcf",
    "%Cf": "\xcf",
    "%cF": "\xcf",
    "%CF": "\xcf",
    "%d0": "\xd0",
    "%D0": "\xd0",
    "%d1": "\xd1",
    "%D1": "\xd1",
    "%d2": "\xd2",
    "%D2": "\xd2",
    "%d3": "\xd3",
    "%D3": "\xd3",
    "%d4": "\xd4",
    "%D4": "\xd4",
    "%d5": "\xd5",
    "%D5": "\xd5",
    "%d6": "\xd6",
    "%D6": "\xd6",
    "%d7": "\xd7",
    "%D7": "\xd7",
    "%d8": "\xd8",
    "%D8": "\xd8",
    "%d9": "\xd9",
    "%D9": "\xd9",
    "%da": "\xda",
    "%Da": "\xda",
    "%dA": "\xda",
    "%DA": "\xda",
    "%db": "\xdb",
    "%Db": "\xdb",
    "%dB": "\xdb",
    "%DB": "\xdb",
    "%dc": "\xdc",
    "%Dc": "\xdc",
    "%dC": "\xdc",
    "%DC": "\xdc",
    "%dd": "\xdd",
    "%Dd": "\xdd",
    "%dD": "\xdd",
    "%DD": "\xdd",
    "%de": "\xde",
    "%De": "\xde",
    "%dE": "\xde",
    "%DE": "\xde",
    "%df": "\xdf",
    "%Df": "\xdf",
    "%dF": "\xdf",
    "%DF": "\xdf",
    "%e0": "\xe0",
    "%E0": "\xe0",
    "%e1": "\xe1",
    "%E1": "\xe1",
    "%e2": "\xe2",
    "%E2": "\xe2",
    "%e3": "\xe3",
    "%E3": "\xe3",
    "%e4": "\xe4",
    "%E4": "\xe4",
    "%e5": "\xe5",
    "%E5": "\xe5",
    "%e6": "\xe6",
    "%E6": "\xe6",
    "%e7": "\xe7",
    "%E7": "\xe7",
    "%e8": "\xe8",
    "%E8": "\xe8",
    "%e9": "\xe9",
    "%E9": "\xe9",
    "%ea": "\xea",
    "%Ea": "\xea",
    "%eA": "\xea",
    "%EA": "\xea",
    "%eb": "\xeb",
    "%Eb": "\xeb",
    "%eB": "\xeb",
    "%EB": "\xeb",
    "%ec": "\xec",
    "%Ec": "\xec",
    "%eC": "\xec",
    "%EC": "\xec",
    "%ed": "\xed",
    "%Ed": "\xed",
    "%eD": "\xed",
    "%ED": "\xed",
    "%ee": "\xee",
    "%Ee": "\xee",
    "%eE": "\xee",
    "%EE": "\xee",
    "%ef": "\xef",
    "%Ef": "\xef",
    "%eF": "\xef",
    "%EF": "\xef",
    "%f0": "\xf0",
    "%F0": "\xf0",
    "%f1": "\xf1",
    "%F1": "\xf1",
    "%f2": "\xf2",
    "%F2": "\xf2",
    "%f3": "\xf3",
    "%F3": "\xf3",
    "%f4": "\xf4",
    "%F4": "\xf4",
    "%f5": "\xf5",
    "%F5": "\xf5",
    "%f6": "\xf6",
    "%F6": "\xf6",
    "%f7": "\xf7",
    "%F7": "\xf7",
    "%f8": "\xf8",
    "%F8": "\xf8",
    "%f9": "\xf9",
    "%F9": "\xf9",
    "%fa": "\xfa",
    "%Fa": "\xfa",
    "%fA": "\xfa",
    "%FA": "\xfa",
    "%fb": "\xfb",
    "%Fb": "\xfb",
    "%fB": "\xfb",
    "%FB": "\xfb",
    "%fc": "\xfc",
    "%Fc": "\xfc",
    "%fC": "\xfc",
    "%FC": "\xfc",
    "%fd": "\xfd",
    "%Fd": "\xfd",
    "%fD": "\xfd",
    "%FD": "\xfd",
    "%fe": "\xfe",
    "%Fe": "\xfe",
    "%fE": "\xfe",
    "%FE": "\xfe",
    "%ff": "\xff",
    "%Ff": "\xff",
    "%fF": "\xff",
    "%FF": "\xff"
};
function $d6e6a7a9e271f9e2$var$encodedReplacer(match) {
    return $d6e6a7a9e271f9e2$var$EncodedLookup[match];
}
const $d6e6a7a9e271f9e2$var$STATE_KEY = 0;
const $d6e6a7a9e271f9e2$var$STATE_VALUE = 1;
const $d6e6a7a9e271f9e2$var$STATE_CHARSET = 2;
const $d6e6a7a9e271f9e2$var$STATE_LANG = 3;
function $d6e6a7a9e271f9e2$var$parseParams(str) {
    const res = [];
    let state = $d6e6a7a9e271f9e2$var$STATE_KEY;
    let charset = "";
    let inquote = false;
    let escaping = false;
    let p = 0;
    let tmp = "";
    const len = str.length;
    for(var i = 0; i < len; ++i){
        const char = str[i];
        if (char === "\\" && inquote) {
            if (escaping) escaping = false;
            else {
                escaping = true;
                continue;
            }
        } else if (char === '"') {
            if (!escaping) {
                if (inquote) {
                    inquote = false;
                    state = $d6e6a7a9e271f9e2$var$STATE_KEY;
                } else inquote = true;
                continue;
            } else escaping = false;
        } else {
            if (escaping && inquote) tmp += "\\";
            escaping = false;
            if ((state === $d6e6a7a9e271f9e2$var$STATE_CHARSET || state === $d6e6a7a9e271f9e2$var$STATE_LANG) && char === "'") {
                if (state === $d6e6a7a9e271f9e2$var$STATE_CHARSET) {
                    state = $d6e6a7a9e271f9e2$var$STATE_LANG;
                    charset = tmp.substring(1);
                } else state = $d6e6a7a9e271f9e2$var$STATE_VALUE;
                tmp = "";
                continue;
            } else if (state === $d6e6a7a9e271f9e2$var$STATE_KEY && (char === "*" || char === "=") && res.length) {
                state = char === "*" ? $d6e6a7a9e271f9e2$var$STATE_CHARSET : $d6e6a7a9e271f9e2$var$STATE_VALUE;
                res[p] = [
                    tmp,
                    undefined
                ];
                tmp = "";
                continue;
            } else if (!inquote && char === ";") {
                state = $d6e6a7a9e271f9e2$var$STATE_KEY;
                if (charset) {
                    if (tmp.length) tmp = $4CrOC(tmp.replace($d6e6a7a9e271f9e2$var$RE_ENCODED, $d6e6a7a9e271f9e2$var$encodedReplacer), "binary", charset);
                    charset = "";
                } else if (tmp.length) tmp = $4CrOC(tmp, "binary", "utf8");
                if (res[p] === undefined) res[p] = tmp;
                else res[p][1] = tmp;
                tmp = "";
                ++p;
                continue;
            } else if (!inquote && (char === " " || char === "	")) continue;
        }
        tmp += char;
    }
    if (charset && tmp.length) tmp = $4CrOC(tmp.replace($d6e6a7a9e271f9e2$var$RE_ENCODED, $d6e6a7a9e271f9e2$var$encodedReplacer), "binary", charset);
    else if (tmp) tmp = $4CrOC(tmp, "binary", "utf8");
    if (res[p] === undefined) {
        if (tmp) res[p] = tmp;
    } else res[p][1] = tmp;
    return res;
}
module.exports = $d6e6a7a9e271f9e2$var$parseParams;

});
parcelRegister("4CrOC", function(module, exports) {

var $35d0499dc5b852df$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";
// Node has always utf-8
const $35d0499dc5b852df$var$utf8Decoder = new TextDecoder("utf-8");
const $35d0499dc5b852df$var$textDecoders = new Map([
    [
        "utf-8",
        $35d0499dc5b852df$var$utf8Decoder
    ],
    [
        "utf8",
        $35d0499dc5b852df$var$utf8Decoder
    ]
]);
function $35d0499dc5b852df$var$getDecoder(charset) {
    let lc;
    while(true)switch(charset){
        case "utf-8":
        case "utf8":
            return $35d0499dc5b852df$var$decoders.utf8;
        case "latin1":
        case "ascii":
        case "us-ascii":
        case "iso-8859-1":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "windows-1252":
        case "iso_8859-1:1987":
        case "cp1252":
        case "x-cp1252":
            return $35d0499dc5b852df$var$decoders.latin1;
        case "utf16le":
        case "utf-16le":
        case "ucs2":
        case "ucs-2":
            return $35d0499dc5b852df$var$decoders.utf16le;
        case "base64":
            return $35d0499dc5b852df$var$decoders.base64;
        default:
            if (lc === undefined) {
                lc = true;
                charset = charset.toLowerCase();
                continue;
            }
            return $35d0499dc5b852df$var$decoders.other.bind(charset);
    }
}
const $35d0499dc5b852df$var$decoders = {
    utf8: (data, sourceEncoding)=>{
        if (data.length === 0) return "";
        if (typeof data === "string") data = $35d0499dc5b852df$require$Buffer.from(data, sourceEncoding);
        return data.utf8Slice(0, data.length);
    },
    latin1: (data, sourceEncoding)=>{
        if (data.length === 0) return "";
        if (typeof data === "string") return data;
        return data.latin1Slice(0, data.length);
    },
    utf16le: (data, sourceEncoding)=>{
        if (data.length === 0) return "";
        if (typeof data === "string") data = $35d0499dc5b852df$require$Buffer.from(data, sourceEncoding);
        return data.ucs2Slice(0, data.length);
    },
    base64: (data, sourceEncoding)=>{
        if (data.length === 0) return "";
        if (typeof data === "string") data = $35d0499dc5b852df$require$Buffer.from(data, sourceEncoding);
        return data.base64Slice(0, data.length);
    },
    other: (data, sourceEncoding)=>{
        if (data.length === 0) return "";
        if (typeof data === "string") data = $35d0499dc5b852df$require$Buffer.from(data, sourceEncoding);
        if ($35d0499dc5b852df$var$textDecoders.has(module.exports.toString())) try {
            return $35d0499dc5b852df$var$textDecoders.get(module.exports).decode(data);
        } catch  {}
        return typeof data === "string" ? data : data.toString();
    }
};
function $35d0499dc5b852df$var$decodeText(text, sourceEncoding, destEncoding) {
    if (text) return $35d0499dc5b852df$var$getDecoder(destEncoding)(text, sourceEncoding);
    return text;
}
module.exports = $35d0499dc5b852df$var$decodeText;

});


parcelRegister("h5iD9", function(module, exports) {
"use strict";
module.exports = function basename(path) {
    if (typeof path !== "string") return "";
    for(var i = path.length - 1; i >= 0; --i)switch(path.charCodeAt(i)){
        case 0x2F:
        case 0x5C:
            path = path.slice(i + 1);
            return path === ".." || path === "." ? "" : path;
    }
    return path === ".." || path === "." ? "" : path;
};

});


parcelRegister("jTg1s", function(module, exports) {
"use strict";

var $iZ3G3 = parcelRequire("iZ3G3");

var $4CrOC = parcelRequire("4CrOC");

var $265jG = parcelRequire("265jG");
const $e7af9523060c3c69$var$RE_CHARSET = /^charset$/i;
$e7af9523060c3c69$var$UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
function $e7af9523060c3c69$var$UrlEncoded(boy, cfg) {
    const limits = cfg.limits;
    const parsedConType = cfg.parsedConType;
    this.boy = boy;
    this.fieldSizeLimit = $265jG(limits, "fieldSize", 1048576);
    this.fieldNameSizeLimit = $265jG(limits, "fieldNameSize", 100);
    this.fieldsLimit = $265jG(limits, "fields", Infinity);
    let charset;
    for(var i = 0, len = parsedConType.length; i < len; ++i)if (Array.isArray(parsedConType[i]) && $e7af9523060c3c69$var$RE_CHARSET.test(parsedConType[i][0])) {
        charset = parsedConType[i][1].toLowerCase();
        break;
    }
    if (charset === undefined) charset = cfg.defCharset || "utf8";
    this.decoder = new $iZ3G3();
    this.charset = charset;
    this._fields = 0;
    this._state = "key";
    this._checkingBytes = true;
    this._bytesKey = 0;
    this._bytesVal = 0;
    this._key = "";
    this._val = "";
    this._keyTrunc = false;
    this._valTrunc = false;
    this._hitLimit = false;
}
$e7af9523060c3c69$var$UrlEncoded.prototype.write = function(data, cb) {
    if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
            this.boy.hitFieldsLimit = true;
            this.boy.emit("fieldsLimit");
        }
        return cb();
    }
    let idxeq;
    let idxamp;
    let i;
    let p = 0;
    const len = data.length;
    while(p < len)if (this._state === "key") {
        idxeq = idxamp = undefined;
        for(i = p; i < len; ++i){
            if (!this._checkingBytes) ++p;
            if (data[i] === 0x3D /* = */ ) {
                idxeq = i;
                break;
            } else if (data[i] === 0x26 /* & */ ) {
                idxamp = i;
                break;
            }
            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
                this._hitLimit = true;
                break;
            } else if (this._checkingBytes) ++this._bytesKey;
        }
        if (idxeq !== undefined) {
            // key with assignment
            if (idxeq > p) this._key += this.decoder.write(data.toString("binary", p, idxeq));
            this._state = "val";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._val = "";
            this._bytesVal = 0;
            this._valTrunc = false;
            this.decoder.reset();
            p = idxeq + 1;
        } else if (idxamp !== undefined) {
            // key with no assignment
            ++this._fields;
            let key;
            const keyTrunc = this._keyTrunc;
            if (idxamp > p) key = this._key += this.decoder.write(data.toString("binary", p, idxamp));
            else key = this._key;
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            if (key.length) this.boy.emit("field", $4CrOC(key, "binary", this.charset), "", keyTrunc, false);
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) return cb();
        } else if (this._hitLimit) {
            // we may not have hit the actual limit if there are encoded bytes...
            if (i > p) this._key += this.decoder.write(data.toString("binary", p, i));
            p = i;
            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
                // yep, we actually did hit the limit
                this._checkingBytes = false;
                this._keyTrunc = true;
            }
        } else {
            if (p < len) this._key += this.decoder.write(data.toString("binary", p));
            p = len;
        }
    } else {
        idxamp = undefined;
        for(i = p; i < len; ++i){
            if (!this._checkingBytes) ++p;
            if (data[i] === 0x26 /* & */ ) {
                idxamp = i;
                break;
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
                this._hitLimit = true;
                break;
            } else if (this._checkingBytes) ++this._bytesVal;
        }
        if (idxamp !== undefined) {
            ++this._fields;
            if (idxamp > p) this._val += this.decoder.write(data.toString("binary", p, idxamp));
            this.boy.emit("field", $4CrOC(this._key, "binary", this.charset), $4CrOC(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
            this._state = "key";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) return cb();
        } else if (this._hitLimit) {
            // we may not have hit the actual limit if there are encoded bytes...
            if (i > p) this._val += this.decoder.write(data.toString("binary", p, i));
            p = i;
            if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
                // yep, we actually did hit the limit
                this._checkingBytes = false;
                this._valTrunc = true;
            }
        } else {
            if (p < len) this._val += this.decoder.write(data.toString("binary", p));
            p = len;
        }
    }
    cb();
};
$e7af9523060c3c69$var$UrlEncoded.prototype.end = function() {
    if (this.boy._done) return;
    if (this._state === "key" && this._key.length > 0) this.boy.emit("field", $4CrOC(this._key, "binary", this.charset), "", this._keyTrunc, false);
    else if (this._state === "val") this.boy.emit("field", $4CrOC(this._key, "binary", this.charset), $4CrOC(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
    this.boy._done = true;
    this.boy.emit("finish");
};
module.exports = $e7af9523060c3c69$var$UrlEncoded;

});
parcelRegister("iZ3G3", function(module, exports) {
"use strict";
const $dd20c6b76ea2e0e5$var$RE_PLUS = /\+/g;
const $dd20c6b76ea2e0e5$var$HEX = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
];
function $dd20c6b76ea2e0e5$var$Decoder() {
    this.buffer = undefined;
}
$dd20c6b76ea2e0e5$var$Decoder.prototype.write = function(str) {
    // Replace '+' with ' ' before decoding
    str = str.replace($dd20c6b76ea2e0e5$var$RE_PLUS, " ");
    let res = "";
    let i = 0;
    let p = 0;
    const len = str.length;
    for(; i < len; ++i){
        if (this.buffer !== undefined) {
            if (!$dd20c6b76ea2e0e5$var$HEX[str.charCodeAt(i)]) {
                res += "%" + this.buffer;
                this.buffer = undefined;
                --i // retry character
                ;
            } else {
                this.buffer += str[i];
                ++p;
                if (this.buffer.length === 2) {
                    res += String.fromCharCode(parseInt(this.buffer, 16));
                    this.buffer = undefined;
                }
            }
        } else if (str[i] === "%") {
            if (i > p) {
                res += str.substring(p, i);
                p = i;
            }
            this.buffer = "";
            ++p;
        }
    }
    if (p < len && this.buffer === undefined) res += str.substring(p);
    return res;
};
$dd20c6b76ea2e0e5$var$Decoder.prototype.reset = function() {
    this.buffer = undefined;
};
module.exports = $dd20c6b76ea2e0e5$var$Decoder;

});



parcelRegister("dZB1o", function(module, exports) {


var $a2fdb08aec27a940$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";


var $9Yodq = parcelRequire("9Yodq");
var $a2fdb08aec27a940$require$kDestroyed = $9Yodq.kDestroyed;
var $a2fdb08aec27a940$require$kBodyUsed = $9Yodq.kBodyUsed;

var $a2fdb08aec27a940$require$IncomingMessage = $4UN2M$http.IncomingMessage;



var $7bgOU = parcelRequire("7bgOU");
var $a2fdb08aec27a940$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $a2fdb08aec27a940$require$Blob = $4UN2M$buffer.Blob;


var $a2fdb08aec27a940$require$stringify = $4UN2M$querystring.stringify;

var $14ros = parcelRequire("14ros");
var $a2fdb08aec27a940$require$headerNameLowerCasedRecord = $14ros.headerNameLowerCasedRecord;
const [$a2fdb08aec27a940$var$nodeMajor, $a2fdb08aec27a940$var$nodeMinor] = $4UN2M$process.versions.node.split(".").map((v)=>Number(v));
function $a2fdb08aec27a940$var$nop() {}
function $a2fdb08aec27a940$var$isStream(obj) {
    return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
}
// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
function $a2fdb08aec27a940$var$isBlobLike(object) {
    return $a2fdb08aec27a940$require$Blob && object instanceof $a2fdb08aec27a940$require$Blob || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
}
function $a2fdb08aec27a940$var$buildURL(url, queryParams) {
    if (url.includes("?") || url.includes("#")) throw new Error('Query params cannot be passed when url already contains "?" or "#".');
    const stringified = $a2fdb08aec27a940$require$stringify(queryParams);
    if (stringified) url += "?" + stringified;
    return url;
}
function $a2fdb08aec27a940$var$parseURL(url) {
    if (typeof url === "string") {
        url = new URL(url);
        if (!/^https?:/.test(url.origin || url.protocol)) throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        return url;
    }
    if (!url || typeof url !== "object") throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
    if (!/^https?:/.test(url.origin || url.protocol)) throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
    if (!(url instanceof URL)) {
        if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
        if (url.path != null && typeof url.path !== "string") throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
        if (url.pathname != null && typeof url.pathname !== "string") throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
        if (url.hostname != null && typeof url.hostname !== "string") throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
        if (url.origin != null && typeof url.origin !== "string") throw new $a2fdb08aec27a940$require$InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
        const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
        let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
        let path = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
        if (origin.endsWith("/")) origin = origin.substring(0, origin.length - 1);
        if (path && !path.startsWith("/")) path = `/${path}`;
        // new URL(path, origin) is unsafe when `path` contains an absolute URL
        // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
        // If first parameter is a relative URL, second param is required, and will be used as the base URL.
        // If first parameter is an absolute URL, a given second param will be ignored.
        url = new URL(origin + path);
    }
    return url;
}
function $a2fdb08aec27a940$var$parseOrigin(url) {
    url = $a2fdb08aec27a940$var$parseURL(url);
    if (url.pathname !== "/" || url.search || url.hash) throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid url");
    return url;
}
function $a2fdb08aec27a940$var$getHostname(host) {
    if (host[0] === "[") {
        const idx = host.indexOf("]");
        $4UN2M$assert(idx !== -1);
        return host.substring(1, idx);
    }
    const idx = host.indexOf(":");
    if (idx === -1) return host;
    return host.substring(0, idx);
}
// IP addresses are not valid server names per RFC6066
// > Currently, the only server names supported are DNS hostnames
function $a2fdb08aec27a940$var$getServerName(host) {
    if (!host) return null;
    $4UN2M$assert.strictEqual(typeof host, "string");
    const servername = $a2fdb08aec27a940$var$getHostname(host);
    if ($4UN2M$net.isIP(servername)) return "";
    return servername;
}
function $a2fdb08aec27a940$var$deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
function $a2fdb08aec27a940$var$isAsyncIterable(obj) {
    return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
}
function $a2fdb08aec27a940$var$isIterable(obj) {
    return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
}
function $a2fdb08aec27a940$var$bodyLength(body) {
    if (body == null) return 0;
    else if ($a2fdb08aec27a940$var$isStream(body)) {
        const state = body._readableState;
        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
    } else if ($a2fdb08aec27a940$var$isBlobLike(body)) return body.size != null ? body.size : null;
    else if ($a2fdb08aec27a940$var$isBuffer(body)) return body.byteLength;
    return null;
}
function $a2fdb08aec27a940$var$isDestroyed(stream) {
    return !stream || !!(stream.destroyed || stream[$a2fdb08aec27a940$require$kDestroyed]);
}
function $a2fdb08aec27a940$var$isReadableAborted(stream) {
    const state = stream && stream._readableState;
    return $a2fdb08aec27a940$var$isDestroyed(stream) && state && !state.endEmitted;
}
function $a2fdb08aec27a940$var$destroy(stream, err) {
    if (stream == null || !$a2fdb08aec27a940$var$isStream(stream) || $a2fdb08aec27a940$var$isDestroyed(stream)) return;
    if (typeof stream.destroy === "function") {
        if (Object.getPrototypeOf(stream).constructor === $a2fdb08aec27a940$require$IncomingMessage) // See: https://github.com/nodejs/node/pull/38505/files
        stream.socket = null;
        stream.destroy(err);
    } else if (err) $4UN2M$process.nextTick((stream, err)=>{
        stream.emit("error", err);
    }, stream, err);
    if (stream.destroyed !== true) stream[$a2fdb08aec27a940$require$kDestroyed] = true;
}
const $a2fdb08aec27a940$var$KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
function $a2fdb08aec27a940$var$parseKeepAliveTimeout(val) {
    const m = val.toString().match($a2fdb08aec27a940$var$KEEPALIVE_TIMEOUT_EXPR);
    return m ? parseInt(m[1], 10) * 1000 : null;
}
/**
 * Retrieves a header name and returns its lowercase value.
 * @param {string | Buffer} value Header name
 * @returns {string}
 */ function $a2fdb08aec27a940$var$headerNameToString(value) {
    return $a2fdb08aec27a940$require$headerNameLowerCasedRecord[value] || value.toLowerCase();
}
function $a2fdb08aec27a940$var$parseHeaders(headers, obj = {}) {
    // For H2 support
    if (!Array.isArray(headers)) return headers;
    for(let i = 0; i < headers.length; i += 2){
        const key = headers[i].toString().toLowerCase();
        let val = obj[key];
        if (!val) {
            if (Array.isArray(headers[i + 1])) obj[key] = headers[i + 1].map((x)=>x.toString("utf8"));
            else obj[key] = headers[i + 1].toString("utf8");
        } else {
            if (!Array.isArray(val)) {
                val = [
                    val
                ];
                obj[key] = val;
            }
            val.push(headers[i + 1].toString("utf8"));
        }
    }
    // See https://github.com/nodejs/node/pull/46528
    if ("content-length" in obj && "content-disposition" in obj) obj["content-disposition"] = $a2fdb08aec27a940$require$Buffer.from(obj["content-disposition"]).toString("latin1");
    return obj;
}
function $a2fdb08aec27a940$var$parseRawHeaders(headers) {
    const ret = [];
    let hasContentLength = false;
    let contentDispositionIdx = -1;
    for(let n = 0; n < headers.length; n += 2){
        const key = headers[n + 0].toString();
        const val = headers[n + 1].toString("utf8");
        if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
            ret.push(key, val);
            hasContentLength = true;
        } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) contentDispositionIdx = ret.push(key, val) - 1;
        else ret.push(key, val);
    }
    // See https://github.com/nodejs/node/pull/46528
    if (hasContentLength && contentDispositionIdx !== -1) ret[contentDispositionIdx] = $a2fdb08aec27a940$require$Buffer.from(ret[contentDispositionIdx]).toString("latin1");
    return ret;
}
function $a2fdb08aec27a940$var$isBuffer(buffer) {
    // See, https://github.com/mcollina/undici/pull/319
    return buffer instanceof Uint8Array || $a2fdb08aec27a940$require$Buffer.isBuffer(buffer);
}
function $a2fdb08aec27a940$var$validateHandler(handler, method, upgrade) {
    if (!handler || typeof handler !== "object") throw new $a2fdb08aec27a940$require$InvalidArgumentError("handler must be an object");
    if (typeof handler.onConnect !== "function") throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid onConnect method");
    if (typeof handler.onError !== "function") throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid onError method");
    if (typeof handler.onBodySent !== "function" && handler.onBodySent !== undefined) throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid onBodySent method");
    if (upgrade || method === "CONNECT") {
        if (typeof handler.onUpgrade !== "function") throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid onUpgrade method");
    } else {
        if (typeof handler.onHeaders !== "function") throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid onHeaders method");
        if (typeof handler.onData !== "function") throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid onData method");
        if (typeof handler.onComplete !== "function") throw new $a2fdb08aec27a940$require$InvalidArgumentError("invalid onComplete method");
    }
}
// A body is disturbed if it has been read from and it cannot
// be re-used without losing state or data.
function $a2fdb08aec27a940$var$isDisturbed(body) {
    return !!(body && ($4UN2M$stream.isDisturbed ? $4UN2M$stream.isDisturbed(body) || body[$a2fdb08aec27a940$require$kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
     : body[$a2fdb08aec27a940$require$kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || $a2fdb08aec27a940$var$isReadableAborted(body)));
}
function $a2fdb08aec27a940$var$isErrored(body) {
    return !!(body && ($4UN2M$stream.isErrored ? $4UN2M$stream.isErrored(body) : /state: 'errored'/.test($4UN2M$util.inspect(body))));
}
function $a2fdb08aec27a940$var$isReadable(body) {
    return !!(body && ($4UN2M$stream.isReadable ? $4UN2M$stream.isReadable(body) : /state: 'readable'/.test($4UN2M$util.inspect(body))));
}
function $a2fdb08aec27a940$var$getSocketInfo(socket) {
    return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
    };
}
async function* $a2fdb08aec27a940$var$convertIterableToBuffer(iterable) {
    for await (const chunk of iterable)yield $a2fdb08aec27a940$require$Buffer.isBuffer(chunk) ? chunk : $a2fdb08aec27a940$require$Buffer.from(chunk);
}
let $a2fdb08aec27a940$var$ReadableStream;

function $a2fdb08aec27a940$var$ReadableStreamFrom(iterable) {
    if (!$a2fdb08aec27a940$var$ReadableStream) $a2fdb08aec27a940$var$ReadableStream = $4UN2M$streamweb.ReadableStream;
    if ($a2fdb08aec27a940$var$ReadableStream.from) return $a2fdb08aec27a940$var$ReadableStream.from($a2fdb08aec27a940$var$convertIterableToBuffer(iterable));
    let iterator;
    return new $a2fdb08aec27a940$var$ReadableStream({
        async start () {
            iterator = iterable[Symbol.asyncIterator]();
        },
        async pull (controller) {
            const { done: done, value: value } = await iterator.next();
            if (done) queueMicrotask(()=>{
                controller.close();
            });
            else {
                const buf = $a2fdb08aec27a940$require$Buffer.isBuffer(value) ? value : $a2fdb08aec27a940$require$Buffer.from(value);
                controller.enqueue(new Uint8Array(buf));
            }
            return controller.desiredSize > 0;
        },
        async cancel (reason) {
            await iterator.return();
        }
    }, 0);
}
// The chunk should be a FormData instance and contains
// all the required methods.
function $a2fdb08aec27a940$var$isFormDataLike(object) {
    return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
}
function $a2fdb08aec27a940$var$throwIfAborted(signal) {
    if (!signal) return;
    if (typeof signal.throwIfAborted === "function") signal.throwIfAborted();
    else if (signal.aborted) {
        // DOMException not available < v17.0.0
        const err = new Error("The operation was aborted");
        err.name = "AbortError";
        throw err;
    }
}
function $a2fdb08aec27a940$var$addAbortListener(signal, listener) {
    if ("addEventListener" in signal) {
        signal.addEventListener("abort", listener, {
            once: true
        });
        return ()=>signal.removeEventListener("abort", listener);
    }
    signal.addListener("abort", listener);
    return ()=>signal.removeListener("abort", listener);
}
const $a2fdb08aec27a940$var$hasToWellFormed = !!String.prototype.toWellFormed;
/**
 * @param {string} val
 */ function $a2fdb08aec27a940$var$toUSVString(val) {
    if ($a2fdb08aec27a940$var$hasToWellFormed) return `${val}`.toWellFormed();
    else if ($4UN2M$util.toUSVString) return $4UN2M$util.toUSVString(val);
    return `${val}`;
}
// Parsed accordingly to RFC 9110
// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
function $a2fdb08aec27a940$var$parseRangeHeader(range) {
    if (range == null || range === "") return {
        start: 0,
        end: null,
        size: null
    };
    const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
    return m ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
    } : null;
}
const $a2fdb08aec27a940$var$kEnumerableProperty = Object.create(null);
$a2fdb08aec27a940$var$kEnumerableProperty.enumerable = true;
module.exports = {
    kEnumerableProperty: $a2fdb08aec27a940$var$kEnumerableProperty,
    nop: $a2fdb08aec27a940$var$nop,
    isDisturbed: $a2fdb08aec27a940$var$isDisturbed,
    isErrored: $a2fdb08aec27a940$var$isErrored,
    isReadable: $a2fdb08aec27a940$var$isReadable,
    toUSVString: $a2fdb08aec27a940$var$toUSVString,
    isReadableAborted: $a2fdb08aec27a940$var$isReadableAborted,
    isBlobLike: $a2fdb08aec27a940$var$isBlobLike,
    parseOrigin: $a2fdb08aec27a940$var$parseOrigin,
    parseURL: $a2fdb08aec27a940$var$parseURL,
    getServerName: $a2fdb08aec27a940$var$getServerName,
    isStream: $a2fdb08aec27a940$var$isStream,
    isIterable: $a2fdb08aec27a940$var$isIterable,
    isAsyncIterable: $a2fdb08aec27a940$var$isAsyncIterable,
    isDestroyed: $a2fdb08aec27a940$var$isDestroyed,
    headerNameToString: $a2fdb08aec27a940$var$headerNameToString,
    parseRawHeaders: $a2fdb08aec27a940$var$parseRawHeaders,
    parseHeaders: $a2fdb08aec27a940$var$parseHeaders,
    parseKeepAliveTimeout: $a2fdb08aec27a940$var$parseKeepAliveTimeout,
    destroy: $a2fdb08aec27a940$var$destroy,
    bodyLength: $a2fdb08aec27a940$var$bodyLength,
    deepClone: $a2fdb08aec27a940$var$deepClone,
    ReadableStreamFrom: $a2fdb08aec27a940$var$ReadableStreamFrom,
    isBuffer: $a2fdb08aec27a940$var$isBuffer,
    validateHandler: $a2fdb08aec27a940$var$validateHandler,
    getSocketInfo: $a2fdb08aec27a940$var$getSocketInfo,
    isFormDataLike: $a2fdb08aec27a940$var$isFormDataLike,
    buildURL: $a2fdb08aec27a940$var$buildURL,
    throwIfAborted: $a2fdb08aec27a940$var$throwIfAborted,
    addAbortListener: $a2fdb08aec27a940$var$addAbortListener,
    parseRangeHeader: $a2fdb08aec27a940$var$parseRangeHeader,
    nodeMajor: $a2fdb08aec27a940$var$nodeMajor,
    nodeMinor: $a2fdb08aec27a940$var$nodeMinor,
    nodeHasAutoSelectFamily: $a2fdb08aec27a940$var$nodeMajor > 18 || $a2fdb08aec27a940$var$nodeMajor === 18 && $a2fdb08aec27a940$var$nodeMinor >= 13,
    safeHTTPMethods: [
        "GET",
        "HEAD",
        "OPTIONS",
        "TRACE"
    ]
};

});
parcelRegister("7bgOU", function(module, exports) {
"use strict";
class $53a69b9b04e02130$var$UndiciError extends Error {
    constructor(message){
        super(message);
        this.name = "UndiciError";
        this.code = "UND_ERR";
    }
}
class $53a69b9b04e02130$var$ConnectTimeoutError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$ConnectTimeoutError);
        this.name = "ConnectTimeoutError";
        this.message = message || "Connect Timeout Error";
        this.code = "UND_ERR_CONNECT_TIMEOUT";
    }
}
class $53a69b9b04e02130$var$HeadersTimeoutError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$HeadersTimeoutError);
        this.name = "HeadersTimeoutError";
        this.message = message || "Headers Timeout Error";
        this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
}
class $53a69b9b04e02130$var$HeadersOverflowError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$HeadersOverflowError);
        this.name = "HeadersOverflowError";
        this.message = message || "Headers Overflow Error";
        this.code = "UND_ERR_HEADERS_OVERFLOW";
    }
}
class $53a69b9b04e02130$var$BodyTimeoutError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$BodyTimeoutError);
        this.name = "BodyTimeoutError";
        this.message = message || "Body Timeout Error";
        this.code = "UND_ERR_BODY_TIMEOUT";
    }
}
class $53a69b9b04e02130$var$ResponseStatusCodeError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message, statusCode, headers, body){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$ResponseStatusCodeError);
        this.name = "ResponseStatusCodeError";
        this.message = message || "Response Status Code Error";
        this.code = "UND_ERR_RESPONSE_STATUS_CODE";
        this.body = body;
        this.status = statusCode;
        this.statusCode = statusCode;
        this.headers = headers;
    }
}
class $53a69b9b04e02130$var$InvalidArgumentError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$InvalidArgumentError);
        this.name = "InvalidArgumentError";
        this.message = message || "Invalid Argument Error";
        this.code = "UND_ERR_INVALID_ARG";
    }
}
class $53a69b9b04e02130$var$InvalidReturnValueError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$InvalidReturnValueError);
        this.name = "InvalidReturnValueError";
        this.message = message || "Invalid Return Value Error";
        this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
}
class $53a69b9b04e02130$var$RequestAbortedError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$RequestAbortedError);
        this.name = "AbortError";
        this.message = message || "Request aborted";
        this.code = "UND_ERR_ABORTED";
    }
}
class $53a69b9b04e02130$var$InformationalError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$InformationalError);
        this.name = "InformationalError";
        this.message = message || "Request information";
        this.code = "UND_ERR_INFO";
    }
}
class $53a69b9b04e02130$var$RequestContentLengthMismatchError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$RequestContentLengthMismatchError);
        this.name = "RequestContentLengthMismatchError";
        this.message = message || "Request body length does not match content-length header";
        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
    }
}
class $53a69b9b04e02130$var$ResponseContentLengthMismatchError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$ResponseContentLengthMismatchError);
        this.name = "ResponseContentLengthMismatchError";
        this.message = message || "Response body length does not match content-length header";
        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
    }
}
class $53a69b9b04e02130$var$ClientDestroyedError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$ClientDestroyedError);
        this.name = "ClientDestroyedError";
        this.message = message || "The client is destroyed";
        this.code = "UND_ERR_DESTROYED";
    }
}
class $53a69b9b04e02130$var$ClientClosedError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$ClientClosedError);
        this.name = "ClientClosedError";
        this.message = message || "The client is closed";
        this.code = "UND_ERR_CLOSED";
    }
}
class $53a69b9b04e02130$var$SocketError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message, socket){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$SocketError);
        this.name = "SocketError";
        this.message = message || "Socket error";
        this.code = "UND_ERR_SOCKET";
        this.socket = socket;
    }
}
class $53a69b9b04e02130$var$NotSupportedError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$NotSupportedError);
        this.name = "NotSupportedError";
        this.message = message || "Not supported error";
        this.code = "UND_ERR_NOT_SUPPORTED";
    }
}
class $53a69b9b04e02130$var$BalancedPoolMissingUpstreamError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$NotSupportedError);
        this.name = "MissingUpstreamError";
        this.message = message || "No upstream has been added to the BalancedPool";
        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
    }
}
class $53a69b9b04e02130$var$HTTPParserError extends Error {
    constructor(message, code, data){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$HTTPParserError);
        this.name = "HTTPParserError";
        this.code = code ? `HPE_${code}` : undefined;
        this.data = data ? data.toString() : undefined;
    }
}
class $53a69b9b04e02130$var$ResponseExceededMaxSizeError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$ResponseExceededMaxSizeError);
        this.name = "ResponseExceededMaxSizeError";
        this.message = message || "Response content exceeded max size";
        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
    }
}
class $53a69b9b04e02130$var$RequestRetryError extends $53a69b9b04e02130$var$UndiciError {
    constructor(message, code, { headers: headers, data: data }){
        super(message);
        Error.captureStackTrace(this, $53a69b9b04e02130$var$RequestRetryError);
        this.name = "RequestRetryError";
        this.message = message || "Request retry error";
        this.code = "UND_ERR_REQ_RETRY";
        this.statusCode = code;
        this.data = data;
        this.headers = headers;
    }
}
module.exports = {
    HTTPParserError: $53a69b9b04e02130$var$HTTPParserError,
    UndiciError: $53a69b9b04e02130$var$UndiciError,
    HeadersTimeoutError: $53a69b9b04e02130$var$HeadersTimeoutError,
    HeadersOverflowError: $53a69b9b04e02130$var$HeadersOverflowError,
    BodyTimeoutError: $53a69b9b04e02130$var$BodyTimeoutError,
    RequestContentLengthMismatchError: $53a69b9b04e02130$var$RequestContentLengthMismatchError,
    ConnectTimeoutError: $53a69b9b04e02130$var$ConnectTimeoutError,
    ResponseStatusCodeError: $53a69b9b04e02130$var$ResponseStatusCodeError,
    InvalidArgumentError: $53a69b9b04e02130$var$InvalidArgumentError,
    InvalidReturnValueError: $53a69b9b04e02130$var$InvalidReturnValueError,
    RequestAbortedError: $53a69b9b04e02130$var$RequestAbortedError,
    ClientDestroyedError: $53a69b9b04e02130$var$ClientDestroyedError,
    ClientClosedError: $53a69b9b04e02130$var$ClientClosedError,
    InformationalError: $53a69b9b04e02130$var$InformationalError,
    SocketError: $53a69b9b04e02130$var$SocketError,
    NotSupportedError: $53a69b9b04e02130$var$NotSupportedError,
    ResponseContentLengthMismatchError: $53a69b9b04e02130$var$ResponseContentLengthMismatchError,
    BalancedPoolMissingUpstreamError: $53a69b9b04e02130$var$BalancedPoolMissingUpstreamError,
    ResponseExceededMaxSizeError: $53a69b9b04e02130$var$ResponseExceededMaxSizeError,
    RequestRetryError: $53a69b9b04e02130$var$RequestRetryError
};

});

parcelRegister("14ros", function(module, exports) {
"use strict";
/** @type {Record<string, string | undefined>} */ const $0c7b69efab933aa8$var$headerNameLowerCasedRecord = {};
// https://developer.mozilla.org/docs/Web/HTTP/Headers
const $0c7b69efab933aa8$var$wellknownHeaderNames = [
    "Accept",
    "Accept-Encoding",
    "Accept-Language",
    "Accept-Ranges",
    "Access-Control-Allow-Credentials",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Origin",
    "Access-Control-Expose-Headers",
    "Access-Control-Max-Age",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Age",
    "Allow",
    "Alt-Svc",
    "Alt-Used",
    "Authorization",
    "Cache-Control",
    "Clear-Site-Data",
    "Connection",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-Length",
    "Content-Location",
    "Content-Range",
    "Content-Security-Policy",
    "Content-Security-Policy-Report-Only",
    "Content-Type",
    "Cookie",
    "Cross-Origin-Embedder-Policy",
    "Cross-Origin-Opener-Policy",
    "Cross-Origin-Resource-Policy",
    "Date",
    "Device-Memory",
    "Downlink",
    "ECT",
    "ETag",
    "Expect",
    "Expect-CT",
    "Expires",
    "Forwarded",
    "From",
    "Host",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Range",
    "If-Unmodified-Since",
    "Keep-Alive",
    "Last-Modified",
    "Link",
    "Location",
    "Max-Forwards",
    "Origin",
    "Permissions-Policy",
    "Pragma",
    "Proxy-Authenticate",
    "Proxy-Authorization",
    "RTT",
    "Range",
    "Referer",
    "Referrer-Policy",
    "Refresh",
    "Retry-After",
    "Sec-WebSocket-Accept",
    "Sec-WebSocket-Extensions",
    "Sec-WebSocket-Key",
    "Sec-WebSocket-Protocol",
    "Sec-WebSocket-Version",
    "Server",
    "Server-Timing",
    "Service-Worker-Allowed",
    "Service-Worker-Navigation-Preload",
    "Set-Cookie",
    "SourceMap",
    "Strict-Transport-Security",
    "Supports-Loading-Mode",
    "TE",
    "Timing-Allow-Origin",
    "Trailer",
    "Transfer-Encoding",
    "Upgrade",
    "Upgrade-Insecure-Requests",
    "User-Agent",
    "Vary",
    "Via",
    "WWW-Authenticate",
    "X-Content-Type-Options",
    "X-DNS-Prefetch-Control",
    "X-Frame-Options",
    "X-Permitted-Cross-Domain-Policies",
    "X-Powered-By",
    "X-Requested-With",
    "X-XSS-Protection"
];
for(let i = 0; i < $0c7b69efab933aa8$var$wellknownHeaderNames.length; ++i){
    const key = $0c7b69efab933aa8$var$wellknownHeaderNames[i];
    const lowerCasedKey = key.toLowerCase();
    $0c7b69efab933aa8$var$headerNameLowerCasedRecord[key] = $0c7b69efab933aa8$var$headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
}
// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf($0c7b69efab933aa8$var$headerNameLowerCasedRecord, null);
module.exports = {
    wellknownHeaderNames: $0c7b69efab933aa8$var$wellknownHeaderNames,
    headerNameLowerCasedRecord: $0c7b69efab933aa8$var$headerNameLowerCasedRecord
};

});


parcelRegister("7zBpt", function(module, exports) {

var $5838d215f6e8ba16$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $fUNmM = parcelRequire("fUNmM");
var $5838d215f6e8ba16$require$redirectStatusSet = $fUNmM.redirectStatusSet;
var $5838d215f6e8ba16$require$referrerPolicyTokens = $fUNmM.referrerPolicySet;
var $5838d215f6e8ba16$require$badPortsSet = $fUNmM.badPortsSet;

var $lezha = parcelRequire("lezha");
var $5838d215f6e8ba16$require$getGlobalOrigin = $lezha.getGlobalOrigin;

var $5838d215f6e8ba16$require$performance = $4UN2M$perf_hooks.performance;

var $dZB1o = parcelRequire("dZB1o");
var $5838d215f6e8ba16$require$isBlobLike = $dZB1o.isBlobLike;
var $5838d215f6e8ba16$require$toUSVString = $dZB1o.toUSVString;
var $5838d215f6e8ba16$require$ReadableStreamFrom = $dZB1o.ReadableStreamFrom;


var $5838d215f6e8ba16$require$isUint8Array = $4UN2M$utiltypes.isUint8Array;
let $5838d215f6e8ba16$var$supportedHashes = [];
// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
/** @type {import('crypto')|undefined} */ let $5838d215f6e8ba16$var$crypto;

try {
    $5838d215f6e8ba16$var$crypto = $5838d215f6e8ba16$import$4e46f0aad582585a;
    const possibleRelevantHashes = [
        "sha256",
        "sha384",
        "sha512"
    ];
    $5838d215f6e8ba16$var$supportedHashes = $5838d215f6e8ba16$var$crypto.getHashes().filter((hash)=>possibleRelevantHashes.includes(hash));
/* c8 ignore next 3 */ } catch  {}
function $5838d215f6e8ba16$var$responseURL(response) {
    // https://fetch.spec.whatwg.org/#responses
    // A response has an associated URL. It is a pointer to the last URL
    // in response’s URL list and null if response’s URL list is empty.
    const urlList = response.urlList;
    const length = urlList.length;
    return length === 0 ? null : urlList[length - 1].toString();
}
// https://fetch.spec.whatwg.org/#concept-response-location-url
function $5838d215f6e8ba16$var$responseLocationURL(response, requestFragment) {
    // 1. If response’s status is not a redirect status, then return null.
    if (!$5838d215f6e8ba16$require$redirectStatusSet.has(response.status)) return null;
    // 2. Let location be the result of extracting header list values given
    // `Location` and response’s header list.
    let location = response.headersList.get("location");
    // 3. If location is a header value, then set location to the result of
    //    parsing location with response’s URL.
    if (location !== null && $5838d215f6e8ba16$var$isValidHeaderValue(location)) location = new URL(location, $5838d215f6e8ba16$var$responseURL(response));
    // 4. If location is a URL whose fragment is null, then set location’s
    // fragment to requestFragment.
    if (location && !location.hash) location.hash = requestFragment;
    // 5. Return location.
    return location;
}
/** @returns {URL} */ function $5838d215f6e8ba16$var$requestCurrentURL(request) {
    return request.urlList[request.urlList.length - 1];
}
function $5838d215f6e8ba16$var$requestBadPort(request) {
    // 1. Let url be request’s current URL.
    const url = $5838d215f6e8ba16$var$requestCurrentURL(request);
    // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
    // then return blocked.
    if ($5838d215f6e8ba16$var$urlIsHttpHttpsScheme(url) && $5838d215f6e8ba16$require$badPortsSet.has(url.port)) return "blocked";
    // 3. Return allowed.
    return "allowed";
}
function $5838d215f6e8ba16$var$isErrorLike(object) {
    return object instanceof Error || object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException";
}
// Check whether |statusText| is a ByteString and
// matches the Reason-Phrase token production.
// RFC 2616: https://tools.ietf.org/html/rfc2616
// RFC 7230: https://tools.ietf.org/html/rfc7230
// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
function $5838d215f6e8ba16$var$isValidReasonPhrase(statusText) {
    for(let i = 0; i < statusText.length; ++i){
        const c = statusText.charCodeAt(i);
        if (!(c === 0x09 || // HTAB
        c >= 0x20 && c <= 0x7e || // SP / VCHAR
        c >= 0x80 && c <= 0xff // obs-text
        )) return false;
    }
    return true;
}
/**
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 * @param {number} c
 */ function $5838d215f6e8ba16$var$isTokenCharCode(c) {
    switch(c){
        case 0x22:
        case 0x28:
        case 0x29:
        case 0x2c:
        case 0x2f:
        case 0x3a:
        case 0x3b:
        case 0x3c:
        case 0x3d:
        case 0x3e:
        case 0x3f:
        case 0x40:
        case 0x5b:
        case 0x5c:
        case 0x5d:
        case 0x7b:
        case 0x7d:
            // DQUOTE and "(),/:;<=>?@[\]{}"
            return false;
        default:
            // VCHAR %x21-7E
            return c >= 0x21 && c <= 0x7e;
    }
}
/**
 * @param {string} characters
 */ function $5838d215f6e8ba16$var$isValidHTTPToken(characters) {
    if (characters.length === 0) return false;
    for(let i = 0; i < characters.length; ++i){
        if (!$5838d215f6e8ba16$var$isTokenCharCode(characters.charCodeAt(i))) return false;
    }
    return true;
}
/**
 * @see https://fetch.spec.whatwg.org/#header-name
 * @param {string} potentialValue
 */ function $5838d215f6e8ba16$var$isValidHeaderName(potentialValue) {
    return $5838d215f6e8ba16$var$isValidHTTPToken(potentialValue);
}
/**
 * @see https://fetch.spec.whatwg.org/#header-value
 * @param {string} potentialValue
 */ function $5838d215f6e8ba16$var$isValidHeaderValue(potentialValue) {
    // - Has no leading or trailing HTTP tab or space bytes.
    // - Contains no 0x00 (NUL) or HTTP newline bytes.
    if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) return false;
    if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) return false;
    return true;
}
// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
function $5838d215f6e8ba16$var$setRequestReferrerPolicyOnRedirect(request, actualResponse) {
    //  Given a request request and a response actualResponse, this algorithm
    //  updates request’s referrer policy according to the Referrer-Policy
    //  header (if any) in actualResponse.
    // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
    // from a Referrer-Policy header on actualResponse.
    // 8.1 Parse a referrer policy from a Referrer-Policy header
    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
    const { headersList: headersList } = actualResponse;
    // 2. Let policy be the empty string.
    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
    // 4. Return policy.
    const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
    // Note: As the referrer-policy can contain multiple policies
    // separated by comma, we need to loop through all of them
    // and pick the first valid one.
    // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
    let policy = "";
    if (policyHeader.length > 0) // The right-most policy takes precedence.
    // The left-most policy is the fallback.
    for(let i = policyHeader.length; i !== 0; i--){
        const token = policyHeader[i - 1].trim();
        if ($5838d215f6e8ba16$require$referrerPolicyTokens.has(token)) {
            policy = token;
            break;
        }
    }
    // 2. If policy is not the empty string, then set request’s referrer policy to policy.
    if (policy !== "") request.referrerPolicy = policy;
}
// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
function $5838d215f6e8ba16$var$crossOriginResourcePolicyCheck() {
    // TODO
    return "allowed";
}
// https://fetch.spec.whatwg.org/#concept-cors-check
function $5838d215f6e8ba16$var$corsCheck() {
    // TODO
    return "success";
}
// https://fetch.spec.whatwg.org/#concept-tao-check
function $5838d215f6e8ba16$var$TAOCheck() {
    // TODO
    return "success";
}
function $5838d215f6e8ba16$var$appendFetchMetadata(httpRequest) {
    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
    //  TODO
    //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header
    //  1. Assert: r’s url is a potentially trustworthy URL.
    //  TODO
    //  2. Let header be a Structured Header whose value is a token.
    let header = null;
    //  3. Set header’s value to r’s mode.
    header = httpRequest.mode;
    //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
    httpRequest.headersList.set("sec-fetch-mode", header);
//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
//  TODO
//  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
//  TODO
}
// https://fetch.spec.whatwg.org/#append-a-request-origin-header
function $5838d215f6e8ba16$var$appendRequestOriginHeader(request) {
    // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
    let serializedOrigin = request.origin;
    // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
    if (request.responseTainting === "cors" || request.mode === "websocket") {
        if (serializedOrigin) request.headersList.append("origin", serializedOrigin);
    } else if (request.method !== "GET" && request.method !== "HEAD") {
        // 1. Switch on request’s referrer policy:
        switch(request.referrerPolicy){
            case "no-referrer":
                // Set serializedOrigin to `null`.
                serializedOrigin = null;
                break;
            case "no-referrer-when-downgrade":
            case "strict-origin":
            case "strict-origin-when-cross-origin":
                // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
                if (request.origin && $5838d215f6e8ba16$var$urlHasHttpsScheme(request.origin) && !$5838d215f6e8ba16$var$urlHasHttpsScheme($5838d215f6e8ba16$var$requestCurrentURL(request))) serializedOrigin = null;
                break;
            case "same-origin":
                // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
                if (!$5838d215f6e8ba16$var$sameOrigin(request, $5838d215f6e8ba16$var$requestCurrentURL(request))) serializedOrigin = null;
                break;
            default:
        }
        if (serializedOrigin) // 2. Append (`Origin`, serializedOrigin) to request’s header list.
        request.headersList.append("origin", serializedOrigin);
    }
}
function $5838d215f6e8ba16$var$coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
    // TODO
    return $5838d215f6e8ba16$require$performance.now();
}
// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
function $5838d215f6e8ba16$var$createOpaqueTimingInfo(timingInfo) {
    return {
        startTime: timingInfo.startTime ?? 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: timingInfo.startTime ?? 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
    };
}
// https://html.spec.whatwg.org/multipage/origin.html#policy-container
function $5838d215f6e8ba16$var$makePolicyContainer() {
    // Note: the fetch spec doesn't make use of embedder policy or CSP list
    return {
        referrerPolicy: "strict-origin-when-cross-origin"
    };
}
// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
function $5838d215f6e8ba16$var$clonePolicyContainer(policyContainer) {
    return {
        referrerPolicy: policyContainer.referrerPolicy
    };
}
// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
function $5838d215f6e8ba16$var$determineRequestsReferrer(request) {
    // 1. Let policy be request's referrer policy.
    const policy = request.referrerPolicy;
    // Note: policy cannot (shouldn't) be null or an empty string.
    $4UN2M$assert(policy);
    // 2. Let environment be request’s client.
    let referrerSource = null;
    // 3. Switch on request’s referrer:
    if (request.referrer === "client") {
        // Note: node isn't a browser and doesn't implement document/iframes,
        // so we bypass this step and replace it with our own.
        const globalOrigin = $5838d215f6e8ba16$require$getGlobalOrigin();
        if (!globalOrigin || globalOrigin.origin === "null") return "no-referrer";
        // note: we need to clone it as it's mutated
        referrerSource = new URL(globalOrigin);
    } else if (request.referrer instanceof URL) // Let referrerSource be request’s referrer.
    referrerSource = request.referrer;
    // 4. Let request’s referrerURL be the result of stripping referrerSource for
    //    use as a referrer.
    let referrerURL = $5838d215f6e8ba16$var$stripURLForReferrer(referrerSource);
    // 5. Let referrerOrigin be the result of stripping referrerSource for use as
    //    a referrer, with the origin-only flag set to true.
    const referrerOrigin = $5838d215f6e8ba16$var$stripURLForReferrer(referrerSource, true);
    // 6. If the result of serializing referrerURL is a string whose length is
    //    greater than 4096, set referrerURL to referrerOrigin.
    if (referrerURL.toString().length > 4096) referrerURL = referrerOrigin;
    const areSameOrigin = $5838d215f6e8ba16$var$sameOrigin(request, referrerURL);
    const isNonPotentiallyTrustWorthy = $5838d215f6e8ba16$var$isURLPotentiallyTrustworthy(referrerURL) && !$5838d215f6e8ba16$var$isURLPotentiallyTrustworthy(request.url);
    // 8. Execute the switch statements corresponding to the value of policy:
    switch(policy){
        case "origin":
            return referrerOrigin != null ? referrerOrigin : $5838d215f6e8ba16$var$stripURLForReferrer(referrerSource, true);
        case "unsafe-url":
            return referrerURL;
        case "same-origin":
            return areSameOrigin ? referrerOrigin : "no-referrer";
        case "origin-when-cross-origin":
            return areSameOrigin ? referrerURL : referrerOrigin;
        case "strict-origin-when-cross-origin":
            {
                const currentURL = $5838d215f6e8ba16$var$requestCurrentURL(request);
                // 1. If the origin of referrerURL and the origin of request’s current
                //    URL are the same, then return referrerURL.
                if ($5838d215f6e8ba16$var$sameOrigin(referrerURL, currentURL)) return referrerURL;
                // 2. If referrerURL is a potentially trustworthy URL and request’s
                //    current URL is not a potentially trustworthy URL, then return no
                //    referrer.
                if ($5838d215f6e8ba16$var$isURLPotentiallyTrustworthy(referrerURL) && !$5838d215f6e8ba16$var$isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
                // 3. Return referrerOrigin.
                return referrerOrigin;
            }
        case "strict-origin":
        /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */ case "no-referrer-when-downgrade":
        /**
       * 1. If referrerURL is a potentially trustworthy URL and
       * request’s current URL is not a potentially trustworthy URL,
       * then return no referrer.
       * 2. Return referrerOrigin
      */ default:
            return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
    }
}
/**
 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
 * @param {URL} url
 * @param {boolean|undefined} originOnly
 */ function $5838d215f6e8ba16$var$stripURLForReferrer(url, originOnly) {
    // 1. Assert: url is a URL.
    $4UN2M$assert(url instanceof URL);
    // 2. If url’s scheme is a local scheme, then return no referrer.
    if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") return "no-referrer";
    // 3. Set url’s username to the empty string.
    url.username = "";
    // 4. Set url’s password to the empty string.
    url.password = "";
    // 5. Set url’s fragment to null.
    url.hash = "";
    // 6. If the origin-only flag is true, then:
    if (originOnly) {
        // 1. Set url’s path to « the empty string ».
        url.pathname = "";
        // 2. Set url’s query to null.
        url.search = "";
    }
    // 7. Return url.
    return url;
}
function $5838d215f6e8ba16$var$isURLPotentiallyTrustworthy(url) {
    if (!(url instanceof URL)) return false;
    // If child of about, return true
    if (url.href === "about:blank" || url.href === "about:srcdoc") return true;
    // If scheme is data, return true
    if (url.protocol === "data:") return true;
    // If file, return true
    if (url.protocol === "file:") return true;
    return isOriginPotentiallyTrustworthy(url.origin);
    function isOriginPotentiallyTrustworthy(origin) {
        // If origin is explicitly null, return false
        if (origin == null || origin === "null") return false;
        const originAsURL = new URL(origin);
        // If secure, return true
        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") return true;
        // If localhost or variants, return true
        if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.") || originAsURL.hostname.endsWith(".localhost")) return true;
        // If any other, return false
        return false;
    }
}
/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
 * @param {Uint8Array} bytes
 * @param {string} metadataList
 */ function $5838d215f6e8ba16$var$bytesMatch(bytes, metadataList) {
    // If node is not built with OpenSSL support, we cannot check
    // a request's integrity, so allow it by default (the spec will
    // allow requests if an invalid hash is given, as precedence).
    /* istanbul ignore if: only if node is built with --without-ssl */ if ($5838d215f6e8ba16$var$crypto === undefined) return true;
    // 1. Let parsedMetadata be the result of parsing metadataList.
    const parsedMetadata = $5838d215f6e8ba16$var$parseMetadata(metadataList);
    // 2. If parsedMetadata is no metadata, return true.
    if (parsedMetadata === "no metadata") return true;
    // 3. If response is not eligible for integrity validation, return false.
    // TODO
    // 4. If parsedMetadata is the empty set, return true.
    if (parsedMetadata.length === 0) return true;
    // 5. Let metadata be the result of getting the strongest
    //    metadata from parsedMetadata.
    const strongest = $5838d215f6e8ba16$var$getStrongestMetadata(parsedMetadata);
    const metadata = $5838d215f6e8ba16$var$filterMetadataListByAlgorithm(parsedMetadata, strongest);
    // 6. For each item in metadata:
    for (const item of metadata){
        // 1. Let algorithm be the alg component of item.
        const algorithm = item.algo;
        // 2. Let expectedValue be the val component of item.
        const expectedValue = item.hash;
        // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
        // "be liberal with padding". This is annoying, and it's not even in the spec.
        // 3. Let actualValue be the result of applying algorithm to bytes.
        let actualValue = $5838d215f6e8ba16$var$crypto.createHash(algorithm).update(bytes).digest("base64");
        if (actualValue[actualValue.length - 1] === "=") {
            if (actualValue[actualValue.length - 2] === "=") actualValue = actualValue.slice(0, -2);
            else actualValue = actualValue.slice(0, -1);
        }
        // 4. If actualValue is a case-sensitive match for expectedValue,
        //    return true.
        if ($5838d215f6e8ba16$var$compareBase64Mixed(actualValue, expectedValue)) return true;
    }
    // 7. Return false.
    return false;
}
// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
// https://www.w3.org/TR/CSP2/#source-list-syntax
// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
const $5838d215f6e8ba16$var$parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
 * @param {string} metadata
 */ function $5838d215f6e8ba16$var$parseMetadata(metadata) {
    // 1. Let result be the empty set.
    /** @type {{ algo: string, hash: string }[]} */ const result = [];
    // 2. Let empty be equal to true.
    let empty = true;
    // 3. For each token returned by splitting metadata on spaces:
    for (const token of metadata.split(" ")){
        // 1. Set empty to false.
        empty = false;
        // 2. Parse token as a hash-with-options.
        const parsedToken = $5838d215f6e8ba16$var$parseHashWithOptions.exec(token);
        // 3. If token does not parse, continue to the next token.
        if (parsedToken === null || parsedToken.groups === undefined || parsedToken.groups.algo === undefined) continue;
        // 4. Let algorithm be the hash-algo component of token.
        const algorithm = parsedToken.groups.algo.toLowerCase();
        // 5. If algorithm is a hash function recognized by the user
        //    agent, add the parsed token to result.
        if ($5838d215f6e8ba16$var$supportedHashes.includes(algorithm)) result.push(parsedToken.groups);
    }
    // 4. Return no metadata if empty is true, otherwise return result.
    if (empty === true) return "no metadata";
    return result;
}
/**
 * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
 */ function $5838d215f6e8ba16$var$getStrongestMetadata(metadataList) {
    // Let algorithm be the algo component of the first item in metadataList.
    // Can be sha256
    let algorithm = metadataList[0].algo;
    // If the algorithm is sha512, then it is the strongest
    // and we can return immediately
    if (algorithm[3] === "5") return algorithm;
    for(let i = 1; i < metadataList.length; ++i){
        const metadata = metadataList[i];
        // If the algorithm is sha512, then it is the strongest
        // and we can break the loop immediately
        if (metadata.algo[3] === "5") {
            algorithm = "sha512";
            break;
        // If the algorithm is sha384, then a potential sha256 or sha384 is ignored
        } else if (algorithm[3] === "3") continue;
        else if (metadata.algo[3] === "3") algorithm = "sha384";
    }
    return algorithm;
}
function $5838d215f6e8ba16$var$filterMetadataListByAlgorithm(metadataList, algorithm) {
    if (metadataList.length === 1) return metadataList;
    let pos = 0;
    for(let i = 0; i < metadataList.length; ++i)if (metadataList[i].algo === algorithm) metadataList[pos++] = metadataList[i];
    metadataList.length = pos;
    return metadataList;
}
/**
 * Compares two base64 strings, allowing for base64url
 * in the second string.
 *
* @param {string} actualValue always base64
 * @param {string} expectedValue base64 or base64url
 * @returns {boolean}
 */ function $5838d215f6e8ba16$var$compareBase64Mixed(actualValue, expectedValue) {
    if (actualValue.length !== expectedValue.length) return false;
    for(let i = 0; i < actualValue.length; ++i)if (actualValue[i] !== expectedValue[i]) {
        if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") continue;
        return false;
    }
    return true;
}
// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
function $5838d215f6e8ba16$var$tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {
// TODO
}
/**
 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
 * @param {URL} A
 * @param {URL} B
 */ function $5838d215f6e8ba16$var$sameOrigin(A, B) {
    // 1. If A and B are the same opaque origin, then return true.
    if (A.origin === B.origin && A.origin === "null") return true;
    // 2. If A and B are both tuple origins and their schemes,
    //    hosts, and port are identical, then return true.
    if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) return true;
    // 3. Return false.
    return false;
}
function $5838d215f6e8ba16$var$createDeferredPromise() {
    let res;
    let rej;
    const promise = new Promise((resolve, reject)=>{
        res = resolve;
        rej = reject;
    });
    return {
        promise: promise,
        resolve: res,
        reject: rej
    };
}
function $5838d215f6e8ba16$var$isAborted(fetchParams) {
    return fetchParams.controller.state === "aborted";
}
function $5838d215f6e8ba16$var$isCancelled(fetchParams) {
    return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
}
const $5838d215f6e8ba16$var$normalizeMethodRecord = {
    delete: "DELETE",
    DELETE: "DELETE",
    get: "GET",
    GET: "GET",
    head: "HEAD",
    HEAD: "HEAD",
    options: "OPTIONS",
    OPTIONS: "OPTIONS",
    post: "POST",
    POST: "POST",
    put: "PUT",
    PUT: "PUT"
};
// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf($5838d215f6e8ba16$var$normalizeMethodRecord, null);
/**
 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
 * @param {string} method
 */ function $5838d215f6e8ba16$var$normalizeMethod(method) {
    return $5838d215f6e8ba16$var$normalizeMethodRecord[method.toLowerCase()] ?? method;
}
// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
function $5838d215f6e8ba16$var$serializeJavascriptValueToJSONString(value) {
    // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
    const result = JSON.stringify(value);
    // 2. If result is undefined, then throw a TypeError.
    if (result === undefined) throw new TypeError("Value is not JSON serializable");
    // 3. Assert: result is a string.
    $4UN2M$assert(typeof result === "string");
    // 4. Return result.
    return result;
}
// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
const $5838d215f6e8ba16$var$esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
/**
 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
 * @param {() => unknown[]} iterator
 * @param {string} name name of the instance
 * @param {'key'|'value'|'key+value'} kind
 */ function $5838d215f6e8ba16$var$makeIterator(iterator, name, kind) {
    const object = {
        index: 0,
        kind: kind,
        target: iterator
    };
    const i = {
        next () {
            // 1. Let interface be the interface for which the iterator prototype object exists.
            // 2. Let thisValue be the this value.
            // 3. Let object be ? ToObject(thisValue).
            // 4. If object is a platform object, then perform a security
            //    check, passing:
            // 5. If object is not a default iterator object for interface,
            //    then throw a TypeError.
            if (Object.getPrototypeOf(this) !== i) throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
            // 6. Let index be object’s index.
            // 7. Let kind be object’s kind.
            // 8. Let values be object’s target's value pairs to iterate over.
            const { index: index, kind: kind, target: target } = object;
            const values = target();
            // 9. Let len be the length of values.
            const len = values.length;
            // 10. If index is greater than or equal to len, then return
            //     CreateIterResultObject(undefined, true).
            if (index >= len) return {
                value: undefined,
                done: true
            };
            // 11. Let pair be the entry in values at index index.
            const pair = values[index];
            // 12. Set object’s index to index + 1.
            object.index = index + 1;
            // 13. Return the iterator result for pair and kind.
            return $5838d215f6e8ba16$var$iteratorResult(pair, kind);
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name} Iterator`
    };
    // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
    Object.setPrototypeOf(i, $5838d215f6e8ba16$var$esIteratorPrototype);
    // esIteratorPrototype needs to be the prototype of i
    // which is the prototype of an empty object. Yes, it's confusing.
    return Object.setPrototypeOf({}, i);
}
// https://webidl.spec.whatwg.org/#iterator-result
function $5838d215f6e8ba16$var$iteratorResult(pair, kind) {
    let result;
    // 1. Let result be a value determined by the value of kind:
    switch(kind){
        case "key":
            // 1. Let idlKey be pair’s key.
            // 2. Let key be the result of converting idlKey to an
            //    ECMAScript value.
            // 3. result is key.
            result = pair[0];
            break;
        case "value":
            // 1. Let idlValue be pair’s value.
            // 2. Let value be the result of converting idlValue to
            //    an ECMAScript value.
            // 3. result is value.
            result = pair[1];
            break;
        case "key+value":
            // 1. Let idlKey be pair’s key.
            // 2. Let idlValue be pair’s value.
            // 3. Let key be the result of converting idlKey to an
            //    ECMAScript value.
            // 4. Let value be the result of converting idlValue to
            //    an ECMAScript value.
            // 5. Let array be ! ArrayCreate(2).
            // 6. Call ! CreateDataProperty(array, "0", key).
            // 7. Call ! CreateDataProperty(array, "1", value).
            // 8. result is array.
            result = pair;
            break;
    }
    // 2. Return CreateIterResultObject(result, false).
    return {
        value: result,
        done: false
    };
}
/**
 * @see https://fetch.spec.whatwg.org/#body-fully-read
 */ async function $5838d215f6e8ba16$var$fullyReadBody(body, processBody, processBodyError) {
    // 1. If taskDestination is null, then set taskDestination to
    //    the result of starting a new parallel queue.
    // 2. Let successSteps given a byte sequence bytes be to queue a
    //    fetch task to run processBody given bytes, with taskDestination.
    const successSteps = processBody;
    // 3. Let errorSteps be to queue a fetch task to run processBodyError,
    //    with taskDestination.
    const errorSteps = processBodyError;
    // 4. Let reader be the result of getting a reader for body’s stream.
    //    If that threw an exception, then run errorSteps with that
    //    exception and return.
    let reader;
    try {
        reader = body.stream.getReader();
    } catch (e) {
        errorSteps(e);
        return;
    }
    // 5. Read all bytes from reader, given successSteps and errorSteps.
    try {
        const result = await $5838d215f6e8ba16$var$readAllBytes(reader);
        successSteps(result);
    } catch (e) {
        errorSteps(e);
    }
}
/** @type {ReadableStream} */ let $5838d215f6e8ba16$var$ReadableStream = globalThis.ReadableStream;

function $5838d215f6e8ba16$var$isReadableStreamLike(stream) {
    if (!$5838d215f6e8ba16$var$ReadableStream) $5838d215f6e8ba16$var$ReadableStream = $4UN2M$streamweb.ReadableStream;
    return stream instanceof $5838d215f6e8ba16$var$ReadableStream || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
}
const $5838d215f6e8ba16$var$MAXIMUM_ARGUMENT_LENGTH = 65535;
/**
 * @see https://infra.spec.whatwg.org/#isomorphic-decode
 * @param {number[]|Uint8Array} input
 */ function $5838d215f6e8ba16$var$isomorphicDecode(input) {
    // 1. To isomorphic decode a byte sequence input, return a string whose code point
    //    length is equal to input’s length and whose code points have the same values
    //    as the values of input’s bytes, in the same order.
    if (input.length < $5838d215f6e8ba16$var$MAXIMUM_ARGUMENT_LENGTH) return String.fromCharCode(...input);
    return input.reduce((previous, current)=>previous + String.fromCharCode(current), "");
}
/**
 * @param {ReadableStreamController<Uint8Array>} controller
 */ function $5838d215f6e8ba16$var$readableStreamClose(controller) {
    try {
        controller.close();
    } catch (err) {
        // TODO: add comment explaining why this error occurs.
        if (!err.message.includes("Controller is already closed")) throw err;
    }
}
/**
 * @see https://infra.spec.whatwg.org/#isomorphic-encode
 * @param {string} input
 */ function $5838d215f6e8ba16$var$isomorphicEncode(input) {
    // 1. Assert: input contains no code points greater than U+00FF.
    for(let i = 0; i < input.length; i++)$4UN2M$assert(input.charCodeAt(i) <= 0xFF);
    // 2. Return a byte sequence whose length is equal to input’s code
    //    point length and whose bytes have the same values as the
    //    values of input’s code points, in the same order
    return input;
}
/**
 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
 * @see https://streams.spec.whatwg.org/#read-loop
 * @param {ReadableStreamDefaultReader} reader
 */ async function $5838d215f6e8ba16$var$readAllBytes(reader) {
    const bytes = [];
    let byteLength = 0;
    while(true){
        const { done: done, value: chunk } = await reader.read();
        if (done) // 1. Call successSteps with bytes.
        return $5838d215f6e8ba16$require$Buffer.concat(bytes, byteLength);
        // 1. If chunk is not a Uint8Array object, call failureSteps
        //    with a TypeError and abort these steps.
        if (!$5838d215f6e8ba16$require$isUint8Array(chunk)) throw new TypeError("Received non-Uint8Array chunk");
        // 2. Append the bytes represented by chunk to bytes.
        bytes.push(chunk);
        byteLength += chunk.length;
    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
    }
}
/**
 * @see https://fetch.spec.whatwg.org/#is-local
 * @param {URL} url
 */ function $5838d215f6e8ba16$var$urlIsLocal(url) {
    $4UN2M$assert("protocol" in url) // ensure it's a url object
    ;
    const protocol = url.protocol;
    return protocol === "about:" || protocol === "blob:" || protocol === "data:";
}
/**
 * @param {string|URL} url
 */ function $5838d215f6e8ba16$var$urlHasHttpsScheme(url) {
    if (typeof url === "string") return url.startsWith("https:");
    return url.protocol === "https:";
}
/**
 * @see https://fetch.spec.whatwg.org/#http-scheme
 * @param {URL} url
 */ function $5838d215f6e8ba16$var$urlIsHttpHttpsScheme(url) {
    $4UN2M$assert("protocol" in url) // ensure it's a url object
    ;
    const protocol = url.protocol;
    return protocol === "http:" || protocol === "https:";
}
/**
 * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
 */ const $5838d215f6e8ba16$var$hasOwn = Object.hasOwn || ((dict, key)=>Object.prototype.hasOwnProperty.call(dict, key));
module.exports = {
    isAborted: $5838d215f6e8ba16$var$isAborted,
    isCancelled: $5838d215f6e8ba16$var$isCancelled,
    createDeferredPromise: $5838d215f6e8ba16$var$createDeferredPromise,
    ReadableStreamFrom: $5838d215f6e8ba16$require$ReadableStreamFrom,
    toUSVString: $5838d215f6e8ba16$require$toUSVString,
    tryUpgradeRequestToAPotentiallyTrustworthyURL: $5838d215f6e8ba16$var$tryUpgradeRequestToAPotentiallyTrustworthyURL,
    coarsenedSharedCurrentTime: $5838d215f6e8ba16$var$coarsenedSharedCurrentTime,
    determineRequestsReferrer: $5838d215f6e8ba16$var$determineRequestsReferrer,
    makePolicyContainer: $5838d215f6e8ba16$var$makePolicyContainer,
    clonePolicyContainer: $5838d215f6e8ba16$var$clonePolicyContainer,
    appendFetchMetadata: $5838d215f6e8ba16$var$appendFetchMetadata,
    appendRequestOriginHeader: $5838d215f6e8ba16$var$appendRequestOriginHeader,
    TAOCheck: $5838d215f6e8ba16$var$TAOCheck,
    corsCheck: $5838d215f6e8ba16$var$corsCheck,
    crossOriginResourcePolicyCheck: $5838d215f6e8ba16$var$crossOriginResourcePolicyCheck,
    createOpaqueTimingInfo: $5838d215f6e8ba16$var$createOpaqueTimingInfo,
    setRequestReferrerPolicyOnRedirect: $5838d215f6e8ba16$var$setRequestReferrerPolicyOnRedirect,
    isValidHTTPToken: $5838d215f6e8ba16$var$isValidHTTPToken,
    requestBadPort: $5838d215f6e8ba16$var$requestBadPort,
    requestCurrentURL: $5838d215f6e8ba16$var$requestCurrentURL,
    responseURL: $5838d215f6e8ba16$var$responseURL,
    responseLocationURL: $5838d215f6e8ba16$var$responseLocationURL,
    isBlobLike: $5838d215f6e8ba16$require$isBlobLike,
    isURLPotentiallyTrustworthy: $5838d215f6e8ba16$var$isURLPotentiallyTrustworthy,
    isValidReasonPhrase: $5838d215f6e8ba16$var$isValidReasonPhrase,
    sameOrigin: $5838d215f6e8ba16$var$sameOrigin,
    normalizeMethod: $5838d215f6e8ba16$var$normalizeMethod,
    serializeJavascriptValueToJSONString: $5838d215f6e8ba16$var$serializeJavascriptValueToJSONString,
    makeIterator: $5838d215f6e8ba16$var$makeIterator,
    isValidHeaderName: $5838d215f6e8ba16$var$isValidHeaderName,
    isValidHeaderValue: $5838d215f6e8ba16$var$isValidHeaderValue,
    hasOwn: $5838d215f6e8ba16$var$hasOwn,
    isErrorLike: $5838d215f6e8ba16$var$isErrorLike,
    fullyReadBody: $5838d215f6e8ba16$var$fullyReadBody,
    bytesMatch: $5838d215f6e8ba16$var$bytesMatch,
    isReadableStreamLike: $5838d215f6e8ba16$var$isReadableStreamLike,
    readableStreamClose: $5838d215f6e8ba16$var$readableStreamClose,
    isomorphicEncode: $5838d215f6e8ba16$var$isomorphicEncode,
    isomorphicDecode: $5838d215f6e8ba16$var$isomorphicDecode,
    urlIsLocal: $5838d215f6e8ba16$var$urlIsLocal,
    urlHasHttpsScheme: $5838d215f6e8ba16$var$urlHasHttpsScheme,
    urlIsHttpHttpsScheme: $5838d215f6e8ba16$var$urlIsHttpHttpsScheme,
    readAllBytes: $5838d215f6e8ba16$var$readAllBytes,
    normalizeMethodRecord: $5838d215f6e8ba16$var$normalizeMethodRecord,
    parseMetadata: $5838d215f6e8ba16$var$parseMetadata
};

});
parcelRegister("fUNmM", function(module, exports) {
"use strict";

var $b96261235dad0894$require$MessageChannel = $4UN2M$worker_threads.MessageChannel;
var $b96261235dad0894$require$receiveMessageOnPort = $4UN2M$worker_threads.receiveMessageOnPort;
const $b96261235dad0894$var$corsSafeListedMethods = [
    "GET",
    "HEAD",
    "POST"
];
const $b96261235dad0894$var$corsSafeListedMethodsSet = new Set($b96261235dad0894$var$corsSafeListedMethods);
const $b96261235dad0894$var$nullBodyStatus = [
    101,
    204,
    205,
    304
];
const $b96261235dad0894$var$redirectStatus = [
    301,
    302,
    303,
    307,
    308
];
const $b96261235dad0894$var$redirectStatusSet = new Set($b96261235dad0894$var$redirectStatus);
// https://fetch.spec.whatwg.org/#block-bad-port
const $b96261235dad0894$var$badPorts = [
    "1",
    "7",
    "9",
    "11",
    "13",
    "15",
    "17",
    "19",
    "20",
    "21",
    "22",
    "23",
    "25",
    "37",
    "42",
    "43",
    "53",
    "69",
    "77",
    "79",
    "87",
    "95",
    "101",
    "102",
    "103",
    "104",
    "109",
    "110",
    "111",
    "113",
    "115",
    "117",
    "119",
    "123",
    "135",
    "137",
    "139",
    "143",
    "161",
    "179",
    "389",
    "427",
    "465",
    "512",
    "513",
    "514",
    "515",
    "526",
    "530",
    "531",
    "532",
    "540",
    "548",
    "554",
    "556",
    "563",
    "587",
    "601",
    "636",
    "989",
    "990",
    "993",
    "995",
    "1719",
    "1720",
    "1723",
    "2049",
    "3659",
    "4045",
    "5060",
    "5061",
    "6000",
    "6566",
    "6665",
    "6666",
    "6667",
    "6668",
    "6669",
    "6697",
    "10080"
];
const $b96261235dad0894$var$badPortsSet = new Set($b96261235dad0894$var$badPorts);
// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
const $b96261235dad0894$var$referrerPolicy = [
    "",
    "no-referrer",
    "no-referrer-when-downgrade",
    "same-origin",
    "origin",
    "strict-origin",
    "origin-when-cross-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
];
const $b96261235dad0894$var$referrerPolicySet = new Set($b96261235dad0894$var$referrerPolicy);
const $b96261235dad0894$var$requestRedirect = [
    "follow",
    "manual",
    "error"
];
const $b96261235dad0894$var$safeMethods = [
    "GET",
    "HEAD",
    "OPTIONS",
    "TRACE"
];
const $b96261235dad0894$var$safeMethodsSet = new Set($b96261235dad0894$var$safeMethods);
const $b96261235dad0894$var$requestMode = [
    "navigate",
    "same-origin",
    "no-cors",
    "cors"
];
const $b96261235dad0894$var$requestCredentials = [
    "omit",
    "same-origin",
    "include"
];
const $b96261235dad0894$var$requestCache = [
    "default",
    "no-store",
    "reload",
    "no-cache",
    "force-cache",
    "only-if-cached"
];
// https://fetch.spec.whatwg.org/#request-body-header-name
const $b96261235dad0894$var$requestBodyHeader = [
    "content-encoding",
    "content-language",
    "content-location",
    "content-type",
    // See https://github.com/nodejs/undici/issues/2021
    // 'Content-Length' is a forbidden header name, which is typically
    // removed in the Headers implementation. However, undici doesn't
    // filter out headers, so we add it here.
    "content-length"
];
// https://fetch.spec.whatwg.org/#enumdef-requestduplex
const $b96261235dad0894$var$requestDuplex = [
    "half"
];
// http://fetch.spec.whatwg.org/#forbidden-method
const $b96261235dad0894$var$forbiddenMethods = [
    "CONNECT",
    "TRACE",
    "TRACK"
];
const $b96261235dad0894$var$forbiddenMethodsSet = new Set($b96261235dad0894$var$forbiddenMethods);
const $b96261235dad0894$var$subresource = [
    "audio",
    "audioworklet",
    "font",
    "image",
    "manifest",
    "paintworklet",
    "script",
    "style",
    "track",
    "video",
    "xslt",
    ""
];
const $b96261235dad0894$var$subresourceSet = new Set($b96261235dad0894$var$subresource);
/** @type {globalThis['DOMException']} */ const $b96261235dad0894$var$DOMException = globalThis.DOMException ?? (()=>{
    // DOMException was only made a global in Node v17.0.0,
    // but fetch supports >= v16.8.
    try {
        atob("~");
    } catch (err) {
        return Object.getPrototypeOf(err).constructor;
    }
})();
let $b96261235dad0894$var$channel;
/** @type {globalThis['structuredClone']} */ const $b96261235dad0894$var$structuredClone = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
// structuredClone was added in v17.0.0, but fetch supports v16.8
function structuredClone(value, options) {
    if (arguments.length === 0) throw new TypeError("missing argument");
    if (!$b96261235dad0894$var$channel) $b96261235dad0894$var$channel = new $b96261235dad0894$require$MessageChannel();
    $b96261235dad0894$var$channel.port1.unref();
    $b96261235dad0894$var$channel.port2.unref();
    $b96261235dad0894$var$channel.port1.postMessage(value, options?.transfer);
    return $b96261235dad0894$require$receiveMessageOnPort($b96261235dad0894$var$channel.port2).message;
};
module.exports = {
    DOMException: $b96261235dad0894$var$DOMException,
    structuredClone: $b96261235dad0894$var$structuredClone,
    subresource: $b96261235dad0894$var$subresource,
    forbiddenMethods: $b96261235dad0894$var$forbiddenMethods,
    requestBodyHeader: $b96261235dad0894$var$requestBodyHeader,
    referrerPolicy: $b96261235dad0894$var$referrerPolicy,
    requestRedirect: $b96261235dad0894$var$requestRedirect,
    requestMode: $b96261235dad0894$var$requestMode,
    requestCredentials: $b96261235dad0894$var$requestCredentials,
    requestCache: $b96261235dad0894$var$requestCache,
    redirectStatus: $b96261235dad0894$var$redirectStatus,
    corsSafeListedMethods: $b96261235dad0894$var$corsSafeListedMethods,
    nullBodyStatus: $b96261235dad0894$var$nullBodyStatus,
    safeMethods: $b96261235dad0894$var$safeMethods,
    badPorts: $b96261235dad0894$var$badPorts,
    requestDuplex: $b96261235dad0894$var$requestDuplex,
    subresourceSet: $b96261235dad0894$var$subresourceSet,
    badPortsSet: $b96261235dad0894$var$badPortsSet,
    redirectStatusSet: $b96261235dad0894$var$redirectStatusSet,
    corsSafeListedMethodsSet: $b96261235dad0894$var$corsSafeListedMethodsSet,
    safeMethodsSet: $b96261235dad0894$var$safeMethodsSet,
    forbiddenMethodsSet: $b96261235dad0894$var$forbiddenMethodsSet,
    referrerPolicySet: $b96261235dad0894$var$referrerPolicySet
};

});

parcelRegister("lezha", function(module, exports) {
"use strict";
// In case of breaking changes, increase the version
// number to avoid conflicts.
const $f75644d5b2305305$var$globalOrigin = Symbol.for("undici.globalOrigin.1");
function $f75644d5b2305305$var$getGlobalOrigin() {
    return globalThis[$f75644d5b2305305$var$globalOrigin];
}
function $f75644d5b2305305$var$setGlobalOrigin(newOrigin) {
    if (newOrigin === undefined) {
        Object.defineProperty(globalThis, $f75644d5b2305305$var$globalOrigin, {
            value: undefined,
            writable: true,
            enumerable: false,
            configurable: false
        });
        return;
    }
    const parsedURL = new URL(newOrigin);
    if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
    Object.defineProperty(globalThis, $f75644d5b2305305$var$globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
    });
}
module.exports = {
    getGlobalOrigin: $f75644d5b2305305$var$getGlobalOrigin,
    setGlobalOrigin: $f75644d5b2305305$var$setGlobalOrigin
};

});


parcelRegister("haJy7", function(module, exports) {

var $c806b3f87d5802e0$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $7zBpt = parcelRequire("7zBpt");
var $c806b3f87d5802e0$require$isBlobLike = $7zBpt.isBlobLike;
var $c806b3f87d5802e0$require$toUSVString = $7zBpt.toUSVString;
var $c806b3f87d5802e0$require$makeIterator = $7zBpt.makeIterator;

var $2cSZe = parcelRequire("2cSZe");
var $c806b3f87d5802e0$require$kState = $2cSZe.kState;

var $16TRK = parcelRequire("16TRK");
var $c806b3f87d5802e0$require$UndiciFile = $16TRK.File;
var $c806b3f87d5802e0$require$FileLike = $16TRK.FileLike;
var $c806b3f87d5802e0$require$isFileLike = $16TRK.isFileLike;

var $7jIZt = parcelRequire("7jIZt");
var $c806b3f87d5802e0$require$webidl = $7jIZt.webidl;

var $c806b3f87d5802e0$require$Blob = $4UN2M$buffer.Blob;
var $c806b3f87d5802e0$require$NativeFile = $4UN2M$buffer.File;
/** @type {globalThis['File']} */ const $c806b3f87d5802e0$var$File = $c806b3f87d5802e0$require$NativeFile ?? $c806b3f87d5802e0$require$UndiciFile;
// https://xhr.spec.whatwg.org/#formdata
class $c806b3f87d5802e0$var$FormData {
    constructor(form){
        if (form !== undefined) throw $c806b3f87d5802e0$require$webidl.errors.conversionFailed({
            prefix: "FormData constructor",
            argument: "Argument 1",
            types: [
                "undefined"
            ]
        });
        this[$c806b3f87d5802e0$require$kState] = [];
    }
    append(name, value, filename) {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        $c806b3f87d5802e0$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "FormData.append"
        });
        if (arguments.length === 3 && !$c806b3f87d5802e0$require$isBlobLike(value)) throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
        // 1. Let value be value if given; otherwise blobValue.
        name = $c806b3f87d5802e0$require$webidl.converters.USVString(name);
        value = $c806b3f87d5802e0$require$isBlobLike(value) ? $c806b3f87d5802e0$require$webidl.converters.Blob(value, {
            strict: false
        }) : $c806b3f87d5802e0$require$webidl.converters.USVString(value);
        filename = arguments.length === 3 ? $c806b3f87d5802e0$require$webidl.converters.USVString(filename) : undefined;
        // 2. Let entry be the result of creating an entry with
        // name, value, and filename if given.
        const entry = $c806b3f87d5802e0$var$makeEntry(name, value, filename);
        // 3. Append entry to this’s entry list.
        this[$c806b3f87d5802e0$require$kState].push(entry);
    }
    delete(name) {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        $c806b3f87d5802e0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.delete"
        });
        name = $c806b3f87d5802e0$require$webidl.converters.USVString(name);
        // The delete(name) method steps are to remove all entries whose name
        // is name from this’s entry list.
        this[$c806b3f87d5802e0$require$kState] = this[$c806b3f87d5802e0$require$kState].filter((entry)=>entry.name !== name);
    }
    get(name) {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        $c806b3f87d5802e0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.get"
        });
        name = $c806b3f87d5802e0$require$webidl.converters.USVString(name);
        // 1. If there is no entry whose name is name in this’s entry list,
        // then return null.
        const idx = this[$c806b3f87d5802e0$require$kState].findIndex((entry)=>entry.name === name);
        if (idx === -1) return null;
        // 2. Return the value of the first entry whose name is name from
        // this’s entry list.
        return this[$c806b3f87d5802e0$require$kState][idx].value;
    }
    getAll(name) {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        $c806b3f87d5802e0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.getAll"
        });
        name = $c806b3f87d5802e0$require$webidl.converters.USVString(name);
        // 1. If there is no entry whose name is name in this’s entry list,
        // then return the empty list.
        // 2. Return the values of all entries whose name is name, in order,
        // from this’s entry list.
        return this[$c806b3f87d5802e0$require$kState].filter((entry)=>entry.name === name).map((entry)=>entry.value);
    }
    has(name) {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        $c806b3f87d5802e0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.has"
        });
        name = $c806b3f87d5802e0$require$webidl.converters.USVString(name);
        // The has(name) method steps are to return true if there is an entry
        // whose name is name in this’s entry list; otherwise false.
        return this[$c806b3f87d5802e0$require$kState].findIndex((entry)=>entry.name === name) !== -1;
    }
    set(name, value, filename) {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        $c806b3f87d5802e0$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "FormData.set"
        });
        if (arguments.length === 3 && !$c806b3f87d5802e0$require$isBlobLike(value)) throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
        // The set(name, value) and set(name, blobValue, filename) method steps
        // are:
        // 1. Let value be value if given; otherwise blobValue.
        name = $c806b3f87d5802e0$require$webidl.converters.USVString(name);
        value = $c806b3f87d5802e0$require$isBlobLike(value) ? $c806b3f87d5802e0$require$webidl.converters.Blob(value, {
            strict: false
        }) : $c806b3f87d5802e0$require$webidl.converters.USVString(value);
        filename = arguments.length === 3 ? $c806b3f87d5802e0$require$toUSVString(filename) : undefined;
        // 2. Let entry be the result of creating an entry with name, value, and
        // filename if given.
        const entry = $c806b3f87d5802e0$var$makeEntry(name, value, filename);
        // 3. If there are entries in this’s entry list whose name is name, then
        // replace the first such entry with entry and remove the others.
        const idx = this[$c806b3f87d5802e0$require$kState].findIndex((entry)=>entry.name === name);
        if (idx !== -1) this[$c806b3f87d5802e0$require$kState] = [
            ...this[$c806b3f87d5802e0$require$kState].slice(0, idx),
            entry,
            ...this[$c806b3f87d5802e0$require$kState].slice(idx + 1).filter((entry)=>entry.name !== name)
        ];
        else // 4. Otherwise, append entry to this’s entry list.
        this[$c806b3f87d5802e0$require$kState].push(entry);
    }
    entries() {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        return $c806b3f87d5802e0$require$makeIterator(()=>this[$c806b3f87d5802e0$require$kState].map((pair)=>[
                    pair.name,
                    pair.value
                ]), "FormData", "key+value");
    }
    keys() {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        return $c806b3f87d5802e0$require$makeIterator(()=>this[$c806b3f87d5802e0$require$kState].map((pair)=>[
                    pair.name,
                    pair.value
                ]), "FormData", "key");
    }
    values() {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        return $c806b3f87d5802e0$require$makeIterator(()=>this[$c806b3f87d5802e0$require$kState].map((pair)=>[
                    pair.name,
                    pair.value
                ]), "FormData", "value");
    }
    /**
   * @param {(value: string, key: string, self: FormData) => void} callbackFn
   * @param {unknown} thisArg
   */ forEach(callbackFn, thisArg = globalThis) {
        $c806b3f87d5802e0$require$webidl.brandCheck(this, $c806b3f87d5802e0$var$FormData);
        $c806b3f87d5802e0$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.forEach"
        });
        if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
        for (const [key, value] of this)callbackFn.apply(thisArg, [
            value,
            key,
            this
        ]);
    }
}
$c806b3f87d5802e0$var$FormData.prototype[Symbol.iterator] = $c806b3f87d5802e0$var$FormData.prototype.entries;
Object.defineProperties($c806b3f87d5802e0$var$FormData.prototype, {
    [Symbol.toStringTag]: {
        value: "FormData",
        configurable: true
    }
});
/**
 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
 * @param {string} name
 * @param {string|Blob} value
 * @param {?string} filename
 * @returns
 */ function $c806b3f87d5802e0$var$makeEntry(name, value, filename) {
    // 1. Set name to the result of converting name into a scalar value string.
    // "To convert a string into a scalar value string, replace any surrogates
    //  with U+FFFD."
    // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
    name = $c806b3f87d5802e0$require$Buffer.from(name).toString("utf8");
    // 2. If value is a string, then set value to the result of converting
    //    value into a scalar value string.
    if (typeof value === "string") value = $c806b3f87d5802e0$require$Buffer.from(value).toString("utf8");
    else {
        // 3. Otherwise:
        // 1. If value is not a File object, then set value to a new File object,
        //    representing the same bytes, whose name attribute value is "blob"
        if (!$c806b3f87d5802e0$require$isFileLike(value)) value = value instanceof $c806b3f87d5802e0$require$Blob ? new $c806b3f87d5802e0$var$File([
            value
        ], "blob", {
            type: value.type
        }) : new $c806b3f87d5802e0$require$FileLike(value, "blob", {
            type: value.type
        });
        // 2. If filename is given, then set value to a new File object,
        //    representing the same bytes, whose name attribute is filename.
        if (filename !== undefined) {
            /** @type {FilePropertyBag} */ const options = {
                type: value.type,
                lastModified: value.lastModified
            };
            value = $c806b3f87d5802e0$require$NativeFile && value instanceof $c806b3f87d5802e0$require$NativeFile || value instanceof $c806b3f87d5802e0$require$UndiciFile ? new $c806b3f87d5802e0$var$File([
                value
            ], filename, options) : new $c806b3f87d5802e0$require$FileLike(value, filename, options);
        }
    }
    // 4. Return an entry whose name is name and whose value is value.
    return {
        name: name,
        value: value
    };
}
module.exports = {
    FormData: $c806b3f87d5802e0$var$FormData
};

});
parcelRegister("2cSZe", function(module, exports) {
"use strict";
module.exports = {
    kUrl: Symbol("url"),
    kHeaders: Symbol("headers"),
    kSignal: Symbol("signal"),
    kState: Symbol("state"),
    kGuard: Symbol("guard"),
    kRealm: Symbol("realm")
};

});

parcelRegister("16TRK", function(module, exports) {

"use strict";

var $0cf1afc39482c107$require$Blob = $4UN2M$buffer.Blob;
var $0cf1afc39482c107$require$NativeFile = $4UN2M$buffer.File;

var $0cf1afc39482c107$require$types = $4UN2M$util.types;

var $2cSZe = parcelRequire("2cSZe");
var $0cf1afc39482c107$require$kState = $2cSZe.kState;

var $7zBpt = parcelRequire("7zBpt");
var $0cf1afc39482c107$require$isBlobLike = $7zBpt.isBlobLike;

var $7jIZt = parcelRequire("7jIZt");
var $0cf1afc39482c107$require$webidl = $7jIZt.webidl;

var $h1hYV = parcelRequire("h1hYV");
var $0cf1afc39482c107$require$parseMIMEType = $h1hYV.parseMIMEType;
var $0cf1afc39482c107$require$serializeAMimeType = $h1hYV.serializeAMimeType;

var $dZB1o = parcelRequire("dZB1o");
var $0cf1afc39482c107$require$kEnumerableProperty = $dZB1o.kEnumerableProperty;
const $0cf1afc39482c107$var$encoder = new TextEncoder();
class $0cf1afc39482c107$var$File extends $0cf1afc39482c107$require$Blob {
    constructor(fileBits, fileName, options = {}){
        // The File constructor is invoked with two or three parameters, depending
        // on whether the optional dictionary parameter is used. When the File()
        // constructor is invoked, user agents must run the following steps:
        $0cf1afc39482c107$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "File constructor"
        });
        fileBits = $0cf1afc39482c107$require$webidl.converters["sequence<BlobPart>"](fileBits);
        fileName = $0cf1afc39482c107$require$webidl.converters.USVString(fileName);
        options = $0cf1afc39482c107$require$webidl.converters.FilePropertyBag(options);
        // 1. Let bytes be the result of processing blob parts given fileBits and
        // options.
        // Note: Blob handles this for us
        // 2. Let n be the fileName argument to the constructor.
        const n = fileName;
        // 3. Process FilePropertyBag dictionary argument by running the following
        // substeps:
        //    1. If the type member is provided and is not the empty string, let t
        //    be set to the type dictionary member. If t contains any characters
        //    outside the range U+0020 to U+007E, then set t to the empty string
        //    and return from these substeps.
        //    2. Convert every character in t to ASCII lowercase.
        let t = options.type;
        let d;
        // eslint-disable-next-line no-labels
        substep: {
            if (t) {
                t = $0cf1afc39482c107$require$parseMIMEType(t);
                if (t === "failure") {
                    t = "";
                    break substep;
                }
                t = $0cf1afc39482c107$require$serializeAMimeType(t).toLowerCase();
            }
            //    3. If the lastModified member is provided, let d be set to the
            //    lastModified dictionary member. If it is not provided, set d to the
            //    current date and time represented as the number of milliseconds since
            //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
            d = options.lastModified;
        }
        // 4. Return a new File object F such that:
        // F refers to the bytes byte sequence.
        // F.size is set to the number of total bytes in bytes.
        // F.name is set to n.
        // F.type is set to t.
        // F.lastModified is set to d.
        super($0cf1afc39482c107$var$processBlobParts(fileBits, options), {
            type: t
        });
        this[$0cf1afc39482c107$require$kState] = {
            name: n,
            lastModified: d,
            type: t
        };
    }
    get name() {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$File);
        return this[$0cf1afc39482c107$require$kState].name;
    }
    get lastModified() {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$File);
        return this[$0cf1afc39482c107$require$kState].lastModified;
    }
    get type() {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$File);
        return this[$0cf1afc39482c107$require$kState].type;
    }
}
class $0cf1afc39482c107$var$FileLike {
    constructor(blobLike, fileName, options = {}){
        // TODO: argument idl type check
        // The File constructor is invoked with two or three parameters, depending
        // on whether the optional dictionary parameter is used. When the File()
        // constructor is invoked, user agents must run the following steps:
        // 1. Let bytes be the result of processing blob parts given fileBits and
        // options.
        // 2. Let n be the fileName argument to the constructor.
        const n = fileName;
        // 3. Process FilePropertyBag dictionary argument by running the following
        // substeps:
        //    1. If the type member is provided and is not the empty string, let t
        //    be set to the type dictionary member. If t contains any characters
        //    outside the range U+0020 to U+007E, then set t to the empty string
        //    and return from these substeps.
        //    TODO
        const t = options.type;
        //    2. Convert every character in t to ASCII lowercase.
        //    TODO
        //    3. If the lastModified member is provided, let d be set to the
        //    lastModified dictionary member. If it is not provided, set d to the
        //    current date and time represented as the number of milliseconds since
        //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
        const d = options.lastModified ?? Date.now();
        // 4. Return a new File object F such that:
        // F refers to the bytes byte sequence.
        // F.size is set to the number of total bytes in bytes.
        // F.name is set to n.
        // F.type is set to t.
        // F.lastModified is set to d.
        this[$0cf1afc39482c107$require$kState] = {
            blobLike: blobLike,
            name: n,
            type: t,
            lastModified: d
        };
    }
    stream(...args) {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].blobLike.stream(...args);
    }
    arrayBuffer(...args) {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].blobLike.arrayBuffer(...args);
    }
    slice(...args) {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].blobLike.slice(...args);
    }
    text(...args) {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].blobLike.text(...args);
    }
    get size() {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].blobLike.size;
    }
    get type() {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].blobLike.type;
    }
    get name() {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].name;
    }
    get lastModified() {
        $0cf1afc39482c107$require$webidl.brandCheck(this, $0cf1afc39482c107$var$FileLike);
        return this[$0cf1afc39482c107$require$kState].lastModified;
    }
    get [Symbol.toStringTag]() {
        return "File";
    }
}
Object.defineProperties($0cf1afc39482c107$var$File.prototype, {
    [Symbol.toStringTag]: {
        value: "File",
        configurable: true
    },
    name: $0cf1afc39482c107$require$kEnumerableProperty,
    lastModified: $0cf1afc39482c107$require$kEnumerableProperty
});
$0cf1afc39482c107$require$webidl.converters.Blob = $0cf1afc39482c107$require$webidl.interfaceConverter($0cf1afc39482c107$require$Blob);
$0cf1afc39482c107$require$webidl.converters.BlobPart = function(V, opts) {
    if ($0cf1afc39482c107$require$webidl.util.Type(V) === "Object") {
        if ($0cf1afc39482c107$require$isBlobLike(V)) return $0cf1afc39482c107$require$webidl.converters.Blob(V, {
            strict: false
        });
        if (ArrayBuffer.isView(V) || $0cf1afc39482c107$require$types.isAnyArrayBuffer(V)) return $0cf1afc39482c107$require$webidl.converters.BufferSource(V, opts);
    }
    return $0cf1afc39482c107$require$webidl.converters.USVString(V, opts);
};
$0cf1afc39482c107$require$webidl.converters["sequence<BlobPart>"] = $0cf1afc39482c107$require$webidl.sequenceConverter($0cf1afc39482c107$require$webidl.converters.BlobPart);
// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
$0cf1afc39482c107$require$webidl.converters.FilePropertyBag = $0cf1afc39482c107$require$webidl.dictionaryConverter([
    {
        key: "lastModified",
        converter: $0cf1afc39482c107$require$webidl.converters["long long"],
        get defaultValue () {
            return Date.now();
        }
    },
    {
        key: "type",
        converter: $0cf1afc39482c107$require$webidl.converters.DOMString,
        defaultValue: ""
    },
    {
        key: "endings",
        converter: (value)=>{
            value = $0cf1afc39482c107$require$webidl.converters.DOMString(value);
            value = value.toLowerCase();
            if (value !== "native") value = "transparent";
            return value;
        },
        defaultValue: "transparent"
    }
]);
/**
 * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
 * @param {(NodeJS.TypedArray|Blob|string)[]} parts
 * @param {{ type: string, endings: string }} options
 */ function $0cf1afc39482c107$var$processBlobParts(parts, options) {
    // 1. Let bytes be an empty sequence of bytes.
    /** @type {NodeJS.TypedArray[]} */ const bytes = [];
    // 2. For each element in parts:
    for (const element of parts){
        // 1. If element is a USVString, run the following substeps:
        if (typeof element === "string") {
            // 1. Let s be element.
            let s = element;
            // 2. If the endings member of options is "native", set s
            //    to the result of converting line endings to native
            //    of element.
            if (options.endings === "native") s = $0cf1afc39482c107$var$convertLineEndingsNative(s);
            // 3. Append the result of UTF-8 encoding s to bytes.
            bytes.push($0cf1afc39482c107$var$encoder.encode(s));
        } else if ($0cf1afc39482c107$require$types.isAnyArrayBuffer(element) || $0cf1afc39482c107$require$types.isTypedArray(element)) {
            // 2. If element is a BufferSource, get a copy of the
            //    bytes held by the buffer source, and append those
            //    bytes to bytes.
            if (!element.buffer) bytes.push(new Uint8Array(element));
            else bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
        } else if ($0cf1afc39482c107$require$isBlobLike(element)) // 3. If element is a Blob, append the bytes it represents
        //    to bytes.
        bytes.push(element);
    }
    // 3. Return bytes.
    return bytes;
}
/**
 * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
 * @param {string} s
 */ function $0cf1afc39482c107$var$convertLineEndingsNative(s) {
    // 1. Let native line ending be be the code point U+000A LF.
    let nativeLineEnding = "\n";
    // 2. If the underlying platform’s conventions are to
    //    represent newlines as a carriage return and line feed
    //    sequence, set native line ending to the code point
    //    U+000D CR followed by the code point U+000A LF.
    if ($4UN2M$process.platform === "win32") nativeLineEnding = "\r\n";
    return s.replace(/\r?\n/g, nativeLineEnding);
}
// If this function is moved to ./util.js, some tools (such as
// rollup) will warn about circular dependencies. See:
// https://github.com/nodejs/undici/issues/1629
function $0cf1afc39482c107$var$isFileLike(object) {
    return $0cf1afc39482c107$require$NativeFile && object instanceof $0cf1afc39482c107$require$NativeFile || object instanceof $0cf1afc39482c107$var$File || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
}
module.exports = {
    File: $0cf1afc39482c107$var$File,
    FileLike: $0cf1afc39482c107$var$FileLike,
    isFileLike: $0cf1afc39482c107$var$isFileLike
};

});
parcelRegister("7jIZt", function(module, exports) {
"use strict";

var $553d34ea7df49f89$require$types = $4UN2M$util.types;

var $7zBpt = parcelRequire("7zBpt");
var $553d34ea7df49f89$require$hasOwn = $7zBpt.hasOwn;
var $553d34ea7df49f89$require$toUSVString = $7zBpt.toUSVString;
/** @type {import('../../types/webidl').Webidl} */ const $553d34ea7df49f89$var$webidl = {};
$553d34ea7df49f89$var$webidl.converters = {};
$553d34ea7df49f89$var$webidl.util = {};
$553d34ea7df49f89$var$webidl.errors = {};
$553d34ea7df49f89$var$webidl.errors.exception = function(message) {
    return new TypeError(`${message.header}: ${message.message}`);
};
$553d34ea7df49f89$var$webidl.errors.conversionFailed = function(context) {
    const plural = context.types.length === 1 ? "" : " one of";
    const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(", ")}.`;
    return $553d34ea7df49f89$var$webidl.errors.exception({
        header: context.prefix,
        message: message
    });
};
$553d34ea7df49f89$var$webidl.errors.invalidArgument = function(context) {
    return $553d34ea7df49f89$var$webidl.errors.exception({
        header: context.prefix,
        message: `"${context.value}" is an invalid ${context.type}.`
    });
};
// https://webidl.spec.whatwg.org/#implements
$553d34ea7df49f89$var$webidl.brandCheck = function(V, I, opts) {
    if (opts?.strict !== false && !(V instanceof I)) throw new TypeError("Illegal invocation");
    else return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
};
$553d34ea7df49f89$var$webidl.argumentLengthCheck = function({ length: length }, min, ctx) {
    if (length < min) throw $553d34ea7df49f89$var$webidl.errors.exception({
        message: `${min} argument${min !== 1 ? "s" : ""} required, ` + `but${length ? " only" : ""} ${length} found.`,
        ...ctx
    });
};
$553d34ea7df49f89$var$webidl.illegalConstructor = function() {
    throw $553d34ea7df49f89$var$webidl.errors.exception({
        header: "TypeError",
        message: "Illegal constructor"
    });
};
// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
$553d34ea7df49f89$var$webidl.util.Type = function(V) {
    switch(typeof V){
        case "undefined":
            return "Undefined";
        case "boolean":
            return "Boolean";
        case "string":
            return "String";
        case "symbol":
            return "Symbol";
        case "number":
            return "Number";
        case "bigint":
            return "BigInt";
        case "function":
        case "object":
            if (V === null) return "Null";
            return "Object";
    }
};
// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
$553d34ea7df49f89$var$webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
    let upperBound;
    let lowerBound;
    // 1. If bitLength is 64, then:
    if (bitLength === 64) {
        // 1. Let upperBound be 2^53 − 1.
        upperBound = Math.pow(2, 53) - 1;
        // 2. If signedness is "unsigned", then let lowerBound be 0.
        if (signedness === "unsigned") lowerBound = 0;
        else // 3. Otherwise let lowerBound be −2^53 + 1.
        lowerBound = Math.pow(-2, 53) + 1;
    } else if (signedness === "unsigned") {
        // 2. Otherwise, if signedness is "unsigned", then:
        // 1. Let lowerBound be 0.
        lowerBound = 0;
        // 2. Let upperBound be 2^bitLength − 1.
        upperBound = Math.pow(2, bitLength) - 1;
    } else {
        // 3. Otherwise:
        // 1. Let lowerBound be -2^bitLength − 1.
        lowerBound = Math.pow(-2, bitLength) - 1;
        // 2. Let upperBound be 2^bitLength − 1 − 1.
        upperBound = Math.pow(2, bitLength - 1) - 1;
    }
    // 4. Let x be ? ToNumber(V).
    let x = Number(V);
    // 5. If x is −0, then set x to +0.
    if (x === 0) x = 0;
    // 6. If the conversion is to an IDL type associated
    //    with the [EnforceRange] extended attribute, then:
    if (opts.enforceRange === true) {
        // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) throw $553d34ea7df49f89$var$webidl.errors.exception({
            header: "Integer conversion",
            message: `Could not convert ${V} to an integer.`
        });
        // 2. Set x to IntegerPart(x).
        x = $553d34ea7df49f89$var$webidl.util.IntegerPart(x);
        // 3. If x < lowerBound or x > upperBound, then
        //    throw a TypeError.
        if (x < lowerBound || x > upperBound) throw $553d34ea7df49f89$var$webidl.errors.exception({
            header: "Integer conversion",
            message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
        });
        // 4. Return x.
        return x;
    }
    // 7. If x is not NaN and the conversion is to an IDL
    //    type associated with the [Clamp] extended
    //    attribute, then:
    if (!Number.isNaN(x) && opts.clamp === true) {
        // 1. Set x to min(max(x, lowerBound), upperBound).
        x = Math.min(Math.max(x, lowerBound), upperBound);
        // 2. Round x to the nearest integer, choosing the
        //    even integer if it lies halfway between two,
        //    and choosing +0 rather than −0.
        if (Math.floor(x) % 2 === 0) x = Math.floor(x);
        else x = Math.ceil(x);
        // 3. Return x.
        return x;
    }
    // 8. If x is NaN, +0, +∞, or −∞, then return +0.
    if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) return 0;
    // 9. Set x to IntegerPart(x).
    x = $553d34ea7df49f89$var$webidl.util.IntegerPart(x);
    // 10. Set x to x modulo 2^bitLength.
    x = x % Math.pow(2, bitLength);
    // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
    //    then return x − 2^bitLength.
    if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) return x - Math.pow(2, bitLength);
    // 12. Otherwise, return x.
    return x;
};
// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
$553d34ea7df49f89$var$webidl.util.IntegerPart = function(n) {
    // 1. Let r be floor(abs(n)).
    const r = Math.floor(Math.abs(n));
    // 2. If n < 0, then return -1 × r.
    if (n < 0) return -1 * r;
    // 3. Otherwise, return r.
    return r;
};
// https://webidl.spec.whatwg.org/#es-sequence
$553d34ea7df49f89$var$webidl.sequenceConverter = function(converter) {
    return (V)=>{
        // 1. If Type(V) is not Object, throw a TypeError.
        if ($553d34ea7df49f89$var$webidl.util.Type(V) !== "Object") throw $553d34ea7df49f89$var$webidl.errors.exception({
            header: "Sequence",
            message: `Value of type ${$553d34ea7df49f89$var$webidl.util.Type(V)} is not an Object.`
        });
        // 2. Let method be ? GetMethod(V, @@iterator).
        /** @type {Generator} */ const method = V?.[Symbol.iterator]?.();
        const seq = [];
        // 3. If method is undefined, throw a TypeError.
        if (method === undefined || typeof method.next !== "function") throw $553d34ea7df49f89$var$webidl.errors.exception({
            header: "Sequence",
            message: "Object is not an iterator."
        });
        // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
        while(true){
            const { done: done, value: value } = method.next();
            if (done) break;
            seq.push(converter(value));
        }
        return seq;
    };
};
// https://webidl.spec.whatwg.org/#es-to-record
$553d34ea7df49f89$var$webidl.recordConverter = function(keyConverter, valueConverter) {
    return (O)=>{
        // 1. If Type(O) is not Object, throw a TypeError.
        if ($553d34ea7df49f89$var$webidl.util.Type(O) !== "Object") throw $553d34ea7df49f89$var$webidl.errors.exception({
            header: "Record",
            message: `Value of type ${$553d34ea7df49f89$var$webidl.util.Type(O)} is not an Object.`
        });
        // 2. Let result be a new empty instance of record<K, V>.
        const result = {};
        if (!$553d34ea7df49f89$require$types.isProxy(O)) {
            // Object.keys only returns enumerable properties
            const keys = Object.keys(O);
            for (const key of keys){
                // 1. Let typedKey be key converted to an IDL value of type K.
                const typedKey = keyConverter(key);
                // 2. Let value be ? Get(O, key).
                // 3. Let typedValue be value converted to an IDL value of type V.
                const typedValue = valueConverter(O[key]);
                // 4. Set result[typedKey] to typedValue.
                result[typedKey] = typedValue;
            }
            // 5. Return result.
            return result;
        }
        // 3. Let keys be ? O.[[OwnPropertyKeys]]().
        const keys = Reflect.ownKeys(O);
        // 4. For each key of keys.
        for (const key of keys){
            // 1. Let desc be ? O.[[GetOwnProperty]](key).
            const desc = Reflect.getOwnPropertyDescriptor(O, key);
            // 2. If desc is not undefined and desc.[[Enumerable]] is true:
            if (desc?.enumerable) {
                // 1. Let typedKey be key converted to an IDL value of type K.
                const typedKey = keyConverter(key);
                // 2. Let value be ? Get(O, key).
                // 3. Let typedValue be value converted to an IDL value of type V.
                const typedValue = valueConverter(O[key]);
                // 4. Set result[typedKey] to typedValue.
                result[typedKey] = typedValue;
            }
        }
        // 5. Return result.
        return result;
    };
};
$553d34ea7df49f89$var$webidl.interfaceConverter = function(i) {
    return (V, opts = {})=>{
        if (opts.strict !== false && !(V instanceof i)) throw $553d34ea7df49f89$var$webidl.errors.exception({
            header: i.name,
            message: `Expected ${V} to be an instance of ${i.name}.`
        });
        return V;
    };
};
$553d34ea7df49f89$var$webidl.dictionaryConverter = function(converters) {
    return (dictionary)=>{
        const type = $553d34ea7df49f89$var$webidl.util.Type(dictionary);
        const dict = {};
        if (type === "Null" || type === "Undefined") return dict;
        else if (type !== "Object") throw $553d34ea7df49f89$var$webidl.errors.exception({
            header: "Dictionary",
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
        });
        for (const options of converters){
            const { key: key, defaultValue: defaultValue, required: required, converter: converter } = options;
            if (required === true) {
                if (!$553d34ea7df49f89$require$hasOwn(dictionary, key)) throw $553d34ea7df49f89$var$webidl.errors.exception({
                    header: "Dictionary",
                    message: `Missing required key "${key}".`
                });
            }
            let value = dictionary[key];
            const hasDefault = $553d34ea7df49f89$require$hasOwn(options, "defaultValue");
            // Only use defaultValue if value is undefined and
            // a defaultValue options was provided.
            if (hasDefault && value !== null) value = value ?? defaultValue;
            // A key can be optional and have no default value.
            // When this happens, do not perform a conversion,
            // and do not assign the key a value.
            if (required || hasDefault || value !== undefined) {
                value = converter(value);
                if (options.allowedValues && !options.allowedValues.includes(value)) throw $553d34ea7df49f89$var$webidl.errors.exception({
                    header: "Dictionary",
                    message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
                });
                dict[key] = value;
            }
        }
        return dict;
    };
};
$553d34ea7df49f89$var$webidl.nullableConverter = function(converter) {
    return (V)=>{
        if (V === null) return V;
        return converter(V);
    };
};
// https://webidl.spec.whatwg.org/#es-DOMString
$553d34ea7df49f89$var$webidl.converters.DOMString = function(V, opts = {}) {
    // 1. If V is null and the conversion is to an IDL type
    //    associated with the [LegacyNullToEmptyString]
    //    extended attribute, then return the DOMString value
    //    that represents the empty string.
    if (V === null && opts.legacyNullToEmptyString) return "";
    // 2. Let x be ? ToString(V).
    if (typeof V === "symbol") throw new TypeError("Could not convert argument of type symbol to string.");
    // 3. Return the IDL DOMString value that represents the
    //    same sequence of code units as the one the
    //    ECMAScript String value x represents.
    return String(V);
};
// https://webidl.spec.whatwg.org/#es-ByteString
$553d34ea7df49f89$var$webidl.converters.ByteString = function(V) {
    // 1. Let x be ? ToString(V).
    // Note: DOMString converter perform ? ToString(V)
    const x = $553d34ea7df49f89$var$webidl.converters.DOMString(V);
    // 2. If the value of any element of x is greater than
    //    255, then throw a TypeError.
    for(let index = 0; index < x.length; index++){
        if (x.charCodeAt(index) > 255) throw new TypeError("Cannot convert argument to a ByteString because the character at " + `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
    }
    // 3. Return an IDL ByteString value whose length is the
    //    length of x, and where the value of each element is
    //    the value of the corresponding element of x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-USVString
$553d34ea7df49f89$var$webidl.converters.USVString = $553d34ea7df49f89$require$toUSVString;
// https://webidl.spec.whatwg.org/#es-boolean
$553d34ea7df49f89$var$webidl.converters.boolean = function(V) {
    // 1. Let x be the result of computing ToBoolean(V).
    const x = Boolean(V);
    // 2. Return the IDL boolean value that is the one that represents
    //    the same truth value as the ECMAScript Boolean value x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-any
$553d34ea7df49f89$var$webidl.converters.any = function(V) {
    return V;
};
// https://webidl.spec.whatwg.org/#es-long-long
$553d34ea7df49f89$var$webidl.converters["long long"] = function(V) {
    // 1. Let x be ? ConvertToInt(V, 64, "signed").
    const x = $553d34ea7df49f89$var$webidl.util.ConvertToInt(V, 64, "signed");
    // 2. Return the IDL long long value that represents
    //    the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-unsigned-long-long
$553d34ea7df49f89$var$webidl.converters["unsigned long long"] = function(V) {
    // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
    const x = $553d34ea7df49f89$var$webidl.util.ConvertToInt(V, 64, "unsigned");
    // 2. Return the IDL unsigned long long value that
    //    represents the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-unsigned-long
$553d34ea7df49f89$var$webidl.converters["unsigned long"] = function(V) {
    // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
    const x = $553d34ea7df49f89$var$webidl.util.ConvertToInt(V, 32, "unsigned");
    // 2. Return the IDL unsigned long value that
    //    represents the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#es-unsigned-short
$553d34ea7df49f89$var$webidl.converters["unsigned short"] = function(V, opts) {
    // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
    const x = $553d34ea7df49f89$var$webidl.util.ConvertToInt(V, 16, "unsigned", opts);
    // 2. Return the IDL unsigned short value that represents
    //    the same numeric value as x.
    return x;
};
// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
$553d34ea7df49f89$var$webidl.converters.ArrayBuffer = function(V, opts = {}) {
    // 1. If Type(V) is not Object, or V does not have an
    //    [[ArrayBufferData]] internal slot, then throw a
    //    TypeError.
    // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
    // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
    if ($553d34ea7df49f89$var$webidl.util.Type(V) !== "Object" || !$553d34ea7df49f89$require$types.isAnyArrayBuffer(V)) throw $553d34ea7df49f89$var$webidl.errors.conversionFailed({
        prefix: `${V}`,
        argument: `${V}`,
        types: [
            "ArrayBuffer"
        ]
    });
    // 2. If the conversion is not to an IDL type associated
    //    with the [AllowShared] extended attribute, and
    //    IsSharedArrayBuffer(V) is true, then throw a
    //    TypeError.
    if (opts.allowShared === false && $553d34ea7df49f89$require$types.isSharedArrayBuffer(V)) throw $553d34ea7df49f89$var$webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
    });
    // 3. If the conversion is not to an IDL type associated
    //    with the [AllowResizable] extended attribute, and
    //    IsResizableArrayBuffer(V) is true, then throw a
    //    TypeError.
    // Note: resizable ArrayBuffers are currently a proposal.
    // 4. Return the IDL ArrayBuffer value that is a
    //    reference to the same object as V.
    return V;
};
$553d34ea7df49f89$var$webidl.converters.TypedArray = function(V, T, opts = {}) {
    // 1. Let T be the IDL type V is being converted to.
    // 2. If Type(V) is not Object, or V does not have a
    //    [[TypedArrayName]] internal slot with a value
    //    equal to T’s name, then throw a TypeError.
    if ($553d34ea7df49f89$var$webidl.util.Type(V) !== "Object" || !$553d34ea7df49f89$require$types.isTypedArray(V) || V.constructor.name !== T.name) throw $553d34ea7df49f89$var$webidl.errors.conversionFailed({
        prefix: `${T.name}`,
        argument: `${V}`,
        types: [
            T.name
        ]
    });
    // 3. If the conversion is not to an IDL type associated
    //    with the [AllowShared] extended attribute, and
    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
    //    true, then throw a TypeError.
    if (opts.allowShared === false && $553d34ea7df49f89$require$types.isSharedArrayBuffer(V.buffer)) throw $553d34ea7df49f89$var$webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
    });
    // 4. If the conversion is not to an IDL type associated
    //    with the [AllowResizable] extended attribute, and
    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
    //    true, then throw a TypeError.
    // Note: resizable array buffers are currently a proposal
    // 5. Return the IDL value of type T that is a reference
    //    to the same object as V.
    return V;
};
$553d34ea7df49f89$var$webidl.converters.DataView = function(V, opts = {}) {
    // 1. If Type(V) is not Object, or V does not have a
    //    [[DataView]] internal slot, then throw a TypeError.
    if ($553d34ea7df49f89$var$webidl.util.Type(V) !== "Object" || !$553d34ea7df49f89$require$types.isDataView(V)) throw $553d34ea7df49f89$var$webidl.errors.exception({
        header: "DataView",
        message: "Object is not a DataView."
    });
    // 2. If the conversion is not to an IDL type associated
    //    with the [AllowShared] extended attribute, and
    //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
    //    then throw a TypeError.
    if (opts.allowShared === false && $553d34ea7df49f89$require$types.isSharedArrayBuffer(V.buffer)) throw $553d34ea7df49f89$var$webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
    });
    // 3. If the conversion is not to an IDL type associated
    //    with the [AllowResizable] extended attribute, and
    //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
    //    true, then throw a TypeError.
    // Note: resizable ArrayBuffers are currently a proposal
    // 4. Return the IDL DataView value that is a reference
    //    to the same object as V.
    return V;
};
// https://webidl.spec.whatwg.org/#BufferSource
$553d34ea7df49f89$var$webidl.converters.BufferSource = function(V, opts = {}) {
    if ($553d34ea7df49f89$require$types.isAnyArrayBuffer(V)) return $553d34ea7df49f89$var$webidl.converters.ArrayBuffer(V, opts);
    if ($553d34ea7df49f89$require$types.isTypedArray(V)) return $553d34ea7df49f89$var$webidl.converters.TypedArray(V, V.constructor);
    if ($553d34ea7df49f89$require$types.isDataView(V)) return $553d34ea7df49f89$var$webidl.converters.DataView(V, opts);
    throw new TypeError(`Could not convert ${V} to a BufferSource.`);
};
$553d34ea7df49f89$var$webidl.converters["sequence<ByteString>"] = $553d34ea7df49f89$var$webidl.sequenceConverter($553d34ea7df49f89$var$webidl.converters.ByteString);
$553d34ea7df49f89$var$webidl.converters["sequence<sequence<ByteString>>"] = $553d34ea7df49f89$var$webidl.sequenceConverter($553d34ea7df49f89$var$webidl.converters["sequence<ByteString>"]);
$553d34ea7df49f89$var$webidl.converters["record<ByteString, ByteString>"] = $553d34ea7df49f89$var$webidl.recordConverter($553d34ea7df49f89$var$webidl.converters.ByteString, $553d34ea7df49f89$var$webidl.converters.ByteString);
module.exports = {
    webidl: $553d34ea7df49f89$var$webidl
};

});

parcelRegister("h1hYV", function(module, exports) {


var $c6407a74488dbd60$require$atob = $4UN2M$buffer.atob;

var $7zBpt = parcelRequire("7zBpt");
var $c6407a74488dbd60$require$isomorphicDecode = $7zBpt.isomorphicDecode;
const $c6407a74488dbd60$var$encoder = new TextEncoder();
/**
 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
 */ const $c6407a74488dbd60$var$HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
const $c6407a74488dbd60$var$HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/ // eslint-disable-line
;
/**
 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
 */ const $c6407a74488dbd60$var$HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/ // eslint-disable-line
;
// https://fetch.spec.whatwg.org/#data-url-processor
/** @param {URL} dataURL */ function $c6407a74488dbd60$var$dataURLProcessor(dataURL) {
    // 1. Assert: dataURL’s scheme is "data".
    $4UN2M$assert(dataURL.protocol === "data:");
    // 2. Let input be the result of running the URL
    // serializer on dataURL with exclude fragment
    // set to true.
    let input = $c6407a74488dbd60$var$URLSerializer(dataURL, true);
    // 3. Remove the leading "data:" string from input.
    input = input.slice(5);
    // 4. Let position point at the start of input.
    const position = {
        position: 0
    };
    // 5. Let mimeType be the result of collecting a
    // sequence of code points that are not equal
    // to U+002C (,), given position.
    let mimeType = $c6407a74488dbd60$var$collectASequenceOfCodePointsFast(",", input, position);
    // 6. Strip leading and trailing ASCII whitespace
    // from mimeType.
    // Undici implementation note: we need to store the
    // length because if the mimetype has spaces removed,
    // the wrong amount will be sliced from the input in
    // step #9
    const mimeTypeLength = mimeType.length;
    mimeType = $c6407a74488dbd60$var$removeASCIIWhitespace(mimeType, true, true);
    // 7. If position is past the end of input, then
    // return failure
    if (position.position >= input.length) return "failure";
    // 8. Advance position by 1.
    position.position++;
    // 9. Let encodedBody be the remainder of input.
    const encodedBody = input.slice(mimeTypeLength + 1);
    // 10. Let body be the percent-decoding of encodedBody.
    let body = $c6407a74488dbd60$var$stringPercentDecode(encodedBody);
    // 11. If mimeType ends with U+003B (;), followed by
    // zero or more U+0020 SPACE, followed by an ASCII
    // case-insensitive match for "base64", then:
    if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        // 1. Let stringBody be the isomorphic decode of body.
        const stringBody = $c6407a74488dbd60$require$isomorphicDecode(body);
        // 2. Set body to the forgiving-base64 decode of
        // stringBody.
        body = $c6407a74488dbd60$var$forgivingBase64(stringBody);
        // 3. If body is failure, then return failure.
        if (body === "failure") return "failure";
        // 4. Remove the last 6 code points from mimeType.
        mimeType = mimeType.slice(0, -6);
        // 5. Remove trailing U+0020 SPACE code points from mimeType,
        // if any.
        mimeType = mimeType.replace(/(\u0020)+$/, "");
        // 6. Remove the last U+003B (;) code point from mimeType.
        mimeType = mimeType.slice(0, -1);
    }
    // 12. If mimeType starts with U+003B (;), then prepend
    // "text/plain" to mimeType.
    if (mimeType.startsWith(";")) mimeType = "text/plain" + mimeType;
    // 13. Let mimeTypeRecord be the result of parsing
    // mimeType.
    let mimeTypeRecord = $c6407a74488dbd60$var$parseMIMEType(mimeType);
    // 14. If mimeTypeRecord is failure, then set
    // mimeTypeRecord to text/plain;charset=US-ASCII.
    if (mimeTypeRecord === "failure") mimeTypeRecord = $c6407a74488dbd60$var$parseMIMEType("text/plain;charset=US-ASCII");
    // 15. Return a new data: URL struct whose MIME
    // type is mimeTypeRecord and body is body.
    // https://fetch.spec.whatwg.org/#data-url-struct
    return {
        mimeType: mimeTypeRecord,
        body: body
    };
}
// https://url.spec.whatwg.org/#concept-url-serializer
/**
 * @param {URL} url
 * @param {boolean} excludeFragment
 */ function $c6407a74488dbd60$var$URLSerializer(url, excludeFragment = false) {
    if (!excludeFragment) return url.href;
    const href = url.href;
    const hashLength = url.hash.length;
    return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
}
// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
/**
 * @param {(char: string) => boolean} condition
 * @param {string} input
 * @param {{ position: number }} position
 */ function $c6407a74488dbd60$var$collectASequenceOfCodePoints(condition, input, position) {
    // 1. Let result be the empty string.
    let result = "";
    // 2. While position doesn’t point past the end of input and the
    // code point at position within input meets the condition condition:
    while(position.position < input.length && condition(input[position.position])){
        // 1. Append that code point to the end of result.
        result += input[position.position];
        // 2. Advance position by 1.
        position.position++;
    }
    // 3. Return result.
    return result;
}
/**
 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
 * @param {string} char
 * @param {string} input
 * @param {{ position: number }} position
 */ function $c6407a74488dbd60$var$collectASequenceOfCodePointsFast(char, input, position) {
    const idx = input.indexOf(char, position.position);
    const start = position.position;
    if (idx === -1) {
        position.position = input.length;
        return input.slice(start);
    }
    position.position = idx;
    return input.slice(start, position.position);
}
// https://url.spec.whatwg.org/#string-percent-decode
/** @param {string} input */ function $c6407a74488dbd60$var$stringPercentDecode(input) {
    // 1. Let bytes be the UTF-8 encoding of input.
    const bytes = $c6407a74488dbd60$var$encoder.encode(input);
    // 2. Return the percent-decoding of bytes.
    return $c6407a74488dbd60$var$percentDecode(bytes);
}
// https://url.spec.whatwg.org/#percent-decode
/** @param {Uint8Array} input */ function $c6407a74488dbd60$var$percentDecode(input) {
    // 1. Let output be an empty byte sequence.
    /** @type {number[]} */ const output = [];
    // 2. For each byte byte in input:
    for(let i = 0; i < input.length; i++){
        const byte = input[i];
        // 1. If byte is not 0x25 (%), then append byte to output.
        if (byte !== 0x25) output.push(byte);
        else if (byte === 0x25 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) output.push(0x25);
        else {
            // 1. Let bytePoint be the two bytes after byte in input,
            // decoded, and then interpreted as hexadecimal number.
            const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
            const bytePoint = Number.parseInt(nextTwoBytes, 16);
            // 2. Append a byte whose value is bytePoint to output.
            output.push(bytePoint);
            // 3. Skip the next two bytes in input.
            i += 2;
        }
    }
    // 3. Return output.
    return Uint8Array.from(output);
}
// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
/** @param {string} input */ function $c6407a74488dbd60$var$parseMIMEType(input) {
    // 1. Remove any leading and trailing HTTP whitespace
    // from input.
    input = $c6407a74488dbd60$var$removeHTTPWhitespace(input, true, true);
    // 2. Let position be a position variable for input,
    // initially pointing at the start of input.
    const position = {
        position: 0
    };
    // 3. Let type be the result of collecting a sequence
    // of code points that are not U+002F (/) from
    // input, given position.
    const type = $c6407a74488dbd60$var$collectASequenceOfCodePointsFast("/", input, position);
    // 4. If type is the empty string or does not solely
    // contain HTTP token code points, then return failure.
    // https://mimesniff.spec.whatwg.org/#http-token-code-point
    if (type.length === 0 || !$c6407a74488dbd60$var$HTTP_TOKEN_CODEPOINTS.test(type)) return "failure";
    // 5. If position is past the end of input, then return
    // failure
    if (position.position > input.length) return "failure";
    // 6. Advance position by 1. (This skips past U+002F (/).)
    position.position++;
    // 7. Let subtype be the result of collecting a sequence of
    // code points that are not U+003B (;) from input, given
    // position.
    let subtype = $c6407a74488dbd60$var$collectASequenceOfCodePointsFast(";", input, position);
    // 8. Remove any trailing HTTP whitespace from subtype.
    subtype = $c6407a74488dbd60$var$removeHTTPWhitespace(subtype, false, true);
    // 9. If subtype is the empty string or does not solely
    // contain HTTP token code points, then return failure.
    if (subtype.length === 0 || !$c6407a74488dbd60$var$HTTP_TOKEN_CODEPOINTS.test(subtype)) return "failure";
    const typeLowercase = type.toLowerCase();
    const subtypeLowercase = subtype.toLowerCase();
    // 10. Let mimeType be a new MIME type record whose type
    // is type, in ASCII lowercase, and subtype is subtype,
    // in ASCII lowercase.
    // https://mimesniff.spec.whatwg.org/#mime-type
    const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */ parameters: new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
    };
    // 11. While position is not past the end of input:
    while(position.position < input.length){
        // 1. Advance position by 1. (This skips past U+003B (;).)
        position.position++;
        // 2. Collect a sequence of code points that are HTTP
        // whitespace from input given position.
        $c6407a74488dbd60$var$collectASequenceOfCodePoints(// https://fetch.spec.whatwg.org/#http-whitespace
        (char)=>$c6407a74488dbd60$var$HTTP_WHITESPACE_REGEX.test(char), input, position);
        // 3. Let parameterName be the result of collecting a
        // sequence of code points that are not U+003B (;)
        // or U+003D (=) from input, given position.
        let parameterName = $c6407a74488dbd60$var$collectASequenceOfCodePoints((char)=>char !== ";" && char !== "=", input, position);
        // 4. Set parameterName to parameterName, in ASCII
        // lowercase.
        parameterName = parameterName.toLowerCase();
        // 5. If position is not past the end of input, then:
        if (position.position < input.length) {
            // 1. If the code point at position within input is
            // U+003B (;), then continue.
            if (input[position.position] === ";") continue;
            // 2. Advance position by 1. (This skips past U+003D (=).)
            position.position++;
        }
        // 6. If position is past the end of input, then break.
        if (position.position > input.length) break;
        // 7. Let parameterValue be null.
        let parameterValue = null;
        // 8. If the code point at position within input is
        // U+0022 ("), then:
        if (input[position.position] === '"') {
            // 1. Set parameterValue to the result of collecting
            // an HTTP quoted string from input, given position
            // and the extract-value flag.
            parameterValue = $c6407a74488dbd60$var$collectAnHTTPQuotedString(input, position, true);
            // 2. Collect a sequence of code points that are not
            // U+003B (;) from input, given position.
            $c6407a74488dbd60$var$collectASequenceOfCodePointsFast(";", input, position);
        // 9. Otherwise:
        } else {
            // 1. Set parameterValue to the result of collecting
            // a sequence of code points that are not U+003B (;)
            // from input, given position.
            parameterValue = $c6407a74488dbd60$var$collectASequenceOfCodePointsFast(";", input, position);
            // 2. Remove any trailing HTTP whitespace from parameterValue.
            parameterValue = $c6407a74488dbd60$var$removeHTTPWhitespace(parameterValue, false, true);
            // 3. If parameterValue is the empty string, then continue.
            if (parameterValue.length === 0) continue;
        }
        // 10. If all of the following are true
        // - parameterName is not the empty string
        // - parameterName solely contains HTTP token code points
        // - parameterValue solely contains HTTP quoted-string token code points
        // - mimeType’s parameters[parameterName] does not exist
        // then set mimeType’s parameters[parameterName] to parameterValue.
        if (parameterName.length !== 0 && $c6407a74488dbd60$var$HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || $c6407a74488dbd60$var$HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) mimeType.parameters.set(parameterName, parameterValue);
    }
    // 12. Return mimeType.
    return mimeType;
}
// https://infra.spec.whatwg.org/#forgiving-base64-decode
/** @param {string} data */ function $c6407a74488dbd60$var$forgivingBase64(data) {
    // 1. Remove all ASCII whitespace from data.
    data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "") // eslint-disable-line
    ;
    // 2. If data’s code point length divides by 4 leaving
    // no remainder, then:
    if (data.length % 4 === 0) // 1. If data ends with one or two U+003D (=) code points,
    // then remove them from data.
    data = data.replace(/=?=$/, "");
    // 3. If data’s code point length divides by 4 leaving
    // a remainder of 1, then return failure.
    if (data.length % 4 === 1) return "failure";
    // 4. If data contains a code point that is not one of
    //  U+002B (+)
    //  U+002F (/)
    //  ASCII alphanumeric
    // then return failure.
    if (/[^+/0-9A-Za-z]/.test(data)) return "failure";
    const binary = $c6407a74488dbd60$require$atob(data);
    const bytes = new Uint8Array(binary.length);
    for(let byte = 0; byte < binary.length; byte++)bytes[byte] = binary.charCodeAt(byte);
    return bytes;
}
// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
/**
 * @param {string} input
 * @param {{ position: number }} position
 * @param {boolean?} extractValue
 */ function $c6407a74488dbd60$var$collectAnHTTPQuotedString(input, position, extractValue) {
    // 1. Let positionStart be position.
    const positionStart = position.position;
    // 2. Let value be the empty string.
    let value = "";
    // 3. Assert: the code point at position within input
    // is U+0022 (").
    $4UN2M$assert(input[position.position] === '"');
    // 4. Advance position by 1.
    position.position++;
    // 5. While true:
    while(true){
        // 1. Append the result of collecting a sequence of code points
        // that are not U+0022 (") or U+005C (\) from input, given
        // position, to value.
        value += $c6407a74488dbd60$var$collectASequenceOfCodePoints((char)=>char !== '"' && char !== "\\", input, position);
        // 2. If position is past the end of input, then break.
        if (position.position >= input.length) break;
        // 3. Let quoteOrBackslash be the code point at position within
        // input.
        const quoteOrBackslash = input[position.position];
        // 4. Advance position by 1.
        position.position++;
        // 5. If quoteOrBackslash is U+005C (\), then:
        if (quoteOrBackslash === "\\") {
            // 1. If position is past the end of input, then append
            // U+005C (\) to value and break.
            if (position.position >= input.length) {
                value += "\\";
                break;
            }
            // 2. Append the code point at position within input to value.
            value += input[position.position];
            // 3. Advance position by 1.
            position.position++;
        // 6. Otherwise:
        } else {
            // 1. Assert: quoteOrBackslash is U+0022 (").
            $4UN2M$assert(quoteOrBackslash === '"');
            break;
        }
    }
    // 6. If the extract-value flag is set, then return value.
    if (extractValue) return value;
    // 7. Return the code points from positionStart to position,
    // inclusive, within input.
    return input.slice(positionStart, position.position);
}
/**
 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
 */ function $c6407a74488dbd60$var$serializeAMimeType(mimeType) {
    $4UN2M$assert(mimeType !== "failure");
    const { parameters: parameters, essence: essence } = mimeType;
    // 1. Let serialization be the concatenation of mimeType’s
    //    type, U+002F (/), and mimeType’s subtype.
    let serialization = essence;
    // 2. For each name → value of mimeType’s parameters:
    for (let [name, value] of parameters.entries()){
        // 1. Append U+003B (;) to serialization.
        serialization += ";";
        // 2. Append name to serialization.
        serialization += name;
        // 3. Append U+003D (=) to serialization.
        serialization += "=";
        // 4. If value does not solely contain HTTP token code
        //    points or value is the empty string, then:
        if (!$c6407a74488dbd60$var$HTTP_TOKEN_CODEPOINTS.test(value)) {
            // 1. Precede each occurence of U+0022 (") or
            //    U+005C (\) in value with U+005C (\).
            value = value.replace(/(\\|")/g, "\\$1");
            // 2. Prepend U+0022 (") to value.
            value = '"' + value;
            // 3. Append U+0022 (") to value.
            value += '"';
        }
        // 5. Append value to serialization.
        serialization += value;
    }
    // 3. Return serialization.
    return serialization;
}
/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} char
 */ function $c6407a74488dbd60$var$isHTTPWhiteSpace(char) {
    return char === "\r" || char === "\n" || char === "	" || char === " ";
}
/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} str
 */ function $c6407a74488dbd60$var$removeHTTPWhitespace(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
        for(; lead < str.length && $c6407a74488dbd60$var$isHTTPWhiteSpace(str[lead]); lead++);
    }
    if (trailing) {
        for(; trail > 0 && $c6407a74488dbd60$var$isHTTPWhiteSpace(str[trail]); trail--);
    }
    return str.slice(lead, trail + 1);
}
/**
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 * @param {string} char
 */ function $c6407a74488dbd60$var$isASCIIWhitespace(char) {
    return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
}
/**
 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
 */ function $c6407a74488dbd60$var$removeASCIIWhitespace(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
        for(; lead < str.length && $c6407a74488dbd60$var$isASCIIWhitespace(str[lead]); lead++);
    }
    if (trailing) {
        for(; trail > 0 && $c6407a74488dbd60$var$isASCIIWhitespace(str[trail]); trail--);
    }
    return str.slice(lead, trail + 1);
}
module.exports = {
    dataURLProcessor: $c6407a74488dbd60$var$dataURLProcessor,
    URLSerializer: $c6407a74488dbd60$var$URLSerializer,
    collectASequenceOfCodePoints: $c6407a74488dbd60$var$collectASequenceOfCodePoints,
    collectASequenceOfCodePointsFast: $c6407a74488dbd60$var$collectASequenceOfCodePointsFast,
    stringPercentDecode: $c6407a74488dbd60$var$stringPercentDecode,
    parseMIMEType: $c6407a74488dbd60$var$parseMIMEType,
    collectAnHTTPQuotedString: $c6407a74488dbd60$var$collectAnHTTPQuotedString,
    serializeAMimeType: $c6407a74488dbd60$var$serializeAMimeType
};

});




parcelRegister("1qcQ2", function(module, exports) {
module.exports = "AGFzbQEAAAABMAhgAX8Bf2ADf39/AX9gBH9/f38Bf2AAAGADf39/AGABfwBgAn9/AGAGf39/f39/AALLAQgDZW52GHdhc21fb25faGVhZGVyc19jb21wbGV0ZQACA2VudhV3YXNtX29uX21lc3NhZ2VfYmVnaW4AAANlbnYLd2FzbV9vbl91cmwAAQNlbnYOd2FzbV9vbl9zdGF0dXMAAQNlbnYUd2FzbV9vbl9oZWFkZXJfZmllbGQAAQNlbnYUd2FzbV9vbl9oZWFkZXJfdmFsdWUAAQNlbnYMd2FzbV9vbl9ib2R5AAEDZW52GHdhc21fb25fbWVzc2FnZV9jb21wbGV0ZQAAA0ZFAwMEAAAFAAAAAAAABQEFAAUFBQAABgAAAAAGBgYGAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAAABAQcAAAUFAwABBAUBcAESEgUDAQACBggBfwFBgNQECwfRBSIGbWVtb3J5AgALX2luaXRpYWxpemUACRlfX2luZGlyZWN0X2Z1bmN0aW9uX3RhYmxlAQALbGxodHRwX2luaXQAChhsbGh0dHBfc2hvdWxkX2tlZXBfYWxpdmUAQQxsbGh0dHBfYWxsb2MADAZtYWxsb2MARgtsbGh0dHBfZnJlZQANBGZyZWUASA9sbGh0dHBfZ2V0X3R5cGUADhVsbGh0dHBfZ2V0X2h0dHBfbWFqb3IADxVsbGh0dHBfZ2V0X2h0dHBfbWlub3IAEBFsbGh0dHBfZ2V0X21ldGhvZAARFmxsaHR0cF9nZXRfc3RhdHVzX2NvZGUAEhJsbGh0dHBfZ2V0X3VwZ3JhZGUAEwxsbGh0dHBfcmVzZXQAFA5sbGh0dHBfZXhlY3V0ZQAVFGxsaHR0cF9zZXR0aW5nc19pbml0ABYNbGxodHRwX2ZpbmlzaAAXDGxsaHR0cF9wYXVzZQAYDWxsaHR0cF9yZXN1bWUAGRtsbGh0dHBfcmVzdW1lX2FmdGVyX3VwZ3JhZGUAGhBsbGh0dHBfZ2V0X2Vycm5vABsXbGxodHRwX2dldF9lcnJvcl9yZWFzb24AHBdsbGh0dHBfc2V0X2Vycm9yX3JlYXNvbgAdFGxsaHR0cF9nZXRfZXJyb3JfcG9zAB4RbGxodHRwX2Vycm5vX25hbWUAHxJsbGh0dHBfbWV0aG9kX25hbWUAIBJsbGh0dHBfc3RhdHVzX25hbWUAIRpsbGh0dHBfc2V0X2xlbmllbnRfaGVhZGVycwAiIWxsaHR0cF9zZXRfbGVuaWVudF9jaHVua2VkX2xlbmd0aAAjHWxsaHR0cF9zZXRfbGVuaWVudF9rZWVwX2FsaXZlACQkbGxodHRwX3NldF9sZW5pZW50X3RyYW5zZmVyX2VuY29kaW5nACUYbGxodHRwX21lc3NhZ2VfbmVlZHNfZW9mAD8JFwEAQQELEQECAwQFCwYHNTk3MS8tJyspCrLgAkUCAAsIABCIgICAAAsZACAAEMKAgIAAGiAAIAI2AjggACABOgAoCxwAIAAgAC8BMiAALQAuIAAQwYCAgAAQgICAgAALKgEBf0HAABDGgICAACIBEMKAgIAAGiABQYCIgIAANgI4IAEgADoAKCABCwoAIAAQyICAgAALBwAgAC0AKAsHACAALQAqCwcAIAAtACsLBwAgAC0AKQsHACAALwEyCwcAIAAtAC4LRQEEfyAAKAIYIQEgAC0ALSECIAAtACghAyAAKAI4IQQgABDCgICAABogACAENgI4IAAgAzoAKCAAIAI6AC0gACABNgIYCxEAIAAgASABIAJqEMOAgIAACxAAIABBAEHcABDMgICAABoLZwEBf0EAIQECQCAAKAIMDQACQAJAAkACQCAALQAvDgMBAAMCCyAAKAI4IgFFDQAgASgCLCIBRQ0AIAAgARGAgICAAAAiAQ0DC0EADwsQyoCAgAAACyAAQcOWgIAANgIQQQ4hAQsgAQseAAJAIAAoAgwNACAAQdGbgIAANgIQIABBFTYCDAsLFgACQCAAKAIMQRVHDQAgAEEANgIMCwsWAAJAIAAoAgxBFkcNACAAQQA2AgwLCwcAIAAoAgwLBwAgACgCEAsJACAAIAE2AhALBwAgACgCFAsiAAJAIABBJEkNABDKgICAAAALIABBAnRBoLOAgABqKAIACyIAAkAgAEEuSQ0AEMqAgIAAAAsgAEECdEGwtICAAGooAgAL7gsBAX9B66iAgAAhAQJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIABBnH9qDvQDY2IAAWFhYWFhYQIDBAVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhBgcICQoLDA0OD2FhYWFhEGFhYWFhYWFhYWFhEWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYRITFBUWFxgZGhthYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2YTc4OTphYWFhYWFhYTthYWE8YWFhYT0+P2FhYWFhYWFhQGFhQWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYUJDREVGR0hJSktMTU5PUFFSU2FhYWFhYWFhVFVWV1hZWlthXF1hYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFeYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhX2BhC0Hhp4CAAA8LQaShgIAADwtBy6yAgAAPC0H+sYCAAA8LQcCkgIAADwtBq6SAgAAPC0GNqICAAA8LQeKmgIAADwtBgLCAgAAPC0G5r4CAAA8LQdekgIAADwtB75+AgAAPC0Hhn4CAAA8LQfqfgIAADwtB8qCAgAAPC0Gor4CAAA8LQa6ygIAADwtBiLCAgAAPC0Hsp4CAAA8LQYKigIAADwtBjp2AgAAPC0HQroCAAA8LQcqjgIAADwtBxbKAgAAPC0HfnICAAA8LQdKcgIAADwtBxKCAgAAPC0HXoICAAA8LQaKfgIAADwtB7a6AgAAPC0GrsICAAA8LQdSlgIAADwtBzK6AgAAPC0H6roCAAA8LQfyrgIAADwtB0rCAgAAPC0HxnYCAAA8LQbuggIAADwtB96uAgAAPC0GQsYCAAA8LQdexgIAADwtBoq2AgAAPC0HUp4CAAA8LQeCrgIAADwtBn6yAgAAPC0HrsYCAAA8LQdWfgIAADwtByrGAgAAPC0HepYCAAA8LQdSegIAADwtB9JyAgAAPC0GnsoCAAA8LQbGdgIAADwtBoJ2AgAAPC0G5sYCAAA8LQbywgIAADwtBkqGAgAAPC0GzpoCAAA8LQemsgIAADwtBrJ6AgAAPC0HUq4CAAA8LQfemgIAADwtBgKaAgAAPC0GwoYCAAA8LQf6egIAADwtBjaOAgAAPC0GJrYCAAA8LQfeigIAADwtBoLGAgAAPC0Gun4CAAA8LQcalgIAADwtB6J6AgAAPC0GTooCAAA8LQcKvgIAADwtBw52AgAAPC0GLrICAAA8LQeGdgIAADwtBja+AgAAPC0HqoYCAAA8LQbStgIAADwtB0q+AgAAPC0HfsoCAAA8LQdKygIAADwtB8LCAgAAPC0GpooCAAA8LQfmjgIAADwtBmZ6AgAAPC0G1rICAAA8LQZuwgIAADwtBkrKAgAAPC0G2q4CAAA8LQcKigIAADwtB+LKAgAAPC0GepYCAAA8LQdCigIAADwtBup6AgAAPC0GBnoCAAA8LEMqAgIAAAAtB1qGAgAAhAQsgAQsWACAAIAAtAC1B/gFxIAFBAEdyOgAtCxkAIAAgAC0ALUH9AXEgAUEAR0EBdHI6AC0LGQAgACAALQAtQfsBcSABQQBHQQJ0cjoALQsZACAAIAAtAC1B9wFxIAFBAEdBA3RyOgAtCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAgAiBEUNACAAIAQRgICAgAAAIQMLIAMLSQECf0EAIQMCQCAAKAI4IgRFDQAgBCgCBCIERQ0AIAAgASACIAFrIAQRgYCAgAAAIgNBf0cNACAAQcaRgIAANgIQQRghAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIwIgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCOCIERQ0AIAQoAggiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEH2ioCAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCNCIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIMIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABB7ZqAgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAjgiBEUNACAAIAQRgICAgAAAIQMLIAMLSQECf0EAIQMCQCAAKAI4IgRFDQAgBCgCECIERQ0AIAAgASACIAFrIAQRgYCAgAAAIgNBf0cNACAAQZWQgIAANgIQQRghAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAI8IgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCOCIERQ0AIAQoAhQiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEGqm4CAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCQCIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIYIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABB7ZOAgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAkQiBEUNACAAIAQRgICAgAAAIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCJCIERQ0AIAAgBBGAgICAAAAhAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIsIgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCOCIERQ0AIAQoAigiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEH2iICAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCUCIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIcIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABBwpmAgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAkgiBEUNACAAIAQRgICAgAAAIQMLIAMLSQECf0EAIQMCQCAAKAI4IgRFDQAgBCgCICIERQ0AIAAgASACIAFrIAQRgYCAgAAAIgNBf0cNACAAQZSUgIAANgIQQRghAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAJMIgRFDQAgACAEEYCAgIAAACEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAlQiBEUNACAAIAQRgICAgAAAIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCWCIERQ0AIAAgBBGAgICAAAAhAwsgAwtFAQF/AkACQCAALwEwQRRxQRRHDQBBASEDIAAtAChBAUYNASAALwEyQeUARiEDDAELIAAtAClBBUYhAwsgACADOgAuQQAL/gEBA39BASEDAkAgAC8BMCIEQQhxDQAgACkDIEIAUiEDCwJAAkAgAC0ALkUNAEEBIQUgAC0AKUEFRg0BQQEhBSAEQcAAcUUgA3FBAUcNAQtBACEFIARBwABxDQBBAiEFIARB//8DcSIDQQhxDQACQCADQYAEcUUNAAJAIAAtAChBAUcNACAALQAtQQpxDQBBBQ8LQQQPCwJAIANBIHENAAJAIAAtAChBAUYNACAALwEyQf//A3EiAEGcf2pB5ABJDQAgAEHMAUYNACAAQbACRg0AQQQhBSAEQShxRQ0CIANBiARxQYAERg0CC0EADwtBAEEDIAApAyBQGyEFCyAFC2IBAn9BACEBAkAgAC0AKEEBRg0AIAAvATJB//8DcSICQZx/akHkAEkNACACQcwBRg0AIAJBsAJGDQAgAC8BMCIAQcAAcQ0AQQEhASAAQYgEcUGABEYNACAAQShxRSEBCyABC6cBAQN/AkACQAJAIAAtACpFDQAgAC0AK0UNAEEAIQMgAC8BMCIEQQJxRQ0BDAILQQAhAyAALwEwIgRBAXFFDQELQQEhAyAALQAoQQFGDQAgAC8BMkH//wNxIgVBnH9qQeQASQ0AIAVBzAFGDQAgBUGwAkYNACAEQcAAcQ0AQQAhAyAEQYgEcUGABEYNACAEQShxQQBHIQMLIABBADsBMCAAQQA6AC8gAwuZAQECfwJAAkACQCAALQAqRQ0AIAAtACtFDQBBACEBIAAvATAiAkECcUUNAQwCC0EAIQEgAC8BMCICQQFxRQ0BC0EBIQEgAC0AKEEBRg0AIAAvATJB//8DcSIAQZx/akHkAEkNACAAQcwBRg0AIABBsAJGDQAgAkHAAHENAEEAIQEgAkGIBHFBgARGDQAgAkEocUEARyEBCyABC0kBAXsgAEEQav0MAAAAAAAAAAAAAAAAAAAAACIB/QsDACAAIAH9CwMAIABBMGogAf0LAwAgAEEgaiAB/QsDACAAQd0BNgIcQQALewEBfwJAIAAoAgwiAw0AAkAgACgCBEUNACAAIAE2AgQLAkAgACABIAIQxICAgAAiAw0AIAAoAgwPCyAAIAM2AhxBACEDIAAoAgQiAUUNACAAIAEgAiAAKAIIEYGAgIAAACIBRQ0AIAAgAjYCFCAAIAE2AgwgASEDCyADC+TzAQMOfwN+BH8jgICAgABBEGsiAySAgICAACABIQQgASEFIAEhBiABIQcgASEIIAEhCSABIQogASELIAEhDCABIQ0gASEOIAEhDwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAAKAIcIhBBf2oO3QHaAQHZAQIDBAUGBwgJCgsMDQ7YAQ8Q1wEREtYBExQVFhcYGRob4AHfARwdHtUBHyAhIiMkJdQBJicoKSorLNMB0gEtLtEB0AEvMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUbbAUdISUrPAc4BS80BTMwBTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/gAGBAYIBgwGEAYUBhgGHAYgBiQGKAYsBjAGNAY4BjwGQAZEBkgGTAZQBlQGWAZcBmAGZAZoBmwGcAZ0BngGfAaABoQGiAaMBpAGlAaYBpwGoAakBqgGrAawBrQGuAa8BsAGxAbIBswG0AbUBtgG3AcsBygG4AckBuQHIAboBuwG8Ab0BvgG/AcABwQHCAcMBxAHFAcYBANwBC0EAIRAMxgELQQ4hEAzFAQtBDSEQDMQBC0EPIRAMwwELQRAhEAzCAQtBEyEQDMEBC0EUIRAMwAELQRUhEAy/AQtBFiEQDL4BC0EXIRAMvQELQRghEAy8AQtBGSEQDLsBC0EaIRAMugELQRshEAy5AQtBHCEQDLgBC0EIIRAMtwELQR0hEAy2AQtBICEQDLUBC0EfIRAMtAELQQchEAyzAQtBISEQDLIBC0EiIRAMsQELQR4hEAywAQtBIyEQDK8BC0ESIRAMrgELQREhEAytAQtBJCEQDKwBC0ElIRAMqwELQSYhEAyqAQtBJyEQDKkBC0HDASEQDKgBC0EpIRAMpwELQSshEAymAQtBLCEQDKUBC0EtIRAMpAELQS4hEAyjAQtBLyEQDKIBC0HEASEQDKEBC0EwIRAMoAELQTQhEAyfAQtBDCEQDJ4BC0ExIRAMnQELQTIhEAycAQtBMyEQDJsBC0E5IRAMmgELQTUhEAyZAQtBxQEhEAyYAQtBCyEQDJcBC0E6IRAMlgELQTYhEAyVAQtBCiEQDJQBC0E3IRAMkwELQTghEAySAQtBPCEQDJEBC0E7IRAMkAELQT0hEAyPAQtBCSEQDI4BC0EoIRAMjQELQT4hEAyMAQtBPyEQDIsBC0HAACEQDIoBC0HBACEQDIkBC0HCACEQDIgBC0HDACEQDIcBC0HEACEQDIYBC0HFACEQDIUBC0HGACEQDIQBC0EqIRAMgwELQccAIRAMggELQcgAIRAMgQELQckAIRAMgAELQcoAIRAMfwtBywAhEAx+C0HNACEQDH0LQcwAIRAMfAtBzgAhEAx7C0HPACEQDHoLQdAAIRAMeQtB0QAhEAx4C0HSACEQDHcLQdMAIRAMdgtB1AAhEAx1C0HWACEQDHQLQdUAIRAMcwtBBiEQDHILQdcAIRAMcQtBBSEQDHALQdgAIRAMbwtBBCEQDG4LQdkAIRAMbQtB2gAhEAxsC0HbACEQDGsLQdwAIRAMagtBAyEQDGkLQd0AIRAMaAtB3gAhEAxnC0HfACEQDGYLQeEAIRAMZQtB4AAhEAxkC0HiACEQDGMLQeMAIRAMYgtBAiEQDGELQeQAIRAMYAtB5QAhEAxfC0HmACEQDF4LQecAIRAMXQtB6AAhEAxcC0HpACEQDFsLQeoAIRAMWgtB6wAhEAxZC0HsACEQDFgLQe0AIRAMVwtB7gAhEAxWC0HvACEQDFULQfAAIRAMVAtB8QAhEAxTC0HyACEQDFILQfMAIRAMUQtB9AAhEAxQC0H1ACEQDE8LQfYAIRAMTgtB9wAhEAxNC0H4ACEQDEwLQfkAIRAMSwtB+gAhEAxKC0H7ACEQDEkLQfwAIRAMSAtB/QAhEAxHC0H+ACEQDEYLQf8AIRAMRQtBgAEhEAxEC0GBASEQDEMLQYIBIRAMQgtBgwEhEAxBC0GEASEQDEALQYUBIRAMPwtBhgEhEAw+C0GHASEQDD0LQYgBIRAMPAtBiQEhEAw7C0GKASEQDDoLQYsBIRAMOQtBjAEhEAw4C0GNASEQDDcLQY4BIRAMNgtBjwEhEAw1C0GQASEQDDQLQZEBIRAMMwtBkgEhEAwyC0GTASEQDDELQZQBIRAMMAtBlQEhEAwvC0GWASEQDC4LQZcBIRAMLQtBmAEhEAwsC0GZASEQDCsLQZoBIRAMKgtBmwEhEAwpC0GcASEQDCgLQZ0BIRAMJwtBngEhEAwmC0GfASEQDCULQaABIRAMJAtBoQEhEAwjC0GiASEQDCILQaMBIRAMIQtBpAEhEAwgC0GlASEQDB8LQaYBIRAMHgtBpwEhEAwdC0GoASEQDBwLQakBIRAMGwtBqgEhEAwaC0GrASEQDBkLQawBIRAMGAtBrQEhEAwXC0GuASEQDBYLQQEhEAwVC0GvASEQDBQLQbABIRAMEwtBsQEhEAwSC0GzASEQDBELQbIBIRAMEAtBtAEhEAwPC0G1ASEQDA4LQbYBIRAMDQtBtwEhEAwMC0G4ASEQDAsLQbkBIRAMCgtBugEhEAwJC0G7ASEQDAgLQcYBIRAMBwtBvAEhEAwGC0G9ASEQDAULQb4BIRAMBAtBvwEhEAwDC0HAASEQDAILQcIBIRAMAQtBwQEhEAsDQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIBAOxwEAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB4fICEjJSg/QEFERUZHSElKS0xNT1BRUlPeA1dZW1xdYGJlZmdoaWprbG1vcHFyc3R1dnd4eXp7fH1+gAGCAYUBhgGHAYkBiwGMAY0BjgGPAZABkQGUAZUBlgGXAZgBmQGaAZsBnAGdAZ4BnwGgAaEBogGjAaQBpQGmAacBqAGpAaoBqwGsAa0BrgGvAbABsQGyAbMBtAG1AbYBtwG4AbkBugG7AbwBvQG+Ab8BwAHBAcIBwwHEAcUBxgHHAcgByQHKAcsBzAHNAc4BzwHQAdEB0gHTAdQB1QHWAdcB2AHZAdoB2wHcAd0B3gHgAeEB4gHjAeQB5QHmAecB6AHpAeoB6wHsAe0B7gHvAfAB8QHyAfMBmQKkArAC/gL+AgsgASIEIAJHDfMBQd0BIRAM/wMLIAEiECACRw3dAUHDASEQDP4DCyABIgEgAkcNkAFB9wAhEAz9AwsgASIBIAJHDYYBQe8AIRAM/AMLIAEiASACRw1/QeoAIRAM+wMLIAEiASACRw17QegAIRAM+gMLIAEiASACRw14QeYAIRAM+QMLIAEiASACRw0aQRghEAz4AwsgASIBIAJHDRRBEiEQDPcDCyABIgEgAkcNWUHFACEQDPYDCyABIgEgAkcNSkE/IRAM9QMLIAEiASACRw1IQTwhEAz0AwsgASIBIAJHDUFBMSEQDPMDCyAALQAuQQFGDesDDIcCCyAAIAEiASACEMCAgIAAQQFHDeYBIABCADcDIAznAQsgACABIgEgAhC0gICAACIQDecBIAEhAQz1AgsCQCABIgEgAkcNAEEGIRAM8AMLIAAgAUEBaiIBIAIQu4CAgAAiEA3oASABIQEMMQsgAEIANwMgQRIhEAzVAwsgASIQIAJHDStBHSEQDO0DCwJAIAEiASACRg0AIAFBAWohAUEQIRAM1AMLQQchEAzsAwsgAEIAIAApAyAiESACIAEiEGutIhJ9IhMgEyARVhs3AyAgESASViIURQ3lAUEIIRAM6wMLAkAgASIBIAJGDQAgAEGJgICAADYCCCAAIAE2AgQgASEBQRQhEAzSAwtBCSEQDOoDCyABIQEgACkDIFAN5AEgASEBDPICCwJAIAEiASACRw0AQQshEAzpAwsgACABQQFqIgEgAhC2gICAACIQDeUBIAEhAQzyAgsgACABIgEgAhC4gICAACIQDeUBIAEhAQzyAgsgACABIgEgAhC4gICAACIQDeYBIAEhAQwNCyAAIAEiASACELqAgIAAIhAN5wEgASEBDPACCwJAIAEiASACRw0AQQ8hEAzlAwsgAS0AACIQQTtGDQggEEENRw3oASABQQFqIQEM7wILIAAgASIBIAIQuoCAgAAiEA3oASABIQEM8gILA0ACQCABLQAAQfC1gIAAai0AACIQQQFGDQAgEEECRw3rASAAKAIEIRAgAEEANgIEIAAgECABQQFqIgEQuYCAgAAiEA3qASABIQEM9AILIAFBAWoiASACRw0AC0ESIRAM4gMLIAAgASIBIAIQuoCAgAAiEA3pASABIQEMCgsgASIBIAJHDQZBGyEQDOADCwJAIAEiASACRw0AQRYhEAzgAwsgAEGKgICAADYCCCAAIAE2AgQgACABIAIQuICAgAAiEA3qASABIQFBICEQDMYDCwJAIAEiASACRg0AA0ACQCABLQAAQfC3gIAAai0AACIQQQJGDQACQCAQQX9qDgTlAewBAOsB7AELIAFBAWohAUEIIRAMyAMLIAFBAWoiASACRw0AC0EVIRAM3wMLQRUhEAzeAwsDQAJAIAEtAABB8LmAgABqLQAAIhBBAkYNACAQQX9qDgTeAewB4AHrAewBCyABQQFqIgEgAkcNAAtBGCEQDN0DCwJAIAEiASACRg0AIABBi4CAgAA2AgggACABNgIEIAEhAUEHIRAMxAMLQRkhEAzcAwsgAUEBaiEBDAILAkAgASIUIAJHDQBBGiEQDNsDCyAUIQECQCAULQAAQXNqDhTdAu4C7gLuAu4C7gLuAu4C7gLuAu4C7gLuAu4C7gLuAu4C7gLuAgDuAgtBACEQIABBADYCHCAAQa+LgIAANgIQIABBAjYCDCAAIBRBAWo2AhQM2gMLAkAgAS0AACIQQTtGDQAgEEENRw3oASABQQFqIQEM5QILIAFBAWohAQtBIiEQDL8DCwJAIAEiECACRw0AQRwhEAzYAwtCACERIBAhASAQLQAAQVBqDjfnAeYBAQIDBAUGBwgAAAAAAAAACQoLDA0OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPEBESExQAC0EeIRAMvQMLQgIhEQzlAQtCAyERDOQBC0IEIREM4wELQgUhEQziAQtCBiERDOEBC0IHIREM4AELQgghEQzfAQtCCSERDN4BC0IKIREM3QELQgshEQzcAQtCDCERDNsBC0INIREM2gELQg4hEQzZAQtCDyERDNgBC0IKIREM1wELQgshEQzWAQtCDCERDNUBC0INIREM1AELQg4hEQzTAQtCDyERDNIBC0IAIRECQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIBAtAABBUGoON+UB5AEAAQIDBAUGB+YB5gHmAeYB5gHmAeYBCAkKCwwN5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAQ4PEBESE+YBC0ICIREM5AELQgMhEQzjAQtCBCERDOIBC0IFIREM4QELQgYhEQzgAQtCByERDN8BC0IIIREM3gELQgkhEQzdAQtCCiERDNwBC0ILIREM2wELQgwhEQzaAQtCDSERDNkBC0IOIREM2AELQg8hEQzXAQtCCiERDNYBC0ILIREM1QELQgwhEQzUAQtCDSERDNMBC0IOIREM0gELQg8hEQzRAQsgAEIAIAApAyAiESACIAEiEGutIhJ9IhMgEyARVhs3AyAgESASViIURQ3SAUEfIRAMwAMLAkAgASIBIAJGDQAgAEGJgICAADYCCCAAIAE2AgQgASEBQSQhEAynAwtBICEQDL8DCyAAIAEiECACEL6AgIAAQX9qDgW2AQDFAgHRAdIBC0ERIRAMpAMLIABBAToALyAQIQEMuwMLIAEiASACRw3SAUEkIRAMuwMLIAEiDSACRw0eQcYAIRAMugMLIAAgASIBIAIQsoCAgAAiEA3UASABIQEMtQELIAEiECACRw0mQdAAIRAMuAMLAkAgASIBIAJHDQBBKCEQDLgDCyAAQQA2AgQgAEGMgICAADYCCCAAIAEgARCxgICAACIQDdMBIAEhAQzYAQsCQCABIhAgAkcNAEEpIRAMtwMLIBAtAAAiAUEgRg0UIAFBCUcN0wEgEEEBaiEBDBULAkAgASIBIAJGDQAgAUEBaiEBDBcLQSohEAy1AwsCQCABIhAgAkcNAEErIRAMtQMLAkAgEC0AACIBQQlGDQAgAUEgRw3VAQsgAC0ALEEIRg3TASAQIQEMkQMLAkAgASIBIAJHDQBBLCEQDLQDCyABLQAAQQpHDdUBIAFBAWohAQzJAgsgASIOIAJHDdUBQS8hEAyyAwsDQAJAIAEtAAAiEEEgRg0AAkAgEEF2ag4EANwB3AEA2gELIAEhAQzgAQsgAUEBaiIBIAJHDQALQTEhEAyxAwtBMiEQIAEiFCACRg2wAyACIBRrIAAoAgAiAWohFSAUIAFrQQNqIRYCQANAIBQtAAAiF0EgciAXIBdBv39qQf8BcUEaSRtB/wFxIAFB8LuAgABqLQAARw0BAkAgAUEDRw0AQQYhAQyWAwsgAUEBaiEBIBRBAWoiFCACRw0ACyAAIBU2AgAMsQMLIABBADYCACAUIQEM2QELQTMhECABIhQgAkYNrwMgAiAUayAAKAIAIgFqIRUgFCABa0EIaiEWAkADQCAULQAAIhdBIHIgFyAXQb9/akH/AXFBGkkbQf8BcSABQfS7gIAAai0AAEcNAQJAIAFBCEcNAEEFIQEMlQMLIAFBAWohASAUQQFqIhQgAkcNAAsgACAVNgIADLADCyAAQQA2AgAgFCEBDNgBC0E0IRAgASIUIAJGDa4DIAIgFGsgACgCACIBaiEVIBQgAWtBBWohFgJAA0AgFC0AACIXQSByIBcgF0G/f2pB/wFxQRpJG0H/AXEgAUHQwoCAAGotAABHDQECQCABQQVHDQBBByEBDJQDCyABQQFqIQEgFEEBaiIUIAJHDQALIAAgFTYCAAyvAwsgAEEANgIAIBQhAQzXAQsCQCABIgEgAkYNAANAAkAgAS0AAEGAvoCAAGotAAAiEEEBRg0AIBBBAkYNCiABIQEM3QELIAFBAWoiASACRw0AC0EwIRAMrgMLQTAhEAytAwsCQCABIgEgAkYNAANAAkAgAS0AACIQQSBGDQAgEEF2ag4E2QHaAdoB2QHaAQsgAUEBaiIBIAJHDQALQTghEAytAwtBOCEQDKwDCwNAAkAgAS0AACIQQSBGDQAgEEEJRw0DCyABQQFqIgEgAkcNAAtBPCEQDKsDCwNAAkAgAS0AACIQQSBGDQACQAJAIBBBdmoOBNoBAQHaAQALIBBBLEYN2wELIAEhAQwECyABQQFqIgEgAkcNAAtBPyEQDKoDCyABIQEM2wELQcAAIRAgASIUIAJGDagDIAIgFGsgACgCACIBaiEWIBQgAWtBBmohFwJAA0AgFC0AAEEgciABQYDAgIAAai0AAEcNASABQQZGDY4DIAFBAWohASAUQQFqIhQgAkcNAAsgACAWNgIADKkDCyAAQQA2AgAgFCEBC0E2IRAMjgMLAkAgASIPIAJHDQBBwQAhEAynAwsgAEGMgICAADYCCCAAIA82AgQgDyEBIAAtACxBf2oOBM0B1QHXAdkBhwMLIAFBAWohAQzMAQsCQCABIgEgAkYNAANAAkAgAS0AACIQQSByIBAgEEG/f2pB/wFxQRpJG0H/AXEiEEEJRg0AIBBBIEYNAAJAAkACQAJAIBBBnX9qDhMAAwMDAwMDAwEDAwMDAwMDAwMCAwsgAUEBaiEBQTEhEAyRAwsgAUEBaiEBQTIhEAyQAwsgAUEBaiEBQTMhEAyPAwsgASEBDNABCyABQQFqIgEgAkcNAAtBNSEQDKUDC0E1IRAMpAMLAkAgASIBIAJGDQADQAJAIAEtAABBgLyAgABqLQAAQQFGDQAgASEBDNMBCyABQQFqIgEgAkcNAAtBPSEQDKQDC0E9IRAMowMLIAAgASIBIAIQsICAgAAiEA3WASABIQEMAQsgEEEBaiEBC0E8IRAMhwMLAkAgASIBIAJHDQBBwgAhEAygAwsCQANAAkAgAS0AAEF3ag4YAAL+Av4ChAP+Av4C/gL+Av4C/gL+Av4C/gL+Av4C/gL+Av4C/gL+Av4C/gIA/gILIAFBAWoiASACRw0AC0HCACEQDKADCyABQQFqIQEgAC0ALUEBcUUNvQEgASEBC0EsIRAMhQMLIAEiASACRw3TAUHEACEQDJ0DCwNAAkAgAS0AAEGQwICAAGotAABBAUYNACABIQEMtwILIAFBAWoiASACRw0AC0HFACEQDJwDCyANLQAAIhBBIEYNswEgEEE6Rw2BAyAAKAIEIQEgAEEANgIEIAAgASANEK+AgIAAIgEN0AEgDUEBaiEBDLMCC0HHACEQIAEiDSACRg2aAyACIA1rIAAoAgAiAWohFiANIAFrQQVqIRcDQCANLQAAIhRBIHIgFCAUQb9/akH/AXFBGkkbQf8BcSABQZDCgIAAai0AAEcNgAMgAUEFRg30AiABQQFqIQEgDUEBaiINIAJHDQALIAAgFjYCAAyaAwtByAAhECABIg0gAkYNmQMgAiANayAAKAIAIgFqIRYgDSABa0EJaiEXA0AgDS0AACIUQSByIBQgFEG/f2pB/wFxQRpJG0H/AXEgAUGWwoCAAGotAABHDf8CAkAgAUEJRw0AQQIhAQz1AgsgAUEBaiEBIA1BAWoiDSACRw0ACyAAIBY2AgAMmQMLAkAgASINIAJHDQBByQAhEAyZAwsCQAJAIA0tAAAiAUEgciABIAFBv39qQf8BcUEaSRtB/wFxQZJ/ag4HAIADgAOAA4ADgAMBgAMLIA1BAWohAUE+IRAMgAMLIA1BAWohAUE/IRAM/wILQcoAIRAgASINIAJGDZcDIAIgDWsgACgCACIBaiEWIA0gAWtBAWohFwNAIA0tAAAiFEEgciAUIBRBv39qQf8BcUEaSRtB/wFxIAFBoMKAgABqLQAARw39AiABQQFGDfACIAFBAWohASANQQFqIg0gAkcNAAsgACAWNgIADJcDC0HLACEQIAEiDSACRg2WAyACIA1rIAAoAgAiAWohFiANIAFrQQ5qIRcDQCANLQAAIhRBIHIgFCAUQb9/akH/AXFBGkkbQf8BcSABQaLCgIAAai0AAEcN/AIgAUEORg3wAiABQQFqIQEgDUEBaiINIAJHDQALIAAgFjYCAAyWAwtBzAAhECABIg0gAkYNlQMgAiANayAAKAIAIgFqIRYgDSABa0EPaiEXA0AgDS0AACIUQSByIBQgFEG/f2pB/wFxQRpJG0H/AXEgAUHAwoCAAGotAABHDfsCAkAgAUEPRw0AQQMhAQzxAgsgAUEBaiEBIA1BAWoiDSACRw0ACyAAIBY2AgAMlQMLQc0AIRAgASINIAJGDZQDIAIgDWsgACgCACIBaiEWIA0gAWtBBWohFwNAIA0tAAAiFEEgciAUIBRBv39qQf8BcUEaSRtB/wFxIAFB0MKAgABqLQAARw36AgJAIAFBBUcNAEEEIQEM8AILIAFBAWohASANQQFqIg0gAkcNAAsgACAWNgIADJQDCwJAIAEiDSACRw0AQc4AIRAMlAMLAkACQAJAAkAgDS0AACIBQSByIAEgAUG/f2pB/wFxQRpJG0H/AXFBnX9qDhMA/QL9Av0C/QL9Av0C/QL9Av0C/QL9Av0CAf0C/QL9AgID/QILIA1BAWohAUHBACEQDP0CCyANQQFqIQFBwgAhEAz8AgsgDUEBaiEBQcMAIRAM+wILIA1BAWohAUHEACEQDPoCCwJAIAEiASACRg0AIABBjYCAgAA2AgggACABNgIEIAEhAUHFACEQDPoCC0HPACEQDJIDCyAQIQECQAJAIBAtAABBdmoOBAGoAqgCAKgCCyAQQQFqIQELQSchEAz4AgsCQCABIgEgAkcNAEHRACEQDJEDCwJAIAEtAABBIEYNACABIQEMjQELIAFBAWohASAALQAtQQFxRQ3HASABIQEMjAELIAEiFyACRw3IAUHSACEQDI8DC0HTACEQIAEiFCACRg2OAyACIBRrIAAoAgAiAWohFiAUIAFrQQFqIRcDQCAULQAAIAFB1sKAgABqLQAARw3MASABQQFGDccBIAFBAWohASAUQQFqIhQgAkcNAAsgACAWNgIADI4DCwJAIAEiASACRw0AQdUAIRAMjgMLIAEtAABBCkcNzAEgAUEBaiEBDMcBCwJAIAEiASACRw0AQdYAIRAMjQMLAkACQCABLQAAQXZqDgQAzQHNAQHNAQsgAUEBaiEBDMcBCyABQQFqIQFBygAhEAzzAgsgACABIgEgAhCugICAACIQDcsBIAEhAUHNACEQDPICCyAALQApQSJGDYUDDKYCCwJAIAEiASACRw0AQdsAIRAMigMLQQAhFEEBIRdBASEWQQAhEAJAAkACQAJAAkACQAJAAkACQCABLQAAQVBqDgrUAdMBAAECAwQFBgjVAQtBAiEQDAYLQQMhEAwFC0EEIRAMBAtBBSEQDAMLQQYhEAwCC0EHIRAMAQtBCCEQC0EAIRdBACEWQQAhFAzMAQtBCSEQQQEhFEEAIRdBACEWDMsBCwJAIAEiASACRw0AQd0AIRAMiQMLIAEtAABBLkcNzAEgAUEBaiEBDKYCCyABIgEgAkcNzAFB3wAhEAyHAwsCQCABIgEgAkYNACAAQY6AgIAANgIIIAAgATYCBCABIQFB0AAhEAzuAgtB4AAhEAyGAwtB4QAhECABIgEgAkYNhQMgAiABayAAKAIAIhRqIRYgASAUa0EDaiEXA0AgAS0AACAUQeLCgIAAai0AAEcNzQEgFEEDRg3MASAUQQFqIRQgAUEBaiIBIAJHDQALIAAgFjYCAAyFAwtB4gAhECABIgEgAkYNhAMgAiABayAAKAIAIhRqIRYgASAUa0ECaiEXA0AgAS0AACAUQebCgIAAai0AAEcNzAEgFEECRg3OASAUQQFqIRQgAUEBaiIBIAJHDQALIAAgFjYCAAyEAwtB4wAhECABIgEgAkYNgwMgAiABayAAKAIAIhRqIRYgASAUa0EDaiEXA0AgAS0AACAUQenCgIAAai0AAEcNywEgFEEDRg3OASAUQQFqIRQgAUEBaiIBIAJHDQALIAAgFjYCAAyDAwsCQCABIgEgAkcNAEHlACEQDIMDCyAAIAFBAWoiASACEKiAgIAAIhANzQEgASEBQdYAIRAM6QILAkAgASIBIAJGDQADQAJAIAEtAAAiEEEgRg0AAkACQAJAIBBBuH9qDgsAAc8BzwHPAc8BzwHPAc8BzwECzwELIAFBAWohAUHSACEQDO0CCyABQQFqIQFB0wAhEAzsAgsgAUEBaiEBQdQAIRAM6wILIAFBAWoiASACRw0AC0HkACEQDIIDC0HkACEQDIEDCwNAAkAgAS0AAEHwwoCAAGotAAAiEEEBRg0AIBBBfmoOA88B0AHRAdIBCyABQQFqIgEgAkcNAAtB5gAhEAyAAwsCQCABIgEgAkYNACABQQFqIQEMAwtB5wAhEAz/AgsDQAJAIAEtAABB8MSAgABqLQAAIhBBAUYNAAJAIBBBfmoOBNIB0wHUAQDVAQsgASEBQdcAIRAM5wILIAFBAWoiASACRw0AC0HoACEQDP4CCwJAIAEiASACRw0AQekAIRAM/gILAkAgAS0AACIQQXZqDhq6AdUB1QG8AdUB1QHVAdUB1QHVAdUB1QHVAdUB1QHVAdUB1QHVAdUB1QHVAcoB1QHVAQDTAQsgAUEBaiEBC0EGIRAM4wILA0ACQCABLQAAQfDGgIAAai0AAEEBRg0AIAEhAQyeAgsgAUEBaiIBIAJHDQALQeoAIRAM+wILAkAgASIBIAJGDQAgAUEBaiEBDAMLQesAIRAM+gILAkAgASIBIAJHDQBB7AAhEAz6AgsgAUEBaiEBDAELAkAgASIBIAJHDQBB7QAhEAz5AgsgAUEBaiEBC0EEIRAM3gILAkAgASIUIAJHDQBB7gAhEAz3AgsgFCEBAkACQAJAIBQtAABB8MiAgABqLQAAQX9qDgfUAdUB1gEAnAIBAtcBCyAUQQFqIQEMCgsgFEEBaiEBDM0BC0EAIRAgAEEANgIcIABBm5KAgAA2AhAgAEEHNgIMIAAgFEEBajYCFAz2AgsCQANAAkAgAS0AAEHwyICAAGotAAAiEEEERg0AAkACQCAQQX9qDgfSAdMB1AHZAQAEAdkBCyABIQFB2gAhEAzgAgsgAUEBaiEBQdwAIRAM3wILIAFBAWoiASACRw0AC0HvACEQDPYCCyABQQFqIQEMywELAkAgASIUIAJHDQBB8AAhEAz1AgsgFC0AAEEvRw3UASAUQQFqIQEMBgsCQCABIhQgAkcNAEHxACEQDPQCCwJAIBQtAAAiAUEvRw0AIBRBAWohAUHdACEQDNsCCyABQXZqIgRBFksN0wFBASAEdEGJgIACcUUN0wEMygILAkAgASIBIAJGDQAgAUEBaiEBQd4AIRAM2gILQfIAIRAM8gILAkAgASIUIAJHDQBB9AAhEAzyAgsgFCEBAkAgFC0AAEHwzICAAGotAABBf2oOA8kClAIA1AELQeEAIRAM2AILAkAgASIUIAJGDQADQAJAIBQtAABB8MqAgABqLQAAIgFBA0YNAAJAIAFBf2oOAssCANUBCyAUIQFB3wAhEAzaAgsgFEEBaiIUIAJHDQALQfMAIRAM8QILQfMAIRAM8AILAkAgASIBIAJGDQAgAEGPgICAADYCCCAAIAE2AgQgASEBQeAAIRAM1wILQfUAIRAM7wILAkAgASIBIAJHDQBB9gAhEAzvAgsgAEGPgICAADYCCCAAIAE2AgQgASEBC0EDIRAM1AILA0AgAS0AAEEgRw3DAiABQQFqIgEgAkcNAAtB9wAhEAzsAgsCQCABIgEgAkcNAEH4ACEQDOwCCyABLQAAQSBHDc4BIAFBAWohAQzvAQsgACABIgEgAhCsgICAACIQDc4BIAEhAQyOAgsCQCABIgQgAkcNAEH6ACEQDOoCCyAELQAAQcwARw3RASAEQQFqIQFBEyEQDM8BCwJAIAEiBCACRw0AQfsAIRAM6QILIAIgBGsgACgCACIBaiEUIAQgAWtBBWohEANAIAQtAAAgAUHwzoCAAGotAABHDdABIAFBBUYNzgEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBB+wAhEAzoAgsCQCABIgQgAkcNAEH8ACEQDOgCCwJAAkAgBC0AAEG9f2oODADRAdEB0QHRAdEB0QHRAdEB0QHRAQHRAQsgBEEBaiEBQeYAIRAMzwILIARBAWohAUHnACEQDM4CCwJAIAEiBCACRw0AQf0AIRAM5wILIAIgBGsgACgCACIBaiEUIAQgAWtBAmohEAJAA0AgBC0AACABQe3PgIAAai0AAEcNzwEgAUECRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQf0AIRAM5wILIABBADYCACAQQQFqIQFBECEQDMwBCwJAIAEiBCACRw0AQf4AIRAM5gILIAIgBGsgACgCACIBaiEUIAQgAWtBBWohEAJAA0AgBC0AACABQfbOgIAAai0AAEcNzgEgAUEFRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQf4AIRAM5gILIABBADYCACAQQQFqIQFBFiEQDMsBCwJAIAEiBCACRw0AQf8AIRAM5QILIAIgBGsgACgCACIBaiEUIAQgAWtBA2ohEAJAA0AgBC0AACABQfzOgIAAai0AAEcNzQEgAUEDRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQf8AIRAM5QILIABBADYCACAQQQFqIQFBBSEQDMoBCwJAIAEiBCACRw0AQYABIRAM5AILIAQtAABB2QBHDcsBIARBAWohAUEIIRAMyQELAkAgASIEIAJHDQBBgQEhEAzjAgsCQAJAIAQtAABBsn9qDgMAzAEBzAELIARBAWohAUHrACEQDMoCCyAEQQFqIQFB7AAhEAzJAgsCQCABIgQgAkcNAEGCASEQDOICCwJAAkAgBC0AAEG4f2oOCADLAcsBywHLAcsBywEBywELIARBAWohAUHqACEQDMkCCyAEQQFqIQFB7QAhEAzIAgsCQCABIgQgAkcNAEGDASEQDOECCyACIARrIAAoAgAiAWohECAEIAFrQQJqIRQCQANAIAQtAAAgAUGAz4CAAGotAABHDckBIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgEDYCAEGDASEQDOECC0EAIRAgAEEANgIAIBRBAWohAQzGAQsCQCABIgQgAkcNAEGEASEQDOACCyACIARrIAAoAgAiAWohFCAEIAFrQQRqIRACQANAIAQtAAAgAUGDz4CAAGotAABHDcgBIAFBBEYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGEASEQDOACCyAAQQA2AgAgEEEBaiEBQSMhEAzFAQsCQCABIgQgAkcNAEGFASEQDN8CCwJAAkAgBC0AAEG0f2oOCADIAcgByAHIAcgByAEByAELIARBAWohAUHvACEQDMYCCyAEQQFqIQFB8AAhEAzFAgsCQCABIgQgAkcNAEGGASEQDN4CCyAELQAAQcUARw3FASAEQQFqIQEMgwILAkAgASIEIAJHDQBBhwEhEAzdAgsgAiAEayAAKAIAIgFqIRQgBCABa0EDaiEQAkADQCAELQAAIAFBiM+AgABqLQAARw3FASABQQNGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBhwEhEAzdAgsgAEEANgIAIBBBAWohAUEtIRAMwgELAkAgASIEIAJHDQBBiAEhEAzcAgsgAiAEayAAKAIAIgFqIRQgBCABa0EIaiEQAkADQCAELQAAIAFB0M+AgABqLQAARw3EASABQQhGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBiAEhEAzcAgsgAEEANgIAIBBBAWohAUEpIRAMwQELAkAgASIBIAJHDQBBiQEhEAzbAgtBASEQIAEtAABB3wBHDcABIAFBAWohAQyBAgsCQCABIgQgAkcNAEGKASEQDNoCCyACIARrIAAoAgAiAWohFCAEIAFrQQFqIRADQCAELQAAIAFBjM+AgABqLQAARw3BASABQQFGDa8CIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQYoBIRAM2QILAkAgASIEIAJHDQBBiwEhEAzZAgsgAiAEayAAKAIAIgFqIRQgBCABa0ECaiEQAkADQCAELQAAIAFBjs+AgABqLQAARw3BASABQQJGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBiwEhEAzZAgsgAEEANgIAIBBBAWohAUECIRAMvgELAkAgASIEIAJHDQBBjAEhEAzYAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQAkADQCAELQAAIAFB8M+AgABqLQAARw3AASABQQFGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBjAEhEAzYAgsgAEEANgIAIBBBAWohAUEfIRAMvQELAkAgASIEIAJHDQBBjQEhEAzXAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQAkADQCAELQAAIAFB8s+AgABqLQAARw2/ASABQQFGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBjQEhEAzXAgsgAEEANgIAIBBBAWohAUEJIRAMvAELAkAgASIEIAJHDQBBjgEhEAzWAgsCQAJAIAQtAABBt39qDgcAvwG/Ab8BvwG/AQG/AQsgBEEBaiEBQfgAIRAMvQILIARBAWohAUH5ACEQDLwCCwJAIAEiBCACRw0AQY8BIRAM1QILIAIgBGsgACgCACIBaiEUIAQgAWtBBWohEAJAA0AgBC0AACABQZHPgIAAai0AAEcNvQEgAUEFRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQY8BIRAM1QILIABBADYCACAQQQFqIQFBGCEQDLoBCwJAIAEiBCACRw0AQZABIRAM1AILIAIgBGsgACgCACIBaiEUIAQgAWtBAmohEAJAA0AgBC0AACABQZfPgIAAai0AAEcNvAEgAUECRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZABIRAM1AILIABBADYCACAQQQFqIQFBFyEQDLkBCwJAIAEiBCACRw0AQZEBIRAM0wILIAIgBGsgACgCACIBaiEUIAQgAWtBBmohEAJAA0AgBC0AACABQZrPgIAAai0AAEcNuwEgAUEGRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZEBIRAM0wILIABBADYCACAQQQFqIQFBFSEQDLgBCwJAIAEiBCACRw0AQZIBIRAM0gILIAIgBGsgACgCACIBaiEUIAQgAWtBBWohEAJAA0AgBC0AACABQaHPgIAAai0AAEcNugEgAUEFRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZIBIRAM0gILIABBADYCACAQQQFqIQFBHiEQDLcBCwJAIAEiBCACRw0AQZMBIRAM0QILIAQtAABBzABHDbgBIARBAWohAUEKIRAMtgELAkAgBCACRw0AQZQBIRAM0AILAkACQCAELQAAQb9/ag4PALkBuQG5AbkBuQG5AbkBuQG5AbkBuQG5AbkBAbkBCyAEQQFqIQFB/gAhEAy3AgsgBEEBaiEBQf8AIRAMtgILAkAgBCACRw0AQZUBIRAMzwILAkACQCAELQAAQb9/ag4DALgBAbgBCyAEQQFqIQFB/QAhEAy2AgsgBEEBaiEEQYABIRAMtQILAkAgBCACRw0AQZYBIRAMzgILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQafPgIAAai0AAEcNtgEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZYBIRAMzgILIABBADYCACAQQQFqIQFBCyEQDLMBCwJAIAQgAkcNAEGXASEQDM0CCwJAAkACQAJAIAQtAABBU2oOIwC4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBAbgBuAG4AbgBuAECuAG4AbgBA7gBCyAEQQFqIQFB+wAhEAy2AgsgBEEBaiEBQfwAIRAMtQILIARBAWohBEGBASEQDLQCCyAEQQFqIQRBggEhEAyzAgsCQCAEIAJHDQBBmAEhEAzMAgsgAiAEayAAKAIAIgFqIRQgBCABa0EEaiEQAkADQCAELQAAIAFBqc+AgABqLQAARw20ASABQQRGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBmAEhEAzMAgsgAEEANgIAIBBBAWohAUEZIRAMsQELAkAgBCACRw0AQZkBIRAMywILIAIgBGsgACgCACIBaiEUIAQgAWtBBWohEAJAA0AgBC0AACABQa7PgIAAai0AAEcNswEgAUEFRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZkBIRAMywILIABBADYCACAQQQFqIQFBBiEQDLABCwJAIAQgAkcNAEGaASEQDMoCCyACIARrIAAoAgAiAWohFCAEIAFrQQFqIRACQANAIAQtAAAgAUG0z4CAAGotAABHDbIBIAFBAUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGaASEQDMoCCyAAQQA2AgAgEEEBaiEBQRwhEAyvAQsCQCAEIAJHDQBBmwEhEAzJAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQAkADQCAELQAAIAFBts+AgABqLQAARw2xASABQQFGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBmwEhEAzJAgsgAEEANgIAIBBBAWohAUEnIRAMrgELAkAgBCACRw0AQZwBIRAMyAILAkACQCAELQAAQax/ag4CAAGxAQsgBEEBaiEEQYYBIRAMrwILIARBAWohBEGHASEQDK4CCwJAIAQgAkcNAEGdASEQDMcCCyACIARrIAAoAgAiAWohFCAEIAFrQQFqIRACQANAIAQtAAAgAUG4z4CAAGotAABHDa8BIAFBAUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGdASEQDMcCCyAAQQA2AgAgEEEBaiEBQSYhEAysAQsCQCAEIAJHDQBBngEhEAzGAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQAkADQCAELQAAIAFBus+AgABqLQAARw2uASABQQFGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBngEhEAzGAgsgAEEANgIAIBBBAWohAUEDIRAMqwELAkAgBCACRw0AQZ8BIRAMxQILIAIgBGsgACgCACIBaiEUIAQgAWtBAmohEAJAA0AgBC0AACABQe3PgIAAai0AAEcNrQEgAUECRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZ8BIRAMxQILIABBADYCACAQQQFqIQFBDCEQDKoBCwJAIAQgAkcNAEGgASEQDMQCCyACIARrIAAoAgAiAWohFCAEIAFrQQNqIRACQANAIAQtAAAgAUG8z4CAAGotAABHDawBIAFBA0YNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGgASEQDMQCCyAAQQA2AgAgEEEBaiEBQQ0hEAypAQsCQCAEIAJHDQBBoQEhEAzDAgsCQAJAIAQtAABBun9qDgsArAGsAawBrAGsAawBrAGsAawBAawBCyAEQQFqIQRBiwEhEAyqAgsgBEEBaiEEQYwBIRAMqQILAkAgBCACRw0AQaIBIRAMwgILIAQtAABB0ABHDakBIARBAWohBAzpAQsCQCAEIAJHDQBBowEhEAzBAgsCQAJAIAQtAABBt39qDgcBqgGqAaoBqgGqAQCqAQsgBEEBaiEEQY4BIRAMqAILIARBAWohAUEiIRAMpgELAkAgBCACRw0AQaQBIRAMwAILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQcDPgIAAai0AAEcNqAEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQaQBIRAMwAILIABBADYCACAQQQFqIQFBHSEQDKUBCwJAIAQgAkcNAEGlASEQDL8CCwJAAkAgBC0AAEGuf2oOAwCoAQGoAQsgBEEBaiEEQZABIRAMpgILIARBAWohAUEEIRAMpAELAkAgBCACRw0AQaYBIRAMvgILAkACQAJAAkACQCAELQAAQb9/ag4VAKoBqgGqAaoBqgGqAaoBqgGqAaoBAaoBqgECqgGqAQOqAaoBBKoBCyAEQQFqIQRBiAEhEAyoAgsgBEEBaiEEQYkBIRAMpwILIARBAWohBEGKASEQDKYCCyAEQQFqIQRBjwEhEAylAgsgBEEBaiEEQZEBIRAMpAILAkAgBCACRw0AQacBIRAMvQILIAIgBGsgACgCACIBaiEUIAQgAWtBAmohEAJAA0AgBC0AACABQe3PgIAAai0AAEcNpQEgAUECRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQacBIRAMvQILIABBADYCACAQQQFqIQFBESEQDKIBCwJAIAQgAkcNAEGoASEQDLwCCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUHCz4CAAGotAABHDaQBIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGoASEQDLwCCyAAQQA2AgAgEEEBaiEBQSwhEAyhAQsCQCAEIAJHDQBBqQEhEAy7AgsgAiAEayAAKAIAIgFqIRQgBCABa0EEaiEQAkADQCAELQAAIAFBxc+AgABqLQAARw2jASABQQRGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBqQEhEAy7AgsgAEEANgIAIBBBAWohAUErIRAMoAELAkAgBCACRw0AQaoBIRAMugILIAIgBGsgACgCACIBaiEUIAQgAWtBAmohEAJAA0AgBC0AACABQcrPgIAAai0AAEcNogEgAUECRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQaoBIRAMugILIABBADYCACAQQQFqIQFBFCEQDJ8BCwJAIAQgAkcNAEGrASEQDLkCCwJAAkACQAJAIAQtAABBvn9qDg8AAQKkAaQBpAGkAaQBpAGkAaQBpAGkAaQBA6QBCyAEQQFqIQRBkwEhEAyiAgsgBEEBaiEEQZQBIRAMoQILIARBAWohBEGVASEQDKACCyAEQQFqIQRBlgEhEAyfAgsCQCAEIAJHDQBBrAEhEAy4AgsgBC0AAEHFAEcNnwEgBEEBaiEEDOABCwJAIAQgAkcNAEGtASEQDLcCCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUHNz4CAAGotAABHDZ8BIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGtASEQDLcCCyAAQQA2AgAgEEEBaiEBQQ4hEAycAQsCQCAEIAJHDQBBrgEhEAy2AgsgBC0AAEHQAEcNnQEgBEEBaiEBQSUhEAybAQsCQCAEIAJHDQBBrwEhEAy1AgsgAiAEayAAKAIAIgFqIRQgBCABa0EIaiEQAkADQCAELQAAIAFB0M+AgABqLQAARw2dASABQQhGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBrwEhEAy1AgsgAEEANgIAIBBBAWohAUEqIRAMmgELAkAgBCACRw0AQbABIRAMtAILAkACQCAELQAAQat/ag4LAJ0BnQGdAZ0BnQGdAZ0BnQGdAQGdAQsgBEEBaiEEQZoBIRAMmwILIARBAWohBEGbASEQDJoCCwJAIAQgAkcNAEGxASEQDLMCCwJAAkAgBC0AAEG/f2oOFACcAZwBnAGcAZwBnAGcAZwBnAGcAZwBnAGcAZwBnAGcAZwBnAEBnAELIARBAWohBEGZASEQDJoCCyAEQQFqIQRBnAEhEAyZAgsCQCAEIAJHDQBBsgEhEAyyAgsgAiAEayAAKAIAIgFqIRQgBCABa0EDaiEQAkADQCAELQAAIAFB2c+AgABqLQAARw2aASABQQNGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBsgEhEAyyAgsgAEEANgIAIBBBAWohAUEhIRAMlwELAkAgBCACRw0AQbMBIRAMsQILIAIgBGsgACgCACIBaiEUIAQgAWtBBmohEAJAA0AgBC0AACABQd3PgIAAai0AAEcNmQEgAUEGRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQbMBIRAMsQILIABBADYCACAQQQFqIQFBGiEQDJYBCwJAIAQgAkcNAEG0ASEQDLACCwJAAkACQCAELQAAQbt/ag4RAJoBmgGaAZoBmgGaAZoBmgGaAQGaAZoBmgGaAZoBApoBCyAEQQFqIQRBnQEhEAyYAgsgBEEBaiEEQZ4BIRAMlwILIARBAWohBEGfASEQDJYCCwJAIAQgAkcNAEG1ASEQDK8CCyACIARrIAAoAgAiAWohFCAEIAFrQQVqIRACQANAIAQtAAAgAUHkz4CAAGotAABHDZcBIAFBBUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEG1ASEQDK8CCyAAQQA2AgAgEEEBaiEBQSghEAyUAQsCQCAEIAJHDQBBtgEhEAyuAgsgAiAEayAAKAIAIgFqIRQgBCABa0ECaiEQAkADQCAELQAAIAFB6s+AgABqLQAARw2WASABQQJGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBtgEhEAyuAgsgAEEANgIAIBBBAWohAUEHIRAMkwELAkAgBCACRw0AQbcBIRAMrQILAkACQCAELQAAQbt/ag4OAJYBlgGWAZYBlgGWAZYBlgGWAZYBlgGWAQGWAQsgBEEBaiEEQaEBIRAMlAILIARBAWohBEGiASEQDJMCCwJAIAQgAkcNAEG4ASEQDKwCCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUHtz4CAAGotAABHDZQBIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEG4ASEQDKwCCyAAQQA2AgAgEEEBaiEBQRIhEAyRAQsCQCAEIAJHDQBBuQEhEAyrAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQAkADQCAELQAAIAFB8M+AgABqLQAARw2TASABQQFGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBuQEhEAyrAgsgAEEANgIAIBBBAWohAUEgIRAMkAELAkAgBCACRw0AQboBIRAMqgILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQfLPgIAAai0AAEcNkgEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQboBIRAMqgILIABBADYCACAQQQFqIQFBDyEQDI8BCwJAIAQgAkcNAEG7ASEQDKkCCwJAAkAgBC0AAEG3f2oOBwCSAZIBkgGSAZIBAZIBCyAEQQFqIQRBpQEhEAyQAgsgBEEBaiEEQaYBIRAMjwILAkAgBCACRw0AQbwBIRAMqAILIAIgBGsgACgCACIBaiEUIAQgAWtBB2ohEAJAA0AgBC0AACABQfTPgIAAai0AAEcNkAEgAUEHRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQbwBIRAMqAILIABBADYCACAQQQFqIQFBGyEQDI0BCwJAIAQgAkcNAEG9ASEQDKcCCwJAAkACQCAELQAAQb5/ag4SAJEBkQGRAZEBkQGRAZEBkQGRAQGRAZEBkQGRAZEBkQECkQELIARBAWohBEGkASEQDI8CCyAEQQFqIQRBpwEhEAyOAgsgBEEBaiEEQagBIRAMjQILAkAgBCACRw0AQb4BIRAMpgILIAQtAABBzgBHDY0BIARBAWohBAzPAQsCQCAEIAJHDQBBvwEhEAylAgsCQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAELQAAQb9/ag4VAAECA5wBBAUGnAGcAZwBBwgJCgucAQwNDg+cAQsgBEEBaiEBQegAIRAMmgILIARBAWohAUHpACEQDJkCCyAEQQFqIQFB7gAhEAyYAgsgBEEBaiEBQfIAIRAMlwILIARBAWohAUHzACEQDJYCCyAEQQFqIQFB9gAhEAyVAgsgBEEBaiEBQfcAIRAMlAILIARBAWohAUH6ACEQDJMCCyAEQQFqIQRBgwEhEAySAgsgBEEBaiEEQYQBIRAMkQILIARBAWohBEGFASEQDJACCyAEQQFqIQRBkgEhEAyPAgsgBEEBaiEEQZgBIRAMjgILIARBAWohBEGgASEQDI0CCyAEQQFqIQRBowEhEAyMAgsgBEEBaiEEQaoBIRAMiwILAkAgBCACRg0AIABBkICAgAA2AgggACAENgIEQasBIRAMiwILQcABIRAMowILIAAgBSACEKqAgIAAIgENiwEgBSEBDFwLAkAgBiACRg0AIAZBAWohBQyNAQtBwgEhEAyhAgsDQAJAIBAtAABBdmoOBIwBAACPAQALIBBBAWoiECACRw0AC0HDASEQDKACCwJAIAcgAkYNACAAQZGAgIAANgIIIAAgBzYCBCAHIQFBASEQDIcCC0HEASEQDJ8CCwJAIAcgAkcNAEHFASEQDJ8CCwJAAkAgBy0AAEF2ag4EAc4BzgEAzgELIAdBAWohBgyNAQsgB0EBaiEFDIkBCwJAIAcgAkcNAEHGASEQDJ4CCwJAAkAgBy0AAEF2ag4XAY8BjwEBjwGPAY8BjwGPAY8BjwGPAY8BjwGPAY8BjwGPAY8BjwGPAY8BAI8BCyAHQQFqIQcLQbABIRAMhAILAkAgCCACRw0AQcgBIRAMnQILIAgtAABBIEcNjQEgAEEAOwEyIAhBAWohAUGzASEQDIMCCyABIRcCQANAIBciByACRg0BIActAABBUGpB/wFxIhBBCk8NzAECQCAALwEyIhRBmTNLDQAgACAUQQpsIhQ7ATIgEEH//wNzIBRB/v8DcUkNACAHQQFqIRcgACAUIBBqIhA7ATIgEEH//wNxQegHSQ0BCwtBACEQIABBADYCHCAAQcGJgIAANgIQIABBDTYCDCAAIAdBAWo2AhQMnAILQccBIRAMmwILIAAgCCACEK6AgIAAIhBFDcoBIBBBFUcNjAEgAEHIATYCHCAAIAg2AhQgAEHJl4CAADYCECAAQRU2AgxBACEQDJoCCwJAIAkgAkcNAEHMASEQDJoCC0EAIRRBASEXQQEhFkEAIRACQAJAAkACQAJAAkACQAJAAkAgCS0AAEFQag4KlgGVAQABAgMEBQYIlwELQQIhEAwGC0EDIRAMBQtBBCEQDAQLQQUhEAwDC0EGIRAMAgtBByEQDAELQQghEAtBACEXQQAhFkEAIRQMjgELQQkhEEEBIRRBACEXQQAhFgyNAQsCQCAKIAJHDQBBzgEhEAyZAgsgCi0AAEEuRw2OASAKQQFqIQkMygELIAsgAkcNjgFB0AEhEAyXAgsCQCALIAJGDQAgAEGOgICAADYCCCAAIAs2AgRBtwEhEAz+AQtB0QEhEAyWAgsCQCAEIAJHDQBB0gEhEAyWAgsgAiAEayAAKAIAIhBqIRQgBCAQa0EEaiELA0AgBC0AACAQQfzPgIAAai0AAEcNjgEgEEEERg3pASAQQQFqIRAgBEEBaiIEIAJHDQALIAAgFDYCAEHSASEQDJUCCyAAIAwgAhCsgICAACIBDY0BIAwhAQy4AQsCQCAEIAJHDQBB1AEhEAyUAgsgAiAEayAAKAIAIhBqIRQgBCAQa0EBaiEMA0AgBC0AACAQQYHQgIAAai0AAEcNjwEgEEEBRg2OASAQQQFqIRAgBEEBaiIEIAJHDQALIAAgFDYCAEHUASEQDJMCCwJAIAQgAkcNAEHWASEQDJMCCyACIARrIAAoAgAiEGohFCAEIBBrQQJqIQsDQCAELQAAIBBBg9CAgABqLQAARw2OASAQQQJGDZABIBBBAWohECAEQQFqIgQgAkcNAAsgACAUNgIAQdYBIRAMkgILAkAgBCACRw0AQdcBIRAMkgILAkACQCAELQAAQbt/ag4QAI8BjwGPAY8BjwGPAY8BjwGPAY8BjwGPAY8BjwEBjwELIARBAWohBEG7ASEQDPkBCyAEQQFqIQRBvAEhEAz4AQsCQCAEIAJHDQBB2AEhEAyRAgsgBC0AAEHIAEcNjAEgBEEBaiEEDMQBCwJAIAQgAkYNACAAQZCAgIAANgIIIAAgBDYCBEG+ASEQDPcBC0HZASEQDI8CCwJAIAQgAkcNAEHaASEQDI8CCyAELQAAQcgARg3DASAAQQE6ACgMuQELIABBAjoALyAAIAQgAhCmgICAACIQDY0BQcIBIRAM9AELIAAtAChBf2oOArcBuQG4AQsDQAJAIAQtAABBdmoOBACOAY4BAI4BCyAEQQFqIgQgAkcNAAtB3QEhEAyLAgsgAEEAOgAvIAAtAC1BBHFFDYQCCyAAQQA6AC8gAEEBOgA0IAEhAQyMAQsgEEEVRg3aASAAQQA2AhwgACABNgIUIABBp46AgAA2AhAgAEESNgIMQQAhEAyIAgsCQCAAIBAgAhC0gICAACIEDQAgECEBDIECCwJAIARBFUcNACAAQQM2AhwgACAQNgIUIABBsJiAgAA2AhAgAEEVNgIMQQAhEAyIAgsgAEEANgIcIAAgEDYCFCAAQaeOgIAANgIQIABBEjYCDEEAIRAMhwILIBBBFUYN1gEgAEEANgIcIAAgATYCFCAAQdqNgIAANgIQIABBFDYCDEEAIRAMhgILIAAoAgQhFyAAQQA2AgQgECARp2oiFiEBIAAgFyAQIBYgFBsiEBC1gICAACIURQ2NASAAQQc2AhwgACAQNgIUIAAgFDYCDEEAIRAMhQILIAAgAC8BMEGAAXI7ATAgASEBC0EqIRAM6gELIBBBFUYN0QEgAEEANgIcIAAgATYCFCAAQYOMgIAANgIQIABBEzYCDEEAIRAMggILIBBBFUYNzwEgAEEANgIcIAAgATYCFCAAQZqPgIAANgIQIABBIjYCDEEAIRAMgQILIAAoAgQhECAAQQA2AgQCQCAAIBAgARC3gICAACIQDQAgAUEBaiEBDI0BCyAAQQw2AhwgACAQNgIMIAAgAUEBajYCFEEAIRAMgAILIBBBFUYNzAEgAEEANgIcIAAgATYCFCAAQZqPgIAANgIQIABBIjYCDEEAIRAM/wELIAAoAgQhECAAQQA2AgQCQCAAIBAgARC3gICAACIQDQAgAUEBaiEBDIwBCyAAQQ02AhwgACAQNgIMIAAgAUEBajYCFEEAIRAM/gELIBBBFUYNyQEgAEEANgIcIAAgATYCFCAAQcaMgIAANgIQIABBIzYCDEEAIRAM/QELIAAoAgQhECAAQQA2AgQCQCAAIBAgARC5gICAACIQDQAgAUEBaiEBDIsBCyAAQQ42AhwgACAQNgIMIAAgAUEBajYCFEEAIRAM/AELIABBADYCHCAAIAE2AhQgAEHAlYCAADYCECAAQQI2AgxBACEQDPsBCyAQQRVGDcUBIABBADYCHCAAIAE2AhQgAEHGjICAADYCECAAQSM2AgxBACEQDPoBCyAAQRA2AhwgACABNgIUIAAgEDYCDEEAIRAM+QELIAAoAgQhBCAAQQA2AgQCQCAAIAQgARC5gICAACIEDQAgAUEBaiEBDPEBCyAAQRE2AhwgACAENgIMIAAgAUEBajYCFEEAIRAM+AELIBBBFUYNwQEgAEEANgIcIAAgATYCFCAAQcaMgIAANgIQIABBIzYCDEEAIRAM9wELIAAoAgQhECAAQQA2AgQCQCAAIBAgARC5gICAACIQDQAgAUEBaiEBDIgBCyAAQRM2AhwgACAQNgIMIAAgAUEBajYCFEEAIRAM9gELIAAoAgQhBCAAQQA2AgQCQCAAIAQgARC5gICAACIEDQAgAUEBaiEBDO0BCyAAQRQ2AhwgACAENgIMIAAgAUEBajYCFEEAIRAM9QELIBBBFUYNvQEgAEEANgIcIAAgATYCFCAAQZqPgIAANgIQIABBIjYCDEEAIRAM9AELIAAoAgQhECAAQQA2AgQCQCAAIBAgARC3gICAACIQDQAgAUEBaiEBDIYBCyAAQRY2AhwgACAQNgIMIAAgAUEBajYCFEEAIRAM8wELIAAoAgQhBCAAQQA2AgQCQCAAIAQgARC3gICAACIEDQAgAUEBaiEBDOkBCyAAQRc2AhwgACAENgIMIAAgAUEBajYCFEEAIRAM8gELIABBADYCHCAAIAE2AhQgAEHNk4CAADYCECAAQQw2AgxBACEQDPEBC0IBIRELIBBBAWohAQJAIAApAyAiEkL//////////w9WDQAgACASQgSGIBGENwMgIAEhAQyEAQsgAEEANgIcIAAgATYCFCAAQa2JgIAANgIQIABBDDYCDEEAIRAM7wELIABBADYCHCAAIBA2AhQgAEHNk4CAADYCECAAQQw2AgxBACEQDO4BCyAAKAIEIRcgAEEANgIEIBAgEadqIhYhASAAIBcgECAWIBQbIhAQtYCAgAAiFEUNcyAAQQU2AhwgACAQNgIUIAAgFDYCDEEAIRAM7QELIABBADYCHCAAIBA2AhQgAEGqnICAADYCECAAQQ82AgxBACEQDOwBCyAAIBAgAhC0gICAACIBDQEgECEBC0EOIRAM0QELAkAgAUEVRw0AIABBAjYCHCAAIBA2AhQgAEGwmICAADYCECAAQRU2AgxBACEQDOoBCyAAQQA2AhwgACAQNgIUIABBp46AgAA2AhAgAEESNgIMQQAhEAzpAQsgAUEBaiEQAkAgAC8BMCIBQYABcUUNAAJAIAAgECACELuAgIAAIgENACAQIQEMcAsgAUEVRw26ASAAQQU2AhwgACAQNgIUIABB+ZeAgAA2AhAgAEEVNgIMQQAhEAzpAQsCQCABQaAEcUGgBEcNACAALQAtQQJxDQAgAEEANgIcIAAgEDYCFCAAQZaTgIAANgIQIABBBDYCDEEAIRAM6QELIAAgECACEL2AgIAAGiAQIQECQAJAAkACQAJAIAAgECACELOAgIAADhYCAQAEBAQEBAQEBAQEBAQEBAQEBAQDBAsgAEEBOgAuCyAAIAAvATBBwAByOwEwIBAhAQtBJiEQDNEBCyAAQSM2AhwgACAQNgIUIABBpZaAgAA2AhAgAEEVNgIMQQAhEAzpAQsgAEEANgIcIAAgEDYCFCAAQdWLgIAANgIQIABBETYCDEEAIRAM6AELIAAtAC1BAXFFDQFBwwEhEAzOAQsCQCANIAJGDQADQAJAIA0tAABBIEYNACANIQEMxAELIA1BAWoiDSACRw0AC0ElIRAM5wELQSUhEAzmAQsgACgCBCEEIABBADYCBCAAIAQgDRCvgICAACIERQ2tASAAQSY2AhwgACAENgIMIAAgDUEBajYCFEEAIRAM5QELIBBBFUYNqwEgAEEANgIcIAAgATYCFCAAQf2NgIAANgIQIABBHTYCDEEAIRAM5AELIABBJzYCHCAAIAE2AhQgACAQNgIMQQAhEAzjAQsgECEBQQEhFAJAAkACQAJAAkACQAJAIAAtACxBfmoOBwYFBQMBAgAFCyAAIAAvATBBCHI7ATAMAwtBAiEUDAELQQQhFAsgAEEBOgAsIAAgAC8BMCAUcjsBMAsgECEBC0ErIRAMygELIABBADYCHCAAIBA2AhQgAEGrkoCAADYCECAAQQs2AgxBACEQDOIBCyAAQQA2AhwgACABNgIUIABB4Y+AgAA2AhAgAEEKNgIMQQAhEAzhAQsgAEEAOgAsIBAhAQy9AQsgECEBQQEhFAJAAkACQAJAAkAgAC0ALEF7ag4EAwECAAULIAAgAC8BMEEIcjsBMAwDC0ECIRQMAQtBBCEUCyAAQQE6ACwgACAALwEwIBRyOwEwCyAQIQELQSkhEAzFAQsgAEEANgIcIAAgATYCFCAAQfCUgIAANgIQIABBAzYCDEEAIRAM3QELAkAgDi0AAEENRw0AIAAoAgQhASAAQQA2AgQCQCAAIAEgDhCxgICAACIBDQAgDkEBaiEBDHULIABBLDYCHCAAIAE2AgwgACAOQQFqNgIUQQAhEAzdAQsgAC0ALUEBcUUNAUHEASEQDMMBCwJAIA4gAkcNAEEtIRAM3AELAkACQANAAkAgDi0AAEF2ag4EAgAAAwALIA5BAWoiDiACRw0AC0EtIRAM3QELIAAoAgQhASAAQQA2AgQCQCAAIAEgDhCxgICAACIBDQAgDiEBDHQLIABBLDYCHCAAIA42AhQgACABNgIMQQAhEAzcAQsgACgCBCEBIABBADYCBAJAIAAgASAOELGAgIAAIgENACAOQQFqIQEMcwsgAEEsNgIcIAAgATYCDCAAIA5BAWo2AhRBACEQDNsBCyAAKAIEIQQgAEEANgIEIAAgBCAOELGAgIAAIgQNoAEgDiEBDM4BCyAQQSxHDQEgAUEBaiEQQQEhAQJAAkACQAJAAkAgAC0ALEF7ag4EAwECBAALIBAhAQwEC0ECIQEMAQtBBCEBCyAAQQE6ACwgACAALwEwIAFyOwEwIBAhAQwBCyAAIAAvATBBCHI7ATAgECEBC0E5IRAMvwELIABBADoALCABIQELQTQhEAy9AQsgACAALwEwQSByOwEwIAEhAQwCCyAAKAIEIQQgAEEANgIEAkAgACAEIAEQsYCAgAAiBA0AIAEhAQzHAQsgAEE3NgIcIAAgATYCFCAAIAQ2AgxBACEQDNQBCyAAQQg6ACwgASEBC0EwIRAMuQELAkAgAC0AKEEBRg0AIAEhAQwECyAALQAtQQhxRQ2TASABIQEMAwsgAC0AMEEgcQ2UAUHFASEQDLcBCwJAIA8gAkYNAAJAA0ACQCAPLQAAQVBqIgFB/wFxQQpJDQAgDyEBQTUhEAy6AQsgACkDICIRQpmz5syZs+bMGVYNASAAIBFCCn4iETcDICARIAGtQv8BgyISQn+FVg0BIAAgESASfDcDICAPQQFqIg8gAkcNAAtBOSEQDNEBCyAAKAIEIQIgAEEANgIEIAAgAiAPQQFqIgQQsYCAgAAiAg2VASAEIQEMwwELQTkhEAzPAQsCQCAALwEwIgFBCHFFDQAgAC0AKEEBRw0AIAAtAC1BCHFFDZABCyAAIAFB9/sDcUGABHI7ATAgDyEBC0E3IRAMtAELIAAgAC8BMEEQcjsBMAyrAQsgEEEVRg2LASAAQQA2AhwgACABNgIUIABB8I6AgAA2AhAgAEEcNgIMQQAhEAzLAQsgAEHDADYCHCAAIAE2AgwgACANQQFqNgIUQQAhEAzKAQsCQCABLQAAQTpHDQAgACgCBCEQIABBADYCBAJAIAAgECABEK+AgIAAIhANACABQQFqIQEMYwsgAEHDADYCHCAAIBA2AgwgACABQQFqNgIUQQAhEAzKAQsgAEEANgIcIAAgATYCFCAAQbGRgIAANgIQIABBCjYCDEEAIRAMyQELIABBADYCHCAAIAE2AhQgAEGgmYCAADYCECAAQR42AgxBACEQDMgBCyAAQQA2AgALIABBgBI7ASogACAXQQFqIgEgAhCogICAACIQDQEgASEBC0HHACEQDKwBCyAQQRVHDYMBIABB0QA2AhwgACABNgIUIABB45eAgAA2AhAgAEEVNgIMQQAhEAzEAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMXgsgAEHSADYCHCAAIAE2AhQgACAQNgIMQQAhEAzDAQsgAEEANgIcIAAgFDYCFCAAQcGogIAANgIQIABBBzYCDCAAQQA2AgBBACEQDMIBCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxdCyAAQdMANgIcIAAgATYCFCAAIBA2AgxBACEQDMEBC0EAIRAgAEEANgIcIAAgATYCFCAAQYCRgIAANgIQIABBCTYCDAzAAQsgEEEVRg19IABBADYCHCAAIAE2AhQgAEGUjYCAADYCECAAQSE2AgxBACEQDL8BC0EBIRZBACEXQQAhFEEBIRALIAAgEDoAKyABQQFqIQECQAJAIAAtAC1BEHENAAJAAkACQCAALQAqDgMBAAIECyAWRQ0DDAILIBQNAQwCCyAXRQ0BCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQrYCAgAAiEA0AIAEhAQxcCyAAQdgANgIcIAAgATYCFCAAIBA2AgxBACEQDL4BCyAAKAIEIQQgAEEANgIEAkAgACAEIAEQrYCAgAAiBA0AIAEhAQytAQsgAEHZADYCHCAAIAE2AhQgACAENgIMQQAhEAy9AQsgACgCBCEEIABBADYCBAJAIAAgBCABEK2AgIAAIgQNACABIQEMqwELIABB2gA2AhwgACABNgIUIAAgBDYCDEEAIRAMvAELIAAoAgQhBCAAQQA2AgQCQCAAIAQgARCtgICAACIEDQAgASEBDKkBCyAAQdwANgIcIAAgATYCFCAAIAQ2AgxBACEQDLsBCwJAIAEtAABBUGoiEEH/AXFBCk8NACAAIBA6ACogAUEBaiEBQc8AIRAMogELIAAoAgQhBCAAQQA2AgQCQCAAIAQgARCtgICAACIEDQAgASEBDKcBCyAAQd4ANgIcIAAgATYCFCAAIAQ2AgxBACEQDLoBCyAAQQA2AgAgF0EBaiEBAkAgAC0AKUEjTw0AIAEhAQxZCyAAQQA2AhwgACABNgIUIABB04mAgAA2AhAgAEEINgIMQQAhEAy5AQsgAEEANgIAC0EAIRAgAEEANgIcIAAgATYCFCAAQZCzgIAANgIQIABBCDYCDAy3AQsgAEEANgIAIBdBAWohAQJAIAAtAClBIUcNACABIQEMVgsgAEEANgIcIAAgATYCFCAAQZuKgIAANgIQIABBCDYCDEEAIRAMtgELIABBADYCACAXQQFqIQECQCAALQApIhBBXWpBC08NACABIQEMVQsCQCAQQQZLDQBBASAQdEHKAHFFDQAgASEBDFULQQAhECAAQQA2AhwgACABNgIUIABB94mAgAA2AhAgAEEINgIMDLUBCyAQQRVGDXEgAEEANgIcIAAgATYCFCAAQbmNgIAANgIQIABBGjYCDEEAIRAMtAELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDFQLIABB5QA2AhwgACABNgIUIAAgEDYCDEEAIRAMswELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDE0LIABB0gA2AhwgACABNgIUIAAgEDYCDEEAIRAMsgELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDE0LIABB0wA2AhwgACABNgIUIAAgEDYCDEEAIRAMsQELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDFELIABB5QA2AhwgACABNgIUIAAgEDYCDEEAIRAMsAELIABBADYCHCAAIAE2AhQgAEHGioCAADYCECAAQQc2AgxBACEQDK8BCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxJCyAAQdIANgIcIAAgATYCFCAAIBA2AgxBACEQDK4BCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxJCyAAQdMANgIcIAAgATYCFCAAIBA2AgxBACEQDK0BCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxNCyAAQeUANgIcIAAgATYCFCAAIBA2AgxBACEQDKwBCyAAQQA2AhwgACABNgIUIABB3IiAgAA2AhAgAEEHNgIMQQAhEAyrAQsgEEE/Rw0BIAFBAWohAQtBBSEQDJABC0EAIRAgAEEANgIcIAAgATYCFCAAQf2SgIAANgIQIABBBzYCDAyoAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMQgsgAEHSADYCHCAAIAE2AhQgACAQNgIMQQAhEAynAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMQgsgAEHTADYCHCAAIAE2AhQgACAQNgIMQQAhEAymAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMRgsgAEHlADYCHCAAIAE2AhQgACAQNgIMQQAhEAylAQsgACgCBCEBIABBADYCBAJAIAAgASAUEKeAgIAAIgENACAUIQEMPwsgAEHSADYCHCAAIBQ2AhQgACABNgIMQQAhEAykAQsgACgCBCEBIABBADYCBAJAIAAgASAUEKeAgIAAIgENACAUIQEMPwsgAEHTADYCHCAAIBQ2AhQgACABNgIMQQAhEAyjAQsgACgCBCEBIABBADYCBAJAIAAgASAUEKeAgIAAIgENACAUIQEMQwsgAEHlADYCHCAAIBQ2AhQgACABNgIMQQAhEAyiAQsgAEEANgIcIAAgFDYCFCAAQcOPgIAANgIQIABBBzYCDEEAIRAMoQELIABBADYCHCAAIAE2AhQgAEHDj4CAADYCECAAQQc2AgxBACEQDKABC0EAIRAgAEEANgIcIAAgFDYCFCAAQYycgIAANgIQIABBBzYCDAyfAQsgAEEANgIcIAAgFDYCFCAAQYycgIAANgIQIABBBzYCDEEAIRAMngELIABBADYCHCAAIBQ2AhQgAEH+kYCAADYCECAAQQc2AgxBACEQDJ0BCyAAQQA2AhwgACABNgIUIABBjpuAgAA2AhAgAEEGNgIMQQAhEAycAQsgEEEVRg1XIABBADYCHCAAIAE2AhQgAEHMjoCAADYCECAAQSA2AgxBACEQDJsBCyAAQQA2AgAgEEEBaiEBQSQhEAsgACAQOgApIAAoAgQhECAAQQA2AgQgACAQIAEQq4CAgAAiEA1UIAEhAQw+CyAAQQA2AgALQQAhECAAQQA2AhwgACAENgIUIABB8ZuAgAA2AhAgAEEGNgIMDJcBCyABQRVGDVAgAEEANgIcIAAgBTYCFCAAQfCMgIAANgIQIABBGzYCDEEAIRAMlgELIAAoAgQhBSAAQQA2AgQgACAFIBAQqYCAgAAiBQ0BIBBBAWohBQtBrQEhEAx7CyAAQcEBNgIcIAAgBTYCDCAAIBBBAWo2AhRBACEQDJMBCyAAKAIEIQYgAEEANgIEIAAgBiAQEKmAgIAAIgYNASAQQQFqIQYLQa4BIRAMeAsgAEHCATYCHCAAIAY2AgwgACAQQQFqNgIUQQAhEAyQAQsgAEEANgIcIAAgBzYCFCAAQZeLgIAANgIQIABBDTYCDEEAIRAMjwELIABBADYCHCAAIAg2AhQgAEHjkICAADYCECAAQQk2AgxBACEQDI4BCyAAQQA2AhwgACAINgIUIABBlI2AgAA2AhAgAEEhNgIMQQAhEAyNAQtBASEWQQAhF0EAIRRBASEQCyAAIBA6ACsgCUEBaiEIAkACQCAALQAtQRBxDQACQAJAAkAgAC0AKg4DAQACBAsgFkUNAwwCCyAUDQEMAgsgF0UNAQsgACgCBCEQIABBADYCBCAAIBAgCBCtgICAACIQRQ09IABByQE2AhwgACAINgIUIAAgEDYCDEEAIRAMjAELIAAoAgQhBCAAQQA2AgQgACAEIAgQrYCAgAAiBEUNdiAAQcoBNgIcIAAgCDYCFCAAIAQ2AgxBACEQDIsBCyAAKAIEIQQgAEEANgIEIAAgBCAJEK2AgIAAIgRFDXQgAEHLATYCHCAAIAk2AhQgACAENgIMQQAhEAyKAQsgACgCBCEEIABBADYCBCAAIAQgChCtgICAACIERQ1yIABBzQE2AhwgACAKNgIUIAAgBDYCDEEAIRAMiQELAkAgCy0AAEFQaiIQQf8BcUEKTw0AIAAgEDoAKiALQQFqIQpBtgEhEAxwCyAAKAIEIQQgAEEANgIEIAAgBCALEK2AgIAAIgRFDXAgAEHPATYCHCAAIAs2AhQgACAENgIMQQAhEAyIAQsgAEEANgIcIAAgBDYCFCAAQZCzgIAANgIQIABBCDYCDCAAQQA2AgBBACEQDIcBCyABQRVGDT8gAEEANgIcIAAgDDYCFCAAQcyOgIAANgIQIABBIDYCDEEAIRAMhgELIABBgQQ7ASggACgCBCEQIABCADcDACAAIBAgDEEBaiIMEKuAgIAAIhBFDTggAEHTATYCHCAAIAw2AhQgACAQNgIMQQAhEAyFAQsgAEEANgIAC0EAIRAgAEEANgIcIAAgBDYCFCAAQdibgIAANgIQIABBCDYCDAyDAQsgACgCBCEQIABCADcDACAAIBAgC0EBaiILEKuAgIAAIhANAUHGASEQDGkLIABBAjoAKAxVCyAAQdUBNgIcIAAgCzYCFCAAIBA2AgxBACEQDIABCyAQQRVGDTcgAEEANgIcIAAgBDYCFCAAQaSMgIAANgIQIABBEDYCDEEAIRAMfwsgAC0ANEEBRw00IAAgBCACELyAgIAAIhBFDTQgEEEVRw01IABB3AE2AhwgACAENgIUIABB1ZaAgAA2AhAgAEEVNgIMQQAhEAx+C0EAIRAgAEEANgIcIABBr4uAgAA2AhAgAEECNgIMIAAgFEEBajYCFAx9C0EAIRAMYwtBAiEQDGILQQ0hEAxhC0EPIRAMYAtBJSEQDF8LQRMhEAxeC0EVIRAMXQtBFiEQDFwLQRchEAxbC0EYIRAMWgtBGSEQDFkLQRohEAxYC0EbIRAMVwtBHCEQDFYLQR0hEAxVC0EfIRAMVAtBISEQDFMLQSMhEAxSC0HGACEQDFELQS4hEAxQC0EvIRAMTwtBOyEQDE4LQT0hEAxNC0HIACEQDEwLQckAIRAMSwtBywAhEAxKC0HMACEQDEkLQc4AIRAMSAtB0QAhEAxHC0HVACEQDEYLQdgAIRAMRQtB2QAhEAxEC0HbACEQDEMLQeQAIRAMQgtB5QAhEAxBC0HxACEQDEALQfQAIRAMPwtBjQEhEAw+C0GXASEQDD0LQakBIRAMPAtBrAEhEAw7C0HAASEQDDoLQbkBIRAMOQtBrwEhEAw4C0GxASEQDDcLQbIBIRAMNgtBtAEhEAw1C0G1ASEQDDQLQboBIRAMMwtBvQEhEAwyC0G/ASEQDDELQcEBIRAMMAsgAEEANgIcIAAgBDYCFCAAQemLgIAANgIQIABBHzYCDEEAIRAMSAsgAEHbATYCHCAAIAQ2AhQgAEH6loCAADYCECAAQRU2AgxBACEQDEcLIABB+AA2AhwgACAMNgIUIABBypiAgAA2AhAgAEEVNgIMQQAhEAxGCyAAQdEANgIcIAAgBTYCFCAAQbCXgIAANgIQIABBFTYCDEEAIRAMRQsgAEH5ADYCHCAAIAE2AhQgACAQNgIMQQAhEAxECyAAQfgANgIcIAAgATYCFCAAQcqYgIAANgIQIABBFTYCDEEAIRAMQwsgAEHkADYCHCAAIAE2AhQgAEHjl4CAADYCECAAQRU2AgxBACEQDEILIABB1wA2AhwgACABNgIUIABByZeAgAA2AhAgAEEVNgIMQQAhEAxBCyAAQQA2AhwgACABNgIUIABBuY2AgAA2AhAgAEEaNgIMQQAhEAxACyAAQcIANgIcIAAgATYCFCAAQeOYgIAANgIQIABBFTYCDEEAIRAMPwsgAEEANgIEIAAgDyAPELGAgIAAIgRFDQEgAEE6NgIcIAAgBDYCDCAAIA9BAWo2AhRBACEQDD4LIAAoAgQhBCAAQQA2AgQCQCAAIAQgARCxgICAACIERQ0AIABBOzYCHCAAIAQ2AgwgACABQQFqNgIUQQAhEAw+CyABQQFqIQEMLQsgD0EBaiEBDC0LIABBADYCHCAAIA82AhQgAEHkkoCAADYCECAAQQQ2AgxBACEQDDsLIABBNjYCHCAAIAQ2AhQgACACNgIMQQAhEAw6CyAAQS42AhwgACAONgIUIAAgBDYCDEEAIRAMOQsgAEHQADYCHCAAIAE2AhQgAEGRmICAADYCECAAQRU2AgxBACEQDDgLIA1BAWohAQwsCyAAQRU2AhwgACABNgIUIABBgpmAgAA2AhAgAEEVNgIMQQAhEAw2CyAAQRs2AhwgACABNgIUIABBkZeAgAA2AhAgAEEVNgIMQQAhEAw1CyAAQQ82AhwgACABNgIUIABBkZeAgAA2AhAgAEEVNgIMQQAhEAw0CyAAQQs2AhwgACABNgIUIABBkZeAgAA2AhAgAEEVNgIMQQAhEAwzCyAAQRo2AhwgACABNgIUIABBgpmAgAA2AhAgAEEVNgIMQQAhEAwyCyAAQQs2AhwgACABNgIUIABBgpmAgAA2AhAgAEEVNgIMQQAhEAwxCyAAQQo2AhwgACABNgIUIABB5JaAgAA2AhAgAEEVNgIMQQAhEAwwCyAAQR42AhwgACABNgIUIABB+ZeAgAA2AhAgAEEVNgIMQQAhEAwvCyAAQQA2AhwgACAQNgIUIABB2o2AgAA2AhAgAEEUNgIMQQAhEAwuCyAAQQQ2AhwgACABNgIUIABBsJiAgAA2AhAgAEEVNgIMQQAhEAwtCyAAQQA2AgAgC0EBaiELC0G4ASEQDBILIABBADYCACAQQQFqIQFB9QAhEAwRCyABIQECQCAALQApQQVHDQBB4wAhEAwRC0HiACEQDBALQQAhECAAQQA2AhwgAEHkkYCAADYCECAAQQc2AgwgACAUQQFqNgIUDCgLIABBADYCACAXQQFqIQFBwAAhEAwOC0EBIQELIAAgAToALCAAQQA2AgAgF0EBaiEBC0EoIRAMCwsgASEBC0E4IRAMCQsCQCABIg8gAkYNAANAAkAgDy0AAEGAvoCAAGotAAAiAUEBRg0AIAFBAkcNAyAPQQFqIQEMBAsgD0EBaiIPIAJHDQALQT4hEAwiC0E+IRAMIQsgAEEAOgAsIA8hAQwBC0ELIRAMBgtBOiEQDAULIAFBAWohAUEtIRAMBAsgACABOgAsIABBADYCACAWQQFqIQFBDCEQDAMLIABBADYCACAXQQFqIQFBCiEQDAILIABBADYCAAsgAEEAOgAsIA0hAUEJIRAMAAsLQQAhECAAQQA2AhwgACALNgIUIABBzZCAgAA2AhAgAEEJNgIMDBcLQQAhECAAQQA2AhwgACAKNgIUIABB6YqAgAA2AhAgAEEJNgIMDBYLQQAhECAAQQA2AhwgACAJNgIUIABBt5CAgAA2AhAgAEEJNgIMDBULQQAhECAAQQA2AhwgACAINgIUIABBnJGAgAA2AhAgAEEJNgIMDBQLQQAhECAAQQA2AhwgACABNgIUIABBzZCAgAA2AhAgAEEJNgIMDBMLQQAhECAAQQA2AhwgACABNgIUIABB6YqAgAA2AhAgAEEJNgIMDBILQQAhECAAQQA2AhwgACABNgIUIABBt5CAgAA2AhAgAEEJNgIMDBELQQAhECAAQQA2AhwgACABNgIUIABBnJGAgAA2AhAgAEEJNgIMDBALQQAhECAAQQA2AhwgACABNgIUIABBl5WAgAA2AhAgAEEPNgIMDA8LQQAhECAAQQA2AhwgACABNgIUIABBl5WAgAA2AhAgAEEPNgIMDA4LQQAhECAAQQA2AhwgACABNgIUIABBwJKAgAA2AhAgAEELNgIMDA0LQQAhECAAQQA2AhwgACABNgIUIABBlYmAgAA2AhAgAEELNgIMDAwLQQAhECAAQQA2AhwgACABNgIUIABB4Y+AgAA2AhAgAEEKNgIMDAsLQQAhECAAQQA2AhwgACABNgIUIABB+4+AgAA2AhAgAEEKNgIMDAoLQQAhECAAQQA2AhwgACABNgIUIABB8ZmAgAA2AhAgAEECNgIMDAkLQQAhECAAQQA2AhwgACABNgIUIABBxJSAgAA2AhAgAEECNgIMDAgLQQAhECAAQQA2AhwgACABNgIUIABB8pWAgAA2AhAgAEECNgIMDAcLIABBAjYCHCAAIAE2AhQgAEGcmoCAADYCECAAQRY2AgxBACEQDAYLQQEhEAwFC0HUACEQIAEiBCACRg0EIANBCGogACAEIAJB2MKAgABBChDFgICAACADKAIMIQQgAygCCA4DAQQCAAsQyoCAgAAACyAAQQA2AhwgAEG1moCAADYCECAAQRc2AgwgACAEQQFqNgIUQQAhEAwCCyAAQQA2AhwgACAENgIUIABBypqAgAA2AhAgAEEJNgIMQQAhEAwBCwJAIAEiBCACRw0AQSIhEAwBCyAAQYmAgIAANgIIIAAgBDYCBEEhIRALIANBEGokgICAgAAgEAuvAQECfyABKAIAIQYCQAJAIAIgA0YNACAEIAZqIQQgBiADaiACayEHIAIgBkF/cyAFaiIGaiEFA0ACQCACLQAAIAQtAABGDQBBAiEEDAMLAkAgBg0AQQAhBCAFIQIMAwsgBkF/aiEGIARBAWohBCACQQFqIgIgA0cNAAsgByEGIAMhAgsgAEEBNgIAIAEgBjYCACAAIAI2AgQPCyABQQA2AgAgACAENgIAIAAgAjYCBAsKACAAEMeAgIAAC/I2AQt/I4CAgIAAQRBrIgEkgICAgAACQEEAKAKg0ICAAA0AQQAQy4CAgABBgNSEgABrIgJB2QBJDQBBACEDAkBBACgC4NOAgAAiBA0AQQBCfzcC7NOAgABBAEKAgISAgIDAADcC5NOAgABBACABQQhqQXBxQdiq1aoFcyIENgLg04CAAEEAQQA2AvTTgIAAQQBBADYCxNOAgAALQQAgAjYCzNOAgABBAEGA1ISAADYCyNOAgABBAEGA1ISAADYCmNCAgABBACAENgKs0ICAAEEAQX82AqjQgIAAA0AgA0HE0ICAAGogA0G40ICAAGoiBDYCACAEIANBsNCAgABqIgU2AgAgA0G80ICAAGogBTYCACADQczQgIAAaiADQcDQgIAAaiIFNgIAIAUgBDYCACADQdTQgIAAaiADQcjQgIAAaiIENgIAIAQgBTYCACADQdDQgIAAaiAENgIAIANBIGoiA0GAAkcNAAtBgNSEgABBeEGA1ISAAGtBD3FBAEGA1ISAAEEIakEPcRsiA2oiBEEEaiACQUhqIgUgA2siA0EBcjYCAEEAQQAoAvDTgIAANgKk0ICAAEEAIAM2ApTQgIAAQQAgBDYCoNCAgABBgNSEgAAgBWpBODYCBAsCQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAEHsAUsNAAJAQQAoAojQgIAAIgZBECAAQRNqQXBxIABBC0kbIgJBA3YiBHYiA0EDcUUNAAJAAkAgA0EBcSAEckEBcyIFQQN0IgRBsNCAgABqIgMgBEG40ICAAGooAgAiBCgCCCICRw0AQQAgBkF+IAV3cTYCiNCAgAAMAQsgAyACNgIIIAIgAzYCDAsgBEEIaiEDIAQgBUEDdCIFQQNyNgIEIAQgBWoiBCAEKAIEQQFyNgIEDAwLIAJBACgCkNCAgAAiB00NAQJAIANFDQACQAJAIAMgBHRBAiAEdCIDQQAgA2tycSIDQQAgA2txQX9qIgMgA0EMdkEQcSIDdiIEQQV2QQhxIgUgA3IgBCAFdiIDQQJ2QQRxIgRyIAMgBHYiA0EBdkECcSIEciADIAR2IgNBAXZBAXEiBHIgAyAEdmoiBEEDdCIDQbDQgIAAaiIFIANBuNCAgABqKAIAIgMoAggiAEcNAEEAIAZBfiAEd3EiBjYCiNCAgAAMAQsgBSAANgIIIAAgBTYCDAsgAyACQQNyNgIEIAMgBEEDdCIEaiAEIAJrIgU2AgAgAyACaiIAIAVBAXI2AgQCQCAHRQ0AIAdBeHFBsNCAgABqIQJBACgCnNCAgAAhBAJAAkAgBkEBIAdBA3Z0IghxDQBBACAGIAhyNgKI0ICAACACIQgMAQsgAigCCCEICyAIIAQ2AgwgAiAENgIIIAQgAjYCDCAEIAg2AggLIANBCGohA0EAIAA2ApzQgIAAQQAgBTYCkNCAgAAMDAtBACgCjNCAgAAiCUUNASAJQQAgCWtxQX9qIgMgA0EMdkEQcSIDdiIEQQV2QQhxIgUgA3IgBCAFdiIDQQJ2QQRxIgRyIAMgBHYiA0EBdkECcSIEciADIAR2IgNBAXZBAXEiBHIgAyAEdmpBAnRBuNKAgABqKAIAIgAoAgRBeHEgAmshBCAAIQUCQANAAkAgBSgCECIDDQAgBUEUaigCACIDRQ0CCyADKAIEQXhxIAJrIgUgBCAFIARJIgUbIQQgAyAAIAUbIQAgAyEFDAALCyAAKAIYIQoCQCAAKAIMIgggAEYNACAAKAIIIgNBACgCmNCAgABJGiAIIAM2AgggAyAINgIMDAsLAkAgAEEUaiIFKAIAIgMNACAAKAIQIgNFDQMgAEEQaiEFCwNAIAUhCyADIghBFGoiBSgCACIDDQAgCEEQaiEFIAgoAhAiAw0ACyALQQA2AgAMCgtBfyECIABBv39LDQAgAEETaiIDQXBxIQJBACgCjNCAgAAiB0UNAEEAIQsCQCACQYACSQ0AQR8hCyACQf///wdLDQAgA0EIdiIDIANBgP4/akEQdkEIcSIDdCIEIARBgOAfakEQdkEEcSIEdCIFIAVBgIAPakEQdkECcSIFdEEPdiADIARyIAVyayIDQQF0IAIgA0EVanZBAXFyQRxqIQsLQQAgAmshBAJAAkACQAJAIAtBAnRBuNKAgABqKAIAIgUNAEEAIQNBACEIDAELQQAhAyACQQBBGSALQQF2ayALQR9GG3QhAEEAIQgDQAJAIAUoAgRBeHEgAmsiBiAETw0AIAYhBCAFIQggBg0AQQAhBCAFIQggBSEDDAMLIAMgBUEUaigCACIGIAYgBSAAQR12QQRxakEQaigCACIFRhsgAyAGGyEDIABBAXQhACAFDQALCwJAIAMgCHINAEEAIQhBAiALdCIDQQAgA2tyIAdxIgNFDQMgA0EAIANrcUF/aiIDIANBDHZBEHEiA3YiBUEFdkEIcSIAIANyIAUgAHYiA0ECdkEEcSIFciADIAV2IgNBAXZBAnEiBXIgAyAFdiIDQQF2QQFxIgVyIAMgBXZqQQJ0QbjSgIAAaigCACEDCyADRQ0BCwNAIAMoAgRBeHEgAmsiBiAESSEAAkAgAygCECIFDQAgA0EUaigCACEFCyAGIAQgABshBCADIAggABshCCAFIQMgBQ0ACwsgCEUNACAEQQAoApDQgIAAIAJrTw0AIAgoAhghCwJAIAgoAgwiACAIRg0AIAgoAggiA0EAKAKY0ICAAEkaIAAgAzYCCCADIAA2AgwMCQsCQCAIQRRqIgUoAgAiAw0AIAgoAhAiA0UNAyAIQRBqIQULA0AgBSEGIAMiAEEUaiIFKAIAIgMNACAAQRBqIQUgACgCECIDDQALIAZBADYCAAwICwJAQQAoApDQgIAAIgMgAkkNAEEAKAKc0ICAACEEAkACQCADIAJrIgVBEEkNACAEIAJqIgAgBUEBcjYCBEEAIAU2ApDQgIAAQQAgADYCnNCAgAAgBCADaiAFNgIAIAQgAkEDcjYCBAwBCyAEIANBA3I2AgQgBCADaiIDIAMoAgRBAXI2AgRBAEEANgKc0ICAAEEAQQA2ApDQgIAACyAEQQhqIQMMCgsCQEEAKAKU0ICAACIAIAJNDQBBACgCoNCAgAAiAyACaiIEIAAgAmsiBUEBcjYCBEEAIAU2ApTQgIAAQQAgBDYCoNCAgAAgAyACQQNyNgIEIANBCGohAwwKCwJAAkBBACgC4NOAgABFDQBBACgC6NOAgAAhBAwBC0EAQn83AuzTgIAAQQBCgICEgICAwAA3AuTTgIAAQQAgAUEMakFwcUHYqtWqBXM2AuDTgIAAQQBBADYC9NOAgABBAEEANgLE04CAAEGAgAQhBAtBACEDAkAgBCACQccAaiIHaiIGQQAgBGsiC3EiCCACSw0AQQBBMDYC+NOAgAAMCgsCQEEAKALA04CAACIDRQ0AAkBBACgCuNOAgAAiBCAIaiIFIARNDQAgBSADTQ0BC0EAIQNBAEEwNgL404CAAAwKC0EALQDE04CAAEEEcQ0EAkACQAJAQQAoAqDQgIAAIgRFDQBByNOAgAAhAwNAAkAgAygCACIFIARLDQAgBSADKAIEaiAESw0DCyADKAIIIgMNAAsLQQAQy4CAgAAiAEF/Rg0FIAghBgJAQQAoAuTTgIAAIgNBf2oiBCAAcUUNACAIIABrIAQgAGpBACADa3FqIQYLIAYgAk0NBSAGQf7///8HSw0FAkBBACgCwNOAgAAiA0UNAEEAKAK404CAACIEIAZqIgUgBE0NBiAFIANLDQYLIAYQy4CAgAAiAyAARw0BDAcLIAYgAGsgC3EiBkH+////B0sNBCAGEMuAgIAAIgAgAygCACADKAIEakYNAyAAIQMLAkAgA0F/Rg0AIAJByABqIAZNDQACQCAHIAZrQQAoAujTgIAAIgRqQQAgBGtxIgRB/v///wdNDQAgAyEADAcLAkAgBBDLgICAAEF/Rg0AIAQgBmohBiADIQAMBwtBACAGaxDLgICAABoMBAsgAyEAIANBf0cNBQwDC0EAIQgMBwtBACEADAULIABBf0cNAgtBAEEAKALE04CAAEEEcjYCxNOAgAALIAhB/v///wdLDQEgCBDLgICAACEAQQAQy4CAgAAhAyAAQX9GDQEgA0F/Rg0BIAAgA08NASADIABrIgYgAkE4ak0NAQtBAEEAKAK404CAACAGaiIDNgK404CAAAJAIANBACgCvNOAgABNDQBBACADNgK804CAAAsCQAJAAkACQEEAKAKg0ICAACIERQ0AQcjTgIAAIQMDQCAAIAMoAgAiBSADKAIEIghqRg0CIAMoAggiAw0ADAMLCwJAAkBBACgCmNCAgAAiA0UNACAAIANPDQELQQAgADYCmNCAgAALQQAhA0EAIAY2AszTgIAAQQAgADYCyNOAgABBAEF/NgKo0ICAAEEAQQAoAuDTgIAANgKs0ICAAEEAQQA2AtTTgIAAA0AgA0HE0ICAAGogA0G40ICAAGoiBDYCACAEIANBsNCAgABqIgU2AgAgA0G80ICAAGogBTYCACADQczQgIAAaiADQcDQgIAAaiIFNgIAIAUgBDYCACADQdTQgIAAaiADQcjQgIAAaiIENgIAIAQgBTYCACADQdDQgIAAaiAENgIAIANBIGoiA0GAAkcNAAsgAEF4IABrQQ9xQQAgAEEIakEPcRsiA2oiBCAGQUhqIgUgA2siA0EBcjYCBEEAQQAoAvDTgIAANgKk0ICAAEEAIAM2ApTQgIAAQQAgBDYCoNCAgAAgACAFakE4NgIEDAILIAMtAAxBCHENACAEIAVJDQAgBCAATw0AIARBeCAEa0EPcUEAIARBCGpBD3EbIgVqIgBBACgClNCAgAAgBmoiCyAFayIFQQFyNgIEIAMgCCAGajYCBEEAQQAoAvDTgIAANgKk0ICAAEEAIAU2ApTQgIAAQQAgADYCoNCAgAAgBCALakE4NgIEDAELAkAgAEEAKAKY0ICAACIITw0AQQAgADYCmNCAgAAgACEICyAAIAZqIQVByNOAgAAhAwJAAkACQAJAAkACQAJAA0AgAygCACAFRg0BIAMoAggiAw0ADAILCyADLQAMQQhxRQ0BC0HI04CAACEDA0ACQCADKAIAIgUgBEsNACAFIAMoAgRqIgUgBEsNAwsgAygCCCEDDAALCyADIAA2AgAgAyADKAIEIAZqNgIEIABBeCAAa0EPcUEAIABBCGpBD3EbaiILIAJBA3I2AgQgBUF4IAVrQQ9xQQAgBUEIakEPcRtqIgYgCyACaiICayEDAkAgBiAERw0AQQAgAjYCoNCAgABBAEEAKAKU0ICAACADaiIDNgKU0ICAACACIANBAXI2AgQMAwsCQCAGQQAoApzQgIAARw0AQQAgAjYCnNCAgABBAEEAKAKQ0ICAACADaiIDNgKQ0ICAACACIANBAXI2AgQgAiADaiADNgIADAMLAkAgBigCBCIEQQNxQQFHDQAgBEF4cSEHAkACQCAEQf8BSw0AIAYoAggiBSAEQQN2IghBA3RBsNCAgABqIgBGGgJAIAYoAgwiBCAFRw0AQQBBACgCiNCAgABBfiAId3E2AojQgIAADAILIAQgAEYaIAQgBTYCCCAFIAQ2AgwMAQsgBigCGCEJAkACQCAGKAIMIgAgBkYNACAGKAIIIgQgCEkaIAAgBDYCCCAEIAA2AgwMAQsCQCAGQRRqIgQoAgAiBQ0AIAZBEGoiBCgCACIFDQBBACEADAELA0AgBCEIIAUiAEEUaiIEKAIAIgUNACAAQRBqIQQgACgCECIFDQALIAhBADYCAAsgCUUNAAJAAkAgBiAGKAIcIgVBAnRBuNKAgABqIgQoAgBHDQAgBCAANgIAIAANAUEAQQAoAozQgIAAQX4gBXdxNgKM0ICAAAwCCyAJQRBBFCAJKAIQIAZGG2ogADYCACAARQ0BCyAAIAk2AhgCQCAGKAIQIgRFDQAgACAENgIQIAQgADYCGAsgBigCFCIERQ0AIABBFGogBDYCACAEIAA2AhgLIAcgA2ohAyAGIAdqIgYoAgQhBAsgBiAEQX5xNgIEIAIgA2ogAzYCACACIANBAXI2AgQCQCADQf8BSw0AIANBeHFBsNCAgABqIQQCQAJAQQAoAojQgIAAIgVBASADQQN2dCIDcQ0AQQAgBSADcjYCiNCAgAAgBCEDDAELIAQoAgghAwsgAyACNgIMIAQgAjYCCCACIAQ2AgwgAiADNgIIDAMLQR8hBAJAIANB////B0sNACADQQh2IgQgBEGA/j9qQRB2QQhxIgR0IgUgBUGA4B9qQRB2QQRxIgV0IgAgAEGAgA9qQRB2QQJxIgB0QQ92IAQgBXIgAHJrIgRBAXQgAyAEQRVqdkEBcXJBHGohBAsgAiAENgIcIAJCADcCECAEQQJ0QbjSgIAAaiEFAkBBACgCjNCAgAAiAEEBIAR0IghxDQAgBSACNgIAQQAgACAIcjYCjNCAgAAgAiAFNgIYIAIgAjYCCCACIAI2AgwMAwsgA0EAQRkgBEEBdmsgBEEfRht0IQQgBSgCACEAA0AgACIFKAIEQXhxIANGDQIgBEEddiEAIARBAXQhBCAFIABBBHFqQRBqIggoAgAiAA0ACyAIIAI2AgAgAiAFNgIYIAIgAjYCDCACIAI2AggMAgsgAEF4IABrQQ9xQQAgAEEIakEPcRsiA2oiCyAGQUhqIgggA2siA0EBcjYCBCAAIAhqQTg2AgQgBCAFQTcgBWtBD3FBACAFQUlqQQ9xG2pBQWoiCCAIIARBEGpJGyIIQSM2AgRBAEEAKALw04CAADYCpNCAgABBACADNgKU0ICAAEEAIAs2AqDQgIAAIAhBEGpBACkC0NOAgAA3AgAgCEEAKQLI04CAADcCCEEAIAhBCGo2AtDTgIAAQQAgBjYCzNOAgABBACAANgLI04CAAEEAQQA2AtTTgIAAIAhBJGohAwNAIANBBzYCACADQQRqIgMgBUkNAAsgCCAERg0DIAggCCgCBEF+cTYCBCAIIAggBGsiADYCACAEIABBAXI2AgQCQCAAQf8BSw0AIABBeHFBsNCAgABqIQMCQAJAQQAoAojQgIAAIgVBASAAQQN2dCIAcQ0AQQAgBSAAcjYCiNCAgAAgAyEFDAELIAMoAgghBQsgBSAENgIMIAMgBDYCCCAEIAM2AgwgBCAFNgIIDAQLQR8hAwJAIABB////B0sNACAAQQh2IgMgA0GA/j9qQRB2QQhxIgN0IgUgBUGA4B9qQRB2QQRxIgV0IgggCEGAgA9qQRB2QQJxIgh0QQ92IAMgBXIgCHJrIgNBAXQgACADQRVqdkEBcXJBHGohAwsgBCADNgIcIARCADcCECADQQJ0QbjSgIAAaiEFAkBBACgCjNCAgAAiCEEBIAN0IgZxDQAgBSAENgIAQQAgCCAGcjYCjNCAgAAgBCAFNgIYIAQgBDYCCCAEIAQ2AgwMBAsgAEEAQRkgA0EBdmsgA0EfRht0IQMgBSgCACEIA0AgCCIFKAIEQXhxIABGDQMgA0EddiEIIANBAXQhAyAFIAhBBHFqQRBqIgYoAgAiCA0ACyAGIAQ2AgAgBCAFNgIYIAQgBDYCDCAEIAQ2AggMAwsgBSgCCCIDIAI2AgwgBSACNgIIIAJBADYCGCACIAU2AgwgAiADNgIICyALQQhqIQMMBQsgBSgCCCIDIAQ2AgwgBSAENgIIIARBADYCGCAEIAU2AgwgBCADNgIIC0EAKAKU0ICAACIDIAJNDQBBACgCoNCAgAAiBCACaiIFIAMgAmsiA0EBcjYCBEEAIAM2ApTQgIAAQQAgBTYCoNCAgAAgBCACQQNyNgIEIARBCGohAwwDC0EAIQNBAEEwNgL404CAAAwCCwJAIAtFDQACQAJAIAggCCgCHCIFQQJ0QbjSgIAAaiIDKAIARw0AIAMgADYCACAADQFBACAHQX4gBXdxIgc2AozQgIAADAILIAtBEEEUIAsoAhAgCEYbaiAANgIAIABFDQELIAAgCzYCGAJAIAgoAhAiA0UNACAAIAM2AhAgAyAANgIYCyAIQRRqKAIAIgNFDQAgAEEUaiADNgIAIAMgADYCGAsCQAJAIARBD0sNACAIIAQgAmoiA0EDcjYCBCAIIANqIgMgAygCBEEBcjYCBAwBCyAIIAJqIgAgBEEBcjYCBCAIIAJBA3I2AgQgACAEaiAENgIAAkAgBEH/AUsNACAEQXhxQbDQgIAAaiEDAkACQEEAKAKI0ICAACIFQQEgBEEDdnQiBHENAEEAIAUgBHI2AojQgIAAIAMhBAwBCyADKAIIIQQLIAQgADYCDCADIAA2AgggACADNgIMIAAgBDYCCAwBC0EfIQMCQCAEQf///wdLDQAgBEEIdiIDIANBgP4/akEQdkEIcSIDdCIFIAVBgOAfakEQdkEEcSIFdCICIAJBgIAPakEQdkECcSICdEEPdiADIAVyIAJyayIDQQF0IAQgA0EVanZBAXFyQRxqIQMLIAAgAzYCHCAAQgA3AhAgA0ECdEG40oCAAGohBQJAIAdBASADdCICcQ0AIAUgADYCAEEAIAcgAnI2AozQgIAAIAAgBTYCGCAAIAA2AgggACAANgIMDAELIARBAEEZIANBAXZrIANBH0YbdCEDIAUoAgAhAgJAA0AgAiIFKAIEQXhxIARGDQEgA0EddiECIANBAXQhAyAFIAJBBHFqQRBqIgYoAgAiAg0ACyAGIAA2AgAgACAFNgIYIAAgADYCDCAAIAA2AggMAQsgBSgCCCIDIAA2AgwgBSAANgIIIABBADYCGCAAIAU2AgwgACADNgIICyAIQQhqIQMMAQsCQCAKRQ0AAkACQCAAIAAoAhwiBUECdEG40oCAAGoiAygCAEcNACADIAg2AgAgCA0BQQAgCUF+IAV3cTYCjNCAgAAMAgsgCkEQQRQgCigCECAARhtqIAg2AgAgCEUNAQsgCCAKNgIYAkAgACgCECIDRQ0AIAggAzYCECADIAg2AhgLIABBFGooAgAiA0UNACAIQRRqIAM2AgAgAyAINgIYCwJAAkAgBEEPSw0AIAAgBCACaiIDQQNyNgIEIAAgA2oiAyADKAIEQQFyNgIEDAELIAAgAmoiBSAEQQFyNgIEIAAgAkEDcjYCBCAFIARqIAQ2AgACQCAHRQ0AIAdBeHFBsNCAgABqIQJBACgCnNCAgAAhAwJAAkBBASAHQQN2dCIIIAZxDQBBACAIIAZyNgKI0ICAACACIQgMAQsgAigCCCEICyAIIAM2AgwgAiADNgIIIAMgAjYCDCADIAg2AggLQQAgBTYCnNCAgABBACAENgKQ0ICAAAsgAEEIaiEDCyABQRBqJICAgIAAIAMLCgAgABDJgICAAAviDQEHfwJAIABFDQAgAEF4aiIBIABBfGooAgAiAkF4cSIAaiEDAkAgAkEBcQ0AIAJBA3FFDQEgASABKAIAIgJrIgFBACgCmNCAgAAiBEkNASACIABqIQACQCABQQAoApzQgIAARg0AAkAgAkH/AUsNACABKAIIIgQgAkEDdiIFQQN0QbDQgIAAaiIGRhoCQCABKAIMIgIgBEcNAEEAQQAoAojQgIAAQX4gBXdxNgKI0ICAAAwDCyACIAZGGiACIAQ2AgggBCACNgIMDAILIAEoAhghBwJAAkAgASgCDCIGIAFGDQAgASgCCCICIARJGiAGIAI2AgggAiAGNgIMDAELAkAgAUEUaiICKAIAIgQNACABQRBqIgIoAgAiBA0AQQAhBgwBCwNAIAIhBSAEIgZBFGoiAigCACIEDQAgBkEQaiECIAYoAhAiBA0ACyAFQQA2AgALIAdFDQECQAJAIAEgASgCHCIEQQJ0QbjSgIAAaiICKAIARw0AIAIgBjYCACAGDQFBAEEAKAKM0ICAAEF+IAR3cTYCjNCAgAAMAwsgB0EQQRQgBygCECABRhtqIAY2AgAgBkUNAgsgBiAHNgIYAkAgASgCECICRQ0AIAYgAjYCECACIAY2AhgLIAEoAhQiAkUNASAGQRRqIAI2AgAgAiAGNgIYDAELIAMoAgQiAkEDcUEDRw0AIAMgAkF+cTYCBEEAIAA2ApDQgIAAIAEgAGogADYCACABIABBAXI2AgQPCyABIANPDQAgAygCBCICQQFxRQ0AAkACQCACQQJxDQACQCADQQAoAqDQgIAARw0AQQAgATYCoNCAgABBAEEAKAKU0ICAACAAaiIANgKU0ICAACABIABBAXI2AgQgAUEAKAKc0ICAAEcNA0EAQQA2ApDQgIAAQQBBADYCnNCAgAAPCwJAIANBACgCnNCAgABHDQBBACABNgKc0ICAAEEAQQAoApDQgIAAIABqIgA2ApDQgIAAIAEgAEEBcjYCBCABIABqIAA2AgAPCyACQXhxIABqIQACQAJAIAJB/wFLDQAgAygCCCIEIAJBA3YiBUEDdEGw0ICAAGoiBkYaAkAgAygCDCICIARHDQBBAEEAKAKI0ICAAEF+IAV3cTYCiNCAgAAMAgsgAiAGRhogAiAENgIIIAQgAjYCDAwBCyADKAIYIQcCQAJAIAMoAgwiBiADRg0AIAMoAggiAkEAKAKY0ICAAEkaIAYgAjYCCCACIAY2AgwMAQsCQCADQRRqIgIoAgAiBA0AIANBEGoiAigCACIEDQBBACEGDAELA0AgAiEFIAQiBkEUaiICKAIAIgQNACAGQRBqIQIgBigCECIEDQALIAVBADYCAAsgB0UNAAJAAkAgAyADKAIcIgRBAnRBuNKAgABqIgIoAgBHDQAgAiAGNgIAIAYNAUEAQQAoAozQgIAAQX4gBHdxNgKM0ICAAAwCCyAHQRBBFCAHKAIQIANGG2ogBjYCACAGRQ0BCyAGIAc2AhgCQCADKAIQIgJFDQAgBiACNgIQIAIgBjYCGAsgAygCFCICRQ0AIAZBFGogAjYCACACIAY2AhgLIAEgAGogADYCACABIABBAXI2AgQgAUEAKAKc0ICAAEcNAUEAIAA2ApDQgIAADwsgAyACQX5xNgIEIAEgAGogADYCACABIABBAXI2AgQLAkAgAEH/AUsNACAAQXhxQbDQgIAAaiECAkACQEEAKAKI0ICAACIEQQEgAEEDdnQiAHENAEEAIAQgAHI2AojQgIAAIAIhAAwBCyACKAIIIQALIAAgATYCDCACIAE2AgggASACNgIMIAEgADYCCA8LQR8hAgJAIABB////B0sNACAAQQh2IgIgAkGA/j9qQRB2QQhxIgJ0IgQgBEGA4B9qQRB2QQRxIgR0IgYgBkGAgA9qQRB2QQJxIgZ0QQ92IAIgBHIgBnJrIgJBAXQgACACQRVqdkEBcXJBHGohAgsgASACNgIcIAFCADcCECACQQJ0QbjSgIAAaiEEAkACQEEAKAKM0ICAACIGQQEgAnQiA3ENACAEIAE2AgBBACAGIANyNgKM0ICAACABIAQ2AhggASABNgIIIAEgATYCDAwBCyAAQQBBGSACQQF2ayACQR9GG3QhAiAEKAIAIQYCQANAIAYiBCgCBEF4cSAARg0BIAJBHXYhBiACQQF0IQIgBCAGQQRxakEQaiIDKAIAIgYNAAsgAyABNgIAIAEgBDYCGCABIAE2AgwgASABNgIIDAELIAQoAggiACABNgIMIAQgATYCCCABQQA2AhggASAENgIMIAEgADYCCAtBAEEAKAKo0ICAAEF/aiIBQX8gARs2AqjQgIAACwsEAAAAC04AAkAgAA0APwBBEHQPCwJAIABB//8DcQ0AIABBf0wNAAJAIABBEHZAACIAQX9HDQBBAEEwNgL404CAAEF/DwsgAEEQdA8LEMqAgIAAAAvyAgIDfwF+AkAgAkUNACAAIAE6AAAgAiAAaiIDQX9qIAE6AAAgAkEDSQ0AIAAgAToAAiAAIAE6AAEgA0F9aiABOgAAIANBfmogAToAACACQQdJDQAgACABOgADIANBfGogAToAACACQQlJDQAgAEEAIABrQQNxIgRqIgMgAUH/AXFBgYKECGwiATYCACADIAIgBGtBfHEiBGoiAkF8aiABNgIAIARBCUkNACADIAE2AgggAyABNgIEIAJBeGogATYCACACQXRqIAE2AgAgBEEZSQ0AIAMgATYCGCADIAE2AhQgAyABNgIQIAMgATYCDCACQXBqIAE2AgAgAkFsaiABNgIAIAJBaGogATYCACACQWRqIAE2AgAgBCADQQRxQRhyIgVrIgJBIEkNACABrUKBgICAEH4hBiADIAVqIQEDQCABIAY3AxggASAGNwMQIAEgBjcDCCABIAY3AwAgAUEgaiEBIAJBYGoiAkEfSw0ACwsgAAsLjkgBAEGACAuGSAEAAAACAAAAAwAAAAAAAAAAAAAABAAAAAUAAAAAAAAAAAAAAAYAAAAHAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW52YWxpZCBjaGFyIGluIHVybCBxdWVyeQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX2JvZHkAQ29udGVudC1MZW5ndGggb3ZlcmZsb3cAQ2h1bmsgc2l6ZSBvdmVyZmxvdwBSZXNwb25zZSBvdmVyZmxvdwBJbnZhbGlkIG1ldGhvZCBmb3IgSFRUUC94LnggcmVxdWVzdABJbnZhbGlkIG1ldGhvZCBmb3IgUlRTUC94LnggcmVxdWVzdABFeHBlY3RlZCBTT1VSQ0UgbWV0aG9kIGZvciBJQ0UveC54IHJlcXVlc3QASW52YWxpZCBjaGFyIGluIHVybCBmcmFnbWVudCBzdGFydABFeHBlY3RlZCBkb3QAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9zdGF0dXMASW52YWxpZCByZXNwb25zZSBzdGF0dXMASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgZXh0ZW5zaW9ucwBVc2VyIGNhbGxiYWNrIGVycm9yAGBvbl9yZXNldGAgY2FsbGJhY2sgZXJyb3IAYG9uX2NodW5rX2hlYWRlcmAgY2FsbGJhY2sgZXJyb3IAYG9uX21lc3NhZ2VfYmVnaW5gIGNhbGxiYWNrIGVycm9yAGBvbl9jaHVua19leHRlbnNpb25fdmFsdWVgIGNhbGxiYWNrIGVycm9yAGBvbl9zdGF0dXNfY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl92ZXJzaW9uX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fdXJsX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fY2h1bmtfY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl9oZWFkZXJfdmFsdWVfY29tcGxldGVgIGNhbGxiYWNrIGVycm9yAGBvbl9tZXNzYWdlX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fbWV0aG9kX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25faGVhZGVyX2ZpZWxkX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fY2h1bmtfZXh0ZW5zaW9uX25hbWVgIGNhbGxiYWNrIGVycm9yAFVuZXhwZWN0ZWQgY2hhciBpbiB1cmwgc2VydmVyAEludmFsaWQgaGVhZGVyIHZhbHVlIGNoYXIASW52YWxpZCBoZWFkZXIgZmllbGQgY2hhcgBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX3ZlcnNpb24ASW52YWxpZCBtaW5vciB2ZXJzaW9uAEludmFsaWQgbWFqb3IgdmVyc2lvbgBFeHBlY3RlZCBzcGFjZSBhZnRlciB2ZXJzaW9uAEV4cGVjdGVkIENSTEYgYWZ0ZXIgdmVyc2lvbgBJbnZhbGlkIEhUVFAgdmVyc2lvbgBJbnZhbGlkIGhlYWRlciB0b2tlbgBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX3VybABJbnZhbGlkIGNoYXJhY3RlcnMgaW4gdXJsAFVuZXhwZWN0ZWQgc3RhcnQgY2hhciBpbiB1cmwARG91YmxlIEAgaW4gdXJsAEVtcHR5IENvbnRlbnQtTGVuZ3RoAEludmFsaWQgY2hhcmFjdGVyIGluIENvbnRlbnQtTGVuZ3RoAER1cGxpY2F0ZSBDb250ZW50LUxlbmd0aABJbnZhbGlkIGNoYXIgaW4gdXJsIHBhdGgAQ29udGVudC1MZW5ndGggY2FuJ3QgYmUgcHJlc2VudCB3aXRoIFRyYW5zZmVyLUVuY29kaW5nAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIHNpemUAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9oZWFkZXJfdmFsdWUAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9jaHVua19leHRlbnNpb25fdmFsdWUASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgZXh0ZW5zaW9ucyB2YWx1ZQBNaXNzaW5nIGV4cGVjdGVkIExGIGFmdGVyIGhlYWRlciB2YWx1ZQBJbnZhbGlkIGBUcmFuc2Zlci1FbmNvZGluZ2AgaGVhZGVyIHZhbHVlAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIGV4dGVuc2lvbnMgcXVvdGUgdmFsdWUASW52YWxpZCBjaGFyYWN0ZXIgaW4gY2h1bmsgZXh0ZW5zaW9ucyBxdW90ZWQgdmFsdWUAUGF1c2VkIGJ5IG9uX2hlYWRlcnNfY29tcGxldGUASW52YWxpZCBFT0Ygc3RhdGUAb25fcmVzZXQgcGF1c2UAb25fY2h1bmtfaGVhZGVyIHBhdXNlAG9uX21lc3NhZ2VfYmVnaW4gcGF1c2UAb25fY2h1bmtfZXh0ZW5zaW9uX3ZhbHVlIHBhdXNlAG9uX3N0YXR1c19jb21wbGV0ZSBwYXVzZQBvbl92ZXJzaW9uX2NvbXBsZXRlIHBhdXNlAG9uX3VybF9jb21wbGV0ZSBwYXVzZQBvbl9jaHVua19jb21wbGV0ZSBwYXVzZQBvbl9oZWFkZXJfdmFsdWVfY29tcGxldGUgcGF1c2UAb25fbWVzc2FnZV9jb21wbGV0ZSBwYXVzZQBvbl9tZXRob2RfY29tcGxldGUgcGF1c2UAb25faGVhZGVyX2ZpZWxkX2NvbXBsZXRlIHBhdXNlAG9uX2NodW5rX2V4dGVuc2lvbl9uYW1lIHBhdXNlAFVuZXhwZWN0ZWQgc3BhY2UgYWZ0ZXIgc3RhcnQgbGluZQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX2NodW5rX2V4dGVuc2lvbl9uYW1lAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIGV4dGVuc2lvbnMgbmFtZQBQYXVzZSBvbiBDT05ORUNUL1VwZ3JhZGUAUGF1c2Ugb24gUFJJL1VwZ3JhZGUARXhwZWN0ZWQgSFRUUC8yIENvbm5lY3Rpb24gUHJlZmFjZQBTcGFuIGNhbGxiYWNrIGVycm9yIGluIG9uX21ldGhvZABFeHBlY3RlZCBzcGFjZSBhZnRlciBtZXRob2QAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9oZWFkZXJfZmllbGQAUGF1c2VkAEludmFsaWQgd29yZCBlbmNvdW50ZXJlZABJbnZhbGlkIG1ldGhvZCBlbmNvdW50ZXJlZABVbmV4cGVjdGVkIGNoYXIgaW4gdXJsIHNjaGVtYQBSZXF1ZXN0IGhhcyBpbnZhbGlkIGBUcmFuc2Zlci1FbmNvZGluZ2AAU1dJVENIX1BST1hZAFVTRV9QUk9YWQBNS0FDVElWSVRZAFVOUFJPQ0VTU0FCTEVfRU5USVRZAENPUFkATU9WRURfUEVSTUFORU5UTFkAVE9PX0VBUkxZAE5PVElGWQBGQUlMRURfREVQRU5ERU5DWQBCQURfR0FURVdBWQBQTEFZAFBVVABDSEVDS09VVABHQVRFV0FZX1RJTUVPVVQAUkVRVUVTVF9USU1FT1VUAE5FVFdPUktfQ09OTkVDVF9USU1FT1VUAENPTk5FQ1RJT05fVElNRU9VVABMT0dJTl9USU1FT1VUAE5FVFdPUktfUkVBRF9USU1FT1VUAFBPU1QATUlTRElSRUNURURfUkVRVUVTVABDTElFTlRfQ0xPU0VEX1JFUVVFU1QAQ0xJRU5UX0NMT1NFRF9MT0FEX0JBTEFOQ0VEX1JFUVVFU1QAQkFEX1JFUVVFU1QASFRUUF9SRVFVRVNUX1NFTlRfVE9fSFRUUFNfUE9SVABSRVBPUlQASU1fQV9URUFQT1QAUkVTRVRfQ09OVEVOVABOT19DT05URU5UAFBBUlRJQUxfQ09OVEVOVABIUEVfSU5WQUxJRF9DT05TVEFOVABIUEVfQ0JfUkVTRVQAR0VUAEhQRV9TVFJJQ1QAQ09ORkxJQ1QAVEVNUE9SQVJZX1JFRElSRUNUAFBFUk1BTkVOVF9SRURJUkVDVABDT05ORUNUAE1VTFRJX1NUQVRVUwBIUEVfSU5WQUxJRF9TVEFUVVMAVE9PX01BTllfUkVRVUVTVFMARUFSTFlfSElOVFMAVU5BVkFJTEFCTEVfRk9SX0xFR0FMX1JFQVNPTlMAT1BUSU9OUwBTV0lUQ0hJTkdfUFJPVE9DT0xTAFZBUklBTlRfQUxTT19ORUdPVElBVEVTAE1VTFRJUExFX0NIT0lDRVMASU5URVJOQUxfU0VSVkVSX0VSUk9SAFdFQl9TRVJWRVJfVU5LTk9XTl9FUlJPUgBSQUlMR1VOX0VSUk9SAElERU5USVRZX1BST1ZJREVSX0FVVEhFTlRJQ0FUSU9OX0VSUk9SAFNTTF9DRVJUSUZJQ0FURV9FUlJPUgBJTlZBTElEX1hfRk9SV0FSREVEX0ZPUgBTRVRfUEFSQU1FVEVSAEdFVF9QQVJBTUVURVIASFBFX1VTRVIAU0VFX09USEVSAEhQRV9DQl9DSFVOS19IRUFERVIATUtDQUxFTkRBUgBTRVRVUABXRUJfU0VSVkVSX0lTX0RPV04AVEVBUkRPV04ASFBFX0NMT1NFRF9DT05ORUNUSU9OAEhFVVJJU1RJQ19FWFBJUkFUSU9OAERJU0NPTk5FQ1RFRF9PUEVSQVRJT04ATk9OX0FVVEhPUklUQVRJVkVfSU5GT1JNQVRJT04ASFBFX0lOVkFMSURfVkVSU0lPTgBIUEVfQ0JfTUVTU0FHRV9CRUdJTgBTSVRFX0lTX0ZST1pFTgBIUEVfSU5WQUxJRF9IRUFERVJfVE9LRU4ASU5WQUxJRF9UT0tFTgBGT1JCSURERU4ARU5IQU5DRV9ZT1VSX0NBTE0ASFBFX0lOVkFMSURfVVJMAEJMT0NLRURfQllfUEFSRU5UQUxfQ09OVFJPTABNS0NPTABBQ0wASFBFX0lOVEVSTkFMAFJFUVVFU1RfSEVBREVSX0ZJRUxEU19UT09fTEFSR0VfVU5PRkZJQ0lBTABIUEVfT0sAVU5MSU5LAFVOTE9DSwBQUkkAUkVUUllfV0lUSABIUEVfSU5WQUxJRF9DT05URU5UX0xFTkdUSABIUEVfVU5FWFBFQ1RFRF9DT05URU5UX0xFTkdUSABGTFVTSABQUk9QUEFUQ0gATS1TRUFSQ0gAVVJJX1RPT19MT05HAFBST0NFU1NJTkcATUlTQ0VMTEFORU9VU19QRVJTSVNURU5UX1dBUk5JTkcATUlTQ0VMTEFORU9VU19XQVJOSU5HAEhQRV9JTlZBTElEX1RSQU5TRkVSX0VOQ09ESU5HAEV4cGVjdGVkIENSTEYASFBFX0lOVkFMSURfQ0hVTktfU0laRQBNT1ZFAENPTlRJTlVFAEhQRV9DQl9TVEFUVVNfQ09NUExFVEUASFBFX0NCX0hFQURFUlNfQ09NUExFVEUASFBFX0NCX1ZFUlNJT05fQ09NUExFVEUASFBFX0NCX1VSTF9DT01QTEVURQBIUEVfQ0JfQ0hVTktfQ09NUExFVEUASFBFX0NCX0hFQURFUl9WQUxVRV9DT01QTEVURQBIUEVfQ0JfQ0hVTktfRVhURU5TSU9OX1ZBTFVFX0NPTVBMRVRFAEhQRV9DQl9DSFVOS19FWFRFTlNJT05fTkFNRV9DT01QTEVURQBIUEVfQ0JfTUVTU0FHRV9DT01QTEVURQBIUEVfQ0JfTUVUSE9EX0NPTVBMRVRFAEhQRV9DQl9IRUFERVJfRklFTERfQ09NUExFVEUAREVMRVRFAEhQRV9JTlZBTElEX0VPRl9TVEFURQBJTlZBTElEX1NTTF9DRVJUSUZJQ0FURQBQQVVTRQBOT19SRVNQT05TRQBVTlNVUFBPUlRFRF9NRURJQV9UWVBFAEdPTkUATk9UX0FDQ0VQVEFCTEUAU0VSVklDRV9VTkFWQUlMQUJMRQBSQU5HRV9OT1RfU0FUSVNGSUFCTEUAT1JJR0lOX0lTX1VOUkVBQ0hBQkxFAFJFU1BPTlNFX0lTX1NUQUxFAFBVUkdFAE1FUkdFAFJFUVVFU1RfSEVBREVSX0ZJRUxEU19UT09fTEFSR0UAUkVRVUVTVF9IRUFERVJfVE9PX0xBUkdFAFBBWUxPQURfVE9PX0xBUkdFAElOU1VGRklDSUVOVF9TVE9SQUdFAEhQRV9QQVVTRURfVVBHUkFERQBIUEVfUEFVU0VEX0gyX1VQR1JBREUAU09VUkNFAEFOTk9VTkNFAFRSQUNFAEhQRV9VTkVYUEVDVEVEX1NQQUNFAERFU0NSSUJFAFVOU1VCU0NSSUJFAFJFQ09SRABIUEVfSU5WQUxJRF9NRVRIT0QATk9UX0ZPVU5EAFBST1BGSU5EAFVOQklORABSRUJJTkQAVU5BVVRIT1JJWkVEAE1FVEhPRF9OT1RfQUxMT1dFRABIVFRQX1ZFUlNJT05fTk9UX1NVUFBPUlRFRABBTFJFQURZX1JFUE9SVEVEAEFDQ0VQVEVEAE5PVF9JTVBMRU1FTlRFRABMT09QX0RFVEVDVEVEAEhQRV9DUl9FWFBFQ1RFRABIUEVfTEZfRVhQRUNURUQAQ1JFQVRFRABJTV9VU0VEAEhQRV9QQVVTRUQAVElNRU9VVF9PQ0NVUkVEAFBBWU1FTlRfUkVRVUlSRUQAUFJFQ09ORElUSU9OX1JFUVVJUkVEAFBST1hZX0FVVEhFTlRJQ0FUSU9OX1JFUVVJUkVEAE5FVFdPUktfQVVUSEVOVElDQVRJT05fUkVRVUlSRUQATEVOR1RIX1JFUVVJUkVEAFNTTF9DRVJUSUZJQ0FURV9SRVFVSVJFRABVUEdSQURFX1JFUVVJUkVEAFBBR0VfRVhQSVJFRABQUkVDT05ESVRJT05fRkFJTEVEAEVYUEVDVEFUSU9OX0ZBSUxFRABSRVZBTElEQVRJT05fRkFJTEVEAFNTTF9IQU5EU0hBS0VfRkFJTEVEAExPQ0tFRABUUkFOU0ZPUk1BVElPTl9BUFBMSUVEAE5PVF9NT0RJRklFRABOT1RfRVhURU5ERUQAQkFORFdJRFRIX0xJTUlUX0VYQ0VFREVEAFNJVEVfSVNfT1ZFUkxPQURFRABIRUFEAEV4cGVjdGVkIEhUVFAvAABeEwAAJhMAADAQAADwFwAAnRMAABUSAAA5FwAA8BIAAAoQAAB1EgAArRIAAIITAABPFAAAfxAAAKAVAAAjFAAAiRIAAIsUAABNFQAA1BEAAM8UAAAQGAAAyRYAANwWAADBEQAA4BcAALsUAAB0FAAAfBUAAOUUAAAIFwAAHxAAAGUVAACjFAAAKBUAAAIVAACZFQAALBAAAIsZAABPDwAA1A4AAGoQAADOEAAAAhcAAIkOAABuEwAAHBMAAGYUAABWFwAAwRMAAM0TAABsEwAAaBcAAGYXAABfFwAAIhMAAM4PAABpDgAA2A4AAGMWAADLEwAAqg4AACgXAAAmFwAAxRMAAF0WAADoEQAAZxMAAGUTAADyFgAAcxMAAB0XAAD5FgAA8xEAAM8OAADOFQAADBIAALMRAAClEQAAYRAAADIXAAC7EwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAgMCAgICAgAAAgIAAgIAAgICAgICAgICAgAEAAAAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAAIAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIAAgICAgIAAAICAAICAAICAgICAgICAgIAAwAEAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgACAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsb3NlZWVwLWFsaXZlAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAQEBAQEBAQEBAgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFjaHVua2VkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQABAQEBAQAAAQEAAQEAAQEBAQEBAQEBAQAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGVjdGlvbmVudC1sZW5ndGhvbnJveHktY29ubmVjdGlvbgAAAAAAAAAAAAAAAAAAAHJhbnNmZXItZW5jb2RpbmdwZ3JhZGUNCg0KDQpTTQ0KDQpUVFAvQ0UvVFNQLwAAAAAAAAAAAAAAAAECAAEDAAAAAAAAAAAAAAAAAAAAAAAABAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAAAAAAAAAABAgABAwAAAAAAAAAAAAAAAAAAAAAAAAQBAQUBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAABAAACAAAAAAAAAAAAAAAAAAAAAAAAAwQAAAQEBAQEBAQEBAQEBQQEBAQEBAQEBAQEBAAEAAYHBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQABAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAgAAAAACAAAAAAAAAAAAAAAAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5PVU5DRUVDS09VVE5FQ1RFVEVDUklCRUxVU0hFVEVBRFNFQVJDSFJHRUNUSVZJVFlMRU5EQVJWRU9USUZZUFRJT05TQ0hTRUFZU1RBVENIR0VPUkRJUkVDVE9SVFJDSFBBUkFNRVRFUlVSQ0VCU0NSSUJFQVJET1dOQUNFSU5ETktDS1VCU0NSSUJFSFRUUC9BRFRQLw==";

});

parcelRegister("71YY7", function(module, exports) {
module.exports = "";

});

parcelRegister("fnyFg", function(module, exports) {
"use strict";

var $9Yodq = parcelRequire("9Yodq");
var $b323e4ae0a5c0667$require$kConnected = $9Yodq.kConnected;
var $b323e4ae0a5c0667$require$kSize = $9Yodq.kSize;
class $b323e4ae0a5c0667$var$CompatWeakRef {
    constructor(value){
        this.value = value;
    }
    deref() {
        return this.value[$b323e4ae0a5c0667$require$kConnected] === 0 && this.value[$b323e4ae0a5c0667$require$kSize] === 0 ? undefined : this.value;
    }
}
class $b323e4ae0a5c0667$var$CompatFinalizer {
    constructor(finalizer){
        this.finalizer = finalizer;
    }
    register(dispatcher, key) {
        if (dispatcher.on) dispatcher.on("disconnect", ()=>{
            if (dispatcher[$b323e4ae0a5c0667$require$kConnected] === 0 && dispatcher[$b323e4ae0a5c0667$require$kSize] === 0) this.finalizer(key);
        });
    }
}
module.exports = function() {
    return {
        WeakRef: $parcel$global.WeakRef || $b323e4ae0a5c0667$var$CompatWeakRef,
        FinalizationRegistry: $parcel$global.FinalizationRegistry || $b323e4ae0a5c0667$var$CompatFinalizer
    };
};

});

parcelRegister("9NYzz", function(module, exports) {
"use strict";

var $4Sgbm = parcelRequire("4Sgbm");

var $7bgOU = parcelRequire("7bgOU");
var $7237ad207d82cab0$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $7237ad207d82cab0$require$RequestAbortedError = $7bgOU.RequestAbortedError;

var $dZB1o = parcelRequire("dZB1o");

var $jx4EA = parcelRequire("jx4EA");
var $7237ad207d82cab0$require$getResolveErrorBodyCallback = $jx4EA.getResolveErrorBodyCallback;

var $7237ad207d82cab0$require$AsyncResource = $4UN2M$async_hooks.AsyncResource;

var $j8mI5 = parcelRequire("j8mI5");
var $7237ad207d82cab0$require$addSignal = $j8mI5.addSignal;
var $7237ad207d82cab0$require$removeSignal = $j8mI5.removeSignal;
class $7237ad207d82cab0$var$RequestHandler extends $7237ad207d82cab0$require$AsyncResource {
    constructor(opts, callback){
        if (!opts || typeof opts !== "object") throw new $7237ad207d82cab0$require$InvalidArgumentError("invalid opts");
        const { signal: signal, method: method, opaque: opaque, body: body, onInfo: onInfo, responseHeaders: responseHeaders, throwOnError: throwOnError, highWaterMark: highWaterMark } = opts;
        try {
            if (typeof callback !== "function") throw new $7237ad207d82cab0$require$InvalidArgumentError("invalid callback");
            if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) throw new $7237ad207d82cab0$require$InvalidArgumentError("invalid highWaterMark");
            if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $7237ad207d82cab0$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
            if (method === "CONNECT") throw new $7237ad207d82cab0$require$InvalidArgumentError("invalid method");
            if (onInfo && typeof onInfo !== "function") throw new $7237ad207d82cab0$require$InvalidArgumentError("invalid onInfo callback");
            super("UNDICI_REQUEST");
        } catch (err) {
            if ($dZB1o.isStream(body)) $dZB1o.destroy(body.on("error", $dZB1o.nop), err);
            throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.body = body;
        this.trailers = {};
        this.context = null;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError;
        this.highWaterMark = highWaterMark;
        if ($dZB1o.isStream(body)) body.on("error", (err)=>{
            this.onError(err);
        });
        $7237ad207d82cab0$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $7237ad207d82cab0$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { callback: callback, opaque: opaque, abort: abort, context: context, responseHeaders: responseHeaders, highWaterMark: highWaterMark } = this;
        const headers = responseHeaders === "raw" ? $dZB1o.parseRawHeaders(rawHeaders) : $dZB1o.parseHeaders(rawHeaders);
        if (statusCode < 200) {
            if (this.onInfo) this.onInfo({
                statusCode: statusCode,
                headers: headers
            });
            return;
        }
        const parsedHeaders = responseHeaders === "raw" ? $dZB1o.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        const body = new $4Sgbm({
            resume: resume,
            abort: abort,
            contentType: contentType,
            highWaterMark: highWaterMark
        });
        this.callback = null;
        this.res = body;
        if (callback !== null) {
            if (this.throwOnError && statusCode >= 400) this.runInAsyncScope($7237ad207d82cab0$require$getResolveErrorBodyCallback, null, {
                callback: callback,
                body: body,
                contentType: contentType,
                statusCode: statusCode,
                statusMessage: statusMessage,
                headers: headers
            });
            else this.runInAsyncScope(callback, null, null, {
                statusCode: statusCode,
                headers: headers,
                trailers: this.trailers,
                opaque: opaque,
                body: body,
                context: context
            });
        }
    }
    onData(chunk) {
        const { res: res } = this;
        return res.push(chunk);
    }
    onComplete(trailers) {
        const { res: res } = this;
        $7237ad207d82cab0$require$removeSignal(this);
        $dZB1o.parseHeaders(trailers, this.trailers);
        res.push(null);
    }
    onError(err) {
        const { res: res, callback: callback, body: body, opaque: opaque } = this;
        $7237ad207d82cab0$require$removeSignal(this);
        if (callback) {
            // TODO: Does this need queueMicrotask?
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
        if (res) {
            this.res = null;
            // Ensure all queued handlers are invoked before destroying res.
            queueMicrotask(()=>{
                $dZB1o.destroy(res, err);
            });
        }
        if (body) {
            this.body = null;
            $dZB1o.destroy(body, err);
        }
    }
}
function $7237ad207d82cab0$var$request(opts, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $7237ad207d82cab0$var$request.call(this, opts, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        this.dispatch(opts, new $7237ad207d82cab0$var$RequestHandler(opts, callback));
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $7237ad207d82cab0$var$request;
module.exports.RequestHandler = $7237ad207d82cab0$var$RequestHandler;

});
parcelRegister("4Sgbm", function(module, exports) {
// Ported from https://github.com/nodejs/undici/pull/907


var $38c8c208cf171578$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";


var $38c8c208cf171578$require$Readable = $4UN2M$stream.Readable;

var $7bgOU = parcelRequire("7bgOU");
var $38c8c208cf171578$require$RequestAbortedError = $7bgOU.RequestAbortedError;
var $38c8c208cf171578$require$NotSupportedError = $7bgOU.NotSupportedError;
var $38c8c208cf171578$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $dZB1o = parcelRequire("dZB1o");

var $dZB1o = parcelRequire("dZB1o");
var $38c8c208cf171578$require$ReadableStreamFrom = $dZB1o.ReadableStreamFrom;
var $38c8c208cf171578$require$toUSVString = $dZB1o.toUSVString;
let $38c8c208cf171578$var$Blob;
const $38c8c208cf171578$var$kConsume = Symbol("kConsume");
const $38c8c208cf171578$var$kReading = Symbol("kReading");
const $38c8c208cf171578$var$kBody = Symbol("kBody");
const $38c8c208cf171578$var$kAbort = Symbol("abort");
const $38c8c208cf171578$var$kContentType = Symbol("kContentType");
const $38c8c208cf171578$var$noop = ()=>{};
module.exports = class BodyReadable extends $38c8c208cf171578$require$Readable {
    constructor({ resume: resume, abort: abort, contentType: contentType = "", highWaterMark: highWaterMark = 65536 // Same as nodejs fs streams.
     }){
        super({
            autoDestroy: true,
            read: resume,
            highWaterMark: highWaterMark
        });
        this._readableState.dataEmitted = false;
        this[$38c8c208cf171578$var$kAbort] = abort;
        this[$38c8c208cf171578$var$kConsume] = null;
        this[$38c8c208cf171578$var$kBody] = null;
        this[$38c8c208cf171578$var$kContentType] = contentType;
        // Is stream being consumed through Readable API?
        // This is an optimization so that we avoid checking
        // for 'data' and 'readable' listeners in the hot path
        // inside push().
        this[$38c8c208cf171578$var$kReading] = false;
    }
    destroy(err) {
        if (this.destroyed) // Node < 16
        return this;
        if (!err && !this._readableState.endEmitted) err = new $38c8c208cf171578$require$RequestAbortedError();
        if (err) this[$38c8c208cf171578$var$kAbort]();
        return super.destroy(err);
    }
    emit(ev, ...args) {
        if (ev === "data") // Node < 16.7
        this._readableState.dataEmitted = true;
        else if (ev === "error") // Node < 16
        this._readableState.errorEmitted = true;
        return super.emit(ev, ...args);
    }
    on(ev, ...args) {
        if (ev === "data" || ev === "readable") this[$38c8c208cf171578$var$kReading] = true;
        return super.on(ev, ...args);
    }
    addListener(ev, ...args) {
        return this.on(ev, ...args);
    }
    off(ev, ...args) {
        const ret = super.off(ev, ...args);
        if (ev === "data" || ev === "readable") this[$38c8c208cf171578$var$kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
        return ret;
    }
    removeListener(ev, ...args) {
        return this.off(ev, ...args);
    }
    push(chunk) {
        if (this[$38c8c208cf171578$var$kConsume] && chunk !== null && this.readableLength === 0) {
            $38c8c208cf171578$var$consumePush(this[$38c8c208cf171578$var$kConsume], chunk);
            return this[$38c8c208cf171578$var$kReading] ? super.push(chunk) : true;
        }
        return super.push(chunk);
    }
    // https://fetch.spec.whatwg.org/#dom-body-text
    async text() {
        return $38c8c208cf171578$var$consume(this, "text");
    }
    // https://fetch.spec.whatwg.org/#dom-body-json
    async json() {
        return $38c8c208cf171578$var$consume(this, "json");
    }
    // https://fetch.spec.whatwg.org/#dom-body-blob
    async blob() {
        return $38c8c208cf171578$var$consume(this, "blob");
    }
    // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
    async arrayBuffer() {
        return $38c8c208cf171578$var$consume(this, "arrayBuffer");
    }
    // https://fetch.spec.whatwg.org/#dom-body-formdata
    async formData() {
        // TODO: Implement.
        throw new $38c8c208cf171578$require$NotSupportedError();
    }
    // https://fetch.spec.whatwg.org/#dom-body-bodyused
    get bodyUsed() {
        return $dZB1o.isDisturbed(this);
    }
    // https://fetch.spec.whatwg.org/#dom-body-body
    get body() {
        if (!this[$38c8c208cf171578$var$kBody]) {
            this[$38c8c208cf171578$var$kBody] = $38c8c208cf171578$require$ReadableStreamFrom(this);
            if (this[$38c8c208cf171578$var$kConsume]) {
                // TODO: Is this the best way to force a lock?
                this[$38c8c208cf171578$var$kBody].getReader() // Ensure stream is locked.
                ;
                $4UN2M$assert(this[$38c8c208cf171578$var$kBody].locked);
            }
        }
        return this[$38c8c208cf171578$var$kBody];
    }
    dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
        const signal = opts && opts.signal;
        if (signal) try {
            if (typeof signal !== "object" || !("aborted" in signal)) throw new $38c8c208cf171578$require$InvalidArgumentError("signal must be an AbortSignal");
            $dZB1o.throwIfAborted(signal);
        } catch (err) {
            return Promise.reject(err);
        }
        if (this.closed) return Promise.resolve(null);
        return new Promise((resolve, reject)=>{
            const signalListenerCleanup = signal ? $dZB1o.addAbortListener(signal, ()=>{
                this.destroy();
            }) : $38c8c208cf171578$var$noop;
            this.on("close", function() {
                signalListenerCleanup();
                if (signal && signal.aborted) reject(signal.reason || Object.assign(new Error("The operation was aborted"), {
                    name: "AbortError"
                }));
                else resolve(null);
            }).on("error", $38c8c208cf171578$var$noop).on("data", function(chunk) {
                limit -= chunk.length;
                if (limit <= 0) this.destroy();
            }).resume();
        });
    }
};
// https://streams.spec.whatwg.org/#readablestream-locked
function $38c8c208cf171578$var$isLocked(self) {
    // Consume is an implicit lock.
    return self[$38c8c208cf171578$var$kBody] && self[$38c8c208cf171578$var$kBody].locked === true || self[$38c8c208cf171578$var$kConsume];
}
// https://fetch.spec.whatwg.org/#body-unusable
function $38c8c208cf171578$var$isUnusable(self) {
    return $dZB1o.isDisturbed(self) || $38c8c208cf171578$var$isLocked(self);
}
async function $38c8c208cf171578$var$consume(stream, type) {
    if ($38c8c208cf171578$var$isUnusable(stream)) throw new TypeError("unusable");
    $4UN2M$assert(!stream[$38c8c208cf171578$var$kConsume]);
    return new Promise((resolve, reject)=>{
        stream[$38c8c208cf171578$var$kConsume] = {
            type: type,
            stream: stream,
            resolve: resolve,
            reject: reject,
            length: 0,
            body: []
        };
        stream.on("error", function(err) {
            $38c8c208cf171578$var$consumeFinish(this[$38c8c208cf171578$var$kConsume], err);
        }).on("close", function() {
            if (this[$38c8c208cf171578$var$kConsume].body !== null) $38c8c208cf171578$var$consumeFinish(this[$38c8c208cf171578$var$kConsume], new $38c8c208cf171578$require$RequestAbortedError());
        });
        $4UN2M$process.nextTick($38c8c208cf171578$var$consumeStart, stream[$38c8c208cf171578$var$kConsume]);
    });
}
function $38c8c208cf171578$var$consumeStart(consume) {
    if (consume.body === null) return;
    const { _readableState: state } = consume.stream;
    for (const chunk of state.buffer)$38c8c208cf171578$var$consumePush(consume, chunk);
    if (state.endEmitted) $38c8c208cf171578$var$consumeEnd(this[$38c8c208cf171578$var$kConsume]);
    else consume.stream.on("end", function() {
        $38c8c208cf171578$var$consumeEnd(this[$38c8c208cf171578$var$kConsume]);
    });
    consume.stream.resume();
    while(consume.stream.read() != null);
}

function $38c8c208cf171578$var$consumeEnd(consume) {
    const { type: type, body: body, resolve: resolve, stream: stream, length: length } = consume;
    try {
        if (type === "text") resolve($38c8c208cf171578$require$toUSVString($38c8c208cf171578$require$Buffer.concat(body)));
        else if (type === "json") resolve(JSON.parse($38c8c208cf171578$require$Buffer.concat(body)));
        else if (type === "arrayBuffer") {
            const dst = new Uint8Array(length);
            let pos = 0;
            for (const buf of body){
                dst.set(buf, pos);
                pos += buf.byteLength;
            }
            resolve(dst.buffer);
        } else if (type === "blob") {
            if (!$38c8c208cf171578$var$Blob) $38c8c208cf171578$var$Blob = $4UN2M$buffer.Blob;
            resolve(new $38c8c208cf171578$var$Blob(body, {
                type: stream[$38c8c208cf171578$var$kContentType]
            }));
        }
        $38c8c208cf171578$var$consumeFinish(consume);
    } catch (err) {
        stream.destroy(err);
    }
}
function $38c8c208cf171578$var$consumePush(consume, chunk) {
    consume.length += chunk.length;
    consume.body.push(chunk);
}
function $38c8c208cf171578$var$consumeFinish(consume, err) {
    if (consume.body === null) return;
    if (err) consume.reject(err);
    else consume.resolve();
    consume.type = null;
    consume.stream = null;
    consume.resolve = null;
    consume.reject = null;
    consume.length = 0;
    consume.body = null;
}

});

parcelRegister("jx4EA", function(module, exports) {


var $e384b57ceb40a18e$require$Buffer = $4UN2M$buffer.Buffer;


var $7bgOU = parcelRequire("7bgOU");
var $e384b57ceb40a18e$require$ResponseStatusCodeError = $7bgOU.ResponseStatusCodeError;

var $dZB1o = parcelRequire("dZB1o");
var $e384b57ceb40a18e$require$toUSVString = $dZB1o.toUSVString;
async function $e384b57ceb40a18e$var$getResolveErrorBodyCallback({ callback: callback, body: body, contentType: contentType, statusCode: statusCode, statusMessage: statusMessage, headers: headers }) {
    $4UN2M$assert(body);
    let chunks = [];
    let limit = 0;
    for await (const chunk of body){
        chunks.push(chunk);
        limit += chunk.length;
        if (limit > 131072) {
            chunks = null;
            break;
        }
    }
    if (statusCode === 204 || !contentType || !chunks) {
        $4UN2M$process.nextTick(callback, new $e384b57ceb40a18e$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        return;
    }
    try {
        if (contentType.startsWith("application/json")) {
            const payload = JSON.parse($e384b57ceb40a18e$require$toUSVString($e384b57ceb40a18e$require$Buffer.concat(chunks)));
            $4UN2M$process.nextTick(callback, new $e384b57ceb40a18e$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
            return;
        }
        if (contentType.startsWith("text/")) {
            const payload = $e384b57ceb40a18e$require$toUSVString($e384b57ceb40a18e$require$Buffer.concat(chunks));
            $4UN2M$process.nextTick(callback, new $e384b57ceb40a18e$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
            return;
        }
    } catch (err) {
    // Process in a fallback if error
    }
    $4UN2M$process.nextTick(callback, new $e384b57ceb40a18e$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
}
module.exports = {
    getResolveErrorBodyCallback: $e384b57ceb40a18e$var$getResolveErrorBodyCallback
};

});

parcelRegister("j8mI5", function(module, exports) {

var $dZB1o = parcelRequire("dZB1o");
var $dee0616cd12b87e6$require$addAbortListener = $dZB1o.addAbortListener;

var $7bgOU = parcelRequire("7bgOU");
var $dee0616cd12b87e6$require$RequestAbortedError = $7bgOU.RequestAbortedError;
const $dee0616cd12b87e6$var$kListener = Symbol("kListener");
const $dee0616cd12b87e6$var$kSignal = Symbol("kSignal");
function $dee0616cd12b87e6$var$abort(self) {
    if (self.abort) self.abort();
    else self.onError(new $dee0616cd12b87e6$require$RequestAbortedError());
}
function $dee0616cd12b87e6$var$addSignal(self, signal) {
    self[$dee0616cd12b87e6$var$kSignal] = null;
    self[$dee0616cd12b87e6$var$kListener] = null;
    if (!signal) return;
    if (signal.aborted) {
        $dee0616cd12b87e6$var$abort(self);
        return;
    }
    self[$dee0616cd12b87e6$var$kSignal] = signal;
    self[$dee0616cd12b87e6$var$kListener] = ()=>{
        $dee0616cd12b87e6$var$abort(self);
    };
    $dee0616cd12b87e6$require$addAbortListener(self[$dee0616cd12b87e6$var$kSignal], self[$dee0616cd12b87e6$var$kListener]);
}
function $dee0616cd12b87e6$var$removeSignal(self) {
    if (!self[$dee0616cd12b87e6$var$kSignal]) return;
    if ("removeEventListener" in self[$dee0616cd12b87e6$var$kSignal]) self[$dee0616cd12b87e6$var$kSignal].removeEventListener("abort", self[$dee0616cd12b87e6$var$kListener]);
    else self[$dee0616cd12b87e6$var$kSignal].removeListener("abort", self[$dee0616cd12b87e6$var$kListener]);
    self[$dee0616cd12b87e6$var$kSignal] = null;
    self[$dee0616cd12b87e6$var$kListener] = null;
}
module.exports = {
    addSignal: $dee0616cd12b87e6$var$addSignal,
    removeSignal: $dee0616cd12b87e6$var$removeSignal
};

});


parcelRegister("7itGs", function(module, exports) {
"use strict";

var $55013d6b68b908f7$require$finished = $4UN2M$stream.finished;
var $55013d6b68b908f7$require$PassThrough = $4UN2M$stream.PassThrough;

var $7bgOU = parcelRequire("7bgOU");
var $55013d6b68b908f7$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $55013d6b68b908f7$require$InvalidReturnValueError = $7bgOU.InvalidReturnValueError;
var $55013d6b68b908f7$require$RequestAbortedError = $7bgOU.RequestAbortedError;

var $dZB1o = parcelRequire("dZB1o");

var $jx4EA = parcelRequire("jx4EA");
var $55013d6b68b908f7$require$getResolveErrorBodyCallback = $jx4EA.getResolveErrorBodyCallback;

var $55013d6b68b908f7$require$AsyncResource = $4UN2M$async_hooks.AsyncResource;

var $j8mI5 = parcelRequire("j8mI5");
var $55013d6b68b908f7$require$addSignal = $j8mI5.addSignal;
var $55013d6b68b908f7$require$removeSignal = $j8mI5.removeSignal;
class $55013d6b68b908f7$var$StreamHandler extends $55013d6b68b908f7$require$AsyncResource {
    constructor(opts, factory, callback){
        if (!opts || typeof opts !== "object") throw new $55013d6b68b908f7$require$InvalidArgumentError("invalid opts");
        const { signal: signal, method: method, opaque: opaque, body: body, onInfo: onInfo, responseHeaders: responseHeaders, throwOnError: throwOnError } = opts;
        try {
            if (typeof callback !== "function") throw new $55013d6b68b908f7$require$InvalidArgumentError("invalid callback");
            if (typeof factory !== "function") throw new $55013d6b68b908f7$require$InvalidArgumentError("invalid factory");
            if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $55013d6b68b908f7$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
            if (method === "CONNECT") throw new $55013d6b68b908f7$require$InvalidArgumentError("invalid method");
            if (onInfo && typeof onInfo !== "function") throw new $55013d6b68b908f7$require$InvalidArgumentError("invalid onInfo callback");
            super("UNDICI_STREAM");
        } catch (err) {
            if ($dZB1o.isStream(body)) $dZB1o.destroy(body.on("error", $dZB1o.nop), err);
            throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.factory = factory;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.context = null;
        this.trailers = null;
        this.body = body;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError || false;
        if ($dZB1o.isStream(body)) body.on("error", (err)=>{
            this.onError(err);
        });
        $55013d6b68b908f7$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $55013d6b68b908f7$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { factory: factory, opaque: opaque, context: context, callback: callback, responseHeaders: responseHeaders } = this;
        const headers = responseHeaders === "raw" ? $dZB1o.parseRawHeaders(rawHeaders) : $dZB1o.parseHeaders(rawHeaders);
        if (statusCode < 200) {
            if (this.onInfo) this.onInfo({
                statusCode: statusCode,
                headers: headers
            });
            return;
        }
        this.factory = null;
        let res;
        if (this.throwOnError && statusCode >= 400) {
            const parsedHeaders = responseHeaders === "raw" ? $dZB1o.parseHeaders(rawHeaders) : headers;
            const contentType = parsedHeaders["content-type"];
            res = new $55013d6b68b908f7$require$PassThrough();
            this.callback = null;
            this.runInAsyncScope($55013d6b68b908f7$require$getResolveErrorBodyCallback, null, {
                callback: callback,
                body: res,
                contentType: contentType,
                statusCode: statusCode,
                statusMessage: statusMessage,
                headers: headers
            });
        } else {
            if (factory === null) return;
            res = this.runInAsyncScope(factory, null, {
                statusCode: statusCode,
                headers: headers,
                opaque: opaque,
                context: context
            });
            if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") throw new $55013d6b68b908f7$require$InvalidReturnValueError("expected Writable");
            // TODO: Avoid finished. It registers an unnecessary amount of listeners.
            $55013d6b68b908f7$require$finished(res, {
                readable: false
            }, (err)=>{
                const { callback: callback, res: res, opaque: opaque, trailers: trailers, abort: abort } = this;
                this.res = null;
                if (err || !res.readable) $dZB1o.destroy(res, err);
                this.callback = null;
                this.runInAsyncScope(callback, null, err || null, {
                    opaque: opaque,
                    trailers: trailers
                });
                if (err) abort();
            });
        }
        res.on("drain", resume);
        this.res = res;
        const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
        return needDrain !== true;
    }
    onData(chunk) {
        const { res: res } = this;
        return res ? res.write(chunk) : true;
    }
    onComplete(trailers) {
        const { res: res } = this;
        $55013d6b68b908f7$require$removeSignal(this);
        if (!res) return;
        this.trailers = $dZB1o.parseHeaders(trailers);
        res.end();
    }
    onError(err) {
        const { res: res, callback: callback, opaque: opaque, body: body } = this;
        $55013d6b68b908f7$require$removeSignal(this);
        this.factory = null;
        if (res) {
            this.res = null;
            $dZB1o.destroy(res, err);
        } else if (callback) {
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
        if (body) {
            this.body = null;
            $dZB1o.destroy(body, err);
        }
    }
}
function $55013d6b68b908f7$var$stream(opts, factory, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $55013d6b68b908f7$var$stream.call(this, opts, factory, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        this.dispatch(opts, new $55013d6b68b908f7$var$StreamHandler(opts, factory, callback));
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $55013d6b68b908f7$var$stream;

});

parcelRegister("l2DXA", function(module, exports) {
"use strict";

var $f518c81ddf53f898$require$Readable = $4UN2M$stream.Readable;
var $f518c81ddf53f898$require$Duplex = $4UN2M$stream.Duplex;
var $f518c81ddf53f898$require$PassThrough = $4UN2M$stream.PassThrough;

var $7bgOU = parcelRequire("7bgOU");
var $f518c81ddf53f898$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $f518c81ddf53f898$require$InvalidReturnValueError = $7bgOU.InvalidReturnValueError;
var $f518c81ddf53f898$require$RequestAbortedError = $7bgOU.RequestAbortedError;

var $dZB1o = parcelRequire("dZB1o");

var $f518c81ddf53f898$require$AsyncResource = $4UN2M$async_hooks.AsyncResource;

var $j8mI5 = parcelRequire("j8mI5");
var $f518c81ddf53f898$require$addSignal = $j8mI5.addSignal;
var $f518c81ddf53f898$require$removeSignal = $j8mI5.removeSignal;

const $f518c81ddf53f898$var$kResume = Symbol("resume");
class $f518c81ddf53f898$var$PipelineRequest extends $f518c81ddf53f898$require$Readable {
    constructor(){
        super({
            autoDestroy: true
        });
        this[$f518c81ddf53f898$var$kResume] = null;
    }
    _read() {
        const { [$f518c81ddf53f898$var$kResume]: resume } = this;
        if (resume) {
            this[$f518c81ddf53f898$var$kResume] = null;
            resume();
        }
    }
    _destroy(err, callback) {
        this._read();
        callback(err);
    }
}
class $f518c81ddf53f898$var$PipelineResponse extends $f518c81ddf53f898$require$Readable {
    constructor(resume){
        super({
            autoDestroy: true
        });
        this[$f518c81ddf53f898$var$kResume] = resume;
    }
    _read() {
        this[$f518c81ddf53f898$var$kResume]();
    }
    _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) err = new $f518c81ddf53f898$require$RequestAbortedError();
        callback(err);
    }
}
class $f518c81ddf53f898$var$PipelineHandler extends $f518c81ddf53f898$require$AsyncResource {
    constructor(opts, handler){
        if (!opts || typeof opts !== "object") throw new $f518c81ddf53f898$require$InvalidArgumentError("invalid opts");
        if (typeof handler !== "function") throw new $f518c81ddf53f898$require$InvalidArgumentError("invalid handler");
        const { signal: signal, method: method, opaque: opaque, onInfo: onInfo, responseHeaders: responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $f518c81ddf53f898$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        if (method === "CONNECT") throw new $f518c81ddf53f898$require$InvalidArgumentError("invalid method");
        if (onInfo && typeof onInfo !== "function") throw new $f518c81ddf53f898$require$InvalidArgumentError("invalid onInfo callback");
        super("UNDICI_PIPELINE");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.handler = handler;
        this.abort = null;
        this.context = null;
        this.onInfo = onInfo || null;
        this.req = new $f518c81ddf53f898$var$PipelineRequest().on("error", $dZB1o.nop);
        this.ret = new $f518c81ddf53f898$require$Duplex({
            readableObjectMode: opts.objectMode,
            autoDestroy: true,
            read: ()=>{
                const { body: body } = this;
                if (body && body.resume) body.resume();
            },
            write: (chunk, encoding, callback)=>{
                const { req: req } = this;
                if (req.push(chunk, encoding) || req._readableState.destroyed) callback();
                else req[$f518c81ddf53f898$var$kResume] = callback;
            },
            destroy: (err, callback)=>{
                const { body: body, req: req, res: res, ret: ret, abort: abort } = this;
                if (!err && !ret._readableState.endEmitted) err = new $f518c81ddf53f898$require$RequestAbortedError();
                if (abort && err) abort();
                $dZB1o.destroy(body, err);
                $dZB1o.destroy(req, err);
                $dZB1o.destroy(res, err);
                $f518c81ddf53f898$require$removeSignal(this);
                callback(err);
            }
        }).on("prefinish", ()=>{
            const { req: req } = this;
            // Node < 15 does not call _final in same tick.
            req.push(null);
        });
        this.res = null;
        $f518c81ddf53f898$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        const { ret: ret, res: res } = this;
        $4UN2M$assert(!res, "pipeline cannot be retried");
        if (ret.destroyed) throw new $f518c81ddf53f898$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume) {
        const { opaque: opaque, handler: handler, context: context } = this;
        if (statusCode < 200) {
            if (this.onInfo) {
                const headers = this.responseHeaders === "raw" ? $dZB1o.parseRawHeaders(rawHeaders) : $dZB1o.parseHeaders(rawHeaders);
                this.onInfo({
                    statusCode: statusCode,
                    headers: headers
                });
            }
            return;
        }
        this.res = new $f518c81ddf53f898$var$PipelineResponse(resume);
        let body;
        try {
            this.handler = null;
            const headers = this.responseHeaders === "raw" ? $dZB1o.parseRawHeaders(rawHeaders) : $dZB1o.parseHeaders(rawHeaders);
            body = this.runInAsyncScope(handler, null, {
                statusCode: statusCode,
                headers: headers,
                opaque: opaque,
                body: this.res,
                context: context
            });
        } catch (err) {
            this.res.on("error", $dZB1o.nop);
            throw err;
        }
        if (!body || typeof body.on !== "function") throw new $f518c81ddf53f898$require$InvalidReturnValueError("expected Readable");
        body.on("data", (chunk)=>{
            const { ret: ret, body: body } = this;
            if (!ret.push(chunk) && body.pause) body.pause();
        }).on("error", (err)=>{
            const { ret: ret } = this;
            $dZB1o.destroy(ret, err);
        }).on("end", ()=>{
            const { ret: ret } = this;
            ret.push(null);
        }).on("close", ()=>{
            const { ret: ret } = this;
            if (!ret._readableState.ended) $dZB1o.destroy(ret, new $f518c81ddf53f898$require$RequestAbortedError());
        });
        this.body = body;
    }
    onData(chunk) {
        const { res: res } = this;
        return res.push(chunk);
    }
    onComplete(trailers) {
        const { res: res } = this;
        res.push(null);
    }
    onError(err) {
        const { ret: ret } = this;
        this.handler = null;
        $dZB1o.destroy(ret, err);
    }
}
function $f518c81ddf53f898$var$pipeline(opts, handler) {
    try {
        const pipelineHandler = new $f518c81ddf53f898$var$PipelineHandler(opts, handler);
        this.dispatch({
            ...opts,
            body: pipelineHandler.req
        }, pipelineHandler);
        return pipelineHandler.ret;
    } catch (err) {
        return new $f518c81ddf53f898$require$PassThrough().destroy(err);
    }
}
module.exports = $f518c81ddf53f898$var$pipeline;

});

parcelRegister("cpmJw", function(module, exports) {
"use strict";

var $7bgOU = parcelRequire("7bgOU");
var $9089742b3892aef4$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $9089742b3892aef4$require$RequestAbortedError = $7bgOU.RequestAbortedError;
var $9089742b3892aef4$require$SocketError = $7bgOU.SocketError;

var $9089742b3892aef4$require$AsyncResource = $4UN2M$async_hooks.AsyncResource;

var $dZB1o = parcelRequire("dZB1o");

var $j8mI5 = parcelRequire("j8mI5");
var $9089742b3892aef4$require$addSignal = $j8mI5.addSignal;
var $9089742b3892aef4$require$removeSignal = $j8mI5.removeSignal;

class $9089742b3892aef4$var$UpgradeHandler extends $9089742b3892aef4$require$AsyncResource {
    constructor(opts, callback){
        if (!opts || typeof opts !== "object") throw new $9089742b3892aef4$require$InvalidArgumentError("invalid opts");
        if (typeof callback !== "function") throw new $9089742b3892aef4$require$InvalidArgumentError("invalid callback");
        const { signal: signal, opaque: opaque, responseHeaders: responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $9089742b3892aef4$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        super("UNDICI_UPGRADE");
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.abort = null;
        this.context = null;
        $9089742b3892aef4$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $9089742b3892aef4$require$RequestAbortedError();
        this.abort = abort;
        this.context = null;
    }
    onHeaders() {
        throw new $9089742b3892aef4$require$SocketError("bad upgrade", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
        const { callback: callback, opaque: opaque, context: context } = this;
        $4UN2M$assert.strictEqual(statusCode, 101);
        $9089742b3892aef4$require$removeSignal(this);
        this.callback = null;
        const headers = this.responseHeaders === "raw" ? $dZB1o.parseRawHeaders(rawHeaders) : $dZB1o.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
            headers: headers,
            socket: socket,
            opaque: opaque,
            context: context
        });
    }
    onError(err) {
        const { callback: callback, opaque: opaque } = this;
        $9089742b3892aef4$require$removeSignal(this);
        if (callback) {
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
    }
}
function $9089742b3892aef4$var$upgrade(opts, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $9089742b3892aef4$var$upgrade.call(this, opts, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        const upgradeHandler = new $9089742b3892aef4$var$UpgradeHandler(opts, callback);
        this.dispatch({
            ...opts,
            method: opts.method || "GET",
            upgrade: opts.protocol || "Websocket"
        }, upgradeHandler);
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $9089742b3892aef4$var$upgrade;

});

parcelRegister("asHB6", function(module, exports) {
"use strict";

var $79de566e62862027$require$AsyncResource = $4UN2M$async_hooks.AsyncResource;

var $7bgOU = parcelRequire("7bgOU");
var $79de566e62862027$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $79de566e62862027$require$RequestAbortedError = $7bgOU.RequestAbortedError;
var $79de566e62862027$require$SocketError = $7bgOU.SocketError;

var $dZB1o = parcelRequire("dZB1o");

var $j8mI5 = parcelRequire("j8mI5");
var $79de566e62862027$require$addSignal = $j8mI5.addSignal;
var $79de566e62862027$require$removeSignal = $j8mI5.removeSignal;
class $79de566e62862027$var$ConnectHandler extends $79de566e62862027$require$AsyncResource {
    constructor(opts, callback){
        if (!opts || typeof opts !== "object") throw new $79de566e62862027$require$InvalidArgumentError("invalid opts");
        if (typeof callback !== "function") throw new $79de566e62862027$require$InvalidArgumentError("invalid callback");
        const { signal: signal, opaque: opaque, responseHeaders: responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new $79de566e62862027$require$InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        super("UNDICI_CONNECT");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.callback = callback;
        this.abort = null;
        $79de566e62862027$require$addSignal(this, signal);
    }
    onConnect(abort, context) {
        if (!this.callback) throw new $79de566e62862027$require$RequestAbortedError();
        this.abort = abort;
        this.context = context;
    }
    onHeaders() {
        throw new $79de566e62862027$require$SocketError("bad connect", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
        const { callback: callback, opaque: opaque, context: context } = this;
        $79de566e62862027$require$removeSignal(this);
        this.callback = null;
        let headers = rawHeaders;
        // Indicates is an HTTP2Session
        if (headers != null) headers = this.responseHeaders === "raw" ? $dZB1o.parseRawHeaders(rawHeaders) : $dZB1o.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
            statusCode: statusCode,
            headers: headers,
            socket: socket,
            opaque: opaque,
            context: context
        });
    }
    onError(err) {
        const { callback: callback, opaque: opaque } = this;
        $79de566e62862027$require$removeSignal(this);
        if (callback) {
            this.callback = null;
            queueMicrotask(()=>{
                this.runInAsyncScope(callback, null, err, {
                    opaque: opaque
                });
            });
        }
    }
}
function $79de566e62862027$var$connect(opts, callback) {
    if (callback === undefined) return new Promise((resolve, reject)=>{
        $79de566e62862027$var$connect.call(this, opts, (err, data)=>{
            return err ? reject(err) : resolve(data);
        });
    });
    try {
        const connectHandler = new $79de566e62862027$var$ConnectHandler(opts, callback);
        this.dispatch({
            ...opts,
            method: "CONNECT"
        }, connectHandler);
    } catch (err) {
        if (typeof callback !== "function") throw err;
        const opaque = opts && opts.opaque;
        queueMicrotask(()=>callback(err, {
                opaque: opaque
            }));
    }
}
module.exports = $79de566e62862027$var$connect;

});

parcelRegister("9lkwe", function(module, exports) {
// https://github.com/Ethan-Arrowood/undici-fetch
"use strict";

var $PC2zs = parcelRequire("PC2zs");
var $6cd5fdd1367e9e32$require$Response = $PC2zs.Response;
var $6cd5fdd1367e9e32$require$makeNetworkError = $PC2zs.makeNetworkError;
var $6cd5fdd1367e9e32$require$makeAppropriateNetworkError = $PC2zs.makeAppropriateNetworkError;
var $6cd5fdd1367e9e32$require$filterResponse = $PC2zs.filterResponse;
var $6cd5fdd1367e9e32$require$makeResponse = $PC2zs.makeResponse;

var $30zmV = parcelRequire("30zmV");
var $6cd5fdd1367e9e32$require$Headers = $30zmV.Headers;

var $73TbT = parcelRequire("73TbT");
var $6cd5fdd1367e9e32$require$Request = $73TbT.Request;
var $6cd5fdd1367e9e32$require$makeRequest = $73TbT.makeRequest;


var $7zBpt = parcelRequire("7zBpt");
var $6cd5fdd1367e9e32$require$bytesMatch = $7zBpt.bytesMatch;
var $6cd5fdd1367e9e32$require$makePolicyContainer = $7zBpt.makePolicyContainer;
var $6cd5fdd1367e9e32$require$clonePolicyContainer = $7zBpt.clonePolicyContainer;
var $6cd5fdd1367e9e32$require$requestBadPort = $7zBpt.requestBadPort;
var $6cd5fdd1367e9e32$require$TAOCheck = $7zBpt.TAOCheck;
var $6cd5fdd1367e9e32$require$appendRequestOriginHeader = $7zBpt.appendRequestOriginHeader;
var $6cd5fdd1367e9e32$require$responseLocationURL = $7zBpt.responseLocationURL;
var $6cd5fdd1367e9e32$require$requestCurrentURL = $7zBpt.requestCurrentURL;
var $6cd5fdd1367e9e32$require$setRequestReferrerPolicyOnRedirect = $7zBpt.setRequestReferrerPolicyOnRedirect;
var $6cd5fdd1367e9e32$require$tryUpgradeRequestToAPotentiallyTrustworthyURL = $7zBpt.tryUpgradeRequestToAPotentiallyTrustworthyURL;
var $6cd5fdd1367e9e32$require$createOpaqueTimingInfo = $7zBpt.createOpaqueTimingInfo;
var $6cd5fdd1367e9e32$require$appendFetchMetadata = $7zBpt.appendFetchMetadata;
var $6cd5fdd1367e9e32$require$corsCheck = $7zBpt.corsCheck;
var $6cd5fdd1367e9e32$require$crossOriginResourcePolicyCheck = $7zBpt.crossOriginResourcePolicyCheck;
var $6cd5fdd1367e9e32$require$determineRequestsReferrer = $7zBpt.determineRequestsReferrer;
var $6cd5fdd1367e9e32$require$coarsenedSharedCurrentTime = $7zBpt.coarsenedSharedCurrentTime;
var $6cd5fdd1367e9e32$require$createDeferredPromise = $7zBpt.createDeferredPromise;
var $6cd5fdd1367e9e32$require$isBlobLike = $7zBpt.isBlobLike;
var $6cd5fdd1367e9e32$require$sameOrigin = $7zBpt.sameOrigin;
var $6cd5fdd1367e9e32$require$isCancelled = $7zBpt.isCancelled;
var $6cd5fdd1367e9e32$require$isAborted = $7zBpt.isAborted;
var $6cd5fdd1367e9e32$require$isErrorLike = $7zBpt.isErrorLike;
var $6cd5fdd1367e9e32$require$fullyReadBody = $7zBpt.fullyReadBody;
var $6cd5fdd1367e9e32$require$readableStreamClose = $7zBpt.readableStreamClose;
var $6cd5fdd1367e9e32$require$isomorphicEncode = $7zBpt.isomorphicEncode;
var $6cd5fdd1367e9e32$require$urlIsLocal = $7zBpt.urlIsLocal;
var $6cd5fdd1367e9e32$require$urlIsHttpHttpsScheme = $7zBpt.urlIsHttpHttpsScheme;
var $6cd5fdd1367e9e32$require$urlHasHttpsScheme = $7zBpt.urlHasHttpsScheme;

var $2cSZe = parcelRequire("2cSZe");
var $6cd5fdd1367e9e32$require$kState = $2cSZe.kState;
var $6cd5fdd1367e9e32$require$kHeaders = $2cSZe.kHeaders;
var $6cd5fdd1367e9e32$require$kGuard = $2cSZe.kGuard;
var $6cd5fdd1367e9e32$require$kRealm = $2cSZe.kRealm;


var $8gSQD = parcelRequire("8gSQD");
var $6cd5fdd1367e9e32$require$safelyExtractBody = $8gSQD.safelyExtractBody;

var $fUNmM = parcelRequire("fUNmM");
var $6cd5fdd1367e9e32$require$redirectStatusSet = $fUNmM.redirectStatusSet;
var $6cd5fdd1367e9e32$require$nullBodyStatus = $fUNmM.nullBodyStatus;
var $6cd5fdd1367e9e32$require$safeMethodsSet = $fUNmM.safeMethodsSet;
var $6cd5fdd1367e9e32$require$requestBodyHeader = $fUNmM.requestBodyHeader;
var $6cd5fdd1367e9e32$require$subresourceSet = $fUNmM.subresourceSet;
var $6cd5fdd1367e9e32$require$DOMException = $fUNmM.DOMException;

var $9Yodq = parcelRequire("9Yodq");
var $6cd5fdd1367e9e32$require$kHeadersList = $9Yodq.kHeadersList;


var $6cd5fdd1367e9e32$require$Readable = $4UN2M$stream.Readable;
var $6cd5fdd1367e9e32$require$pipeline = $4UN2M$stream.pipeline;

var $dZB1o = parcelRequire("dZB1o");
var $6cd5fdd1367e9e32$require$addAbortListener = $dZB1o.addAbortListener;
var $6cd5fdd1367e9e32$require$isErrored = $dZB1o.isErrored;
var $6cd5fdd1367e9e32$require$isReadable = $dZB1o.isReadable;
var $6cd5fdd1367e9e32$require$nodeMajor = $dZB1o.nodeMajor;
var $6cd5fdd1367e9e32$require$nodeMinor = $dZB1o.nodeMinor;

var $h1hYV = parcelRequire("h1hYV");
var $6cd5fdd1367e9e32$require$dataURLProcessor = $h1hYV.dataURLProcessor;
var $6cd5fdd1367e9e32$require$serializeAMimeType = $h1hYV.serializeAMimeType;

var $6cd5fdd1367e9e32$require$TransformStream = $4UN2M$streamweb.TransformStream;

var $9L2fX = parcelRequire("9L2fX");
var $6cd5fdd1367e9e32$require$getGlobalDispatcher = $9L2fX.getGlobalDispatcher;

var $7jIZt = parcelRequire("7jIZt");
var $6cd5fdd1367e9e32$require$webidl = $7jIZt.webidl;

var $6cd5fdd1367e9e32$require$STATUS_CODES = $4UN2M$http.STATUS_CODES;
const $6cd5fdd1367e9e32$var$GET_OR_HEAD = [
    "GET",
    "HEAD"
];
/** @type {import('buffer').resolveObjectURL} */ let $6cd5fdd1367e9e32$var$resolveObjectURL;
let $6cd5fdd1367e9e32$var$ReadableStream = globalThis.ReadableStream;
class $6cd5fdd1367e9e32$var$Fetch extends $4UN2M$events {
    constructor(dispatcher){
        super();
        this.dispatcher = dispatcher;
        this.connection = null;
        this.dump = false;
        this.state = "ongoing";
        // 2 terminated listeners get added per request,
        // but only 1 gets removed. If there are 20 redirects,
        // 21 listeners will be added.
        // See https://github.com/nodejs/undici/issues/1711
        // TODO (fix): Find and fix root cause for leaked listener.
        this.setMaxListeners(21);
    }
    terminate(reason) {
        if (this.state !== "ongoing") return;
        this.state = "terminated";
        this.connection?.destroy(reason);
        this.emit("terminated", reason);
    }
    // https://fetch.spec.whatwg.org/#fetch-controller-abort
    abort(error) {
        if (this.state !== "ongoing") return;
        // 1. Set controller’s state to "aborted".
        this.state = "aborted";
        // 2. Let fallbackError be an "AbortError" DOMException.
        // 3. Set error to fallbackError if it is not given.
        if (!error) error = new $6cd5fdd1367e9e32$require$DOMException("The operation was aborted.", "AbortError");
        // 4. Let serializedError be StructuredSerialize(error).
        //    If that threw an exception, catch it, and let
        //    serializedError be StructuredSerialize(fallbackError).
        // 5. Set controller’s serialized abort reason to serializedError.
        this.serializedAbortReason = error;
        this.connection?.destroy(error);
        this.emit("terminated", error);
    }
}
// https://fetch.spec.whatwg.org/#fetch-method
function $6cd5fdd1367e9e32$var$fetch(input, init = {}) {
    $6cd5fdd1367e9e32$require$webidl.argumentLengthCheck(arguments, 1, {
        header: "globalThis.fetch"
    });
    // 1. Let p be a new promise.
    const p = $6cd5fdd1367e9e32$require$createDeferredPromise();
    // 2. Let requestObject be the result of invoking the initial value of
    // Request as constructor with input and init as arguments. If this throws
    // an exception, reject p with it and return p.
    let requestObject;
    try {
        requestObject = new $6cd5fdd1367e9e32$require$Request(input, init);
    } catch (e) {
        p.reject(e);
        return p.promise;
    }
    // 3. Let request be requestObject’s request.
    const request = requestObject[$6cd5fdd1367e9e32$require$kState];
    // 4. If requestObject’s signal’s aborted flag is set, then:
    if (requestObject.signal.aborted) {
        // 1. Abort the fetch() call with p, request, null, and
        //    requestObject’s signal’s abort reason.
        $6cd5fdd1367e9e32$var$abortFetch(p, request, null, requestObject.signal.reason);
        // 2. Return p.
        return p.promise;
    }
    // 5. Let globalObject be request’s client’s global object.
    const globalObject = request.client.globalObject;
    // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
    // request’s service-workers mode to "none".
    if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") request.serviceWorkers = "none";
    // 7. Let responseObject be null.
    let responseObject = null;
    // 8. Let relevantRealm be this’s relevant Realm.
    const relevantRealm = null;
    // 9. Let locallyAborted be false.
    let locallyAborted = false;
    // 10. Let controller be null.
    let controller = null;
    // 11. Add the following abort steps to requestObject’s signal:
    $6cd5fdd1367e9e32$require$addAbortListener(requestObject.signal, ()=>{
        // 1. Set locallyAborted to true.
        locallyAborted = true;
        // 2. Assert: controller is non-null.
        $4UN2M$assert(controller != null);
        // 3. Abort controller with requestObject’s signal’s abort reason.
        controller.abort(requestObject.signal.reason);
        // 4. Abort the fetch() call with p, request, responseObject,
        //    and requestObject’s signal’s abort reason.
        $6cd5fdd1367e9e32$var$abortFetch(p, request, responseObject, requestObject.signal.reason);
    });
    // 12. Let handleFetchDone given response response be to finalize and
    // report timing with response, globalObject, and "fetch".
    const handleFetchDone = (response)=>$6cd5fdd1367e9e32$var$finalizeAndReportTiming(response, "fetch");
    // 13. Set controller to the result of calling fetch given request,
    // with processResponseEndOfBody set to handleFetchDone, and processResponse
    // given response being these substeps:
    const processResponse = (response)=>{
        // 1. If locallyAborted is true, terminate these substeps.
        if (locallyAborted) return Promise.resolve();
        // 2. If response’s aborted flag is set, then:
        if (response.aborted) {
            // 1. Let deserializedError be the result of deserialize a serialized
            //    abort reason given controller’s serialized abort reason and
            //    relevantRealm.
            // 2. Abort the fetch() call with p, request, responseObject, and
            //    deserializedError.
            $6cd5fdd1367e9e32$var$abortFetch(p, request, responseObject, controller.serializedAbortReason);
            return Promise.resolve();
        }
        // 3. If response is a network error, then reject p with a TypeError
        // and terminate these substeps.
        if (response.type === "error") {
            p.reject(Object.assign(new TypeError("fetch failed"), {
                cause: response.error
            }));
            return Promise.resolve();
        }
        // 4. Set responseObject to the result of creating a Response object,
        // given response, "immutable", and relevantRealm.
        responseObject = new $6cd5fdd1367e9e32$require$Response();
        responseObject[$6cd5fdd1367e9e32$require$kState] = response;
        responseObject[$6cd5fdd1367e9e32$require$kRealm] = relevantRealm;
        responseObject[$6cd5fdd1367e9e32$require$kHeaders][$6cd5fdd1367e9e32$require$kHeadersList] = response.headersList;
        responseObject[$6cd5fdd1367e9e32$require$kHeaders][$6cd5fdd1367e9e32$require$kGuard] = "immutable";
        responseObject[$6cd5fdd1367e9e32$require$kHeaders][$6cd5fdd1367e9e32$require$kRealm] = relevantRealm;
        // 5. Resolve p with responseObject.
        p.resolve(responseObject);
    };
    controller = $6cd5fdd1367e9e32$var$fetching({
        request: request,
        processResponseEndOfBody: handleFetchDone,
        processResponse: processResponse,
        dispatcher: init.dispatcher ?? $6cd5fdd1367e9e32$require$getGlobalDispatcher() // undici
    });
    // 14. Return p.
    return p.promise;
}
// https://fetch.spec.whatwg.org/#finalize-and-report-timing
function $6cd5fdd1367e9e32$var$finalizeAndReportTiming(response, initiatorType = "other") {
    // 1. If response is an aborted network error, then return.
    if (response.type === "error" && response.aborted) return;
    // 2. If response’s URL list is null or empty, then return.
    if (!response.urlList?.length) return;
    // 3. Let originalURL be response’s URL list[0].
    const originalURL = response.urlList[0];
    // 4. Let timingInfo be response’s timing info.
    let timingInfo = response.timingInfo;
    // 5. Let cacheState be response’s cache state.
    let cacheState = response.cacheState;
    // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
    if (!$6cd5fdd1367e9e32$require$urlIsHttpHttpsScheme(originalURL)) return;
    // 7. If timingInfo is null, then return.
    if (timingInfo === null) return;
    // 8. If response’s timing allow passed flag is not set, then:
    if (!response.timingAllowPassed) {
        //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
        timingInfo = $6cd5fdd1367e9e32$require$createOpaqueTimingInfo({
            startTime: timingInfo.startTime
        });
        //  2. Set cacheState to the empty string.
        cacheState = "";
    }
    // 9. Set timingInfo’s end time to the coarsened shared current time
    // given global’s relevant settings object’s cross-origin isolated
    // capability.
    // TODO: given global’s relevant settings object’s cross-origin isolated
    // capability?
    timingInfo.endTime = $6cd5fdd1367e9e32$require$coarsenedSharedCurrentTime();
    // 10. Set response’s timing info to timingInfo.
    response.timingInfo = timingInfo;
    // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
    // global, and cacheState.
    $6cd5fdd1367e9e32$var$markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
}
// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
function $6cd5fdd1367e9e32$var$markResourceTiming(timingInfo, originalURL, initiatorType, globalThis1, cacheState) {
    if ($6cd5fdd1367e9e32$require$nodeMajor > 18 || $6cd5fdd1367e9e32$require$nodeMajor === 18 && $6cd5fdd1367e9e32$require$nodeMinor >= 2) performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis1, cacheState);
}
// https://fetch.spec.whatwg.org/#abort-fetch
function $6cd5fdd1367e9e32$var$abortFetch(p, request, responseObject, error) {
    // Note: AbortSignal.reason was added in node v17.2.0
    // which would give us an undefined error to reject with.
    // Remove this once node v16 is no longer supported.
    if (!error) error = new $6cd5fdd1367e9e32$require$DOMException("The operation was aborted.", "AbortError");
    // 1. Reject promise with error.
    p.reject(error);
    // 2. If request’s body is not null and is readable, then cancel request’s
    // body with error.
    if (request.body != null && $6cd5fdd1367e9e32$require$isReadable(request.body?.stream)) request.body.stream.cancel(error).catch((err)=>{
        if (err.code === "ERR_INVALID_STATE") // Node bug?
        return;
        throw err;
    });
    // 3. If responseObject is null, then return.
    if (responseObject == null) return;
    // 4. Let response be responseObject’s response.
    const response = responseObject[$6cd5fdd1367e9e32$require$kState];
    // 5. If response’s body is not null and is readable, then error response’s
    // body with error.
    if (response.body != null && $6cd5fdd1367e9e32$require$isReadable(response.body?.stream)) response.body.stream.cancel(error).catch((err)=>{
        if (err.code === "ERR_INVALID_STATE") // Node bug?
        return;
        throw err;
    });
}
// https://fetch.spec.whatwg.org/#fetching
function $6cd5fdd1367e9e32$var$fetching({ request: request, processRequestBodyChunkLength: processRequestBodyChunkLength, processRequestEndOfBody: processRequestEndOfBody, processResponse: processResponse, processResponseEndOfBody: processResponseEndOfBody, processResponseConsumeBody: processResponseConsumeBody, useParallelQueue: useParallelQueue = false, dispatcher: dispatcher // undici
 }) {
    // 1. Let taskDestination be null.
    let taskDestination = null;
    // 2. Let crossOriginIsolatedCapability be false.
    let crossOriginIsolatedCapability = false;
    // 3. If request’s client is non-null, then:
    if (request.client != null) {
        // 1. Set taskDestination to request’s client’s global object.
        taskDestination = request.client.globalObject;
        // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
        // isolated capability.
        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
    }
    // 4. If useParallelQueue is true, then set taskDestination to the result of
    // starting a new parallel queue.
    // TODO
    // 5. Let timingInfo be a new fetch timing info whose start time and
    // post-redirect start time are the coarsened shared current time given
    // crossOriginIsolatedCapability.
    const currenTime = $6cd5fdd1367e9e32$require$coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
    const timingInfo = $6cd5fdd1367e9e32$require$createOpaqueTimingInfo({
        startTime: currenTime
    });
    // 6. Let fetchParams be a new fetch params whose
    // request is request,
    // timing info is timingInfo,
    // process request body chunk length is processRequestBodyChunkLength,
    // process request end-of-body is processRequestEndOfBody,
    // process response is processResponse,
    // process response consume body is processResponseConsumeBody,
    // process response end-of-body is processResponseEndOfBody,
    // task destination is taskDestination,
    // and cross-origin isolated capability is crossOriginIsolatedCapability.
    const fetchParams = {
        controller: new $6cd5fdd1367e9e32$var$Fetch(dispatcher),
        request: request,
        timingInfo: timingInfo,
        processRequestBodyChunkLength: processRequestBodyChunkLength,
        processRequestEndOfBody: processRequestEndOfBody,
        processResponse: processResponse,
        processResponseConsumeBody: processResponseConsumeBody,
        processResponseEndOfBody: processResponseEndOfBody,
        taskDestination: taskDestination,
        crossOriginIsolatedCapability: crossOriginIsolatedCapability
    };
    // 7. If request’s body is a byte sequence, then set request’s body to
    //    request’s body as a body.
    // NOTE: Since fetching is only called from fetch, body should already be
    // extracted.
    $4UN2M$assert(!request.body || request.body.stream);
    // 8. If request’s window is "client", then set request’s window to request’s
    // client, if request’s client’s global object is a Window object; otherwise
    // "no-window".
    if (request.window === "client") // TODO: What if request.client is null?
    request.window = request.client?.globalObject?.constructor?.name === "Window" ? request.client : "no-window";
    // 9. If request’s origin is "client", then set request’s origin to request’s
    // client’s origin.
    if (request.origin === "client") // TODO: What if request.client is null?
    request.origin = request.client?.origin;
    // 10. If all of the following conditions are true:
    // TODO
    // 11. If request’s policy container is "client", then:
    if (request.policyContainer === "client") {
        // 1. If request’s client is non-null, then set request’s policy
        // container to a clone of request’s client’s policy container. [HTML]
        if (request.client != null) request.policyContainer = $6cd5fdd1367e9e32$require$clonePolicyContainer(request.client.policyContainer);
        else // 2. Otherwise, set request’s policy container to a new policy
        // container.
        request.policyContainer = $6cd5fdd1367e9e32$require$makePolicyContainer();
    }
    // 12. If request’s header list does not contain `Accept`, then:
    if (!request.headersList.contains("accept")) {
        // 1. Let value be `*/*`.
        const value = "*/*";
        // 2. A user agent should set value to the first matching statement, if
        // any, switching on request’s destination:
        // "document"
        // "frame"
        // "iframe"
        // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
        // "image"
        // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
        // "style"
        // `text/css,*/*;q=0.1`
        // TODO
        // 3. Append `Accept`/value to request’s header list.
        request.headersList.append("accept", value);
    }
    // 13. If request’s header list does not contain `Accept-Language`, then
    // user agents should append `Accept-Language`/an appropriate value to
    // request’s header list.
    if (!request.headersList.contains("accept-language")) request.headersList.append("accept-language", "*");
    // 14. If request’s priority is null, then use request’s initiator and
    // destination appropriately in setting request’s priority to a
    // user-agent-defined object.
    request.priority;
    // 15. If request is a subresource request, then:
    $6cd5fdd1367e9e32$require$subresourceSet.has(request.destination);
    // 16. Run main fetch given fetchParams.
    $6cd5fdd1367e9e32$var$mainFetch(fetchParams).catch((err)=>{
        fetchParams.controller.terminate(err);
    });
    // 17. Return fetchParam's controller
    return fetchParams.controller;
}
// https://fetch.spec.whatwg.org/#concept-main-fetch
async function $6cd5fdd1367e9e32$var$mainFetch(fetchParams, recursive = false) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let response be null.
    let response = null;
    // 3. If request’s local-URLs-only flag is set and request’s current URL is
    // not local, then set response to a network error.
    if (request.localURLsOnly && !$6cd5fdd1367e9e32$require$urlIsLocal($6cd5fdd1367e9e32$require$requestCurrentURL(request))) response = $6cd5fdd1367e9e32$require$makeNetworkError("local URLs only");
    // 4. Run report Content Security Policy violations for request.
    // TODO
    // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
    $6cd5fdd1367e9e32$require$tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
    // 6. If should request be blocked due to a bad port, should fetching request
    // be blocked as mixed content, or should request be blocked by Content
    // Security Policy returns blocked, then set response to a network error.
    if ($6cd5fdd1367e9e32$require$requestBadPort(request) === "blocked") response = $6cd5fdd1367e9e32$require$makeNetworkError("bad port");
    // TODO: should fetching request be blocked as mixed content?
    // TODO: should request be blocked by Content Security Policy?
    // 7. If request’s referrer policy is the empty string, then set request’s
    // referrer policy to request’s policy container’s referrer policy.
    if (request.referrerPolicy === "") request.referrerPolicy = request.policyContainer.referrerPolicy;
    // 8. If request’s referrer is not "no-referrer", then set request’s
    // referrer to the result of invoking determine request’s referrer.
    if (request.referrer !== "no-referrer") request.referrer = $6cd5fdd1367e9e32$require$determineRequestsReferrer(request);
    // 9. Set request’s current URL’s scheme to "https" if all of the following
    // conditions are true:
    // - request’s current URL’s scheme is "http"
    // - request’s current URL’s host is a domain
    // - Matching request’s current URL’s host per Known HSTS Host Domain Name
    //   Matching results in either a superdomain match with an asserted
    //   includeSubDomains directive or a congruent match (with or without an
    //   asserted includeSubDomains directive). [HSTS]
    // TODO
    // 10. If recursive is false, then run the remaining steps in parallel.
    // TODO
    // 11. If response is null, then set response to the result of running
    // the steps corresponding to the first matching statement:
    if (response === null) response = await (async ()=>{
        const currentURL = $6cd5fdd1367e9e32$require$requestCurrentURL(request);
        if (// - request’s current URL’s origin is same origin with request’s origin,
        //   and request’s response tainting is "basic"
        $6cd5fdd1367e9e32$require$sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || // request’s current URL’s scheme is "data"
        currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
        request.mode === "navigate" || request.mode === "websocket") {
            // 1. Set request’s response tainting to "basic".
            request.responseTainting = "basic";
            // 2. Return the result of running scheme fetch given fetchParams.
            return await $6cd5fdd1367e9e32$var$schemeFetch(fetchParams);
        }
        // request’s mode is "same-origin"
        if (request.mode === "same-origin") // 1. Return a network error.
        return $6cd5fdd1367e9e32$require$makeNetworkError('request mode cannot be "same-origin"');
        // request’s mode is "no-cors"
        if (request.mode === "no-cors") {
            // 1. If request’s redirect mode is not "follow", then return a network
            // error.
            if (request.redirect !== "follow") return $6cd5fdd1367e9e32$require$makeNetworkError('redirect mode cannot be "follow" for "no-cors" request');
            // 2. Set request’s response tainting to "opaque".
            request.responseTainting = "opaque";
            // 3. Return the result of running scheme fetch given fetchParams.
            return await $6cd5fdd1367e9e32$var$schemeFetch(fetchParams);
        }
        // request’s current URL’s scheme is not an HTTP(S) scheme
        if (!$6cd5fdd1367e9e32$require$urlIsHttpHttpsScheme($6cd5fdd1367e9e32$require$requestCurrentURL(request))) // Return a network error.
        return $6cd5fdd1367e9e32$require$makeNetworkError("URL scheme must be a HTTP(S) scheme");
        // - request’s use-CORS-preflight flag is set
        // - request’s unsafe-request flag is set and either request’s method is
        //   not a CORS-safelisted method or CORS-unsafe request-header names with
        //   request’s header list is not empty
        //    1. Set request’s response tainting to "cors".
        //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
        //    given fetchParams and true.
        //    3. If corsWithPreflightResponse is a network error, then clear cache
        //    entries using request.
        //    4. Return corsWithPreflightResponse.
        // TODO
        // Otherwise
        //    1. Set request’s response tainting to "cors".
        request.responseTainting = "cors";
        //    2. Return the result of running HTTP fetch given fetchParams.
        return await $6cd5fdd1367e9e32$var$httpFetch(fetchParams);
    })();
    // 12. If recursive is true, then return response.
    if (recursive) return response;
    // 13. If response is not a network error and response is not a filtered
    // response, then:
    if (response.status !== 0 && !response.internalResponse) {
        // If request’s response tainting is "cors", then:
        request.responseTainting;
        // Set response to the following filtered response with response as its
        // internal response, depending on request’s response tainting:
        if (request.responseTainting === "basic") response = $6cd5fdd1367e9e32$require$filterResponse(response, "basic");
        else if (request.responseTainting === "cors") response = $6cd5fdd1367e9e32$require$filterResponse(response, "cors");
        else if (request.responseTainting === "opaque") response = $6cd5fdd1367e9e32$require$filterResponse(response, "opaque");
        else $4UN2M$assert(false);
    }
    // 14. Let internalResponse be response, if response is a network error,
    // and response’s internal response otherwise.
    let internalResponse = response.status === 0 ? response : response.internalResponse;
    // 15. If internalResponse’s URL list is empty, then set it to a clone of
    // request’s URL list.
    if (internalResponse.urlList.length === 0) internalResponse.urlList.push(...request.urlList);
    // 16. If request’s timing allow failed flag is unset, then set
    // internalResponse’s timing allow passed flag.
    if (!request.timingAllowFailed) response.timingAllowPassed = true;
    // 17. If response is not a network error and any of the following returns
    // blocked
    // - should internalResponse to request be blocked as mixed content
    // - should internalResponse to request be blocked by Content Security Policy
    // - should internalResponse to request be blocked due to its MIME type
    // - should internalResponse to request be blocked due to nosniff
    // TODO
    // 18. If response’s type is "opaque", internalResponse’s status is 206,
    // internalResponse’s range-requested flag is set, and request’s header
    // list does not contain `Range`, then set response and internalResponse
    // to a network error.
    if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range")) response = internalResponse = $6cd5fdd1367e9e32$require$makeNetworkError();
    // 19. If response is not a network error and either request’s method is
    // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
    // set internalResponse’s body to null and disregard any enqueuing toward
    // it (if any).
    if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || $6cd5fdd1367e9e32$require$nullBodyStatus.includes(internalResponse.status))) {
        internalResponse.body = null;
        fetchParams.controller.dump = true;
    }
    // 20. If request’s integrity metadata is not the empty string, then:
    if (request.integrity) {
        // 1. Let processBodyError be this step: run fetch finale given fetchParams
        // and a network error.
        const processBodyError = (reason)=>$6cd5fdd1367e9e32$var$fetchFinale(fetchParams, $6cd5fdd1367e9e32$require$makeNetworkError(reason));
        // 2. If request’s response tainting is "opaque", or response’s body is null,
        // then run processBodyError and abort these steps.
        if (request.responseTainting === "opaque" || response.body == null) {
            processBodyError(response.error);
            return;
        }
        // 3. Let processBody given bytes be these steps:
        const processBody = (bytes)=>{
            // 1. If bytes do not match request’s integrity metadata,
            // then run processBodyError and abort these steps. [SRI]
            if (!$6cd5fdd1367e9e32$require$bytesMatch(bytes, request.integrity)) {
                processBodyError("integrity mismatch");
                return;
            }
            // 2. Set response’s body to bytes as a body.
            response.body = $6cd5fdd1367e9e32$require$safelyExtractBody(bytes)[0];
            // 3. Run fetch finale given fetchParams and response.
            $6cd5fdd1367e9e32$var$fetchFinale(fetchParams, response);
        };
        // 4. Fully read response’s body given processBody and processBodyError.
        await $6cd5fdd1367e9e32$require$fullyReadBody(response.body, processBody, processBodyError);
    } else // 21. Otherwise, run fetch finale given fetchParams and response.
    $6cd5fdd1367e9e32$var$fetchFinale(fetchParams, response);
}

// https://fetch.spec.whatwg.org/#concept-scheme-fetch
// given a fetch params fetchParams
function $6cd5fdd1367e9e32$var$schemeFetch(fetchParams) {
    // Note: since the connection is destroyed on redirect, which sets fetchParams to a
    // cancelled state, we do not want this condition to trigger *unless* there have been
    // no redirects. See https://github.com/nodejs/undici/issues/1776
    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if ($6cd5fdd1367e9e32$require$isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) return Promise.resolve($6cd5fdd1367e9e32$require$makeAppropriateNetworkError(fetchParams));
    // 2. Let request be fetchParams’s request.
    const { request: request } = fetchParams;
    const { protocol: scheme } = $6cd5fdd1367e9e32$require$requestCurrentURL(request);
    // 3. Switch on request’s current URL’s scheme and run the associated steps:
    switch(scheme){
        case "about:":
            // If request’s current URL’s path is the string "blank", then return a new response
            // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
            // and body is the empty byte sequence as a body.
            // Otherwise, return a network error.
            return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("about scheme is not supported"));
        case "blob:":
            {
                if (!$6cd5fdd1367e9e32$var$resolveObjectURL) $6cd5fdd1367e9e32$var$resolveObjectURL = $4UN2M$buffer.resolveObjectURL;
                // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
                const blobURLEntry = $6cd5fdd1367e9e32$require$requestCurrentURL(request);
                // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
                // Buffer.resolveObjectURL does not ignore URL queries.
                if (blobURLEntry.search.length !== 0) return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("NetworkError when attempting to fetch resource."));
                const blobURLEntryObject = $6cd5fdd1367e9e32$var$resolveObjectURL(blobURLEntry.toString());
                // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
                //    object is not a Blob object, then return a network error.
                if (request.method !== "GET" || !$6cd5fdd1367e9e32$require$isBlobLike(blobURLEntryObject)) return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("invalid method"));
                // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
                const bodyWithType = $6cd5fdd1367e9e32$require$safelyExtractBody(blobURLEntryObject);
                // 4. Let body be bodyWithType’s body.
                const body = bodyWithType[0];
                // 5. Let length be body’s length, serialized and isomorphic encoded.
                const length = $6cd5fdd1367e9e32$require$isomorphicEncode(`${body.length}`);
                // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
                const type = bodyWithType[1] ?? "";
                // 7. Return a new response whose status message is `OK`, header list is
                //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
                const response = $6cd5fdd1367e9e32$require$makeResponse({
                    statusText: "OK",
                    headersList: [
                        [
                            "content-length",
                            {
                                name: "Content-Length",
                                value: length
                            }
                        ],
                        [
                            "content-type",
                            {
                                name: "Content-Type",
                                value: type
                            }
                        ]
                    ]
                });
                response.body = body;
                return Promise.resolve(response);
            }
        case "data:":
            {
                // 1. Let dataURLStruct be the result of running the
                //    data: URL processor on request’s current URL.
                const currentURL = $6cd5fdd1367e9e32$require$requestCurrentURL(request);
                const dataURLStruct = $6cd5fdd1367e9e32$require$dataURLProcessor(currentURL);
                // 2. If dataURLStruct is failure, then return a
                //    network error.
                if (dataURLStruct === "failure") return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("failed to fetch the data URL"));
                // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
                const mimeType = $6cd5fdd1367e9e32$require$serializeAMimeType(dataURLStruct.mimeType);
                // 4. Return a response whose status message is `OK`,
                //    header list is « (`Content-Type`, mimeType) »,
                //    and body is dataURLStruct’s body as a body.
                return Promise.resolve($6cd5fdd1367e9e32$require$makeResponse({
                    statusText: "OK",
                    headersList: [
                        [
                            "content-type",
                            {
                                name: "Content-Type",
                                value: mimeType
                            }
                        ]
                    ],
                    body: $6cd5fdd1367e9e32$require$safelyExtractBody(dataURLStruct.body)[0]
                }));
            }
        case "file:":
            // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
            // When in doubt, return a network error.
            return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("not implemented... yet..."));
        case "http:":
        case "https:":
            // Return the result of running HTTP fetch given fetchParams.
            return $6cd5fdd1367e9e32$var$httpFetch(fetchParams).catch((err)=>$6cd5fdd1367e9e32$require$makeNetworkError(err));
        default:
            return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("unknown scheme"));
    }
}
// https://fetch.spec.whatwg.org/#finalize-response
function $6cd5fdd1367e9e32$var$finalizeResponse(fetchParams, response) {
    // 1. Set fetchParams’s request’s done flag.
    fetchParams.request.done = true;
    // 2, If fetchParams’s process response done is not null, then queue a fetch
    // task to run fetchParams’s process response done given response, with
    // fetchParams’s task destination.
    if (fetchParams.processResponseDone != null) queueMicrotask(()=>fetchParams.processResponseDone(response));
}
// https://fetch.spec.whatwg.org/#fetch-finale
function $6cd5fdd1367e9e32$var$fetchFinale(fetchParams, response) {
    // 1. If response is a network error, then:
    if (response.type === "error") {
        // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
        response.urlList = [
            fetchParams.request.urlList[0]
        ];
        // 2. Set response’s timing info to the result of creating an opaque timing
        // info for fetchParams’s timing info.
        response.timingInfo = $6cd5fdd1367e9e32$require$createOpaqueTimingInfo({
            startTime: fetchParams.timingInfo.startTime
        });
    }
    // 2. Let processResponseEndOfBody be the following steps:
    const processResponseEndOfBody = ()=>{
        // 1. Set fetchParams’s request’s done flag.
        fetchParams.request.done = true;
        // If fetchParams’s process response end-of-body is not null,
        // then queue a fetch task to run fetchParams’s process response
        // end-of-body given response with fetchParams’s task destination.
        if (fetchParams.processResponseEndOfBody != null) queueMicrotask(()=>fetchParams.processResponseEndOfBody(response));
    };
    // 3. If fetchParams’s process response is non-null, then queue a fetch task
    // to run fetchParams’s process response given response, with fetchParams’s
    // task destination.
    if (fetchParams.processResponse != null) queueMicrotask(()=>fetchParams.processResponse(response));
    // 4. If response’s body is null, then run processResponseEndOfBody.
    if (response.body == null) processResponseEndOfBody();
    else {
        // 5. Otherwise:
        // 1. Let transformStream be a new a TransformStream.
        // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
        // enqueues chunk in transformStream.
        const identityTransformAlgorithm = (chunk, controller)=>{
            controller.enqueue(chunk);
        };
        // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
        // and flushAlgorithm set to processResponseEndOfBody.
        const transformStream = new $6cd5fdd1367e9e32$require$TransformStream({
            start () {},
            transform: identityTransformAlgorithm,
            flush: processResponseEndOfBody
        }, {
            size () {
                return 1;
            }
        }, {
            size () {
                return 1;
            }
        });
        // 4. Set response’s body to the result of piping response’s body through transformStream.
        response.body = {
            stream: response.body.stream.pipeThrough(transformStream)
        };
    }
    // 6. If fetchParams’s process response consume body is non-null, then:
    if (fetchParams.processResponseConsumeBody != null) {
        // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
        // process response consume body given response and nullOrBytes.
        const processBody = (nullOrBytes)=>fetchParams.processResponseConsumeBody(response, nullOrBytes);
        // 2. Let processBodyError be this step: run fetchParams’s process
        // response consume body given response and failure.
        const processBodyError = (failure)=>fetchParams.processResponseConsumeBody(response, failure);
        // 3. If response’s body is null, then queue a fetch task to run processBody
        // given null, with fetchParams’s task destination.
        if (response.body == null) queueMicrotask(()=>processBody(null));
        else // 4. Otherwise, fully read response’s body given processBody, processBodyError,
        // and fetchParams’s task destination.
        return $6cd5fdd1367e9e32$require$fullyReadBody(response.body, processBody, processBodyError);
        return Promise.resolve();
    }
}
// https://fetch.spec.whatwg.org/#http-fetch
async function $6cd5fdd1367e9e32$var$httpFetch(fetchParams) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let response be null.
    let response = null;
    // 3. Let actualResponse be null.
    let actualResponse = null;
    // 4. Let timingInfo be fetchParams’s timing info.
    const timingInfo = fetchParams.timingInfo;
    // 5. If request’s service-workers mode is "all", then:
    request.serviceWorkers;
    // 6. If response is null, then:
    if (response === null) {
        // 1. If makeCORSPreflight is true and one of these conditions is true:
        // TODO
        // 2. If request’s redirect mode is "follow", then set request’s
        // service-workers mode to "none".
        if (request.redirect === "follow") request.serviceWorkers = "none";
        // 3. Set response and actualResponse to the result of running
        // HTTP-network-or-cache fetch given fetchParams.
        actualResponse = response = await $6cd5fdd1367e9e32$var$httpNetworkOrCacheFetch(fetchParams);
        // 4. If request’s response tainting is "cors" and a CORS check
        // for request and response returns failure, then return a network error.
        if (request.responseTainting === "cors" && $6cd5fdd1367e9e32$require$corsCheck(request, response) === "failure") return $6cd5fdd1367e9e32$require$makeNetworkError("cors failure");
        // 5. If the TAO check for request and response returns failure, then set
        // request’s timing allow failed flag.
        if ($6cd5fdd1367e9e32$require$TAOCheck(request, response) === "failure") request.timingAllowFailed = true;
    }
    // 7. If either request’s response tainting or response’s type
    // is "opaque", and the cross-origin resource policy check with
    // request’s origin, request’s client, request’s destination,
    // and actualResponse returns blocked, then return a network error.
    if ((request.responseTainting === "opaque" || response.type === "opaque") && $6cd5fdd1367e9e32$require$crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === "blocked") return $6cd5fdd1367e9e32$require$makeNetworkError("blocked");
    // 8. If actualResponse’s status is a redirect status, then:
    if ($6cd5fdd1367e9e32$require$redirectStatusSet.has(actualResponse.status)) {
        // 1. If actualResponse’s status is not 303, request’s body is not null,
        // and the connection uses HTTP/2, then user agents may, and are even
        // encouraged to, transmit an RST_STREAM frame.
        // See, https://github.com/whatwg/fetch/issues/1288
        if (request.redirect !== "manual") fetchParams.controller.connection.destroy();
        // 2. Switch on request’s redirect mode:
        if (request.redirect === "error") // Set response to a network error.
        response = $6cd5fdd1367e9e32$require$makeNetworkError("unexpected redirect");
        else if (request.redirect === "manual") // Set response to an opaque-redirect filtered response whose internal
        // response is actualResponse.
        // NOTE(spec): On the web this would return an `opaqueredirect` response,
        // but that doesn't make sense server side.
        // See https://github.com/nodejs/undici/issues/1193.
        response = actualResponse;
        else if (request.redirect === "follow") // Set response to the result of running HTTP-redirect fetch given
        // fetchParams and response.
        response = await $6cd5fdd1367e9e32$var$httpRedirectFetch(fetchParams, response);
        else $4UN2M$assert(false);
    }
    // 9. Set response’s timing info to timingInfo.
    response.timingInfo = timingInfo;
    // 10. Return response.
    return response;
}
// https://fetch.spec.whatwg.org/#http-redirect-fetch
function $6cd5fdd1367e9e32$var$httpRedirectFetch(fetchParams, response) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let actualResponse be response, if response is not a filtered response,
    // and response’s internal response otherwise.
    const actualResponse = response.internalResponse ? response.internalResponse : response;
    // 3. Let locationURL be actualResponse’s location URL given request’s current
    // URL’s fragment.
    let locationURL;
    try {
        locationURL = $6cd5fdd1367e9e32$require$responseLocationURL(actualResponse, $6cd5fdd1367e9e32$require$requestCurrentURL(request).hash);
        // 4. If locationURL is null, then return response.
        if (locationURL == null) return response;
    } catch (err) {
        // 5. If locationURL is failure, then return a network error.
        return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError(err));
    }
    // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
    // error.
    if (!$6cd5fdd1367e9e32$require$urlIsHttpHttpsScheme(locationURL)) return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("URL scheme must be a HTTP(S) scheme"));
    // 7. If request’s redirect count is 20, then return a network error.
    if (request.redirectCount === 20) return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError("redirect count exceeded"));
    // 8. Increase request’s redirect count by 1.
    request.redirectCount += 1;
    // 9. If request’s mode is "cors", locationURL includes credentials, and
    // request’s origin is not same origin with locationURL’s origin, then return
    //  a network error.
    if (request.mode === "cors" && (locationURL.username || locationURL.password) && !$6cd5fdd1367e9e32$require$sameOrigin(request, locationURL)) return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError('cross origin not allowed for request mode "cors"'));
    // 10. If request’s response tainting is "cors" and locationURL includes
    // credentials, then return a network error.
    if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError('URL cannot contain credentials for request mode "cors"'));
    // 11. If actualResponse’s status is not 303, request’s body is non-null,
    // and request’s body’s source is null, then return a network error.
    if (actualResponse.status !== 303 && request.body != null && request.body.source == null) return Promise.resolve($6cd5fdd1367e9e32$require$makeNetworkError());
    // 12. If one of the following is true
    // - actualResponse’s status is 301 or 302 and request’s method is `POST`
    // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
    if ([
        301,
        302
    ].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !$6cd5fdd1367e9e32$var$GET_OR_HEAD.includes(request.method)) {
        // then:
        // 1. Set request’s method to `GET` and request’s body to null.
        request.method = "GET";
        request.body = null;
        // 2. For each headerName of request-body-header name, delete headerName from
        // request’s header list.
        for (const headerName of $6cd5fdd1367e9e32$require$requestBodyHeader)request.headersList.delete(headerName);
    }
    // 13. If request’s current URL’s origin is not same origin with locationURL’s
    //     origin, then for each headerName of CORS non-wildcard request-header name,
    //     delete headerName from request’s header list.
    if (!$6cd5fdd1367e9e32$require$sameOrigin($6cd5fdd1367e9e32$require$requestCurrentURL(request), locationURL)) {
        // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
        request.headersList.delete("authorization");
        // https://fetch.spec.whatwg.org/#authentication-entries
        request.headersList.delete("proxy-authorization", true);
        // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
        request.headersList.delete("cookie");
        request.headersList.delete("host");
    }
    // 14. If request’s body is non-null, then set request’s body to the first return
    // value of safely extracting request’s body’s source.
    if (request.body != null) {
        $4UN2M$assert(request.body.source != null);
        request.body = $6cd5fdd1367e9e32$require$safelyExtractBody(request.body.source)[0];
    }
    // 15. Let timingInfo be fetchParams’s timing info.
    const timingInfo = fetchParams.timingInfo;
    // 16. Set timingInfo’s redirect end time and post-redirect start time to the
    // coarsened shared current time given fetchParams’s cross-origin isolated
    // capability.
    timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = $6cd5fdd1367e9e32$require$coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
    // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
    //  redirect start time to timingInfo’s start time.
    if (timingInfo.redirectStartTime === 0) timingInfo.redirectStartTime = timingInfo.startTime;
    // 18. Append locationURL to request’s URL list.
    request.urlList.push(locationURL);
    // 19. Invoke set request’s referrer policy on redirect on request and
    // actualResponse.
    $6cd5fdd1367e9e32$require$setRequestReferrerPolicyOnRedirect(request, actualResponse);
    // 20. Return the result of running main fetch given fetchParams and true.
    return $6cd5fdd1367e9e32$var$mainFetch(fetchParams, true);
}
// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
async function $6cd5fdd1367e9e32$var$httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let httpFetchParams be null.
    let httpFetchParams = null;
    // 3. Let httpRequest be null.
    let httpRequest = null;
    // 4. Let response be null.
    let response = null;
    // 5. Let storedResponse be null.
    // TODO: cache
    // 6. Let httpCache be null.
    const httpCache = null;
    // 7. Let the revalidatingFlag be unset.
    const revalidatingFlag = false;
    // 8. Run these steps, but abort when the ongoing fetch is terminated:
    //    1. If request’s window is "no-window" and request’s redirect mode is
    //    "error", then set httpFetchParams to fetchParams and httpRequest to
    //    request.
    if (request.window === "no-window" && request.redirect === "error") {
        httpFetchParams = fetchParams;
        httpRequest = request;
    } else {
        // Otherwise:
        // 1. Set httpRequest to a clone of request.
        httpRequest = $6cd5fdd1367e9e32$require$makeRequest(request);
        // 2. Set httpFetchParams to a copy of fetchParams.
        httpFetchParams = {
            ...fetchParams
        };
        // 3. Set httpFetchParams’s request to httpRequest.
        httpFetchParams.request = httpRequest;
    }
    //    3. Let includeCredentials be true if one of
    const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
    //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
    //    body is non-null; otherwise null.
    const contentLength = httpRequest.body ? httpRequest.body.length : null;
    //    5. Let contentLengthHeaderValue be null.
    let contentLengthHeaderValue = null;
    //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
    //    `PUT`, then set contentLengthHeaderValue to `0`.
    if (httpRequest.body == null && [
        "POST",
        "PUT"
    ].includes(httpRequest.method)) contentLengthHeaderValue = "0";
    //    7. If contentLength is non-null, then set contentLengthHeaderValue to
    //    contentLength, serialized and isomorphic encoded.
    if (contentLength != null) contentLengthHeaderValue = $6cd5fdd1367e9e32$require$isomorphicEncode(`${contentLength}`);
    //    8. If contentLengthHeaderValue is non-null, then append
    //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
    //    list.
    if (contentLengthHeaderValue != null) httpRequest.headersList.append("content-length", contentLengthHeaderValue);
    //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
    //    contentLengthHeaderValue) to httpRequest’s header list.
    //    10. If contentLength is non-null and httpRequest’s keepalive is true,
    //    then:
    contentLength != null && httpRequest.keepalive;
    //    11. If httpRequest’s referrer is a URL, then append
    //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
    //     to httpRequest’s header list.
    if (httpRequest.referrer instanceof URL) httpRequest.headersList.append("referer", $6cd5fdd1367e9e32$require$isomorphicEncode(httpRequest.referrer.href));
    //    12. Append a request `Origin` header for httpRequest.
    $6cd5fdd1367e9e32$require$appendRequestOriginHeader(httpRequest);
    //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
    $6cd5fdd1367e9e32$require$appendFetchMetadata(httpRequest);
    //    14. If httpRequest’s header list does not contain `User-Agent`, then
    //    user agents should append `User-Agent`/default `User-Agent` value to
    //    httpRequest’s header list.
    if (!httpRequest.headersList.contains("user-agent")) httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
    //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
    //    list contains `If-Modified-Since`, `If-None-Match`,
    //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
    //    httpRequest’s cache mode to "no-store".
    if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) httpRequest.cache = "no-store";
    //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
    //    no-cache cache-control header modification flag is unset, and
    //    httpRequest’s header list does not contain `Cache-Control`, then append
    //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
    if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "max-age=0");
    //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
    if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
        // 1. If httpRequest’s header list does not contain `Pragma`, then append
        // `Pragma`/`no-cache` to httpRequest’s header list.
        if (!httpRequest.headersList.contains("pragma")) httpRequest.headersList.append("pragma", "no-cache");
        // 2. If httpRequest’s header list does not contain `Cache-Control`,
        // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
        if (!httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "no-cache");
    }
    //    18. If httpRequest’s header list contains `Range`, then append
    //    `Accept-Encoding`/`identity` to httpRequest’s header list.
    if (httpRequest.headersList.contains("range")) httpRequest.headersList.append("accept-encoding", "identity");
    //    19. Modify httpRequest’s header list per HTTP. Do not append a given
    //    header if httpRequest’s header list contains that header’s name.
    //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
    if (!httpRequest.headersList.contains("accept-encoding")) {
        if ($6cd5fdd1367e9e32$require$urlHasHttpsScheme($6cd5fdd1367e9e32$require$requestCurrentURL(httpRequest))) httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
        else httpRequest.headersList.append("accept-encoding", "gzip, deflate");
    }
    httpRequest.headersList.delete("host");
    //    20. If includeCredentials is true, then:
    includeCredentials;
    //    21. If there’s a proxy-authentication entry, use it as appropriate.
    //    TODO: proxy-authentication
    //    22. Set httpCache to the result of determining the HTTP cache
    //    partition, given httpRequest.
    //    TODO: cache
    //    23. If httpCache is null, then set httpRequest’s cache mode to
    //    "no-store".
    if (httpCache == null) httpRequest.cache = "no-store";
    //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
    //    then:
    httpRequest.mode !== "no-store" && httpRequest.mode;
    // 9. If aborted, then return the appropriate network error for fetchParams.
    // TODO
    // 10. If response is null, then:
    if (response == null) {
        // 1. If httpRequest’s cache mode is "only-if-cached", then return a
        // network error.
        if (httpRequest.mode === "only-if-cached") return $6cd5fdd1367e9e32$require$makeNetworkError("only if cached");
        // 2. Let forwardResponse be the result of running HTTP-network fetch
        // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
        const forwardResponse = await $6cd5fdd1367e9e32$var$httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
        // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
        // in the range 200 to 399, inclusive, invalidate appropriate stored
        // responses in httpCache, as per the "Invalidation" chapter of HTTP
        // Caching, and set storedResponse to null. [HTTP-CACHING]
        !$6cd5fdd1367e9e32$require$safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status;
        // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,
        // then:
        revalidatingFlag && forwardResponse.status;
        // 5. If response is null, then:
        if (response == null) // 1. Set response to forwardResponse.
        response = forwardResponse;
    }
    // 11. Set response’s URL list to a clone of httpRequest’s URL list.
    response.urlList = [
        ...httpRequest.urlList
    ];
    // 12. If httpRequest’s header list contains `Range`, then set response’s
    // range-requested flag.
    if (httpRequest.headersList.contains("range")) response.rangeRequested = true;
    // 13. Set response’s request-includes-credentials to includeCredentials.
    response.requestIncludesCredentials = includeCredentials;
    // 14. If response’s status is 401, httpRequest’s response tainting is not
    // "cors", includeCredentials is true, and request’s window is an environment
    // settings object, then:
    // TODO
    // 15. If response’s status is 407, then:
    if (response.status === 407) {
        // 1. If request’s window is "no-window", then return a network error.
        if (request.window === "no-window") return $6cd5fdd1367e9e32$require$makeNetworkError();
        // 2. ???
        // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
        if ($6cd5fdd1367e9e32$require$isCancelled(fetchParams)) return $6cd5fdd1367e9e32$require$makeAppropriateNetworkError(fetchParams);
        // 4. Prompt the end user as appropriate in request’s window and store
        // the result as a proxy-authentication entry. [HTTP-AUTH]
        // TODO: Invoke some kind of callback?
        // 5. Set response to the result of running HTTP-network-or-cache fetch given
        // fetchParams.
        // TODO
        return $6cd5fdd1367e9e32$require$makeNetworkError("proxy authentication required");
    }
    // 16. If all of the following are true
    if (// response’s status is 421
    response.status === 421 && // isNewConnectionFetch is false
    !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
    (request.body == null || request.body.source != null)) {
        // then:
        // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
        if ($6cd5fdd1367e9e32$require$isCancelled(fetchParams)) return $6cd5fdd1367e9e32$require$makeAppropriateNetworkError(fetchParams);
        // 2. Set response to the result of running HTTP-network-or-cache
        // fetch given fetchParams, isAuthenticationFetch, and true.
        // TODO (spec): The spec doesn't specify this but we need to cancel
        // the active response before we can start a new one.
        // https://github.com/whatwg/fetch/issues/1293
        fetchParams.controller.connection.destroy();
        response = await $6cd5fdd1367e9e32$var$httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
    }
    // 17. If isAuthenticationFetch is true, then create an authentication entry
    isAuthenticationFetch;
    // 18. Return response.
    return response;
}

// https://fetch.spec.whatwg.org/#http-network-fetch
async function $6cd5fdd1367e9e32$var$httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
    $4UN2M$assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
    fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy (err) {
            if (!this.destroyed) {
                this.destroyed = true;
                this.abort?.(err ?? new $6cd5fdd1367e9e32$require$DOMException("The operation was aborted.", "AbortError"));
            }
        }
    };
    // 1. Let request be fetchParams’s request.
    const request = fetchParams.request;
    // 2. Let response be null.
    let response = null;
    // 3. Let timingInfo be fetchParams’s timing info.
    const timingInfo = fetchParams.timingInfo;
    // 4. Let httpCache be the result of determining the HTTP cache partition,
    // given request.
    // TODO: cache
    const httpCache = null;
    // 5. If httpCache is null, then set request’s cache mode to "no-store".
    if (httpCache == null) request.cache = "no-store";
    // 6. Let networkPartitionKey be the result of determining the network
    // partition key given request.
    // TODO
    // 7. Let newConnection be "yes" if forceNewConnection is true; otherwise
    // "no".
    const newConnection = forceNewConnection ? "yes" : "no" // eslint-disable-line no-unused-vars
    ;
    // 8. Switch on request’s mode:
    request.mode;
    // 9. Run these steps, but abort when the ongoing fetch is terminated:
    //    1. If connection is failure, then return a network error.
    //    2. Set timingInfo’s final connection timing info to the result of
    //    calling clamp and coarsen connection timing info with connection’s
    //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
    //    cross-origin isolated capability.
    //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
    //    and request’s body’s source is null, then append (`Transfer-Encoding`,
    //    `chunked`) to request’s header list.
    //    4. Set timingInfo’s final network-request start time to the coarsened
    //    shared current time given fetchParams’s cross-origin isolated
    //    capability.
    //    5. Set response to the result of making an HTTP request over connection
    //    using request with the following caveats:
    //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
    //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]
    //        - If request’s body is non-null, and request’s body’s source is null,
    //        then the user agent may have a buffer of up to 64 kibibytes and store
    //        a part of request’s body in that buffer. If the user agent reads from
    //        request’s body beyond that buffer’s size and the user agent needs to
    //        resend request, then instead return a network error.
    //        - Set timingInfo’s final network-response start time to the coarsened
    //        shared current time given fetchParams’s cross-origin isolated capability,
    //        immediately after the user agent’s HTTP parser receives the first byte
    //        of the response (e.g., frame header bytes for HTTP/2 or response status
    //        line for HTTP/1.x).
    //        - Wait until all the headers are transmitted.
    //        - Any responses whose status is in the range 100 to 199, inclusive,
    //        and is not 101, are to be ignored, except for the purposes of setting
    //        timingInfo’s final network-response start time above.
    //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
    //    response is transferred via HTTP/1.0 or older, then return a network
    //    error.
    //    - If the HTTP request results in a TLS client certificate dialog, then:
    //        1. If request’s window is an environment settings object, make the
    //        dialog available in request’s window.
    //        2. Otherwise, return a network error.
    // To transmit request’s body body, run these steps:
    let requestBody = null;
    // 1. If body is null and fetchParams’s process request end-of-body is
    // non-null, then queue a fetch task given fetchParams’s process request
    // end-of-body and fetchParams’s task destination.
    if (request.body == null && fetchParams.processRequestEndOfBody) queueMicrotask(()=>fetchParams.processRequestEndOfBody());
    else if (request.body != null) {
        // 2. Otherwise, if body is non-null:
        //    1. Let processBodyChunk given bytes be these steps:
        const processBodyChunk = async function*(bytes) {
            // 1. If the ongoing fetch is terminated, then abort these steps.
            if ($6cd5fdd1367e9e32$require$isCancelled(fetchParams)) return;
            // 2. Run this step in parallel: transmit bytes.
            yield bytes;
            // 3. If fetchParams’s process request body is non-null, then run
            // fetchParams’s process request body given bytes’s length.
            fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
        };
        // 2. Let processEndOfBody be these steps:
        const processEndOfBody = ()=>{
            // 1. If fetchParams is canceled, then abort these steps.
            if ($6cd5fdd1367e9e32$require$isCancelled(fetchParams)) return;
            // 2. If fetchParams’s process request end-of-body is non-null,
            // then run fetchParams’s process request end-of-body.
            if (fetchParams.processRequestEndOfBody) fetchParams.processRequestEndOfBody();
        };
        // 3. Let processBodyError given e be these steps:
        const processBodyError = (e)=>{
            // 1. If fetchParams is canceled, then abort these steps.
            if ($6cd5fdd1367e9e32$require$isCancelled(fetchParams)) return;
            // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
            if (e.name === "AbortError") fetchParams.controller.abort();
            else fetchParams.controller.terminate(e);
        };
        // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
        // processBodyError, and fetchParams’s task destination.
        requestBody = async function*() {
            try {
                for await (const bytes of request.body.stream)yield* processBodyChunk(bytes);
                processEndOfBody();
            } catch (err) {
                processBodyError(err);
            }
        }();
    }
    try {
        // socket is only provided for websockets
        const { body: body, status: status, statusText: statusText, headersList: headersList, socket: socket } = await dispatch({
            body: requestBody
        });
        if (socket) response = $6cd5fdd1367e9e32$require$makeResponse({
            status: status,
            statusText: statusText,
            headersList: headersList,
            socket: socket
        });
        else {
            const iterator = body[Symbol.asyncIterator]();
            fetchParams.controller.next = ()=>iterator.next();
            response = $6cd5fdd1367e9e32$require$makeResponse({
                status: status,
                statusText: statusText,
                headersList: headersList
            });
        }
    } catch (err) {
        // 10. If aborted, then:
        if (err.name === "AbortError") {
            // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
            fetchParams.controller.connection.destroy();
            // 2. Return the appropriate network error for fetchParams.
            return $6cd5fdd1367e9e32$require$makeAppropriateNetworkError(fetchParams, err);
        }
        return $6cd5fdd1367e9e32$require$makeNetworkError(err);
    }
    // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
    // if it is suspended.
    const pullAlgorithm = ()=>{
        fetchParams.controller.resume();
    };
    // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
    // controller with reason, given reason.
    const cancelAlgorithm = (reason)=>{
        fetchParams.controller.abort(reason);
    };
    // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
    // the user agent.
    // TODO
    // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
    // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
    // TODO
    // 15. Let stream be a new ReadableStream.
    // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
    // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
    // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
    if (!$6cd5fdd1367e9e32$var$ReadableStream) $6cd5fdd1367e9e32$var$ReadableStream = $4UN2M$streamweb.ReadableStream;
    const stream = new $6cd5fdd1367e9e32$var$ReadableStream({
        async start (controller) {
            fetchParams.controller.controller = controller;
        },
        async pull (controller) {
            await pullAlgorithm(controller);
        },
        async cancel (reason) {
            await cancelAlgorithm(reason);
        }
    }, {
        highWaterMark: 0,
        size () {
            return 1;
        }
    });
    // 17. Run these steps, but abort when the ongoing fetch is terminated:
    //    1. Set response’s body to a new body whose stream is stream.
    response.body = {
        stream: stream
    };
    //    2. If response is not a network error and request’s cache mode is
    //    not "no-store", then update response in httpCache for request.
    //    TODO
    //    3. If includeCredentials is true and the user agent is not configured
    //    to block cookies for request (see section 7 of [COOKIES]), then run the
    //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
    //    the value of each header whose name is a byte-case-insensitive match for
    //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
    //    TODO
    // 18. If aborted, then:
    // TODO
    // 19. Run these steps in parallel:
    //    1. Run these steps, but abort when fetchParams is canceled:
    fetchParams.controller.on("terminated", onAborted);
    fetchParams.controller.resume = async ()=>{
        // 1. While true
        while(true){
            // 1-3. See onData...
            // 4. Set bytes to the result of handling content codings given
            // codings and bytes.
            let bytes;
            let isFailure;
            try {
                const { done: done, value: value } = await fetchParams.controller.next();
                if ($6cd5fdd1367e9e32$require$isAborted(fetchParams)) break;
                bytes = done ? undefined : value;
            } catch (err) {
                if (fetchParams.controller.ended && !timingInfo.encodedBodySize) // zlib doesn't like empty streams.
                bytes = undefined;
                else {
                    bytes = err;
                    // err may be propagated from the result of calling readablestream.cancel,
                    // which might not be an error. https://github.com/nodejs/undici/issues/2009
                    isFailure = true;
                }
            }
            if (bytes === undefined) {
                // 2. Otherwise, if the bytes transmission for response’s message
                // body is done normally and stream is readable, then close
                // stream, finalize response for fetchParams and response, and
                // abort these in-parallel steps.
                $6cd5fdd1367e9e32$require$readableStreamClose(fetchParams.controller.controller);
                $6cd5fdd1367e9e32$var$finalizeResponse(fetchParams, response);
                return;
            }
            // 5. Increase timingInfo’s decoded body size by bytes’s length.
            timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
            // 6. If bytes is failure, then terminate fetchParams’s controller.
            if (isFailure) {
                fetchParams.controller.terminate(bytes);
                return;
            }
            // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
            // into stream.
            fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
            // 8. If stream is errored, then terminate the ongoing fetch.
            if ($6cd5fdd1367e9e32$require$isErrored(stream)) {
                fetchParams.controller.terminate();
                return;
            }
            // 9. If stream doesn’t need more data ask the user agent to suspend
            // the ongoing fetch.
            if (!fetchParams.controller.controller.desiredSize) return;
        }
    };
    //    2. If aborted, then:
    function onAborted(reason) {
        // 2. If fetchParams is aborted, then:
        if ($6cd5fdd1367e9e32$require$isAborted(fetchParams)) {
            // 1. Set response’s aborted flag.
            response.aborted = true;
            // 2. If stream is readable, then error stream with the result of
            //    deserialize a serialized abort reason given fetchParams’s
            //    controller’s serialized abort reason and an
            //    implementation-defined realm.
            if ($6cd5fdd1367e9e32$require$isReadable(stream)) fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
        } else // 3. Otherwise, if stream is readable, error stream with a TypeError.
        if ($6cd5fdd1367e9e32$require$isReadable(stream)) fetchParams.controller.controller.error(new TypeError("terminated", {
            cause: $6cd5fdd1367e9e32$require$isErrorLike(reason) ? reason : undefined
        }));
        // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
        // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
        fetchParams.controller.connection.destroy();
    }
    // 20. Return response.
    return response;
    async function dispatch({ body: body }) {
        const url = $6cd5fdd1367e9e32$require$requestCurrentURL(request);
        /** @type {import('../..').Agent} */ const agent = fetchParams.controller.dispatcher;
        return new Promise((resolve, reject)=>agent.dispatch({
                path: url.pathname + url.search,
                origin: url.origin,
                method: request.method,
                body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
                headers: request.headersList.entries,
                maxRedirections: 0,
                upgrade: request.mode === "websocket" ? "websocket" : undefined
            }, {
                body: null,
                abort: null,
                onConnect (abort) {
                    // TODO (fix): Do we need connection here?
                    const { connection: connection } = fetchParams.controller;
                    if (connection.destroyed) abort(new $6cd5fdd1367e9e32$require$DOMException("The operation was aborted.", "AbortError"));
                    else {
                        fetchParams.controller.on("terminated", abort);
                        this.abort = connection.abort = abort;
                    }
                },
                onHeaders (status, headersList, resume, statusText) {
                    if (status < 200) return;
                    let codings = [];
                    let location = "";
                    const headers = new $6cd5fdd1367e9e32$require$Headers();
                    // For H2, the headers are a plain JS object
                    // We distinguish between them and iterate accordingly
                    if (Array.isArray(headersList)) for(let n = 0; n < headersList.length; n += 2){
                        const key = headersList[n + 0].toString("latin1");
                        const val = headersList[n + 1].toString("latin1");
                        if (key.toLowerCase() === "content-encoding") // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                        // "All content-coding values are case-insensitive..."
                        codings = val.toLowerCase().split(",").map((x)=>x.trim());
                        else if (key.toLowerCase() === "location") location = val;
                        headers[$6cd5fdd1367e9e32$require$kHeadersList].append(key, val);
                    }
                    else {
                        const keys = Object.keys(headersList);
                        for (const key of keys){
                            const val = headersList[key];
                            if (key.toLowerCase() === "content-encoding") // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                            // "All content-coding values are case-insensitive..."
                            codings = val.toLowerCase().split(",").map((x)=>x.trim()).reverse();
                            else if (key.toLowerCase() === "location") location = val;
                            headers[$6cd5fdd1367e9e32$require$kHeadersList].append(key, val);
                        }
                    }
                    this.body = new $6cd5fdd1367e9e32$require$Readable({
                        read: resume
                    });
                    const decoders = [];
                    const willFollow = request.redirect === "follow" && location && $6cd5fdd1367e9e32$require$redirectStatusSet.has(status);
                    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
                    if (request.method !== "HEAD" && request.method !== "CONNECT" && !$6cd5fdd1367e9e32$require$nullBodyStatus.includes(status) && !willFollow) for (const coding of codings){
                        // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
                        if (coding === "x-gzip" || coding === "gzip") decoders.push($4UN2M$zlib.createGunzip({
                            // Be less strict when decoding compressed responses, since sometimes
                            // servers send slightly invalid responses that are still accepted
                            // by common browsers.
                            // Always using Z_SYNC_FLUSH is what cURL does.
                            flush: $4UN2M$zlib.constants.Z_SYNC_FLUSH,
                            finishFlush: $4UN2M$zlib.constants.Z_SYNC_FLUSH
                        }));
                        else if (coding === "deflate") decoders.push($4UN2M$zlib.createInflate());
                        else if (coding === "br") decoders.push($4UN2M$zlib.createBrotliDecompress());
                        else {
                            decoders.length = 0;
                            break;
                        }
                    }
                    resolve({
                        status: status,
                        statusText: statusText,
                        headersList: headers[$6cd5fdd1367e9e32$require$kHeadersList],
                        body: decoders.length ? $6cd5fdd1367e9e32$require$pipeline(this.body, ...decoders, ()=>{}) : this.body.on("error", ()=>{})
                    });
                    return true;
                },
                onData (chunk) {
                    if (fetchParams.controller.dump) return;
                    // 1. If one or more bytes have been transmitted from response’s
                    // message body, then:
                    //  1. Let bytes be the transmitted bytes.
                    const bytes = chunk;
                    //  2. Let codings be the result of extracting header list values
                    //  given `Content-Encoding` and response’s header list.
                    //  See pullAlgorithm.
                    //  3. Increase timingInfo’s encoded body size by bytes’s length.
                    timingInfo.encodedBodySize += bytes.byteLength;
                    //  4. See pullAlgorithm...
                    return this.body.push(bytes);
                },
                onComplete () {
                    if (this.abort) fetchParams.controller.off("terminated", this.abort);
                    fetchParams.controller.ended = true;
                    this.body.push(null);
                },
                onError (error) {
                    if (this.abort) fetchParams.controller.off("terminated", this.abort);
                    this.body?.destroy(error);
                    fetchParams.controller.terminate(error);
                    reject(error);
                },
                onUpgrade (status, headersList, socket) {
                    if (status !== 101) return;
                    const headers = new $6cd5fdd1367e9e32$require$Headers();
                    for(let n = 0; n < headersList.length; n += 2){
                        const key = headersList[n + 0].toString("latin1");
                        const val = headersList[n + 1].toString("latin1");
                        headers[$6cd5fdd1367e9e32$require$kHeadersList].append(key, val);
                    }
                    resolve({
                        status: status,
                        statusText: $6cd5fdd1367e9e32$require$STATUS_CODES[status],
                        headersList: headers[$6cd5fdd1367e9e32$require$kHeadersList],
                        socket: socket
                    });
                    return true;
                }
            }));
    }
}
module.exports = {
    fetch: $6cd5fdd1367e9e32$var$fetch,
    Fetch: $6cd5fdd1367e9e32$var$Fetch,
    fetching: $6cd5fdd1367e9e32$var$fetching,
    finalizeAndReportTiming: $6cd5fdd1367e9e32$var$finalizeAndReportTiming
};

});
parcelRegister("PC2zs", function(module, exports) {
"use strict";

var $30zmV = parcelRequire("30zmV");
var $09b2459429eeccc4$require$Headers = $30zmV.Headers;
var $09b2459429eeccc4$require$HeadersList = $30zmV.HeadersList;
var $09b2459429eeccc4$require$fill = $30zmV.fill;

var $8gSQD = parcelRequire("8gSQD");
var $09b2459429eeccc4$require$extractBody = $8gSQD.extractBody;
var $09b2459429eeccc4$require$cloneBody = $8gSQD.cloneBody;
var $09b2459429eeccc4$require$mixinBody = $8gSQD.mixinBody;

var $dZB1o = parcelRequire("dZB1o");
const { kEnumerableProperty: $09b2459429eeccc4$var$kEnumerableProperty } = $dZB1o;

var $7zBpt = parcelRequire("7zBpt");
var $09b2459429eeccc4$require$isValidReasonPhrase = $7zBpt.isValidReasonPhrase;
var $09b2459429eeccc4$require$isCancelled = $7zBpt.isCancelled;
var $09b2459429eeccc4$require$isAborted = $7zBpt.isAborted;
var $09b2459429eeccc4$require$isBlobLike = $7zBpt.isBlobLike;
var $09b2459429eeccc4$require$serializeJavascriptValueToJSONString = $7zBpt.serializeJavascriptValueToJSONString;
var $09b2459429eeccc4$require$isErrorLike = $7zBpt.isErrorLike;
var $09b2459429eeccc4$require$isomorphicEncode = $7zBpt.isomorphicEncode;

var $fUNmM = parcelRequire("fUNmM");
var $09b2459429eeccc4$require$redirectStatusSet = $fUNmM.redirectStatusSet;
var $09b2459429eeccc4$require$nullBodyStatus = $fUNmM.nullBodyStatus;
var $09b2459429eeccc4$require$DOMException = $fUNmM.DOMException;

var $2cSZe = parcelRequire("2cSZe");
var $09b2459429eeccc4$require$kState = $2cSZe.kState;
var $09b2459429eeccc4$require$kHeaders = $2cSZe.kHeaders;
var $09b2459429eeccc4$require$kGuard = $2cSZe.kGuard;
var $09b2459429eeccc4$require$kRealm = $2cSZe.kRealm;

var $7jIZt = parcelRequire("7jIZt");
var $09b2459429eeccc4$require$webidl = $7jIZt.webidl;

var $haJy7 = parcelRequire("haJy7");
var $09b2459429eeccc4$require$FormData = $haJy7.FormData;

var $lezha = parcelRequire("lezha");
var $09b2459429eeccc4$require$getGlobalOrigin = $lezha.getGlobalOrigin;

var $h1hYV = parcelRequire("h1hYV");
var $09b2459429eeccc4$require$URLSerializer = $h1hYV.URLSerializer;

var $9Yodq = parcelRequire("9Yodq");
var $09b2459429eeccc4$require$kHeadersList = $9Yodq.kHeadersList;
var $09b2459429eeccc4$require$kConstruct = $9Yodq.kConstruct;


var $09b2459429eeccc4$require$types = $4UN2M$util.types;

const $09b2459429eeccc4$var$ReadableStream = globalThis.ReadableStream || $4UN2M$streamweb.ReadableStream;
const $09b2459429eeccc4$var$textEncoder = new TextEncoder("utf-8");
// https://fetch.spec.whatwg.org/#response-class
class $09b2459429eeccc4$var$Response {
    // Creates network error Response.
    static error() {
        // TODO
        const relevantRealm = {
            settingsObject: {}
        };
        // The static error() method steps are to return the result of creating a
        // Response object, given a new network error, "immutable", and this’s
        // relevant Realm.
        const responseObject = new $09b2459429eeccc4$var$Response();
        responseObject[$09b2459429eeccc4$require$kState] = $09b2459429eeccc4$var$makeNetworkError();
        responseObject[$09b2459429eeccc4$require$kRealm] = relevantRealm;
        responseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kHeadersList] = responseObject[$09b2459429eeccc4$require$kState].headersList;
        responseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kGuard] = "immutable";
        responseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kRealm] = relevantRealm;
        return responseObject;
    }
    // https://fetch.spec.whatwg.org/#dom-response-json
    static json(data, init = {}) {
        $09b2459429eeccc4$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Response.json"
        });
        if (init !== null) init = $09b2459429eeccc4$require$webidl.converters.ResponseInit(init);
        // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
        const bytes = $09b2459429eeccc4$var$textEncoder.encode($09b2459429eeccc4$require$serializeJavascriptValueToJSONString(data));
        // 2. Let body be the result of extracting bytes.
        const body = $09b2459429eeccc4$require$extractBody(bytes);
        // 3. Let responseObject be the result of creating a Response object, given a new response,
        //    "response", and this’s relevant Realm.
        const relevantRealm = {
            settingsObject: {}
        };
        const responseObject = new $09b2459429eeccc4$var$Response();
        responseObject[$09b2459429eeccc4$require$kRealm] = relevantRealm;
        responseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kGuard] = "response";
        responseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kRealm] = relevantRealm;
        // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
        $09b2459429eeccc4$var$initializeResponse(responseObject, init, {
            body: body[0],
            type: "application/json"
        });
        // 5. Return responseObject.
        return responseObject;
    }
    // Creates a redirect Response that redirects to url with status status.
    static redirect(url, status = 302) {
        const relevantRealm = {
            settingsObject: {}
        };
        $09b2459429eeccc4$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Response.redirect"
        });
        url = $09b2459429eeccc4$require$webidl.converters.USVString(url);
        status = $09b2459429eeccc4$require$webidl.converters["unsigned short"](status);
        // 1. Let parsedURL be the result of parsing url with current settings
        // object’s API base URL.
        // 2. If parsedURL is failure, then throw a TypeError.
        // TODO: base-URL?
        let parsedURL;
        try {
            parsedURL = new URL(url, $09b2459429eeccc4$require$getGlobalOrigin());
        } catch (err) {
            throw Object.assign(new TypeError("Failed to parse URL from " + url), {
                cause: err
            });
        }
        // 3. If status is not a redirect status, then throw a RangeError.
        if (!$09b2459429eeccc4$require$redirectStatusSet.has(status)) throw new RangeError("Invalid status code " + status);
        // 4. Let responseObject be the result of creating a Response object,
        // given a new response, "immutable", and this’s relevant Realm.
        const responseObject = new $09b2459429eeccc4$var$Response();
        responseObject[$09b2459429eeccc4$require$kRealm] = relevantRealm;
        responseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kGuard] = "immutable";
        responseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kRealm] = relevantRealm;
        // 5. Set responseObject’s response’s status to status.
        responseObject[$09b2459429eeccc4$require$kState].status = status;
        // 6. Let value be parsedURL, serialized and isomorphic encoded.
        const value = $09b2459429eeccc4$require$isomorphicEncode($09b2459429eeccc4$require$URLSerializer(parsedURL));
        // 7. Append `Location`/value to responseObject’s response’s header list.
        responseObject[$09b2459429eeccc4$require$kState].headersList.append("location", value);
        // 8. Return responseObject.
        return responseObject;
    }
    // https://fetch.spec.whatwg.org/#dom-response
    constructor(body = null, init = {}){
        if (body !== null) body = $09b2459429eeccc4$require$webidl.converters.BodyInit(body);
        init = $09b2459429eeccc4$require$webidl.converters.ResponseInit(init);
        // TODO
        this[$09b2459429eeccc4$require$kRealm] = {
            settingsObject: {}
        };
        // 1. Set this’s response to a new response.
        this[$09b2459429eeccc4$require$kState] = $09b2459429eeccc4$var$makeResponse({});
        // 2. Set this’s headers to a new Headers object with this’s relevant
        // Realm, whose header list is this’s response’s header list and guard
        // is "response".
        this[$09b2459429eeccc4$require$kHeaders] = new $09b2459429eeccc4$require$Headers($09b2459429eeccc4$require$kConstruct);
        this[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kGuard] = "response";
        this[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kHeadersList] = this[$09b2459429eeccc4$require$kState].headersList;
        this[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kRealm] = this[$09b2459429eeccc4$require$kRealm];
        // 3. Let bodyWithType be null.
        let bodyWithType = null;
        // 4. If body is non-null, then set bodyWithType to the result of extracting body.
        if (body != null) {
            const [extractedBody, type] = $09b2459429eeccc4$require$extractBody(body);
            bodyWithType = {
                body: extractedBody,
                type: type
            };
        }
        // 5. Perform initialize a response given this, init, and bodyWithType.
        $09b2459429eeccc4$var$initializeResponse(this, init, bodyWithType);
    }
    // Returns response’s type, e.g., "cors".
    get type() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        // The type getter steps are to return this’s response’s type.
        return this[$09b2459429eeccc4$require$kState].type;
    }
    // Returns response’s URL, if it has one; otherwise the empty string.
    get url() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        const urlList = this[$09b2459429eeccc4$require$kState].urlList;
        // The url getter steps are to return the empty string if this’s
        // response’s URL is null; otherwise this’s response’s URL,
        // serialized with exclude fragment set to true.
        const url = urlList[urlList.length - 1] ?? null;
        if (url === null) return "";
        return $09b2459429eeccc4$require$URLSerializer(url, true);
    }
    // Returns whether response was obtained through a redirect.
    get redirected() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        // The redirected getter steps are to return true if this’s response’s URL
        // list has more than one item; otherwise false.
        return this[$09b2459429eeccc4$require$kState].urlList.length > 1;
    }
    // Returns response’s status.
    get status() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        // The status getter steps are to return this’s response’s status.
        return this[$09b2459429eeccc4$require$kState].status;
    }
    // Returns whether response’s status is an ok status.
    get ok() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        // The ok getter steps are to return true if this’s response’s status is an
        // ok status; otherwise false.
        return this[$09b2459429eeccc4$require$kState].status >= 200 && this[$09b2459429eeccc4$require$kState].status <= 299;
    }
    // Returns response’s status message.
    get statusText() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        // The statusText getter steps are to return this’s response’s status
        // message.
        return this[$09b2459429eeccc4$require$kState].statusText;
    }
    // Returns response’s headers as Headers.
    get headers() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        // The headers getter steps are to return this’s headers.
        return this[$09b2459429eeccc4$require$kHeaders];
    }
    get body() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        return this[$09b2459429eeccc4$require$kState].body ? this[$09b2459429eeccc4$require$kState].body.stream : null;
    }
    get bodyUsed() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        return !!this[$09b2459429eeccc4$require$kState].body && $dZB1o.isDisturbed(this[$09b2459429eeccc4$require$kState].body.stream);
    }
    // Returns a clone of response.
    clone() {
        $09b2459429eeccc4$require$webidl.brandCheck(this, $09b2459429eeccc4$var$Response);
        // 1. If this is unusable, then throw a TypeError.
        if (this.bodyUsed || this.body && this.body.locked) throw $09b2459429eeccc4$require$webidl.errors.exception({
            header: "Response.clone",
            message: "Body has already been consumed."
        });
        // 2. Let clonedResponse be the result of cloning this’s response.
        const clonedResponse = $09b2459429eeccc4$var$cloneResponse(this[$09b2459429eeccc4$require$kState]);
        // 3. Return the result of creating a Response object, given
        // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
        const clonedResponseObject = new $09b2459429eeccc4$var$Response();
        clonedResponseObject[$09b2459429eeccc4$require$kState] = clonedResponse;
        clonedResponseObject[$09b2459429eeccc4$require$kRealm] = this[$09b2459429eeccc4$require$kRealm];
        clonedResponseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kHeadersList] = clonedResponse.headersList;
        clonedResponseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kGuard] = this[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kGuard];
        clonedResponseObject[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kRealm] = this[$09b2459429eeccc4$require$kHeaders][$09b2459429eeccc4$require$kRealm];
        return clonedResponseObject;
    }
}
$09b2459429eeccc4$require$mixinBody($09b2459429eeccc4$var$Response);
Object.defineProperties($09b2459429eeccc4$var$Response.prototype, {
    type: $09b2459429eeccc4$var$kEnumerableProperty,
    url: $09b2459429eeccc4$var$kEnumerableProperty,
    status: $09b2459429eeccc4$var$kEnumerableProperty,
    ok: $09b2459429eeccc4$var$kEnumerableProperty,
    redirected: $09b2459429eeccc4$var$kEnumerableProperty,
    statusText: $09b2459429eeccc4$var$kEnumerableProperty,
    headers: $09b2459429eeccc4$var$kEnumerableProperty,
    clone: $09b2459429eeccc4$var$kEnumerableProperty,
    body: $09b2459429eeccc4$var$kEnumerableProperty,
    bodyUsed: $09b2459429eeccc4$var$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "Response",
        configurable: true
    }
});
Object.defineProperties($09b2459429eeccc4$var$Response, {
    json: $09b2459429eeccc4$var$kEnumerableProperty,
    redirect: $09b2459429eeccc4$var$kEnumerableProperty,
    error: $09b2459429eeccc4$var$kEnumerableProperty
});
// https://fetch.spec.whatwg.org/#concept-response-clone
function $09b2459429eeccc4$var$cloneResponse(response) {
    // To clone a response response, run these steps:
    // 1. If response is a filtered response, then return a new identical
    // filtered response whose internal response is a clone of response’s
    // internal response.
    if (response.internalResponse) return $09b2459429eeccc4$var$filterResponse($09b2459429eeccc4$var$cloneResponse(response.internalResponse), response.type);
    // 2. Let newResponse be a copy of response, except for its body.
    const newResponse = $09b2459429eeccc4$var$makeResponse({
        ...response,
        body: null
    });
    // 3. If response’s body is non-null, then set newResponse’s body to the
    // result of cloning response’s body.
    if (response.body != null) newResponse.body = $09b2459429eeccc4$require$cloneBody(response.body);
    // 4. Return newResponse.
    return newResponse;
}
function $09b2459429eeccc4$var$makeResponse(init) {
    return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: "default",
        status: 200,
        timingInfo: null,
        cacheState: "",
        statusText: "",
        ...init,
        headersList: init.headersList ? new $09b2459429eeccc4$require$HeadersList(init.headersList) : new $09b2459429eeccc4$require$HeadersList(),
        urlList: init.urlList ? [
            ...init.urlList
        ] : []
    };
}
function $09b2459429eeccc4$var$makeNetworkError(reason) {
    const isError = $09b2459429eeccc4$require$isErrorLike(reason);
    return $09b2459429eeccc4$var$makeResponse({
        type: "error",
        status: 0,
        error: isError ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === "AbortError"
    });
}
function $09b2459429eeccc4$var$makeFilteredResponse(response, state) {
    state = {
        internalResponse: response,
        ...state
    };
    return new Proxy(response, {
        get (target, p) {
            return p in state ? state[p] : target[p];
        },
        set (target, p, value) {
            $4UN2M$assert(!(p in state));
            target[p] = value;
            return true;
        }
    });
}
// https://fetch.spec.whatwg.org/#concept-filtered-response
function $09b2459429eeccc4$var$filterResponse(response, type) {
    // Set response to the following filtered response with response as its
    // internal response, depending on request’s response tainting:
    if (type === "basic") // A basic filtered response is a filtered response whose type is "basic"
    // and header list excludes any headers in internal response’s header list
    // whose name is a forbidden response-header name.
    // Note: undici does not implement forbidden response-header names
    return $09b2459429eeccc4$var$makeFilteredResponse(response, {
        type: "basic",
        headersList: response.headersList
    });
    else if (type === "cors") // A CORS filtered response is a filtered response whose type is "cors"
    // and header list excludes any headers in internal response’s header
    // list whose name is not a CORS-safelisted response-header name, given
    // internal response’s CORS-exposed header-name list.
    // Note: undici does not implement CORS-safelisted response-header names
    return $09b2459429eeccc4$var$makeFilteredResponse(response, {
        type: "cors",
        headersList: response.headersList
    });
    else if (type === "opaque") // An opaque filtered response is a filtered response whose type is
    // "opaque", URL list is the empty list, status is 0, status message
    // is the empty byte sequence, header list is empty, and body is null.
    return $09b2459429eeccc4$var$makeFilteredResponse(response, {
        type: "opaque",
        urlList: Object.freeze([]),
        status: 0,
        statusText: "",
        body: null
    });
    else if (type === "opaqueredirect") // An opaque-redirect filtered response is a filtered response whose type
    // is "opaqueredirect", status is 0, status message is the empty byte
    // sequence, header list is empty, and body is null.
    return $09b2459429eeccc4$var$makeFilteredResponse(response, {
        type: "opaqueredirect",
        status: 0,
        statusText: "",
        headersList: [],
        body: null
    });
    else $4UN2M$assert(false);
}
// https://fetch.spec.whatwg.org/#appropriate-network-error
function $09b2459429eeccc4$var$makeAppropriateNetworkError(fetchParams, err = null) {
    // 1. Assert: fetchParams is canceled.
    $4UN2M$assert($09b2459429eeccc4$require$isCancelled(fetchParams));
    // 2. Return an aborted network error if fetchParams is aborted;
    // otherwise return a network error.
    return $09b2459429eeccc4$require$isAborted(fetchParams) ? $09b2459429eeccc4$var$makeNetworkError(Object.assign(new $09b2459429eeccc4$require$DOMException("The operation was aborted.", "AbortError"), {
        cause: err
    })) : $09b2459429eeccc4$var$makeNetworkError(Object.assign(new $09b2459429eeccc4$require$DOMException("Request was cancelled."), {
        cause: err
    }));
}
// https://whatpr.org/fetch/1392.html#initialize-a-response
function $09b2459429eeccc4$var$initializeResponse(response, init, body) {
    // 1. If init["status"] is not in the range 200 to 599, inclusive, then
    //    throw a RangeError.
    if (init.status !== null && (init.status < 200 || init.status > 599)) throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
    // 2. If init["statusText"] does not match the reason-phrase token production,
    //    then throw a TypeError.
    if ("statusText" in init && init.statusText != null) {
        // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
        //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
        if (!$09b2459429eeccc4$require$isValidReasonPhrase(String(init.statusText))) throw new TypeError("Invalid statusText");
    }
    // 3. Set response’s response’s status to init["status"].
    if ("status" in init && init.status != null) response[$09b2459429eeccc4$require$kState].status = init.status;
    // 4. Set response’s response’s status message to init["statusText"].
    if ("statusText" in init && init.statusText != null) response[$09b2459429eeccc4$require$kState].statusText = init.statusText;
    // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
    if ("headers" in init && init.headers != null) $09b2459429eeccc4$require$fill(response[$09b2459429eeccc4$require$kHeaders], init.headers);
    // 6. If body was given, then:
    if (body) {
        // 1. If response's status is a null body status, then throw a TypeError.
        if ($09b2459429eeccc4$require$nullBodyStatus.includes(response.status)) throw $09b2459429eeccc4$require$webidl.errors.exception({
            header: "Response constructor",
            message: "Invalid response status code " + response.status
        });
        // 2. Set response's body to body's body.
        response[$09b2459429eeccc4$require$kState].body = body.body;
        // 3. If body's type is non-null and response's header list does not contain
        //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
        if (body.type != null && !response[$09b2459429eeccc4$require$kState].headersList.contains("Content-Type")) response[$09b2459429eeccc4$require$kState].headersList.append("content-type", body.type);
    }
}
$09b2459429eeccc4$require$webidl.converters.ReadableStream = $09b2459429eeccc4$require$webidl.interfaceConverter($09b2459429eeccc4$var$ReadableStream);
$09b2459429eeccc4$require$webidl.converters.FormData = $09b2459429eeccc4$require$webidl.interfaceConverter($09b2459429eeccc4$require$FormData);
$09b2459429eeccc4$require$webidl.converters.URLSearchParams = $09b2459429eeccc4$require$webidl.interfaceConverter(URLSearchParams);
// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
$09b2459429eeccc4$require$webidl.converters.XMLHttpRequestBodyInit = function(V) {
    if (typeof V === "string") return $09b2459429eeccc4$require$webidl.converters.USVString(V);
    if ($09b2459429eeccc4$require$isBlobLike(V)) return $09b2459429eeccc4$require$webidl.converters.Blob(V, {
        strict: false
    });
    if ($09b2459429eeccc4$require$types.isArrayBuffer(V) || $09b2459429eeccc4$require$types.isTypedArray(V) || $09b2459429eeccc4$require$types.isDataView(V)) return $09b2459429eeccc4$require$webidl.converters.BufferSource(V);
    if ($dZB1o.isFormDataLike(V)) return $09b2459429eeccc4$require$webidl.converters.FormData(V, {
        strict: false
    });
    if (V instanceof URLSearchParams) return $09b2459429eeccc4$require$webidl.converters.URLSearchParams(V);
    return $09b2459429eeccc4$require$webidl.converters.DOMString(V);
};
// https://fetch.spec.whatwg.org/#bodyinit
$09b2459429eeccc4$require$webidl.converters.BodyInit = function(V) {
    if (V instanceof $09b2459429eeccc4$var$ReadableStream) return $09b2459429eeccc4$require$webidl.converters.ReadableStream(V);
    // Note: the spec doesn't include async iterables,
    // this is an undici extension.
    if (V?.[Symbol.asyncIterator]) return V;
    return $09b2459429eeccc4$require$webidl.converters.XMLHttpRequestBodyInit(V);
};
$09b2459429eeccc4$require$webidl.converters.ResponseInit = $09b2459429eeccc4$require$webidl.dictionaryConverter([
    {
        key: "status",
        converter: $09b2459429eeccc4$require$webidl.converters["unsigned short"],
        defaultValue: 200
    },
    {
        key: "statusText",
        converter: $09b2459429eeccc4$require$webidl.converters.ByteString,
        defaultValue: ""
    },
    {
        key: "headers",
        converter: $09b2459429eeccc4$require$webidl.converters.HeadersInit
    }
]);
module.exports = {
    makeNetworkError: $09b2459429eeccc4$var$makeNetworkError,
    makeResponse: $09b2459429eeccc4$var$makeResponse,
    makeAppropriateNetworkError: $09b2459429eeccc4$var$makeAppropriateNetworkError,
    filterResponse: $09b2459429eeccc4$var$filterResponse,
    Response: $09b2459429eeccc4$var$Response,
    cloneResponse: $09b2459429eeccc4$var$cloneResponse
};

});
parcelRegister("30zmV", function(module, exports) {
// https://github.com/Ethan-Arrowood/undici-fetch
"use strict";

var $9Yodq = parcelRequire("9Yodq");
var $230ccead93d69445$require$kHeadersList = $9Yodq.kHeadersList;
var $230ccead93d69445$require$kConstruct = $9Yodq.kConstruct;

var $2cSZe = parcelRequire("2cSZe");
var $230ccead93d69445$require$kGuard = $2cSZe.kGuard;

var $dZB1o = parcelRequire("dZB1o");
var $230ccead93d69445$require$kEnumerableProperty = $dZB1o.kEnumerableProperty;

var $7zBpt = parcelRequire("7zBpt");
var $230ccead93d69445$require$makeIterator = $7zBpt.makeIterator;
var $230ccead93d69445$require$isValidHeaderName = $7zBpt.isValidHeaderName;
var $230ccead93d69445$require$isValidHeaderValue = $7zBpt.isValidHeaderValue;

var $7jIZt = parcelRequire("7jIZt");
var $230ccead93d69445$require$webidl = $7jIZt.webidl;

const $230ccead93d69445$var$kHeadersMap = Symbol("headers map");
const $230ccead93d69445$var$kHeadersSortedMap = Symbol("headers map sorted");
/**
 * @param {number} code
 */ function $230ccead93d69445$var$isHTTPWhiteSpaceCharCode(code) {
    return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020;
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
 * @param {string} potentialValue
 */ function $230ccead93d69445$var$headerValueNormalize(potentialValue) {
    //  To normalize a byte sequence potentialValue, remove
    //  any leading and trailing HTTP whitespace bytes from
    //  potentialValue.
    let i = 0;
    let j = potentialValue.length;
    while(j > i && $230ccead93d69445$var$isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)))--j;
    while(j > i && $230ccead93d69445$var$isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)))++i;
    return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
}
function $230ccead93d69445$var$fill(headers, object) {
    // To fill a Headers object headers with a given object object, run these steps:
    // 1. If object is a sequence, then for each header in object:
    // Note: webidl conversion to array has already been done.
    if (Array.isArray(object)) for(let i = 0; i < object.length; ++i){
        const header = object[i];
        // 1. If header does not contain exactly two items, then throw a TypeError.
        if (header.length !== 2) throw $230ccead93d69445$require$webidl.errors.exception({
            header: "Headers constructor",
            message: `expected name/value pair to be length 2, found ${header.length}.`
        });
        // 2. Append (header’s first item, header’s second item) to headers.
        $230ccead93d69445$var$appendHeader(headers, header[0], header[1]);
    }
    else if (typeof object === "object" && object !== null) {
        // Note: null should throw
        // 2. Otherwise, object is a record, then for each key → value in object,
        //    append (key, value) to headers
        const keys = Object.keys(object);
        for(let i = 0; i < keys.length; ++i)$230ccead93d69445$var$appendHeader(headers, keys[i], object[keys[i]]);
    } else throw $230ccead93d69445$require$webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: [
            "sequence<sequence<ByteString>>",
            "record<ByteString, ByteString>"
        ]
    });
}
/**
 * @see https://fetch.spec.whatwg.org/#concept-headers-append
 */ function $230ccead93d69445$var$appendHeader(headers, name, value) {
    // 1. Normalize value.
    value = $230ccead93d69445$var$headerValueNormalize(value);
    // 2. If name is not a header name or value is not a
    //    header value, then throw a TypeError.
    if (!$230ccead93d69445$require$isValidHeaderName(name)) throw $230ccead93d69445$require$webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value: name,
        type: "header name"
    });
    else if (!$230ccead93d69445$require$isValidHeaderValue(value)) throw $230ccead93d69445$require$webidl.errors.invalidArgument({
        prefix: "Headers.append",
        value: value,
        type: "header value"
    });
    // 3. If headers’s guard is "immutable", then throw a TypeError.
    // 4. Otherwise, if headers’s guard is "request" and name is a
    //    forbidden header name, return.
    // Note: undici does not implement forbidden header names
    if (headers[$230ccead93d69445$require$kGuard] === "immutable") throw new TypeError("immutable");
    else headers[$230ccead93d69445$require$kGuard];
    // 6. Otherwise, if headers’s guard is "response" and name is a
    //    forbidden response-header name, return.
    // 7. Append (name, value) to headers’s header list.
    return headers[$230ccead93d69445$require$kHeadersList].append(name, value);
// 8. If headers’s guard is "request-no-cors", then remove
//    privileged no-CORS request headers from headers
}
class $230ccead93d69445$var$HeadersList {
    /** @type {[string, string][]|null} */ cookies = null;
    constructor(init){
        if (init instanceof $230ccead93d69445$var$HeadersList) {
            this[$230ccead93d69445$var$kHeadersMap] = new Map(init[$230ccead93d69445$var$kHeadersMap]);
            this[$230ccead93d69445$var$kHeadersSortedMap] = init[$230ccead93d69445$var$kHeadersSortedMap];
            this.cookies = init.cookies === null ? null : [
                ...init.cookies
            ];
        } else {
            this[$230ccead93d69445$var$kHeadersMap] = new Map(init);
            this[$230ccead93d69445$var$kHeadersSortedMap] = null;
        }
    }
    // https://fetch.spec.whatwg.org/#header-list-contains
    contains(name) {
        // A header list list contains a header name name if list
        // contains a header whose name is a byte-case-insensitive
        // match for name.
        name = name.toLowerCase();
        return this[$230ccead93d69445$var$kHeadersMap].has(name);
    }
    clear() {
        this[$230ccead93d69445$var$kHeadersMap].clear();
        this[$230ccead93d69445$var$kHeadersSortedMap] = null;
        this.cookies = null;
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-append
    append(name, value) {
        this[$230ccead93d69445$var$kHeadersSortedMap] = null;
        // 1. If list contains name, then set name to the first such
        //    header’s name.
        const lowercaseName = name.toLowerCase();
        const exists = this[$230ccead93d69445$var$kHeadersMap].get(lowercaseName);
        // 2. Append (name, value) to list.
        if (exists) {
            const delimiter = lowercaseName === "cookie" ? "; " : ", ";
            this[$230ccead93d69445$var$kHeadersMap].set(lowercaseName, {
                name: exists.name,
                value: `${exists.value}${delimiter}${value}`
            });
        } else this[$230ccead93d69445$var$kHeadersMap].set(lowercaseName, {
            name: name,
            value: value
        });
        if (lowercaseName === "set-cookie") {
            this.cookies ??= [];
            this.cookies.push(value);
        }
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-set
    set(name, value) {
        this[$230ccead93d69445$var$kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        if (lowercaseName === "set-cookie") this.cookies = [
            value
        ];
        // 1. If list contains name, then set the value of
        //    the first such header to value and remove the
        //    others.
        // 2. Otherwise, append header (name, value) to list.
        this[$230ccead93d69445$var$kHeadersMap].set(lowercaseName, {
            name: name,
            value: value
        });
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-delete
    delete(name) {
        this[$230ccead93d69445$var$kHeadersSortedMap] = null;
        name = name.toLowerCase();
        if (name === "set-cookie") this.cookies = null;
        this[$230ccead93d69445$var$kHeadersMap].delete(name);
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-get
    get(name) {
        const value = this[$230ccead93d69445$var$kHeadersMap].get(name.toLowerCase());
        // 1. If list does not contain name, then return null.
        // 2. Return the values of all headers in list whose name
        //    is a byte-case-insensitive match for name,
        //    separated from each other by 0x2C 0x20, in order.
        return value === undefined ? null : value.value;
    }
    *[Symbol.iterator]() {
        // use the lowercased name
        for (const [name, { value: value }] of this[$230ccead93d69445$var$kHeadersMap])yield [
            name,
            value
        ];
    }
    get entries() {
        const headers = {};
        if (this[$230ccead93d69445$var$kHeadersMap].size) for (const { name: name, value: value } of this[$230ccead93d69445$var$kHeadersMap].values())headers[name] = value;
        return headers;
    }
}
// https://fetch.spec.whatwg.org/#headers-class
class $230ccead93d69445$var$Headers {
    constructor(init){
        if (init === $230ccead93d69445$require$kConstruct) return;
        this[$230ccead93d69445$require$kHeadersList] = new $230ccead93d69445$var$HeadersList();
        // The new Headers(init) constructor steps are:
        // 1. Set this’s guard to "none".
        this[$230ccead93d69445$require$kGuard] = "none";
        // 2. If init is given, then fill this with init.
        if (init !== undefined) {
            init = $230ccead93d69445$require$webidl.converters.HeadersInit(init);
            $230ccead93d69445$var$fill(this, init);
        }
    }
    // https://fetch.spec.whatwg.org/#dom-headers-append
    append(name, value) {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        $230ccead93d69445$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "Headers.append"
        });
        name = $230ccead93d69445$require$webidl.converters.ByteString(name);
        value = $230ccead93d69445$require$webidl.converters.ByteString(value);
        return $230ccead93d69445$var$appendHeader(this, name, value);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-delete
    delete(name) {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        $230ccead93d69445$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.delete"
        });
        name = $230ccead93d69445$require$webidl.converters.ByteString(name);
        // 1. If name is not a header name, then throw a TypeError.
        if (!$230ccead93d69445$require$isValidHeaderName(name)) throw $230ccead93d69445$require$webidl.errors.invalidArgument({
            prefix: "Headers.delete",
            value: name,
            type: "header name"
        });
        // 2. If this’s guard is "immutable", then throw a TypeError.
        // 3. Otherwise, if this’s guard is "request" and name is a
        //    forbidden header name, return.
        // 4. Otherwise, if this’s guard is "request-no-cors", name
        //    is not a no-CORS-safelisted request-header name, and
        //    name is not a privileged no-CORS request-header name,
        //    return.
        // 5. Otherwise, if this’s guard is "response" and name is
        //    a forbidden response-header name, return.
        // Note: undici does not implement forbidden header names
        if (this[$230ccead93d69445$require$kGuard] === "immutable") throw new TypeError("immutable");
        else this[$230ccead93d69445$require$kGuard];
        // 6. If this’s header list does not contain name, then
        //    return.
        if (!this[$230ccead93d69445$require$kHeadersList].contains(name)) return;
        // 7. Delete name from this’s header list.
        // 8. If this’s guard is "request-no-cors", then remove
        //    privileged no-CORS request headers from this.
        this[$230ccead93d69445$require$kHeadersList].delete(name);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-get
    get(name) {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        $230ccead93d69445$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.get"
        });
        name = $230ccead93d69445$require$webidl.converters.ByteString(name);
        // 1. If name is not a header name, then throw a TypeError.
        if (!$230ccead93d69445$require$isValidHeaderName(name)) throw $230ccead93d69445$require$webidl.errors.invalidArgument({
            prefix: "Headers.get",
            value: name,
            type: "header name"
        });
        // 2. Return the result of getting name from this’s header
        //    list.
        return this[$230ccead93d69445$require$kHeadersList].get(name);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-has
    has(name) {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        $230ccead93d69445$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.has"
        });
        name = $230ccead93d69445$require$webidl.converters.ByteString(name);
        // 1. If name is not a header name, then throw a TypeError.
        if (!$230ccead93d69445$require$isValidHeaderName(name)) throw $230ccead93d69445$require$webidl.errors.invalidArgument({
            prefix: "Headers.has",
            value: name,
            type: "header name"
        });
        // 2. Return true if this’s header list contains name;
        //    otherwise false.
        return this[$230ccead93d69445$require$kHeadersList].contains(name);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-set
    set(name, value) {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        $230ccead93d69445$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "Headers.set"
        });
        name = $230ccead93d69445$require$webidl.converters.ByteString(name);
        value = $230ccead93d69445$require$webidl.converters.ByteString(value);
        // 1. Normalize value.
        value = $230ccead93d69445$var$headerValueNormalize(value);
        // 2. If name is not a header name or value is not a
        //    header value, then throw a TypeError.
        if (!$230ccead93d69445$require$isValidHeaderName(name)) throw $230ccead93d69445$require$webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: name,
            type: "header name"
        });
        else if (!$230ccead93d69445$require$isValidHeaderValue(value)) throw $230ccead93d69445$require$webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: value,
            type: "header value"
        });
        // 3. If this’s guard is "immutable", then throw a TypeError.
        // 4. Otherwise, if this’s guard is "request" and name is a
        //    forbidden header name, return.
        // 5. Otherwise, if this’s guard is "request-no-cors" and
        //    name/value is not a no-CORS-safelisted request-header,
        //    return.
        // 6. Otherwise, if this’s guard is "response" and name is a
        //    forbidden response-header name, return.
        // Note: undici does not implement forbidden header names
        if (this[$230ccead93d69445$require$kGuard] === "immutable") throw new TypeError("immutable");
        else this[$230ccead93d69445$require$kGuard];
        // 7. Set (name, value) in this’s header list.
        // 8. If this’s guard is "request-no-cors", then remove
        //    privileged no-CORS request headers from this
        this[$230ccead93d69445$require$kHeadersList].set(name, value);
    }
    // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
    getSetCookie() {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
        // 2. Return the values of all headers in this’s header list whose name is
        //    a byte-case-insensitive match for `Set-Cookie`, in order.
        const list = this[$230ccead93d69445$require$kHeadersList].cookies;
        if (list) return [
            ...list
        ];
        return [];
    }
    // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
    get [$230ccead93d69445$var$kHeadersSortedMap]() {
        if (this[$230ccead93d69445$require$kHeadersList][$230ccead93d69445$var$kHeadersSortedMap]) return this[$230ccead93d69445$require$kHeadersList][$230ccead93d69445$var$kHeadersSortedMap];
        // 1. Let headers be an empty list of headers with the key being the name
        //    and value the value.
        const headers = [];
        // 2. Let names be the result of convert header names to a sorted-lowercase
        //    set with all the names of the headers in list.
        const names = [
            ...this[$230ccead93d69445$require$kHeadersList]
        ].sort((a, b)=>a[0] < b[0] ? -1 : 1);
        const cookies = this[$230ccead93d69445$require$kHeadersList].cookies;
        // 3. For each name of names:
        for(let i = 0; i < names.length; ++i){
            const [name, value] = names[i];
            // 1. If name is `set-cookie`, then:
            if (name === "set-cookie") // 1. Let values be a list of all values of headers in list whose name
            //    is a byte-case-insensitive match for name, in order.
            // 2. For each value of values:
            // 1. Append (name, value) to headers.
            for(let j = 0; j < cookies.length; ++j)headers.push([
                name,
                cookies[j]
            ]);
            else {
                // 2. Otherwise:
                // 1. Let value be the result of getting name from list.
                // 2. Assert: value is non-null.
                $4UN2M$assert(value !== null);
                // 3. Append (name, value) to headers.
                headers.push([
                    name,
                    value
                ]);
            }
        }
        this[$230ccead93d69445$require$kHeadersList][$230ccead93d69445$var$kHeadersSortedMap] = headers;
        // 4. Return headers.
        return headers;
    }
    keys() {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        if (this[$230ccead93d69445$require$kGuard] === "immutable") {
            const value = this[$230ccead93d69445$var$kHeadersSortedMap];
            return $230ccead93d69445$require$makeIterator(()=>value, "Headers", "key");
        }
        return $230ccead93d69445$require$makeIterator(()=>[
                ...this[$230ccead93d69445$var$kHeadersSortedMap].values()
            ], "Headers", "key");
    }
    values() {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        if (this[$230ccead93d69445$require$kGuard] === "immutable") {
            const value = this[$230ccead93d69445$var$kHeadersSortedMap];
            return $230ccead93d69445$require$makeIterator(()=>value, "Headers", "value");
        }
        return $230ccead93d69445$require$makeIterator(()=>[
                ...this[$230ccead93d69445$var$kHeadersSortedMap].values()
            ], "Headers", "value");
    }
    entries() {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        if (this[$230ccead93d69445$require$kGuard] === "immutable") {
            const value = this[$230ccead93d69445$var$kHeadersSortedMap];
            return $230ccead93d69445$require$makeIterator(()=>value, "Headers", "key+value");
        }
        return $230ccead93d69445$require$makeIterator(()=>[
                ...this[$230ccead93d69445$var$kHeadersSortedMap].values()
            ], "Headers", "key+value");
    }
    /**
   * @param {(value: string, key: string, self: Headers) => void} callbackFn
   * @param {unknown} thisArg
   */ forEach(callbackFn, thisArg = globalThis) {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        $230ccead93d69445$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.forEach"
        });
        if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
        for (const [key, value] of this)callbackFn.apply(thisArg, [
            value,
            key,
            this
        ]);
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        $230ccead93d69445$require$webidl.brandCheck(this, $230ccead93d69445$var$Headers);
        return this[$230ccead93d69445$require$kHeadersList];
    }
}
$230ccead93d69445$var$Headers.prototype[Symbol.iterator] = $230ccead93d69445$var$Headers.prototype.entries;
Object.defineProperties($230ccead93d69445$var$Headers.prototype, {
    append: $230ccead93d69445$require$kEnumerableProperty,
    delete: $230ccead93d69445$require$kEnumerableProperty,
    get: $230ccead93d69445$require$kEnumerableProperty,
    has: $230ccead93d69445$require$kEnumerableProperty,
    set: $230ccead93d69445$require$kEnumerableProperty,
    getSetCookie: $230ccead93d69445$require$kEnumerableProperty,
    keys: $230ccead93d69445$require$kEnumerableProperty,
    values: $230ccead93d69445$require$kEnumerableProperty,
    entries: $230ccead93d69445$require$kEnumerableProperty,
    forEach: $230ccead93d69445$require$kEnumerableProperty,
    [Symbol.iterator]: {
        enumerable: false
    },
    [Symbol.toStringTag]: {
        value: "Headers",
        configurable: true
    }
});
$230ccead93d69445$require$webidl.converters.HeadersInit = function(V) {
    if ($230ccead93d69445$require$webidl.util.Type(V) === "Object") {
        if (V[Symbol.iterator]) return $230ccead93d69445$require$webidl.converters["sequence<sequence<ByteString>>"](V);
        return $230ccead93d69445$require$webidl.converters["record<ByteString, ByteString>"](V);
    }
    throw $230ccead93d69445$require$webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: [
            "sequence<sequence<ByteString>>",
            "record<ByteString, ByteString>"
        ]
    });
};
module.exports = {
    fill: $230ccead93d69445$var$fill,
    Headers: $230ccead93d69445$var$Headers,
    HeadersList: $230ccead93d69445$var$HeadersList
};

});


parcelRegister("73TbT", function(module, exports) {
/* globals AbortController */ "use strict";

var $8gSQD = parcelRequire("8gSQD");
var $52439ff324bef460$require$extractBody = $8gSQD.extractBody;
var $52439ff324bef460$require$mixinBody = $8gSQD.mixinBody;
var $52439ff324bef460$require$cloneBody = $8gSQD.cloneBody;

var $30zmV = parcelRequire("30zmV");
var $52439ff324bef460$require$Headers = $30zmV.Headers;
var $52439ff324bef460$require$fillHeaders = $30zmV.fill;
var $52439ff324bef460$require$HeadersList = $30zmV.HeadersList;

const { FinalizationRegistry: $52439ff324bef460$var$FinalizationRegistry } = (parcelRequire("fnyFg"))();

var $dZB1o = parcelRequire("dZB1o");

var $7zBpt = parcelRequire("7zBpt");
var $52439ff324bef460$require$isValidHTTPToken = $7zBpt.isValidHTTPToken;
var $52439ff324bef460$require$sameOrigin = $7zBpt.sameOrigin;
var $52439ff324bef460$require$normalizeMethod = $7zBpt.normalizeMethod;
var $52439ff324bef460$require$makePolicyContainer = $7zBpt.makePolicyContainer;
var $52439ff324bef460$require$normalizeMethodRecord = $7zBpt.normalizeMethodRecord;

var $fUNmM = parcelRequire("fUNmM");
var $52439ff324bef460$require$forbiddenMethodsSet = $fUNmM.forbiddenMethodsSet;
var $52439ff324bef460$require$corsSafeListedMethodsSet = $fUNmM.corsSafeListedMethodsSet;
var $52439ff324bef460$require$referrerPolicy = $fUNmM.referrerPolicy;
var $52439ff324bef460$require$requestRedirect = $fUNmM.requestRedirect;
var $52439ff324bef460$require$requestMode = $fUNmM.requestMode;
var $52439ff324bef460$require$requestCredentials = $fUNmM.requestCredentials;
var $52439ff324bef460$require$requestCache = $fUNmM.requestCache;
var $52439ff324bef460$require$requestDuplex = $fUNmM.requestDuplex;
const { kEnumerableProperty: $52439ff324bef460$var$kEnumerableProperty } = $dZB1o;

var $2cSZe = parcelRequire("2cSZe");
var $52439ff324bef460$require$kHeaders = $2cSZe.kHeaders;
var $52439ff324bef460$require$kSignal = $2cSZe.kSignal;
var $52439ff324bef460$require$kState = $2cSZe.kState;
var $52439ff324bef460$require$kGuard = $2cSZe.kGuard;
var $52439ff324bef460$require$kRealm = $2cSZe.kRealm;

var $7jIZt = parcelRequire("7jIZt");
var $52439ff324bef460$require$webidl = $7jIZt.webidl;

var $lezha = parcelRequire("lezha");
var $52439ff324bef460$require$getGlobalOrigin = $lezha.getGlobalOrigin;

var $h1hYV = parcelRequire("h1hYV");
var $52439ff324bef460$require$URLSerializer = $h1hYV.URLSerializer;

var $9Yodq = parcelRequire("9Yodq");
var $52439ff324bef460$require$kHeadersList = $9Yodq.kHeadersList;
var $52439ff324bef460$require$kConstruct = $9Yodq.kConstruct;


var $52439ff324bef460$require$getMaxListeners = $4UN2M$events.getMaxListeners;
var $52439ff324bef460$require$setMaxListeners = $4UN2M$events.setMaxListeners;
var $52439ff324bef460$require$getEventListeners = $4UN2M$events.getEventListeners;
var $52439ff324bef460$require$defaultMaxListeners = $4UN2M$events.defaultMaxListeners;
let $52439ff324bef460$var$TransformStream = globalThis.TransformStream;
const $52439ff324bef460$var$kAbortController = Symbol("abortController");
const $52439ff324bef460$var$requestFinalizer = new $52439ff324bef460$var$FinalizationRegistry(({ signal: signal, abort: abort })=>{
    signal.removeEventListener("abort", abort);
});

// https://fetch.spec.whatwg.org/#request-class
class $52439ff324bef460$var$Request {
    // https://fetch.spec.whatwg.org/#dom-request
    constructor(input, init = {}){
        if (input === $52439ff324bef460$require$kConstruct) return;
        $52439ff324bef460$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Request constructor"
        });
        input = $52439ff324bef460$require$webidl.converters.RequestInfo(input);
        init = $52439ff324bef460$require$webidl.converters.RequestInit(init);
        // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
        this[$52439ff324bef460$require$kRealm] = {
            settingsObject: {
                baseUrl: $52439ff324bef460$require$getGlobalOrigin(),
                get origin () {
                    return this.baseUrl?.origin;
                },
                policyContainer: $52439ff324bef460$require$makePolicyContainer()
            }
        };
        // 1. Let request be null.
        let request = null;
        // 2. Let fallbackMode be null.
        let fallbackMode = null;
        // 3. Let baseURL be this’s relevant settings object’s API base URL.
        const baseUrl = this[$52439ff324bef460$require$kRealm].settingsObject.baseUrl;
        // 4. Let signal be null.
        let signal = null;
        // 5. If input is a string, then:
        if (typeof input === "string") {
            // 1. Let parsedURL be the result of parsing input with baseURL.
            // 2. If parsedURL is failure, then throw a TypeError.
            let parsedURL;
            try {
                parsedURL = new URL(input, baseUrl);
            } catch (err) {
                throw new TypeError("Failed to parse URL from " + input, {
                    cause: err
                });
            }
            // 3. If parsedURL includes credentials, then throw a TypeError.
            if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
            // 4. Set request to a new request whose URL is parsedURL.
            request = $52439ff324bef460$var$makeRequest({
                urlList: [
                    parsedURL
                ]
            });
            // 5. Set fallbackMode to "cors".
            fallbackMode = "cors";
        } else {
            // 6. Otherwise:
            // 7. Assert: input is a Request object.
            $4UN2M$assert(input instanceof $52439ff324bef460$var$Request);
            // 8. Set request to input’s request.
            request = input[$52439ff324bef460$require$kState];
            // 9. Set signal to input’s signal.
            signal = input[$52439ff324bef460$require$kSignal];
        }
        // 7. Let origin be this’s relevant settings object’s origin.
        const origin = this[$52439ff324bef460$require$kRealm].settingsObject.origin;
        // 8. Let window be "client".
        let window = "client";
        // 9. If request’s window is an environment settings object and its origin
        // is same origin with origin, then set window to request’s window.
        if (request.window?.constructor?.name === "EnvironmentSettingsObject" && $52439ff324bef460$require$sameOrigin(request.window, origin)) window = request.window;
        // 10. If init["window"] exists and is non-null, then throw a TypeError.
        if (init.window != null) throw new TypeError(`'window' option '${window}' must be null`);
        // 11. If init["window"] exists, then set window to "no-window".
        if ("window" in init) window = "no-window";
        // 12. Set request to a new request with the following properties:
        request = $52439ff324bef460$var$makeRequest({
            // URL request’s URL.
            // undici implementation note: this is set as the first item in request's urlList in makeRequest
            // method request’s method.
            method: request.method,
            // header list A copy of request’s header list.
            // undici implementation note: headersList is cloned in makeRequest
            headersList: request.headersList,
            // unsafe-request flag Set.
            unsafeRequest: request.unsafeRequest,
            // client This’s relevant settings object.
            client: this[$52439ff324bef460$require$kRealm].settingsObject,
            window: // window window.
            window,
            // priority request’s priority.
            priority: request.priority,
            // origin request’s origin. The propagation of the origin is only significant for navigation requests
            // being handled by a service worker. In this scenario a request can have an origin that is different
            // from the current client.
            origin: request.origin,
            // referrer request’s referrer.
            referrer: request.referrer,
            // referrer policy request’s referrer policy.
            referrerPolicy: request.referrerPolicy,
            // mode request’s mode.
            mode: request.mode,
            // credentials mode request’s credentials mode.
            credentials: request.credentials,
            // cache mode request’s cache mode.
            cache: request.cache,
            // redirect mode request’s redirect mode.
            redirect: request.redirect,
            // integrity metadata request’s integrity metadata.
            integrity: request.integrity,
            // keepalive request’s keepalive.
            keepalive: request.keepalive,
            // reload-navigation flag request’s reload-navigation flag.
            reloadNavigation: request.reloadNavigation,
            // history-navigation flag request’s history-navigation flag.
            historyNavigation: request.historyNavigation,
            // URL list A clone of request’s URL list.
            urlList: [
                ...request.urlList
            ]
        });
        const initHasKey = Object.keys(init).length !== 0;
        // 13. If init is not empty, then:
        if (initHasKey) {
            // 1. If request’s mode is "navigate", then set it to "same-origin".
            if (request.mode === "navigate") request.mode = "same-origin";
            // 2. Unset request’s reload-navigation flag.
            request.reloadNavigation = false;
            // 3. Unset request’s history-navigation flag.
            request.historyNavigation = false;
            // 4. Set request’s origin to "client".
            request.origin = "client";
            // 5. Set request’s referrer to "client"
            request.referrer = "client";
            // 6. Set request’s referrer policy to the empty string.
            request.referrerPolicy = "";
            // 7. Set request’s URL to request’s current URL.
            request.url = request.urlList[request.urlList.length - 1];
            // 8. Set request’s URL list to « request’s URL ».
            request.urlList = [
                request.url
            ];
        }
        // 14. If init["referrer"] exists, then:
        if (init.referrer !== undefined) {
            // 1. Let referrer be init["referrer"].
            const referrer = init.referrer;
            // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
            if (referrer === "") request.referrer = "no-referrer";
            else {
                // 1. Let parsedReferrer be the result of parsing referrer with
                // baseURL.
                // 2. If parsedReferrer is failure, then throw a TypeError.
                let parsedReferrer;
                try {
                    parsedReferrer = new URL(referrer, baseUrl);
                } catch (err) {
                    throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, {
                        cause: err
                    });
                }
                // 3. If one of the following is true
                // - parsedReferrer’s scheme is "about" and path is the string "client"
                // - parsedReferrer’s origin is not same origin with origin
                // then set request’s referrer to "client".
                if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !$52439ff324bef460$require$sameOrigin(parsedReferrer, this[$52439ff324bef460$require$kRealm].settingsObject.baseUrl)) request.referrer = "client";
                else // 4. Otherwise, set request’s referrer to parsedReferrer.
                request.referrer = parsedReferrer;
            }
        }
        // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
        // to it.
        if (init.referrerPolicy !== undefined) request.referrerPolicy = init.referrerPolicy;
        // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
        let mode;
        if (init.mode !== undefined) mode = init.mode;
        else mode = fallbackMode;
        // 17. If mode is "navigate", then throw a TypeError.
        if (mode === "navigate") throw $52439ff324bef460$require$webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
        });
        // 18. If mode is non-null, set request’s mode to mode.
        if (mode != null) request.mode = mode;
        // 19. If init["credentials"] exists, then set request’s credentials mode
        // to it.
        if (init.credentials !== undefined) request.credentials = init.credentials;
        // 18. If init["cache"] exists, then set request’s cache mode to it.
        if (init.cache !== undefined) request.cache = init.cache;
        // 21. If request’s cache mode is "only-if-cached" and request’s mode is
        // not "same-origin", then throw a TypeError.
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
        // 22. If init["redirect"] exists, then set request’s redirect mode to it.
        if (init.redirect !== undefined) request.redirect = init.redirect;
        // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
        if (init.integrity != null) request.integrity = String(init.integrity);
        // 24. If init["keepalive"] exists, then set request’s keepalive to it.
        if (init.keepalive !== undefined) request.keepalive = Boolean(init.keepalive);
        // 25. If init["method"] exists, then:
        if (init.method !== undefined) {
            // 1. Let method be init["method"].
            let method = init.method;
            // 2. If method is not a method or method is a forbidden method, then
            // throw a TypeError.
            if (!$52439ff324bef460$require$isValidHTTPToken(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);
            if ($52439ff324bef460$require$forbiddenMethodsSet.has(method.toUpperCase())) throw new TypeError(`'${method}' HTTP method is unsupported.`);
            // 3. Normalize method.
            method = $52439ff324bef460$require$normalizeMethodRecord[method] ?? $52439ff324bef460$require$normalizeMethod(method);
            // 4. Set request’s method to method.
            request.method = method;
        }
        // 26. If init["signal"] exists, then set signal to it.
        if (init.signal !== undefined) signal = init.signal;
        // 27. Set this’s request to request.
        this[$52439ff324bef460$require$kState] = request;
        // 28. Set this’s signal to a new AbortSignal object with this’s relevant
        // Realm.
        // TODO: could this be simplified with AbortSignal.any
        // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
        const ac = new AbortController();
        this[$52439ff324bef460$require$kSignal] = ac.signal;
        this[$52439ff324bef460$require$kSignal][$52439ff324bef460$require$kRealm] = this[$52439ff324bef460$require$kRealm];
        // 29. If signal is not null, then make this’s signal follow signal.
        if (signal != null) {
            if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
            if (signal.aborted) ac.abort(signal.reason);
            else {
                // Keep a strong ref to ac while request object
                // is alive. This is needed to prevent AbortController
                // from being prematurely garbage collected.
                // See, https://github.com/nodejs/undici/issues/1926.
                this[$52439ff324bef460$var$kAbortController] = ac;
                const acRef = new WeakRef(ac);
                const abort = function() {
                    const ac = acRef.deref();
                    if (ac !== undefined) ac.abort(this.reason);
                };
                // Third-party AbortControllers may not work with these.
                // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
                try {
                    // If the max amount of listeners is equal to the default, increase it
                    // This is only available in node >= v19.9.0
                    if (typeof $52439ff324bef460$require$getMaxListeners === "function" && $52439ff324bef460$require$getMaxListeners(signal) === $52439ff324bef460$require$defaultMaxListeners) $52439ff324bef460$require$setMaxListeners(100, signal);
                    else if ($52439ff324bef460$require$getEventListeners(signal, "abort").length >= $52439ff324bef460$require$defaultMaxListeners) $52439ff324bef460$require$setMaxListeners(100, signal);
                } catch  {}
                $dZB1o.addAbortListener(signal, abort);
                $52439ff324bef460$var$requestFinalizer.register(ac, {
                    signal: signal,
                    abort: abort
                });
            }
        }
        // 30. Set this’s headers to a new Headers object with this’s relevant
        // Realm, whose header list is request’s header list and guard is
        // "request".
        this[$52439ff324bef460$require$kHeaders] = new $52439ff324bef460$require$Headers($52439ff324bef460$require$kConstruct);
        this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kHeadersList] = request.headersList;
        this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kGuard] = "request";
        this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kRealm] = this[$52439ff324bef460$require$kRealm];
        // 31. If this’s request’s mode is "no-cors", then:
        if (mode === "no-cors") {
            // 1. If this’s request’s method is not a CORS-safelisted method,
            // then throw a TypeError.
            if (!$52439ff324bef460$require$corsSafeListedMethodsSet.has(request.method)) throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);
            // 2. Set this’s headers’s guard to "request-no-cors".
            this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kGuard] = "request-no-cors";
        }
        // 32. If init is not empty, then:
        if (initHasKey) {
            /** @type {HeadersList} */ const headersList = this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kHeadersList];
            // 1. Let headers be a copy of this’s headers and its associated header
            // list.
            // 2. If init["headers"] exists, then set headers to init["headers"].
            const headers = init.headers !== undefined ? init.headers : new $52439ff324bef460$require$HeadersList(headersList);
            // 3. Empty this’s headers’s header list.
            headersList.clear();
            // 4. If headers is a Headers object, then for each header in its header
            // list, append header’s name/header’s value to this’s headers.
            if (headers instanceof $52439ff324bef460$require$HeadersList) {
                for (const [key, val] of headers)headersList.append(key, val);
                // Note: Copy the `set-cookie` meta-data.
                headersList.cookies = headers.cookies;
            } else // 5. Otherwise, fill this’s headers with headers.
            $52439ff324bef460$require$fillHeaders(this[$52439ff324bef460$require$kHeaders], headers);
        }
        // 33. Let inputBody be input’s request’s body if input is a Request
        // object; otherwise null.
        const inputBody = input instanceof $52439ff324bef460$var$Request ? input[$52439ff324bef460$require$kState].body : null;
        // 34. If either init["body"] exists and is non-null or inputBody is
        // non-null, and request’s method is `GET` or `HEAD`, then throw a
        // TypeError.
        if ((init.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
        // 35. Let initBody be null.
        let initBody = null;
        // 36. If init["body"] exists and is non-null, then:
        if (init.body != null) {
            // 1. Let Content-Type be null.
            // 2. Set initBody and Content-Type to the result of extracting
            // init["body"], with keepalive set to request’s keepalive.
            const [extractedBody, contentType] = $52439ff324bef460$require$extractBody(init.body, request.keepalive);
            initBody = extractedBody;
            // 3, If Content-Type is non-null and this’s headers’s header list does
            // not contain `Content-Type`, then append `Content-Type`/Content-Type to
            // this’s headers.
            if (contentType && !this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kHeadersList].contains("content-type")) this[$52439ff324bef460$require$kHeaders].append("content-type", contentType);
        }
        // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
        // inputBody.
        const inputOrInitBody = initBody ?? inputBody;
        // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
        // null, then:
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
            // 1. If initBody is non-null and init["duplex"] does not exist,
            //    then throw a TypeError.
            if (initBody != null && init.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
            // 2. If this’s request’s mode is neither "same-origin" nor "cors",
            // then throw a TypeError.
            if (request.mode !== "same-origin" && request.mode !== "cors") throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
            // 3. Set this’s request’s use-CORS-preflight flag.
            request.useCORSPreflightFlag = true;
        }
        // 39. Let finalBody be inputOrInitBody.
        let finalBody = inputOrInitBody;
        // 40. If initBody is null and inputBody is non-null, then:
        if (initBody == null && inputBody != null) {
            // 1. If input is unusable, then throw a TypeError.
            if ($dZB1o.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
            // 2. Set finalBody to the result of creating a proxy for inputBody.
            if (!$52439ff324bef460$var$TransformStream) $52439ff324bef460$var$TransformStream = $4UN2M$streamweb.TransformStream;
            // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
            const identityTransform = new $52439ff324bef460$var$TransformStream();
            inputBody.stream.pipeThrough(identityTransform);
            finalBody = {
                source: inputBody.source,
                length: inputBody.length,
                stream: identityTransform.readable
            };
        }
        // 41. Set this’s request’s body to finalBody.
        this[$52439ff324bef460$require$kState].body = finalBody;
    }
    // Returns request’s HTTP method, which is "GET" by default.
    get method() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The method getter steps are to return this’s request’s method.
        return this[$52439ff324bef460$require$kState].method;
    }
    // Returns the URL of request as a string.
    get url() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The url getter steps are to return this’s request’s URL, serialized.
        return $52439ff324bef460$require$URLSerializer(this[$52439ff324bef460$require$kState].url);
    }
    // Returns a Headers object consisting of the headers associated with request.
    // Note that headers added in the network layer by the user agent will not
    // be accounted for in this object, e.g., the "Host" header.
    get headers() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The headers getter steps are to return this’s headers.
        return this[$52439ff324bef460$require$kHeaders];
    }
    // Returns the kind of resource requested by request, e.g., "document"
    // or "script".
    get destination() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The destination getter are to return this’s request’s destination.
        return this[$52439ff324bef460$require$kState].destination;
    }
    // Returns the referrer of request. Its value can be a same-origin URL if
    // explicitly set in init, the empty string to indicate no referrer, and
    // "about:client" when defaulting to the global’s default. This is used
    // during fetching to determine the value of the `Referer` header of the
    // request being made.
    get referrer() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // 1. If this’s request’s referrer is "no-referrer", then return the
        // empty string.
        if (this[$52439ff324bef460$require$kState].referrer === "no-referrer") return "";
        // 2. If this’s request’s referrer is "client", then return
        // "about:client".
        if (this[$52439ff324bef460$require$kState].referrer === "client") return "about:client";
        // Return this’s request’s referrer, serialized.
        return this[$52439ff324bef460$require$kState].referrer.toString();
    }
    // Returns the referrer policy associated with request.
    // This is used during fetching to compute the value of the request’s
    // referrer.
    get referrerPolicy() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The referrerPolicy getter steps are to return this’s request’s referrer policy.
        return this[$52439ff324bef460$require$kState].referrerPolicy;
    }
    // Returns the mode associated with request, which is a string indicating
    // whether the request will use CORS, or will be restricted to same-origin
    // URLs.
    get mode() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The mode getter steps are to return this’s request’s mode.
        return this[$52439ff324bef460$require$kState].mode;
    }
    // Returns the credentials mode associated with request,
    // which is a string indicating whether credentials will be sent with the
    // request always, never, or only when sent to a same-origin URL.
    get credentials() {
        // The credentials getter steps are to return this’s request’s credentials mode.
        return this[$52439ff324bef460$require$kState].credentials;
    }
    // Returns the cache mode associated with request,
    // which is a string indicating how the request will
    // interact with the browser’s cache when fetching.
    get cache() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The cache getter steps are to return this’s request’s cache mode.
        return this[$52439ff324bef460$require$kState].cache;
    }
    // Returns the redirect mode associated with request,
    // which is a string indicating how redirects for the
    // request will be handled during fetching. A request
    // will follow redirects by default.
    get redirect() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The redirect getter steps are to return this’s request’s redirect mode.
        return this[$52439ff324bef460$require$kState].redirect;
    }
    // Returns request’s subresource integrity metadata, which is a
    // cryptographic hash of the resource being fetched. Its value
    // consists of multiple hashes separated by whitespace. [SRI]
    get integrity() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The integrity getter steps are to return this’s request’s integrity
        // metadata.
        return this[$52439ff324bef460$require$kState].integrity;
    }
    // Returns a boolean indicating whether or not request can outlive the
    // global in which it was created.
    get keepalive() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The keepalive getter steps are to return this’s request’s keepalive.
        return this[$52439ff324bef460$require$kState].keepalive;
    }
    // Returns a boolean indicating whether or not request is for a reload
    // navigation.
    get isReloadNavigation() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The isReloadNavigation getter steps are to return true if this’s
        // request’s reload-navigation flag is set; otherwise false.
        return this[$52439ff324bef460$require$kState].reloadNavigation;
    }
    // Returns a boolean indicating whether or not request is for a history
    // navigation (a.k.a. back-foward navigation).
    get isHistoryNavigation() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The isHistoryNavigation getter steps are to return true if this’s request’s
        // history-navigation flag is set; otherwise false.
        return this[$52439ff324bef460$require$kState].historyNavigation;
    }
    // Returns the signal associated with request, which is an AbortSignal
    // object indicating whether or not request has been aborted, and its
    // abort event handler.
    get signal() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // The signal getter steps are to return this’s signal.
        return this[$52439ff324bef460$require$kSignal];
    }
    get body() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        return this[$52439ff324bef460$require$kState].body ? this[$52439ff324bef460$require$kState].body.stream : null;
    }
    get bodyUsed() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        return !!this[$52439ff324bef460$require$kState].body && $dZB1o.isDisturbed(this[$52439ff324bef460$require$kState].body.stream);
    }
    get duplex() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        return "half";
    }
    // Returns a clone of request.
    clone() {
        $52439ff324bef460$require$webidl.brandCheck(this, $52439ff324bef460$var$Request);
        // 1. If this is unusable, then throw a TypeError.
        if (this.bodyUsed || this.body?.locked) throw new TypeError("unusable");
        // 2. Let clonedRequest be the result of cloning this’s request.
        const clonedRequest = $52439ff324bef460$var$cloneRequest(this[$52439ff324bef460$require$kState]);
        // 3. Let clonedRequestObject be the result of creating a Request object,
        // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
        const clonedRequestObject = new $52439ff324bef460$var$Request($52439ff324bef460$require$kConstruct);
        clonedRequestObject[$52439ff324bef460$require$kState] = clonedRequest;
        clonedRequestObject[$52439ff324bef460$require$kRealm] = this[$52439ff324bef460$require$kRealm];
        clonedRequestObject[$52439ff324bef460$require$kHeaders] = new $52439ff324bef460$require$Headers($52439ff324bef460$require$kConstruct);
        clonedRequestObject[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kGuard] = this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kGuard];
        clonedRequestObject[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kRealm] = this[$52439ff324bef460$require$kHeaders][$52439ff324bef460$require$kRealm];
        // 4. Make clonedRequestObject’s signal follow this’s signal.
        const ac = new AbortController();
        if (this.signal.aborted) ac.abort(this.signal.reason);
        else $dZB1o.addAbortListener(this.signal, ()=>{
            ac.abort(this.signal.reason);
        });
        clonedRequestObject[$52439ff324bef460$require$kSignal] = ac.signal;
        // 4. Return clonedRequestObject.
        return clonedRequestObject;
    }
}
$52439ff324bef460$require$mixinBody($52439ff324bef460$var$Request);
function $52439ff324bef460$var$makeRequest(init) {
    // https://fetch.spec.whatwg.org/#requests
    const request = {
        method: "GET",
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: "",
        window: "client",
        keepalive: false,
        serviceWorkers: "all",
        initiator: "",
        destination: "",
        priority: null,
        origin: "client",
        policyContainer: "client",
        referrer: "client",
        referrerPolicy: "",
        mode: "no-cors",
        useCORSPreflightFlag: false,
        credentials: "same-origin",
        useCredentials: false,
        cache: "default",
        redirect: "follow",
        integrity: "",
        cryptoGraphicsNonceMetadata: "",
        parserMetadata: "",
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: "basic",
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init,
        headersList: init.headersList ? new $52439ff324bef460$require$HeadersList(init.headersList) : new $52439ff324bef460$require$HeadersList()
    };
    request.url = request.urlList[0];
    return request;
}
// https://fetch.spec.whatwg.org/#concept-request-clone
function $52439ff324bef460$var$cloneRequest(request) {
    // To clone a request request, run these steps:
    // 1. Let newRequest be a copy of request, except for its body.
    const newRequest = $52439ff324bef460$var$makeRequest({
        ...request,
        body: null
    });
    // 2. If request’s body is non-null, set newRequest’s body to the
    // result of cloning request’s body.
    if (request.body != null) newRequest.body = $52439ff324bef460$require$cloneBody(request.body);
    // 3. Return newRequest.
    return newRequest;
}
Object.defineProperties($52439ff324bef460$var$Request.prototype, {
    method: $52439ff324bef460$var$kEnumerableProperty,
    url: $52439ff324bef460$var$kEnumerableProperty,
    headers: $52439ff324bef460$var$kEnumerableProperty,
    redirect: $52439ff324bef460$var$kEnumerableProperty,
    clone: $52439ff324bef460$var$kEnumerableProperty,
    signal: $52439ff324bef460$var$kEnumerableProperty,
    duplex: $52439ff324bef460$var$kEnumerableProperty,
    destination: $52439ff324bef460$var$kEnumerableProperty,
    body: $52439ff324bef460$var$kEnumerableProperty,
    bodyUsed: $52439ff324bef460$var$kEnumerableProperty,
    isHistoryNavigation: $52439ff324bef460$var$kEnumerableProperty,
    isReloadNavigation: $52439ff324bef460$var$kEnumerableProperty,
    keepalive: $52439ff324bef460$var$kEnumerableProperty,
    integrity: $52439ff324bef460$var$kEnumerableProperty,
    cache: $52439ff324bef460$var$kEnumerableProperty,
    credentials: $52439ff324bef460$var$kEnumerableProperty,
    attribute: $52439ff324bef460$var$kEnumerableProperty,
    referrerPolicy: $52439ff324bef460$var$kEnumerableProperty,
    referrer: $52439ff324bef460$var$kEnumerableProperty,
    mode: $52439ff324bef460$var$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "Request",
        configurable: true
    }
});
$52439ff324bef460$require$webidl.converters.Request = $52439ff324bef460$require$webidl.interfaceConverter($52439ff324bef460$var$Request);
// https://fetch.spec.whatwg.org/#requestinfo
$52439ff324bef460$require$webidl.converters.RequestInfo = function(V) {
    if (typeof V === "string") return $52439ff324bef460$require$webidl.converters.USVString(V);
    if (V instanceof $52439ff324bef460$var$Request) return $52439ff324bef460$require$webidl.converters.Request(V);
    return $52439ff324bef460$require$webidl.converters.USVString(V);
};
$52439ff324bef460$require$webidl.converters.AbortSignal = $52439ff324bef460$require$webidl.interfaceConverter(AbortSignal);
// https://fetch.spec.whatwg.org/#requestinit
$52439ff324bef460$require$webidl.converters.RequestInit = $52439ff324bef460$require$webidl.dictionaryConverter([
    {
        key: "method",
        converter: $52439ff324bef460$require$webidl.converters.ByteString
    },
    {
        key: "headers",
        converter: $52439ff324bef460$require$webidl.converters.HeadersInit
    },
    {
        key: "body",
        converter: $52439ff324bef460$require$webidl.nullableConverter($52439ff324bef460$require$webidl.converters.BodyInit)
    },
    {
        key: "referrer",
        converter: $52439ff324bef460$require$webidl.converters.USVString
    },
    {
        key: "referrerPolicy",
        converter: $52439ff324bef460$require$webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: $52439ff324bef460$require$referrerPolicy
    },
    {
        key: "mode",
        converter: $52439ff324bef460$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: $52439ff324bef460$require$requestMode
    },
    {
        key: "credentials",
        converter: $52439ff324bef460$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: $52439ff324bef460$require$requestCredentials
    },
    {
        key: "cache",
        converter: $52439ff324bef460$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: $52439ff324bef460$require$requestCache
    },
    {
        key: "redirect",
        converter: $52439ff324bef460$require$webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: $52439ff324bef460$require$requestRedirect
    },
    {
        key: "integrity",
        converter: $52439ff324bef460$require$webidl.converters.DOMString
    },
    {
        key: "keepalive",
        converter: $52439ff324bef460$require$webidl.converters.boolean
    },
    {
        key: "signal",
        converter: $52439ff324bef460$require$webidl.nullableConverter((signal)=>$52439ff324bef460$require$webidl.converters.AbortSignal(signal, {
                strict: false
            }))
    },
    {
        key: "window",
        converter: $52439ff324bef460$require$webidl.converters.any
    },
    {
        key: "duplex",
        converter: $52439ff324bef460$require$webidl.converters.DOMString,
        allowedValues: $52439ff324bef460$require$requestDuplex
    }
]);
module.exports = {
    Request: $52439ff324bef460$var$Request,
    makeRequest: $52439ff324bef460$var$makeRequest
};

});

parcelRegister("9L2fX", function(module, exports) {
"use strict";
// We include a version number for the Dispatcher API. In case of breaking changes,
// this version number must be increased to avoid conflicts.
const $71aa40e9fcab3475$var$globalDispatcher = Symbol.for("undici.globalDispatcher.1");

var $7bgOU = parcelRequire("7bgOU");
var $71aa40e9fcab3475$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $j8Wyz = parcelRequire("j8Wyz");
if ($71aa40e9fcab3475$var$getGlobalDispatcher() === undefined) $71aa40e9fcab3475$var$setGlobalDispatcher(new $j8Wyz());
function $71aa40e9fcab3475$var$setGlobalDispatcher(agent) {
    if (!agent || typeof agent.dispatch !== "function") throw new $71aa40e9fcab3475$require$InvalidArgumentError("Argument agent must implement Agent");
    Object.defineProperty(globalThis, $71aa40e9fcab3475$var$globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
    });
}
function $71aa40e9fcab3475$var$getGlobalDispatcher() {
    return globalThis[$71aa40e9fcab3475$var$globalDispatcher];
}
module.exports = {
    setGlobalDispatcher: $71aa40e9fcab3475$var$setGlobalDispatcher,
    getGlobalDispatcher: $71aa40e9fcab3475$var$getGlobalDispatcher
};

});
parcelRegister("j8Wyz", function(module, exports) {
"use strict";

var $7bgOU = parcelRequire("7bgOU");
var $defc2fc4d53f6d7d$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $9Yodq = parcelRequire("9Yodq");
var $defc2fc4d53f6d7d$require$kClients = $9Yodq.kClients;
var $defc2fc4d53f6d7d$require$kRunning = $9Yodq.kRunning;
var $defc2fc4d53f6d7d$require$kClose = $9Yodq.kClose;
var $defc2fc4d53f6d7d$require$kDestroy = $9Yodq.kDestroy;
var $defc2fc4d53f6d7d$require$kDispatch = $9Yodq.kDispatch;
var $defc2fc4d53f6d7d$require$kInterceptors = $9Yodq.kInterceptors;

var $5nvUe = parcelRequire("5nvUe");

var $1HAzk = parcelRequire("1HAzk");

var $jOrdh = parcelRequire("jOrdh");

var $dZB1o = parcelRequire("dZB1o");

var $hzQZh = parcelRequire("hzQZh");

const { WeakRef: $defc2fc4d53f6d7d$var$WeakRef, FinalizationRegistry: $defc2fc4d53f6d7d$var$FinalizationRegistry } = (parcelRequire("fnyFg"))();
const $defc2fc4d53f6d7d$var$kOnConnect = Symbol("onConnect");
const $defc2fc4d53f6d7d$var$kOnDisconnect = Symbol("onDisconnect");
const $defc2fc4d53f6d7d$var$kOnConnectionError = Symbol("onConnectionError");
const $defc2fc4d53f6d7d$var$kMaxRedirections = Symbol("maxRedirections");
const $defc2fc4d53f6d7d$var$kOnDrain = Symbol("onDrain");
const $defc2fc4d53f6d7d$var$kFactory = Symbol("factory");
const $defc2fc4d53f6d7d$var$kFinalizer = Symbol("finalizer");
const $defc2fc4d53f6d7d$var$kOptions = Symbol("options");
function $defc2fc4d53f6d7d$var$defaultFactory(origin, opts) {
    return opts && opts.connections === 1 ? new $jOrdh(origin, opts) : new $1HAzk(origin, opts);
}
class $defc2fc4d53f6d7d$var$Agent extends $5nvUe {
    constructor({ factory: factory = $defc2fc4d53f6d7d$var$defaultFactory, maxRedirections: maxRedirections = 0, connect: connect, ...options } = {}){
        super();
        if (typeof factory !== "function") throw new $defc2fc4d53f6d7d$require$InvalidArgumentError("factory must be a function.");
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") throw new $defc2fc4d53f6d7d$require$InvalidArgumentError("connect must be a function or an object");
        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) throw new $defc2fc4d53f6d7d$require$InvalidArgumentError("maxRedirections must be a positive number");
        if (connect && typeof connect !== "function") connect = {
            ...connect
        };
        this[$defc2fc4d53f6d7d$require$kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [
            $hzQZh({
                maxRedirections: maxRedirections
            })
        ];
        this[$defc2fc4d53f6d7d$var$kOptions] = {
            ...$dZB1o.deepClone(options),
            connect: connect
        };
        this[$defc2fc4d53f6d7d$var$kOptions].interceptors = options.interceptors ? {
            ...options.interceptors
        } : undefined;
        this[$defc2fc4d53f6d7d$var$kMaxRedirections] = maxRedirections;
        this[$defc2fc4d53f6d7d$var$kFactory] = factory;
        this[$defc2fc4d53f6d7d$require$kClients] = new Map();
        this[$defc2fc4d53f6d7d$var$kFinalizer] = new $defc2fc4d53f6d7d$var$FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ (key)=>{
            const ref = this[$defc2fc4d53f6d7d$require$kClients].get(key);
            if (ref !== undefined && ref.deref() === undefined) this[$defc2fc4d53f6d7d$require$kClients].delete(key);
        });
        const agent = this;
        this[$defc2fc4d53f6d7d$var$kOnDrain] = (origin, targets)=>{
            agent.emit("drain", origin, [
                agent,
                ...targets
            ]);
        };
        this[$defc2fc4d53f6d7d$var$kOnConnect] = (origin, targets)=>{
            agent.emit("connect", origin, [
                agent,
                ...targets
            ]);
        };
        this[$defc2fc4d53f6d7d$var$kOnDisconnect] = (origin, targets, err)=>{
            agent.emit("disconnect", origin, [
                agent,
                ...targets
            ], err);
        };
        this[$defc2fc4d53f6d7d$var$kOnConnectionError] = (origin, targets, err)=>{
            agent.emit("connectionError", origin, [
                agent,
                ...targets
            ], err);
        };
    }
    get [$defc2fc4d53f6d7d$require$kRunning]() {
        let ret = 0;
        for (const ref of this[$defc2fc4d53f6d7d$require$kClients].values()){
            const client = ref.deref();
            /* istanbul ignore next: gc is undeterministic */ if (client) ret += client[$defc2fc4d53f6d7d$require$kRunning];
        }
        return ret;
    }
    [$defc2fc4d53f6d7d$require$kDispatch](opts, handler) {
        let key;
        if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) key = String(opts.origin);
        else throw new $defc2fc4d53f6d7d$require$InvalidArgumentError("opts.origin must be a non-empty string or URL.");
        const ref = this[$defc2fc4d53f6d7d$require$kClients].get(key);
        let dispatcher = ref ? ref.deref() : null;
        if (!dispatcher) {
            dispatcher = this[$defc2fc4d53f6d7d$var$kFactory](opts.origin, this[$defc2fc4d53f6d7d$var$kOptions]).on("drain", this[$defc2fc4d53f6d7d$var$kOnDrain]).on("connect", this[$defc2fc4d53f6d7d$var$kOnConnect]).on("disconnect", this[$defc2fc4d53f6d7d$var$kOnDisconnect]).on("connectionError", this[$defc2fc4d53f6d7d$var$kOnConnectionError]);
            this[$defc2fc4d53f6d7d$require$kClients].set(key, new $defc2fc4d53f6d7d$var$WeakRef(dispatcher));
            this[$defc2fc4d53f6d7d$var$kFinalizer].register(dispatcher, key);
        }
        return dispatcher.dispatch(opts, handler);
    }
    async [$defc2fc4d53f6d7d$require$kClose]() {
        const closePromises = [];
        for (const ref of this[$defc2fc4d53f6d7d$require$kClients].values()){
            const client = ref.deref();
            /* istanbul ignore else: gc is undeterministic */ if (client) closePromises.push(client.close());
        }
        await Promise.all(closePromises);
    }
    async [$defc2fc4d53f6d7d$require$kDestroy](err) {
        const destroyPromises = [];
        for (const ref of this[$defc2fc4d53f6d7d$require$kClients].values()){
            const client = ref.deref();
            /* istanbul ignore else: gc is undeterministic */ if (client) destroyPromises.push(client.destroy(err));
        }
        await Promise.all(destroyPromises);
    }
}
module.exports = $defc2fc4d53f6d7d$var$Agent;

});
parcelRegister("5nvUe", function(module, exports) {
"use strict";

var $cxWIF = parcelRequire("cxWIF");

var $7bgOU = parcelRequire("7bgOU");
var $3ea7d99b583c0faa$require$ClientDestroyedError = $7bgOU.ClientDestroyedError;
var $3ea7d99b583c0faa$require$ClientClosedError = $7bgOU.ClientClosedError;
var $3ea7d99b583c0faa$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $9Yodq = parcelRequire("9Yodq");
var $3ea7d99b583c0faa$require$kDestroy = $9Yodq.kDestroy;
var $3ea7d99b583c0faa$require$kClose = $9Yodq.kClose;
var $3ea7d99b583c0faa$require$kDispatch = $9Yodq.kDispatch;
var $3ea7d99b583c0faa$require$kInterceptors = $9Yodq.kInterceptors;
const $3ea7d99b583c0faa$var$kDestroyed = Symbol("destroyed");
const $3ea7d99b583c0faa$var$kClosed = Symbol("closed");
const $3ea7d99b583c0faa$var$kOnDestroyed = Symbol("onDestroyed");
const $3ea7d99b583c0faa$var$kOnClosed = Symbol("onClosed");
const $3ea7d99b583c0faa$var$kInterceptedDispatch = Symbol("Intercepted Dispatch");
class $3ea7d99b583c0faa$var$DispatcherBase extends $cxWIF {
    constructor(){
        super();
        this[$3ea7d99b583c0faa$var$kDestroyed] = false;
        this[$3ea7d99b583c0faa$var$kOnDestroyed] = null;
        this[$3ea7d99b583c0faa$var$kClosed] = false;
        this[$3ea7d99b583c0faa$var$kOnClosed] = [];
    }
    get destroyed() {
        return this[$3ea7d99b583c0faa$var$kDestroyed];
    }
    get closed() {
        return this[$3ea7d99b583c0faa$var$kClosed];
    }
    get interceptors() {
        return this[$3ea7d99b583c0faa$require$kInterceptors];
    }
    set interceptors(newInterceptors) {
        if (newInterceptors) for(let i = newInterceptors.length - 1; i >= 0; i--){
            const interceptor = this[$3ea7d99b583c0faa$require$kInterceptors][i];
            if (typeof interceptor !== "function") throw new $3ea7d99b583c0faa$require$InvalidArgumentError("interceptor must be an function");
        }
        this[$3ea7d99b583c0faa$require$kInterceptors] = newInterceptors;
    }
    close(callback) {
        if (callback === undefined) return new Promise((resolve, reject)=>{
            this.close((err, data)=>{
                return err ? reject(err) : resolve(data);
            });
        });
        if (typeof callback !== "function") throw new $3ea7d99b583c0faa$require$InvalidArgumentError("invalid callback");
        if (this[$3ea7d99b583c0faa$var$kDestroyed]) {
            queueMicrotask(()=>callback(new $3ea7d99b583c0faa$require$ClientDestroyedError(), null));
            return;
        }
        if (this[$3ea7d99b583c0faa$var$kClosed]) {
            if (this[$3ea7d99b583c0faa$var$kOnClosed]) this[$3ea7d99b583c0faa$var$kOnClosed].push(callback);
            else queueMicrotask(()=>callback(null, null));
            return;
        }
        this[$3ea7d99b583c0faa$var$kClosed] = true;
        this[$3ea7d99b583c0faa$var$kOnClosed].push(callback);
        const onClosed = ()=>{
            const callbacks = this[$3ea7d99b583c0faa$var$kOnClosed];
            this[$3ea7d99b583c0faa$var$kOnClosed] = null;
            for(let i = 0; i < callbacks.length; i++)callbacks[i](null, null);
        };
        // Should not error.
        this[$3ea7d99b583c0faa$require$kClose]().then(()=>this.destroy()).then(()=>{
            queueMicrotask(onClosed);
        });
    }
    destroy(err, callback) {
        if (typeof err === "function") {
            callback = err;
            err = null;
        }
        if (callback === undefined) return new Promise((resolve, reject)=>{
            this.destroy(err, (err, data)=>{
                return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data);
            });
        });
        if (typeof callback !== "function") throw new $3ea7d99b583c0faa$require$InvalidArgumentError("invalid callback");
        if (this[$3ea7d99b583c0faa$var$kDestroyed]) {
            if (this[$3ea7d99b583c0faa$var$kOnDestroyed]) this[$3ea7d99b583c0faa$var$kOnDestroyed].push(callback);
            else queueMicrotask(()=>callback(null, null));
            return;
        }
        if (!err) err = new $3ea7d99b583c0faa$require$ClientDestroyedError();
        this[$3ea7d99b583c0faa$var$kDestroyed] = true;
        this[$3ea7d99b583c0faa$var$kOnDestroyed] = this[$3ea7d99b583c0faa$var$kOnDestroyed] || [];
        this[$3ea7d99b583c0faa$var$kOnDestroyed].push(callback);
        const onDestroyed = ()=>{
            const callbacks = this[$3ea7d99b583c0faa$var$kOnDestroyed];
            this[$3ea7d99b583c0faa$var$kOnDestroyed] = null;
            for(let i = 0; i < callbacks.length; i++)callbacks[i](null, null);
        };
        // Should not error.
        this[$3ea7d99b583c0faa$require$kDestroy](err).then(()=>{
            queueMicrotask(onDestroyed);
        });
    }
    [$3ea7d99b583c0faa$var$kInterceptedDispatch](opts, handler) {
        if (!this[$3ea7d99b583c0faa$require$kInterceptors] || this[$3ea7d99b583c0faa$require$kInterceptors].length === 0) {
            this[$3ea7d99b583c0faa$var$kInterceptedDispatch] = this[$3ea7d99b583c0faa$require$kDispatch];
            return this[$3ea7d99b583c0faa$require$kDispatch](opts, handler);
        }
        let dispatch = this[$3ea7d99b583c0faa$require$kDispatch].bind(this);
        for(let i = this[$3ea7d99b583c0faa$require$kInterceptors].length - 1; i >= 0; i--)dispatch = this[$3ea7d99b583c0faa$require$kInterceptors][i](dispatch);
        this[$3ea7d99b583c0faa$var$kInterceptedDispatch] = dispatch;
        return dispatch(opts, handler);
    }
    dispatch(opts, handler) {
        if (!handler || typeof handler !== "object") throw new $3ea7d99b583c0faa$require$InvalidArgumentError("handler must be an object");
        try {
            if (!opts || typeof opts !== "object") throw new $3ea7d99b583c0faa$require$InvalidArgumentError("opts must be an object.");
            if (this[$3ea7d99b583c0faa$var$kDestroyed] || this[$3ea7d99b583c0faa$var$kOnDestroyed]) throw new $3ea7d99b583c0faa$require$ClientDestroyedError();
            if (this[$3ea7d99b583c0faa$var$kClosed]) throw new $3ea7d99b583c0faa$require$ClientClosedError();
            return this[$3ea7d99b583c0faa$var$kInterceptedDispatch](opts, handler);
        } catch (err) {
            if (typeof handler.onError !== "function") throw new $3ea7d99b583c0faa$require$InvalidArgumentError("invalid onError method");
            handler.onError(err);
            return false;
        }
    }
}
module.exports = $3ea7d99b583c0faa$var$DispatcherBase;

});
parcelRegister("cxWIF", function(module, exports) {
"use strict";

class $92261d8c278a634d$var$Dispatcher extends $4UN2M$events {
    dispatch() {
        throw new Error("not implemented");
    }
    close() {
        throw new Error("not implemented");
    }
    destroy() {
        throw new Error("not implemented");
    }
}
module.exports = $92261d8c278a634d$var$Dispatcher;

});


parcelRegister("1HAzk", function(module, exports) {
"use strict";

var $iRrVO = parcelRequire("iRrVO");
var $13d62c6503a930cf$require$PoolBase = $iRrVO.PoolBase;
var $13d62c6503a930cf$require$kClients = $iRrVO.kClients;
var $13d62c6503a930cf$require$kNeedDrain = $iRrVO.kNeedDrain;
var $13d62c6503a930cf$require$kAddClient = $iRrVO.kAddClient;
var $13d62c6503a930cf$require$kGetDispatcher = $iRrVO.kGetDispatcher;

var $jOrdh = parcelRequire("jOrdh");

var $7bgOU = parcelRequire("7bgOU");
var $13d62c6503a930cf$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $dZB1o = parcelRequire("dZB1o");

var $9Yodq = parcelRequire("9Yodq");
var $13d62c6503a930cf$require$kUrl = $9Yodq.kUrl;
var $13d62c6503a930cf$require$kInterceptors = $9Yodq.kInterceptors;

var $hb74B = parcelRequire("hb74B");
const $13d62c6503a930cf$var$kOptions = Symbol("options");
const $13d62c6503a930cf$var$kConnections = Symbol("connections");
const $13d62c6503a930cf$var$kFactory = Symbol("factory");
function $13d62c6503a930cf$var$defaultFactory(origin, opts) {
    return new $jOrdh(origin, opts);
}
class $13d62c6503a930cf$var$Pool extends $13d62c6503a930cf$require$PoolBase {
    constructor(origin, { connections: connections, factory: factory = $13d62c6503a930cf$var$defaultFactory, connect: connect, connectTimeout: connectTimeout, tls: tls, maxCachedSessions: maxCachedSessions, socketPath: socketPath, autoSelectFamily: autoSelectFamily, autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout, allowH2: allowH2, ...options } = {}){
        super();
        if (connections != null && (!Number.isFinite(connections) || connections < 0)) throw new $13d62c6503a930cf$require$InvalidArgumentError("invalid connections");
        if (typeof factory !== "function") throw new $13d62c6503a930cf$require$InvalidArgumentError("factory must be a function.");
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") throw new $13d62c6503a930cf$require$InvalidArgumentError("connect must be a function or an object");
        if (typeof connect !== "function") connect = $hb74B({
            ...tls,
            maxCachedSessions: maxCachedSessions,
            allowH2: allowH2,
            socketPath: socketPath,
            timeout: connectTimeout,
            ...$dZB1o.nodeHasAutoSelectFamily && autoSelectFamily ? {
                autoSelectFamily: autoSelectFamily,
                autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout
            } : undefined,
            ...connect
        });
        this[$13d62c6503a930cf$require$kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
        this[$13d62c6503a930cf$var$kConnections] = connections || null;
        this[$13d62c6503a930cf$require$kUrl] = $dZB1o.parseOrigin(origin);
        this[$13d62c6503a930cf$var$kOptions] = {
            ...$dZB1o.deepClone(options),
            connect: connect,
            allowH2: allowH2
        };
        this[$13d62c6503a930cf$var$kOptions].interceptors = options.interceptors ? {
            ...options.interceptors
        } : undefined;
        this[$13d62c6503a930cf$var$kFactory] = factory;
    }
    [$13d62c6503a930cf$require$kGetDispatcher]() {
        let dispatcher = this[$13d62c6503a930cf$require$kClients].find((dispatcher)=>!dispatcher[$13d62c6503a930cf$require$kNeedDrain]);
        if (dispatcher) return dispatcher;
        if (!this[$13d62c6503a930cf$var$kConnections] || this[$13d62c6503a930cf$require$kClients].length < this[$13d62c6503a930cf$var$kConnections]) {
            dispatcher = this[$13d62c6503a930cf$var$kFactory](this[$13d62c6503a930cf$require$kUrl], this[$13d62c6503a930cf$var$kOptions]);
            this[$13d62c6503a930cf$require$kAddClient](dispatcher);
        }
        return dispatcher;
    }
}
module.exports = $13d62c6503a930cf$var$Pool;

});
parcelRegister("iRrVO", function(module, exports) {

"use strict";

var $5nvUe = parcelRequire("5nvUe");

var $e5eIl = parcelRequire("e5eIl");

var $9Yodq = parcelRequire("9Yodq");
var $dbb2d7d0a47960fe$require$kConnected = $9Yodq.kConnected;
var $dbb2d7d0a47960fe$require$kSize = $9Yodq.kSize;
var $dbb2d7d0a47960fe$require$kRunning = $9Yodq.kRunning;
var $dbb2d7d0a47960fe$require$kPending = $9Yodq.kPending;
var $dbb2d7d0a47960fe$require$kQueued = $9Yodq.kQueued;
var $dbb2d7d0a47960fe$require$kBusy = $9Yodq.kBusy;
var $dbb2d7d0a47960fe$require$kFree = $9Yodq.kFree;
var $dbb2d7d0a47960fe$require$kUrl = $9Yodq.kUrl;
var $dbb2d7d0a47960fe$require$kClose = $9Yodq.kClose;
var $dbb2d7d0a47960fe$require$kDestroy = $9Yodq.kDestroy;
var $dbb2d7d0a47960fe$require$kDispatch = $9Yodq.kDispatch;

var $4ECz4 = parcelRequire("4ECz4");
const $dbb2d7d0a47960fe$var$kClients = Symbol("clients");
const $dbb2d7d0a47960fe$var$kNeedDrain = Symbol("needDrain");
const $dbb2d7d0a47960fe$var$kQueue = Symbol("queue");
const $dbb2d7d0a47960fe$var$kClosedResolve = Symbol("closed resolve");
const $dbb2d7d0a47960fe$var$kOnDrain = Symbol("onDrain");
const $dbb2d7d0a47960fe$var$kOnConnect = Symbol("onConnect");
const $dbb2d7d0a47960fe$var$kOnDisconnect = Symbol("onDisconnect");
const $dbb2d7d0a47960fe$var$kOnConnectionError = Symbol("onConnectionError");
const $dbb2d7d0a47960fe$var$kGetDispatcher = Symbol("get dispatcher");
const $dbb2d7d0a47960fe$var$kAddClient = Symbol("add client");
const $dbb2d7d0a47960fe$var$kRemoveClient = Symbol("remove client");
const $dbb2d7d0a47960fe$var$kStats = Symbol("stats");
class $dbb2d7d0a47960fe$var$PoolBase extends $5nvUe {
    constructor(){
        super();
        this[$dbb2d7d0a47960fe$var$kQueue] = new $e5eIl();
        this[$dbb2d7d0a47960fe$var$kClients] = [];
        this[$dbb2d7d0a47960fe$require$kQueued] = 0;
        const pool = this;
        this[$dbb2d7d0a47960fe$var$kOnDrain] = function onDrain(origin, targets) {
            const queue = pool[$dbb2d7d0a47960fe$var$kQueue];
            let needDrain = false;
            while(!needDrain){
                const item = queue.shift();
                if (!item) break;
                pool[$dbb2d7d0a47960fe$require$kQueued]--;
                needDrain = !this.dispatch(item.opts, item.handler);
            }
            this[$dbb2d7d0a47960fe$var$kNeedDrain] = needDrain;
            if (!this[$dbb2d7d0a47960fe$var$kNeedDrain] && pool[$dbb2d7d0a47960fe$var$kNeedDrain]) {
                pool[$dbb2d7d0a47960fe$var$kNeedDrain] = false;
                pool.emit("drain", origin, [
                    pool,
                    ...targets
                ]);
            }
            if (pool[$dbb2d7d0a47960fe$var$kClosedResolve] && queue.isEmpty()) Promise.all(pool[$dbb2d7d0a47960fe$var$kClients].map((c)=>c.close())).then(pool[$dbb2d7d0a47960fe$var$kClosedResolve]);
        };
        this[$dbb2d7d0a47960fe$var$kOnConnect] = (origin, targets)=>{
            pool.emit("connect", origin, [
                pool,
                ...targets
            ]);
        };
        this[$dbb2d7d0a47960fe$var$kOnDisconnect] = (origin, targets, err)=>{
            pool.emit("disconnect", origin, [
                pool,
                ...targets
            ], err);
        };
        this[$dbb2d7d0a47960fe$var$kOnConnectionError] = (origin, targets, err)=>{
            pool.emit("connectionError", origin, [
                pool,
                ...targets
            ], err);
        };
        this[$dbb2d7d0a47960fe$var$kStats] = new $4ECz4(this);
    }
    get [$dbb2d7d0a47960fe$require$kBusy]() {
        return this[$dbb2d7d0a47960fe$var$kNeedDrain];
    }
    get [$dbb2d7d0a47960fe$require$kConnected]() {
        return this[$dbb2d7d0a47960fe$var$kClients].filter((client)=>client[$dbb2d7d0a47960fe$require$kConnected]).length;
    }
    get [$dbb2d7d0a47960fe$require$kFree]() {
        return this[$dbb2d7d0a47960fe$var$kClients].filter((client)=>client[$dbb2d7d0a47960fe$require$kConnected] && !client[$dbb2d7d0a47960fe$var$kNeedDrain]).length;
    }
    get [$dbb2d7d0a47960fe$require$kPending]() {
        let ret = this[$dbb2d7d0a47960fe$require$kQueued];
        for (const { [$dbb2d7d0a47960fe$require$kPending]: pending } of this[$dbb2d7d0a47960fe$var$kClients])ret += pending;
        return ret;
    }
    get [$dbb2d7d0a47960fe$require$kRunning]() {
        let ret = 0;
        for (const { [$dbb2d7d0a47960fe$require$kRunning]: running } of this[$dbb2d7d0a47960fe$var$kClients])ret += running;
        return ret;
    }
    get [$dbb2d7d0a47960fe$require$kSize]() {
        let ret = this[$dbb2d7d0a47960fe$require$kQueued];
        for (const { [$dbb2d7d0a47960fe$require$kSize]: size } of this[$dbb2d7d0a47960fe$var$kClients])ret += size;
        return ret;
    }
    get stats() {
        return this[$dbb2d7d0a47960fe$var$kStats];
    }
    async [$dbb2d7d0a47960fe$require$kClose]() {
        if (this[$dbb2d7d0a47960fe$var$kQueue].isEmpty()) return Promise.all(this[$dbb2d7d0a47960fe$var$kClients].map((c)=>c.close()));
        else return new Promise((resolve)=>{
            this[$dbb2d7d0a47960fe$var$kClosedResolve] = resolve;
        });
    }
    async [$dbb2d7d0a47960fe$require$kDestroy](err) {
        while(true){
            const item = this[$dbb2d7d0a47960fe$var$kQueue].shift();
            if (!item) break;
            item.handler.onError(err);
        }
        return Promise.all(this[$dbb2d7d0a47960fe$var$kClients].map((c)=>c.destroy(err)));
    }
    [$dbb2d7d0a47960fe$require$kDispatch](opts, handler) {
        const dispatcher = this[$dbb2d7d0a47960fe$var$kGetDispatcher]();
        if (!dispatcher) {
            this[$dbb2d7d0a47960fe$var$kNeedDrain] = true;
            this[$dbb2d7d0a47960fe$var$kQueue].push({
                opts: opts,
                handler: handler
            });
            this[$dbb2d7d0a47960fe$require$kQueued]++;
        } else if (!dispatcher.dispatch(opts, handler)) {
            dispatcher[$dbb2d7d0a47960fe$var$kNeedDrain] = true;
            this[$dbb2d7d0a47960fe$var$kNeedDrain] = !this[$dbb2d7d0a47960fe$var$kGetDispatcher]();
        }
        return !this[$dbb2d7d0a47960fe$var$kNeedDrain];
    }
    [$dbb2d7d0a47960fe$var$kAddClient](client) {
        client.on("drain", this[$dbb2d7d0a47960fe$var$kOnDrain]).on("connect", this[$dbb2d7d0a47960fe$var$kOnConnect]).on("disconnect", this[$dbb2d7d0a47960fe$var$kOnDisconnect]).on("connectionError", this[$dbb2d7d0a47960fe$var$kOnConnectionError]);
        this[$dbb2d7d0a47960fe$var$kClients].push(client);
        if (this[$dbb2d7d0a47960fe$var$kNeedDrain]) $4UN2M$process.nextTick(()=>{
            if (this[$dbb2d7d0a47960fe$var$kNeedDrain]) this[$dbb2d7d0a47960fe$var$kOnDrain](client[$dbb2d7d0a47960fe$require$kUrl], [
                this,
                client
            ]);
        });
        return this;
    }
    [$dbb2d7d0a47960fe$var$kRemoveClient](client) {
        client.close(()=>{
            const idx = this[$dbb2d7d0a47960fe$var$kClients].indexOf(client);
            if (idx !== -1) this[$dbb2d7d0a47960fe$var$kClients].splice(idx, 1);
        });
        this[$dbb2d7d0a47960fe$var$kNeedDrain] = this[$dbb2d7d0a47960fe$var$kClients].some((dispatcher)=>!dispatcher[$dbb2d7d0a47960fe$var$kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
    }
}
module.exports = {
    PoolBase: $dbb2d7d0a47960fe$var$PoolBase,
    kClients: $dbb2d7d0a47960fe$var$kClients,
    kNeedDrain: $dbb2d7d0a47960fe$var$kNeedDrain,
    kAddClient: $dbb2d7d0a47960fe$var$kAddClient,
    kRemoveClient: $dbb2d7d0a47960fe$var$kRemoveClient,
    kGetDispatcher: $dbb2d7d0a47960fe$var$kGetDispatcher
};

});
parcelRegister("e5eIl", function(module, exports) {
/* eslint-disable */ "use strict";
// Extracted from node/lib/internal/fixed_queue.js
// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
const $a40cf23f0fa6b740$var$kSize = 2048;
const $a40cf23f0fa6b740$var$kMask = $a40cf23f0fa6b740$var$kSize - 1;
// The FixedQueue is implemented as a singly-linked list of fixed-size
// circular buffers. It looks something like this:
//
//  head                                                       tail
//    |                                                          |
//    v                                                          v
// +-----------+ <-----\       +-----------+ <------\         +-----------+
// |  [null]   |        \----- |   next    |         \------- |   next    |
// +-----------+               +-----------+                  +-----------+
// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |       bottom --> |   item    |
// |   item    |               |   item    |                  |   item    |
// |    ...    |               |    ...    |                  |    ...    |
// |   item    |               |   item    |                  |   item    |
// |   item    |               |   item    |                  |   item    |
// |  [empty]  | <-- top       |   item    |                  |   item    |
// |  [empty]  |               |   item    |                  |   item    |
// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
// +-----------+               +-----------+                  +-----------+
//
// Or, if there is only one circular buffer, it looks something
// like either of these:
//
//  head   tail                                 head   tail
//    |     |                                     |     |
//    v     v                                     v     v
// +-----------+                               +-----------+
// |  [null]   |                               |  [null]   |
// +-----------+                               +-----------+
// |  [empty]  |                               |   item    |
// |  [empty]  |                               |   item    |
// |   item    | <-- bottom            top --> |  [empty]  |
// |   item    |                               |  [empty]  |
// |  [empty]  | <-- top            bottom --> |   item    |
// |  [empty]  |                               |   item    |
// +-----------+                               +-----------+
//
// Adding a value means moving `top` forward by one, removing means
// moving `bottom` forward by one. After reaching the end, the queue
// wraps around.
//
// When `top === bottom` the current queue is empty and when
// `top + 1 === bottom` it's full. This wastes a single space of storage
// but allows much quicker checks.
class $a40cf23f0fa6b740$var$FixedCircularBuffer {
    constructor(){
        this.bottom = 0;
        this.top = 0;
        this.list = new Array($a40cf23f0fa6b740$var$kSize);
        this.next = null;
    }
    isEmpty() {
        return this.top === this.bottom;
    }
    isFull() {
        return (this.top + 1 & $a40cf23f0fa6b740$var$kMask) === this.bottom;
    }
    push(data) {
        this.list[this.top] = data;
        this.top = this.top + 1 & $a40cf23f0fa6b740$var$kMask;
    }
    shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === undefined) return null;
        this.list[this.bottom] = undefined;
        this.bottom = this.bottom + 1 & $a40cf23f0fa6b740$var$kMask;
        return nextItem;
    }
}
module.exports = class FixedQueue {
    constructor(){
        this.head = this.tail = new $a40cf23f0fa6b740$var$FixedCircularBuffer();
    }
    isEmpty() {
        return this.head.isEmpty();
    }
    push(data) {
        if (this.head.isFull()) // Head is full: Creates a new queue, sets the old queue's `.next` to it,
        // and sets it as the new main queue.
        this.head = this.head.next = new $a40cf23f0fa6b740$var$FixedCircularBuffer();
        this.head.push(data);
    }
    shift() {
        const tail = this.tail;
        const next = tail.shift();
        if (tail.isEmpty() && tail.next !== null) // If there is another queue, it forms the new tail.
        this.tail = tail.next;
        return next;
    }
};

});

parcelRegister("4ECz4", function(module, exports) {

var $9Yodq = parcelRequire("9Yodq");
var $3638cffe5a426750$require$kFree = $9Yodq.kFree;
var $3638cffe5a426750$require$kConnected = $9Yodq.kConnected;
var $3638cffe5a426750$require$kPending = $9Yodq.kPending;
var $3638cffe5a426750$require$kQueued = $9Yodq.kQueued;
var $3638cffe5a426750$require$kRunning = $9Yodq.kRunning;
var $3638cffe5a426750$require$kSize = $9Yodq.kSize;
const $3638cffe5a426750$var$kPool = Symbol("pool");
class $3638cffe5a426750$var$PoolStats {
    constructor(pool){
        this[$3638cffe5a426750$var$kPool] = pool;
    }
    get connected() {
        return this[$3638cffe5a426750$var$kPool][$3638cffe5a426750$require$kConnected];
    }
    get free() {
        return this[$3638cffe5a426750$var$kPool][$3638cffe5a426750$require$kFree];
    }
    get pending() {
        return this[$3638cffe5a426750$var$kPool][$3638cffe5a426750$require$kPending];
    }
    get queued() {
        return this[$3638cffe5a426750$var$kPool][$3638cffe5a426750$require$kQueued];
    }
    get running() {
        return this[$3638cffe5a426750$var$kPool][$3638cffe5a426750$require$kRunning];
    }
    get size() {
        return this[$3638cffe5a426750$var$kPool][$3638cffe5a426750$require$kSize];
    }
}
module.exports = $3638cffe5a426750$var$PoolStats;

});


parcelRegister("jOrdh", function(module, exports) {
// @ts-check

var $e6c7cbcf7b17bcc2$require$Buffer = $4UN2M$buffer.Buffer;

"use strict";




var $e6c7cbcf7b17bcc2$require$pipeline = $4UN2M$stream.pipeline;

var $dZB1o = parcelRequire("dZB1o");

var $lKhqR = parcelRequire("lKhqR");

var $g1ydE = parcelRequire("g1ydE");

var $5nvUe = parcelRequire("5nvUe");

var $7bgOU = parcelRequire("7bgOU");
var $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError = $7bgOU.RequestContentLengthMismatchError;
var $e6c7cbcf7b17bcc2$require$ResponseContentLengthMismatchError = $7bgOU.ResponseContentLengthMismatchError;
var $e6c7cbcf7b17bcc2$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $e6c7cbcf7b17bcc2$require$RequestAbortedError = $7bgOU.RequestAbortedError;
var $e6c7cbcf7b17bcc2$require$HeadersTimeoutError = $7bgOU.HeadersTimeoutError;
var $e6c7cbcf7b17bcc2$require$HeadersOverflowError = $7bgOU.HeadersOverflowError;
var $e6c7cbcf7b17bcc2$require$SocketError = $7bgOU.SocketError;
var $e6c7cbcf7b17bcc2$require$InformationalError = $7bgOU.InformationalError;
var $e6c7cbcf7b17bcc2$require$BodyTimeoutError = $7bgOU.BodyTimeoutError;
var $e6c7cbcf7b17bcc2$require$HTTPParserError = $7bgOU.HTTPParserError;
var $e6c7cbcf7b17bcc2$require$ResponseExceededMaxSizeError = $7bgOU.ResponseExceededMaxSizeError;
var $e6c7cbcf7b17bcc2$require$ClientDestroyedError = $7bgOU.ClientDestroyedError;

var $hb74B = parcelRequire("hb74B");

var $9Yodq = parcelRequire("9Yodq");
var $e6c7cbcf7b17bcc2$require$kUrl = $9Yodq.kUrl;
var $e6c7cbcf7b17bcc2$require$kReset = $9Yodq.kReset;
var $e6c7cbcf7b17bcc2$require$kServerName = $9Yodq.kServerName;
var $e6c7cbcf7b17bcc2$require$kClient = $9Yodq.kClient;
var $e6c7cbcf7b17bcc2$require$kBusy = $9Yodq.kBusy;
var $e6c7cbcf7b17bcc2$require$kParser = $9Yodq.kParser;
var $e6c7cbcf7b17bcc2$require$kConnect = $9Yodq.kConnect;
var $e6c7cbcf7b17bcc2$require$kBlocking = $9Yodq.kBlocking;
var $e6c7cbcf7b17bcc2$require$kResuming = $9Yodq.kResuming;
var $e6c7cbcf7b17bcc2$require$kRunning = $9Yodq.kRunning;
var $e6c7cbcf7b17bcc2$require$kPending = $9Yodq.kPending;
var $e6c7cbcf7b17bcc2$require$kSize = $9Yodq.kSize;
var $e6c7cbcf7b17bcc2$require$kWriting = $9Yodq.kWriting;
var $e6c7cbcf7b17bcc2$require$kQueue = $9Yodq.kQueue;
var $e6c7cbcf7b17bcc2$require$kConnected = $9Yodq.kConnected;
var $e6c7cbcf7b17bcc2$require$kConnecting = $9Yodq.kConnecting;
var $e6c7cbcf7b17bcc2$require$kNeedDrain = $9Yodq.kNeedDrain;
var $e6c7cbcf7b17bcc2$require$kNoRef = $9Yodq.kNoRef;
var $e6c7cbcf7b17bcc2$require$kKeepAliveDefaultTimeout = $9Yodq.kKeepAliveDefaultTimeout;
var $e6c7cbcf7b17bcc2$require$kHostHeader = $9Yodq.kHostHeader;
var $e6c7cbcf7b17bcc2$require$kPendingIdx = $9Yodq.kPendingIdx;
var $e6c7cbcf7b17bcc2$require$kRunningIdx = $9Yodq.kRunningIdx;
var $e6c7cbcf7b17bcc2$require$kError = $9Yodq.kError;
var $e6c7cbcf7b17bcc2$require$kPipelining = $9Yodq.kPipelining;
var $e6c7cbcf7b17bcc2$require$kSocket = $9Yodq.kSocket;
var $e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutValue = $9Yodq.kKeepAliveTimeoutValue;
var $e6c7cbcf7b17bcc2$require$kMaxHeadersSize = $9Yodq.kMaxHeadersSize;
var $e6c7cbcf7b17bcc2$require$kKeepAliveMaxTimeout = $9Yodq.kKeepAliveMaxTimeout;
var $e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutThreshold = $9Yodq.kKeepAliveTimeoutThreshold;
var $e6c7cbcf7b17bcc2$require$kHeadersTimeout = $9Yodq.kHeadersTimeout;
var $e6c7cbcf7b17bcc2$require$kBodyTimeout = $9Yodq.kBodyTimeout;
var $e6c7cbcf7b17bcc2$require$kStrictContentLength = $9Yodq.kStrictContentLength;
var $e6c7cbcf7b17bcc2$require$kConnector = $9Yodq.kConnector;
var $e6c7cbcf7b17bcc2$require$kMaxRedirections = $9Yodq.kMaxRedirections;
var $e6c7cbcf7b17bcc2$require$kMaxRequests = $9Yodq.kMaxRequests;
var $e6c7cbcf7b17bcc2$require$kCounter = $9Yodq.kCounter;
var $e6c7cbcf7b17bcc2$require$kClose = $9Yodq.kClose;
var $e6c7cbcf7b17bcc2$require$kDestroy = $9Yodq.kDestroy;
var $e6c7cbcf7b17bcc2$require$kDispatch = $9Yodq.kDispatch;
var $e6c7cbcf7b17bcc2$require$kInterceptors = $9Yodq.kInterceptors;
var $e6c7cbcf7b17bcc2$require$kLocalAddress = $9Yodq.kLocalAddress;
var $e6c7cbcf7b17bcc2$require$kMaxResponseSize = $9Yodq.kMaxResponseSize;
var $e6c7cbcf7b17bcc2$require$kHTTPConnVersion = $9Yodq.kHTTPConnVersion;
var $e6c7cbcf7b17bcc2$require$kHost = $9Yodq.kHost;
var $e6c7cbcf7b17bcc2$require$kHTTP2Session = $9Yodq.kHTTP2Session;
var $e6c7cbcf7b17bcc2$require$kHTTP2SessionState = $9Yodq.kHTTP2SessionState;
var $e6c7cbcf7b17bcc2$require$kHTTP2BuildRequest = $9Yodq.kHTTP2BuildRequest;
var $e6c7cbcf7b17bcc2$require$kHTTP2CopyHeaders = $9Yodq.kHTTP2CopyHeaders;
var $e6c7cbcf7b17bcc2$require$kHTTP1BuildRequest = $9Yodq.kHTTP1BuildRequest;
/** @type {import('http2')} */ let $e6c7cbcf7b17bcc2$var$http2;

try {
    $e6c7cbcf7b17bcc2$var$http2 = $e6c7cbcf7b17bcc2$import$dc5c58500bc5a0ce;
} catch  {
    // @ts-ignore
    $e6c7cbcf7b17bcc2$var$http2 = {
        constants: {}
    };
}
const { constants: { HTTP2_HEADER_AUTHORITY: $e6c7cbcf7b17bcc2$var$HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD: $e6c7cbcf7b17bcc2$var$HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH: $e6c7cbcf7b17bcc2$var$HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME: $e6c7cbcf7b17bcc2$var$HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH: $e6c7cbcf7b17bcc2$var$HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT: $e6c7cbcf7b17bcc2$var$HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS: $e6c7cbcf7b17bcc2$var$HTTP2_HEADER_STATUS } } = $e6c7cbcf7b17bcc2$var$http2;
// Experimental
let $e6c7cbcf7b17bcc2$var$h2ExperimentalWarned = false;
const $e6c7cbcf7b17bcc2$var$FastBuffer = $e6c7cbcf7b17bcc2$require$Buffer[Symbol.species];
const $e6c7cbcf7b17bcc2$var$kClosedResolve = Symbol("kClosedResolve");
const $e6c7cbcf7b17bcc2$var$channels = {};

try {
    const diagnosticsChannel = $e6c7cbcf7b17bcc2$import$448217ca25882f04;
    $e6c7cbcf7b17bcc2$var$channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
    $e6c7cbcf7b17bcc2$var$channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
    $e6c7cbcf7b17bcc2$var$channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
    $e6c7cbcf7b17bcc2$var$channels.connected = diagnosticsChannel.channel("undici:client:connected");
} catch  {
    $e6c7cbcf7b17bcc2$var$channels.sendHeaders = {
        hasSubscribers: false
    };
    $e6c7cbcf7b17bcc2$var$channels.beforeConnect = {
        hasSubscribers: false
    };
    $e6c7cbcf7b17bcc2$var$channels.connectError = {
        hasSubscribers: false
    };
    $e6c7cbcf7b17bcc2$var$channels.connected = {
        hasSubscribers: false
    };
}
/**
 * @type {import('../types/client').default}
 */ class $e6c7cbcf7b17bcc2$var$Client extends $5nvUe {
    /**
   *
   * @param {string|URL} url
   * @param {import('../types/client').Client.Options} options
   */ constructor(url, { interceptors: interceptors, maxHeaderSize: maxHeaderSize, headersTimeout: headersTimeout, socketTimeout: socketTimeout, requestTimeout: requestTimeout, connectTimeout: connectTimeout, bodyTimeout: bodyTimeout, idleTimeout: idleTimeout, keepAlive: keepAlive, keepAliveTimeout: keepAliveTimeout, maxKeepAliveTimeout: maxKeepAliveTimeout, keepAliveMaxTimeout: keepAliveMaxTimeout, keepAliveTimeoutThreshold: keepAliveTimeoutThreshold, socketPath: socketPath, pipelining: pipelining, tls: tls, strictContentLength: strictContentLength, maxCachedSessions: maxCachedSessions, maxRedirections: maxRedirections, connect: connect, maxRequestsPerClient: maxRequestsPerClient, localAddress: localAddress, maxResponseSize: maxResponseSize, autoSelectFamily: autoSelectFamily, autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout, allowH2: // h2
    allowH2, maxConcurrentStreams: maxConcurrentStreams } = {}){
        super();
        if (keepAlive !== undefined) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
        if (socketTimeout !== undefined) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
        if (requestTimeout !== undefined) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
        if (idleTimeout !== undefined) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
        if (maxKeepAliveTimeout !== undefined) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("invalid maxHeaderSize");
        if (socketPath != null && typeof socketPath !== "string") throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("invalid socketPath");
        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("invalid connectTimeout");
        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("invalid keepAliveTimeout");
        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("invalid keepAliveMaxTimeout");
        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("invalid keepAliveTimeoutThreshold");
        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("headersTimeout must be a positive integer or zero");
        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("bodyTimeout must be a positive integer or zero");
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("connect must be a function or an object");
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("maxRedirections must be a positive number");
        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("maxRequestsPerClient must be a positive number");
        if (localAddress != null && (typeof localAddress !== "string" || $4UN2M$net.isIP(localAddress) === 0)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("localAddress must be valid string IP address");
        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("maxResponseSize must be a positive number");
        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
        // h2
        if (allowH2 != null && typeof allowH2 !== "boolean") throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("allowH2 must be a valid boolean value");
        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) throw new $e6c7cbcf7b17bcc2$require$InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
        if (typeof connect !== "function") connect = $hb74B({
            ...tls,
            maxCachedSessions: maxCachedSessions,
            allowH2: allowH2,
            socketPath: socketPath,
            timeout: connectTimeout,
            ...$dZB1o.nodeHasAutoSelectFamily && autoSelectFamily ? {
                autoSelectFamily: autoSelectFamily,
                autoSelectFamilyAttemptTimeout: autoSelectFamilyAttemptTimeout
            } : undefined,
            ...connect
        });
        this[$e6c7cbcf7b17bcc2$require$kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [
            $hzQZh({
                maxRedirections: maxRedirections
            })
        ];
        this[$e6c7cbcf7b17bcc2$require$kUrl] = $dZB1o.parseOrigin(url);
        this[$e6c7cbcf7b17bcc2$require$kConnector] = connect;
        this[$e6c7cbcf7b17bcc2$require$kSocket] = null;
        this[$e6c7cbcf7b17bcc2$require$kPipelining] = pipelining != null ? pipelining : 1;
        this[$e6c7cbcf7b17bcc2$require$kMaxHeadersSize] = maxHeaderSize || $4UN2M$http.maxHeaderSize;
        this[$e6c7cbcf7b17bcc2$require$kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
        this[$e6c7cbcf7b17bcc2$require$kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout;
        this[$e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
        this[$e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutValue] = this[$e6c7cbcf7b17bcc2$require$kKeepAliveDefaultTimeout];
        this[$e6c7cbcf7b17bcc2$require$kServerName] = null;
        this[$e6c7cbcf7b17bcc2$require$kLocalAddress] = localAddress != null ? localAddress : null;
        this[$e6c7cbcf7b17bcc2$require$kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming
        ;
        this[$e6c7cbcf7b17bcc2$require$kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming
        ;
        this[$e6c7cbcf7b17bcc2$require$kHostHeader] = `host: ${this[$e6c7cbcf7b17bcc2$require$kUrl].hostname}${this[$e6c7cbcf7b17bcc2$require$kUrl].port ? `:${this[$e6c7cbcf7b17bcc2$require$kUrl].port}` : ""}\r\n`;
        this[$e6c7cbcf7b17bcc2$require$kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3;
        this[$e6c7cbcf7b17bcc2$require$kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3;
        this[$e6c7cbcf7b17bcc2$require$kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
        this[$e6c7cbcf7b17bcc2$require$kMaxRedirections] = maxRedirections;
        this[$e6c7cbcf7b17bcc2$require$kMaxRequests] = maxRequestsPerClient;
        this[$e6c7cbcf7b17bcc2$var$kClosedResolve] = null;
        this[$e6c7cbcf7b17bcc2$require$kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
        this[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] = "h1";
        // HTTP/2
        this[$e6c7cbcf7b17bcc2$require$kHTTP2Session] = null;
        this[$e6c7cbcf7b17bcc2$require$kHTTP2SessionState] = !allowH2 ? null : {
            // streams: null, // Fixed queue of streams - For future support of `push`
            openStreams: 0,
            maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
        };
        this[$e6c7cbcf7b17bcc2$require$kHost] = `${this[$e6c7cbcf7b17bcc2$require$kUrl].hostname}${this[$e6c7cbcf7b17bcc2$require$kUrl].port ? `:${this[$e6c7cbcf7b17bcc2$require$kUrl].port}` : ""}`;
        // kQueue is built up of 3 sections separated by
        // the kRunningIdx and kPendingIdx indices.
        // |   complete   |   running   |   pending   |
        //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
        // kRunningIdx points to the first running element.
        // kPendingIdx points to the first pending element.
        // This implements a fast queue with an amortized
        // time of O(1).
        this[$e6c7cbcf7b17bcc2$require$kQueue] = [];
        this[$e6c7cbcf7b17bcc2$require$kRunningIdx] = 0;
        this[$e6c7cbcf7b17bcc2$require$kPendingIdx] = 0;
    }
    get pipelining() {
        return this[$e6c7cbcf7b17bcc2$require$kPipelining];
    }
    set pipelining(value) {
        this[$e6c7cbcf7b17bcc2$require$kPipelining] = value;
        $e6c7cbcf7b17bcc2$var$resume(this, true);
    }
    get [$e6c7cbcf7b17bcc2$require$kPending]() {
        return this[$e6c7cbcf7b17bcc2$require$kQueue].length - this[$e6c7cbcf7b17bcc2$require$kPendingIdx];
    }
    get [$e6c7cbcf7b17bcc2$require$kRunning]() {
        return this[$e6c7cbcf7b17bcc2$require$kPendingIdx] - this[$e6c7cbcf7b17bcc2$require$kRunningIdx];
    }
    get [$e6c7cbcf7b17bcc2$require$kSize]() {
        return this[$e6c7cbcf7b17bcc2$require$kQueue].length - this[$e6c7cbcf7b17bcc2$require$kRunningIdx];
    }
    get [$e6c7cbcf7b17bcc2$require$kConnected]() {
        return !!this[$e6c7cbcf7b17bcc2$require$kSocket] && !this[$e6c7cbcf7b17bcc2$require$kConnecting] && !this[$e6c7cbcf7b17bcc2$require$kSocket].destroyed;
    }
    get [$e6c7cbcf7b17bcc2$require$kBusy]() {
        const socket = this[$e6c7cbcf7b17bcc2$require$kSocket];
        return socket && (socket[$e6c7cbcf7b17bcc2$require$kReset] || socket[$e6c7cbcf7b17bcc2$require$kWriting] || socket[$e6c7cbcf7b17bcc2$require$kBlocking]) || this[$e6c7cbcf7b17bcc2$require$kSize] >= (this[$e6c7cbcf7b17bcc2$require$kPipelining] || 1) || this[$e6c7cbcf7b17bcc2$require$kPending] > 0;
    }
    /* istanbul ignore: only used for test */ [$e6c7cbcf7b17bcc2$require$kConnect](cb) {
        $e6c7cbcf7b17bcc2$var$connect(this);
        this.once("connect", cb);
    }
    [$e6c7cbcf7b17bcc2$require$kDispatch](opts, handler) {
        const origin = opts.origin || this[$e6c7cbcf7b17bcc2$require$kUrl].origin;
        const request = this[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] === "h2" ? $g1ydE[$e6c7cbcf7b17bcc2$require$kHTTP2BuildRequest](origin, opts, handler) : $g1ydE[$e6c7cbcf7b17bcc2$require$kHTTP1BuildRequest](origin, opts, handler);
        this[$e6c7cbcf7b17bcc2$require$kQueue].push(request);
        if (this[$e6c7cbcf7b17bcc2$require$kResuming]) ;
        else if ($dZB1o.bodyLength(request.body) == null && $dZB1o.isIterable(request.body)) {
            // Wait a tick in case stream/iterator is ended in the same tick.
            this[$e6c7cbcf7b17bcc2$require$kResuming] = 1;
            $4UN2M$process.nextTick($e6c7cbcf7b17bcc2$var$resume, this);
        } else $e6c7cbcf7b17bcc2$var$resume(this, true);
        if (this[$e6c7cbcf7b17bcc2$require$kResuming] && this[$e6c7cbcf7b17bcc2$require$kNeedDrain] !== 2 && this[$e6c7cbcf7b17bcc2$require$kBusy]) this[$e6c7cbcf7b17bcc2$require$kNeedDrain] = 2;
        return this[$e6c7cbcf7b17bcc2$require$kNeedDrain] < 2;
    }
    async [$e6c7cbcf7b17bcc2$require$kClose]() {
        // TODO: for H2 we need to gracefully flush the remaining enqueued
        // request and close each stream.
        return new Promise((resolve)=>{
            if (!this[$e6c7cbcf7b17bcc2$require$kSize]) resolve(null);
            else this[$e6c7cbcf7b17bcc2$var$kClosedResolve] = resolve;
        });
    }
    async [$e6c7cbcf7b17bcc2$require$kDestroy](err) {
        return new Promise((resolve)=>{
            const requests = this[$e6c7cbcf7b17bcc2$require$kQueue].splice(this[$e6c7cbcf7b17bcc2$require$kPendingIdx]);
            for(let i = 0; i < requests.length; i++){
                const request = requests[i];
                $e6c7cbcf7b17bcc2$var$errorRequest(this, request, err);
            }
            const callback = ()=>{
                if (this[$e6c7cbcf7b17bcc2$var$kClosedResolve]) {
                    // TODO (fix): Should we error here with ClientDestroyedError?
                    this[$e6c7cbcf7b17bcc2$var$kClosedResolve]();
                    this[$e6c7cbcf7b17bcc2$var$kClosedResolve] = null;
                }
                resolve();
            };
            if (this[$e6c7cbcf7b17bcc2$require$kHTTP2Session] != null) {
                $dZB1o.destroy(this[$e6c7cbcf7b17bcc2$require$kHTTP2Session], err);
                this[$e6c7cbcf7b17bcc2$require$kHTTP2Session] = null;
                this[$e6c7cbcf7b17bcc2$require$kHTTP2SessionState] = null;
            }
            if (!this[$e6c7cbcf7b17bcc2$require$kSocket]) queueMicrotask(callback);
            else $dZB1o.destroy(this[$e6c7cbcf7b17bcc2$require$kSocket].on("close", callback), err);
            $e6c7cbcf7b17bcc2$var$resume(this);
        });
    }
}
function $e6c7cbcf7b17bcc2$var$onHttp2SessionError(err) {
    $4UN2M$assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    this[$e6c7cbcf7b17bcc2$require$kSocket][$e6c7cbcf7b17bcc2$require$kError] = err;
    $e6c7cbcf7b17bcc2$var$onError(this[$e6c7cbcf7b17bcc2$require$kClient], err);
}
function $e6c7cbcf7b17bcc2$var$onHttp2FrameError(type, code, id) {
    const err = new $e6c7cbcf7b17bcc2$require$InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
    if (id === 0) {
        this[$e6c7cbcf7b17bcc2$require$kSocket][$e6c7cbcf7b17bcc2$require$kError] = err;
        $e6c7cbcf7b17bcc2$var$onError(this[$e6c7cbcf7b17bcc2$require$kClient], err);
    }
}
function $e6c7cbcf7b17bcc2$var$onHttp2SessionEnd() {
    $dZB1o.destroy(this, new $e6c7cbcf7b17bcc2$require$SocketError("other side closed"));
    $dZB1o.destroy(this[$e6c7cbcf7b17bcc2$require$kSocket], new $e6c7cbcf7b17bcc2$require$SocketError("other side closed"));
}
function $e6c7cbcf7b17bcc2$var$onHTTP2GoAway(code) {
    const client = this[$e6c7cbcf7b17bcc2$require$kClient];
    const err = new $e6c7cbcf7b17bcc2$require$InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
    client[$e6c7cbcf7b17bcc2$require$kSocket] = null;
    client[$e6c7cbcf7b17bcc2$require$kHTTP2Session] = null;
    if (client.destroyed) {
        $4UN2M$assert(this[$e6c7cbcf7b17bcc2$require$kPending] === 0);
        // Fail entire queue.
        const requests = client[$e6c7cbcf7b17bcc2$require$kQueue].splice(client[$e6c7cbcf7b17bcc2$require$kRunningIdx]);
        for(let i = 0; i < requests.length; i++){
            const request = requests[i];
            $e6c7cbcf7b17bcc2$var$errorRequest(this, request, err);
        }
    } else if (client[$e6c7cbcf7b17bcc2$require$kRunning] > 0) {
        // Fail head of pipeline.
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
        client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]++] = null;
        $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
    }
    client[$e6c7cbcf7b17bcc2$require$kPendingIdx] = client[$e6c7cbcf7b17bcc2$require$kRunningIdx];
    $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kRunning] === 0);
    client.emit("disconnect", client[$e6c7cbcf7b17bcc2$require$kUrl], [
        client
    ], err);
    $e6c7cbcf7b17bcc2$var$resume(client);
}

var $dmwjB = parcelRequire("dmwjB");

var $hzQZh = parcelRequire("hzQZh");
const $e6c7cbcf7b17bcc2$var$EMPTY_BUF = $e6c7cbcf7b17bcc2$require$Buffer.alloc(0);


async function $e6c7cbcf7b17bcc2$var$lazyllhttp() {
    const llhttpWasmData = undefined;
    let mod;
    try {
        mod = await WebAssembly.compile($e6c7cbcf7b17bcc2$require$Buffer.from((parcelRequire("1qcQ2")), "base64"));
    } catch (e) {
        /* istanbul ignore next */ // We could check if the error was caused by the simd option not
        // being enabled, but the occurring of this other error
        // * https://github.com/emscripten-core/emscripten/issues/11495
        // got me to remove that check to avoid breaking Node 12.
        mod = await WebAssembly.compile($e6c7cbcf7b17bcc2$require$Buffer.from(llhttpWasmData || (parcelRequire("71YY7")), "base64"));
    }
    return await WebAssembly.instantiate(mod, {
        env: {
            /* eslint-disable camelcase */ wasm_on_url: (p, at, len)=>{
                /* istanbul ignore next */ return 0;
            },
            wasm_on_status: (p, at, len)=>{
                $4UN2M$assert.strictEqual($e6c7cbcf7b17bcc2$var$currentParser.ptr, p);
                const start = at - $e6c7cbcf7b17bcc2$var$currentBufferPtr + $e6c7cbcf7b17bcc2$var$currentBufferRef.byteOffset;
                return $e6c7cbcf7b17bcc2$var$currentParser.onStatus(new $e6c7cbcf7b17bcc2$var$FastBuffer($e6c7cbcf7b17bcc2$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_message_begin: (p)=>{
                $4UN2M$assert.strictEqual($e6c7cbcf7b17bcc2$var$currentParser.ptr, p);
                return $e6c7cbcf7b17bcc2$var$currentParser.onMessageBegin() || 0;
            },
            wasm_on_header_field: (p, at, len)=>{
                $4UN2M$assert.strictEqual($e6c7cbcf7b17bcc2$var$currentParser.ptr, p);
                const start = at - $e6c7cbcf7b17bcc2$var$currentBufferPtr + $e6c7cbcf7b17bcc2$var$currentBufferRef.byteOffset;
                return $e6c7cbcf7b17bcc2$var$currentParser.onHeaderField(new $e6c7cbcf7b17bcc2$var$FastBuffer($e6c7cbcf7b17bcc2$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_header_value: (p, at, len)=>{
                $4UN2M$assert.strictEqual($e6c7cbcf7b17bcc2$var$currentParser.ptr, p);
                const start = at - $e6c7cbcf7b17bcc2$var$currentBufferPtr + $e6c7cbcf7b17bcc2$var$currentBufferRef.byteOffset;
                return $e6c7cbcf7b17bcc2$var$currentParser.onHeaderValue(new $e6c7cbcf7b17bcc2$var$FastBuffer($e6c7cbcf7b17bcc2$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive)=>{
                $4UN2M$assert.strictEqual($e6c7cbcf7b17bcc2$var$currentParser.ptr, p);
                return $e6c7cbcf7b17bcc2$var$currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
            },
            wasm_on_body: (p, at, len)=>{
                $4UN2M$assert.strictEqual($e6c7cbcf7b17bcc2$var$currentParser.ptr, p);
                const start = at - $e6c7cbcf7b17bcc2$var$currentBufferPtr + $e6c7cbcf7b17bcc2$var$currentBufferRef.byteOffset;
                return $e6c7cbcf7b17bcc2$var$currentParser.onBody(new $e6c7cbcf7b17bcc2$var$FastBuffer($e6c7cbcf7b17bcc2$var$currentBufferRef.buffer, start, len)) || 0;
            },
            wasm_on_message_complete: (p)=>{
                $4UN2M$assert.strictEqual($e6c7cbcf7b17bcc2$var$currentParser.ptr, p);
                return $e6c7cbcf7b17bcc2$var$currentParser.onMessageComplete() || 0;
            }
        }
    });
}
let $e6c7cbcf7b17bcc2$var$llhttpInstance = null;
let $e6c7cbcf7b17bcc2$var$llhttpPromise = $e6c7cbcf7b17bcc2$var$lazyllhttp();
$e6c7cbcf7b17bcc2$var$llhttpPromise.catch();
let $e6c7cbcf7b17bcc2$var$currentParser = null;
let $e6c7cbcf7b17bcc2$var$currentBufferRef = null;
let $e6c7cbcf7b17bcc2$var$currentBufferSize = 0;
let $e6c7cbcf7b17bcc2$var$currentBufferPtr = null;
const $e6c7cbcf7b17bcc2$var$TIMEOUT_HEADERS = 1;
const $e6c7cbcf7b17bcc2$var$TIMEOUT_BODY = 2;
const $e6c7cbcf7b17bcc2$var$TIMEOUT_IDLE = 3;
class $e6c7cbcf7b17bcc2$var$Parser {
    constructor(client, socket, { exports: exports }){
        $4UN2M$assert(Number.isFinite(client[$e6c7cbcf7b17bcc2$require$kMaxHeadersSize]) && client[$e6c7cbcf7b17bcc2$require$kMaxHeadersSize] > 0);
        this.llhttp = exports;
        this.ptr = this.llhttp.llhttp_alloc($dmwjB.TYPE.RESPONSE);
        this.client = client;
        this.socket = socket;
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.statusCode = null;
        this.statusText = "";
        this.upgrade = false;
        this.headers = [];
        this.headersSize = 0;
        this.headersMaxSize = client[$e6c7cbcf7b17bcc2$require$kMaxHeadersSize];
        this.shouldKeepAlive = false;
        this.paused = false;
        this.resume = this.resume.bind(this);
        this.bytesRead = 0;
        this.keepAlive = "";
        this.contentLength = "";
        this.connection = "";
        this.maxResponseSize = client[$e6c7cbcf7b17bcc2$require$kMaxResponseSize];
    }
    setTimeout(value, type) {
        this.timeoutType = type;
        if (value !== this.timeoutValue) {
            $lKhqR.clearTimeout(this.timeout);
            if (value) {
                this.timeout = $lKhqR.setTimeout($e6c7cbcf7b17bcc2$var$onParserTimeout, value, this);
                // istanbul ignore else: only for jest
                if (this.timeout.unref) this.timeout.unref();
            } else this.timeout = null;
            this.timeoutValue = value;
        } else if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
    }
    resume() {
        if (this.socket.destroyed || !this.paused) return;
        $4UN2M$assert(this.ptr != null);
        $4UN2M$assert($e6c7cbcf7b17bcc2$var$currentParser == null);
        this.llhttp.llhttp_resume(this.ptr);
        $4UN2M$assert(this.timeoutType === $e6c7cbcf7b17bcc2$var$TIMEOUT_BODY);
        if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
        this.paused = false;
        this.execute(this.socket.read() || $e6c7cbcf7b17bcc2$var$EMPTY_BUF) // Flush parser.
        ;
        this.readMore();
    }
    readMore() {
        while(!this.paused && this.ptr){
            const chunk = this.socket.read();
            if (chunk === null) break;
            this.execute(chunk);
        }
    }
    execute(data) {
        $4UN2M$assert(this.ptr != null);
        $4UN2M$assert($e6c7cbcf7b17bcc2$var$currentParser == null);
        $4UN2M$assert(!this.paused);
        const { socket: socket, llhttp: llhttp } = this;
        if (data.length > $e6c7cbcf7b17bcc2$var$currentBufferSize) {
            if ($e6c7cbcf7b17bcc2$var$currentBufferPtr) llhttp.free($e6c7cbcf7b17bcc2$var$currentBufferPtr);
            $e6c7cbcf7b17bcc2$var$currentBufferSize = Math.ceil(data.length / 4096) * 4096;
            $e6c7cbcf7b17bcc2$var$currentBufferPtr = llhttp.malloc($e6c7cbcf7b17bcc2$var$currentBufferSize);
        }
        new Uint8Array(llhttp.memory.buffer, $e6c7cbcf7b17bcc2$var$currentBufferPtr, $e6c7cbcf7b17bcc2$var$currentBufferSize).set(data);
        // Call `execute` on the wasm parser.
        // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
        // and finally the length of bytes to parse.
        // The return value is an error code or `constants.ERROR.OK`.
        try {
            let ret;
            try {
                $e6c7cbcf7b17bcc2$var$currentBufferRef = data;
                $e6c7cbcf7b17bcc2$var$currentParser = this;
                ret = llhttp.llhttp_execute(this.ptr, $e6c7cbcf7b17bcc2$var$currentBufferPtr, data.length);
            /* eslint-disable-next-line no-useless-catch */ } catch (err) {
                /* istanbul ignore next: difficult to make a test case for */ throw err;
            } finally{
                $e6c7cbcf7b17bcc2$var$currentParser = null;
                $e6c7cbcf7b17bcc2$var$currentBufferRef = null;
            }
            const offset = llhttp.llhttp_get_error_pos(this.ptr) - $e6c7cbcf7b17bcc2$var$currentBufferPtr;
            if (ret === $dmwjB.ERROR.PAUSED_UPGRADE) this.onUpgrade(data.slice(offset));
            else if (ret === $dmwjB.ERROR.PAUSED) {
                this.paused = true;
                socket.unshift(data.slice(offset));
            } else if (ret !== $dmwjB.ERROR.OK) {
                const ptr = llhttp.llhttp_get_error_reason(this.ptr);
                let message = "";
                /* istanbul ignore else: difficult to make a test case for */ if (ptr) {
                    const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
                    message = "Response does not match the HTTP/1.1 protocol (" + $e6c7cbcf7b17bcc2$require$Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
                }
                throw new $e6c7cbcf7b17bcc2$require$HTTPParserError(message, $dmwjB.ERROR[ret], data.slice(offset));
            }
        } catch (err) {
            $dZB1o.destroy(socket, err);
        }
    }
    destroy() {
        $4UN2M$assert(this.ptr != null);
        $4UN2M$assert($e6c7cbcf7b17bcc2$var$currentParser == null);
        this.llhttp.llhttp_free(this.ptr);
        this.ptr = null;
        $lKhqR.clearTimeout(this.timeout);
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.paused = false;
    }
    onStatus(buf) {
        this.statusText = buf.toString();
    }
    onMessageBegin() {
        const { socket: socket, client: client } = this;
        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) return -1;
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
        if (!request) return -1;
    }
    onHeaderField(buf) {
        const len = this.headers.length;
        if ((len & 1) === 0) this.headers.push(buf);
        else this.headers[len - 1] = $e6c7cbcf7b17bcc2$require$Buffer.concat([
            this.headers[len - 1],
            buf
        ]);
        this.trackHeader(buf.length);
    }
    onHeaderValue(buf) {
        let len = this.headers.length;
        if ((len & 1) === 1) {
            this.headers.push(buf);
            len += 1;
        } else this.headers[len - 1] = $e6c7cbcf7b17bcc2$require$Buffer.concat([
            this.headers[len - 1],
            buf
        ]);
        const key = this.headers[len - 2];
        if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") this.keepAlive += buf.toString();
        else if (key.length === 10 && key.toString().toLowerCase() === "connection") this.connection += buf.toString();
        else if (key.length === 14 && key.toString().toLowerCase() === "content-length") this.contentLength += buf.toString();
        this.trackHeader(buf.length);
    }
    trackHeader(len) {
        this.headersSize += len;
        if (this.headersSize >= this.headersMaxSize) $dZB1o.destroy(this.socket, new $e6c7cbcf7b17bcc2$require$HeadersOverflowError());
    }
    onUpgrade(head) {
        const { upgrade: upgrade, client: client, socket: socket, headers: headers, statusCode: statusCode } = this;
        $4UN2M$assert(upgrade);
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
        $4UN2M$assert(request);
        $4UN2M$assert(!socket.destroyed);
        $4UN2M$assert(socket === client[$e6c7cbcf7b17bcc2$require$kSocket]);
        $4UN2M$assert(!this.paused);
        $4UN2M$assert(request.upgrade || request.method === "CONNECT");
        this.statusCode = null;
        this.statusText = "";
        this.shouldKeepAlive = null;
        $4UN2M$assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        socket.unshift(head);
        socket[$e6c7cbcf7b17bcc2$require$kParser].destroy();
        socket[$e6c7cbcf7b17bcc2$require$kParser] = null;
        socket[$e6c7cbcf7b17bcc2$require$kClient] = null;
        socket[$e6c7cbcf7b17bcc2$require$kError] = null;
        socket.removeListener("error", $e6c7cbcf7b17bcc2$var$onSocketError).removeListener("readable", $e6c7cbcf7b17bcc2$var$onSocketReadable).removeListener("end", $e6c7cbcf7b17bcc2$var$onSocketEnd).removeListener("close", $e6c7cbcf7b17bcc2$var$onSocketClose);
        client[$e6c7cbcf7b17bcc2$require$kSocket] = null;
        client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]++] = null;
        client.emit("disconnect", client[$e6c7cbcf7b17bcc2$require$kUrl], [
            client
        ], new $e6c7cbcf7b17bcc2$require$InformationalError("upgrade"));
        try {
            request.onUpgrade(statusCode, headers, socket);
        } catch (err) {
            $dZB1o.destroy(socket, err);
        }
        $e6c7cbcf7b17bcc2$var$resume(client);
    }
    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client: client, socket: socket, headers: headers, statusText: statusText } = this;
        /* istanbul ignore next: difficult to make a test case for */ if (socket.destroyed) return -1;
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
        /* istanbul ignore next: difficult to make a test case for */ if (!request) return -1;
        $4UN2M$assert(!this.upgrade);
        $4UN2M$assert(this.statusCode < 200);
        if (statusCode === 100) {
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$SocketError("bad response", $dZB1o.getSocketInfo(socket)));
            return -1;
        }
        /* this can only happen if server is misbehaving */ if (upgrade && !request.upgrade) {
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$SocketError("bad upgrade", $dZB1o.getSocketInfo(socket)));
            return -1;
        }
        $4UN2M$assert.strictEqual(this.timeoutType, $e6c7cbcf7b17bcc2$var$TIMEOUT_HEADERS);
        this.statusCode = statusCode;
        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
        request.method === "HEAD" && !socket[$e6c7cbcf7b17bcc2$require$kReset] && this.connection.toLowerCase() === "keep-alive";
        if (this.statusCode >= 200) {
            const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[$e6c7cbcf7b17bcc2$require$kBodyTimeout];
            this.setTimeout(bodyTimeout, $e6c7cbcf7b17bcc2$var$TIMEOUT_BODY);
        } else if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
        if (request.method === "CONNECT") {
            $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kRunning] === 1);
            this.upgrade = true;
            return 2;
        }
        if (upgrade) {
            $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kRunning] === 1);
            this.upgrade = true;
            return 2;
        }
        $4UN2M$assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (this.shouldKeepAlive && client[$e6c7cbcf7b17bcc2$require$kPipelining]) {
            const keepAliveTimeout = this.keepAlive ? $dZB1o.parseKeepAliveTimeout(this.keepAlive) : null;
            if (keepAliveTimeout != null) {
                const timeout = Math.min(keepAliveTimeout - client[$e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutThreshold], client[$e6c7cbcf7b17bcc2$require$kKeepAliveMaxTimeout]);
                if (timeout <= 0) socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
                else client[$e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutValue] = timeout;
            } else client[$e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutValue] = client[$e6c7cbcf7b17bcc2$require$kKeepAliveDefaultTimeout];
        } else // Stop more requests from being dispatched.
        socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
        const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
        if (request.aborted) return -1;
        if (request.method === "HEAD") return 1;
        if (statusCode < 200) return 1;
        if (socket[$e6c7cbcf7b17bcc2$require$kBlocking]) {
            socket[$e6c7cbcf7b17bcc2$require$kBlocking] = false;
            $e6c7cbcf7b17bcc2$var$resume(client);
        }
        return pause ? $dmwjB.ERROR.PAUSED : 0;
    }
    onBody(buf) {
        const { client: client, socket: socket, statusCode: statusCode, maxResponseSize: maxResponseSize } = this;
        if (socket.destroyed) return -1;
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
        $4UN2M$assert(request);
        $4UN2M$assert.strictEqual(this.timeoutType, $e6c7cbcf7b17bcc2$var$TIMEOUT_BODY);
        if (this.timeout) // istanbul ignore else: only for jest
        {
            if (this.timeout.refresh) this.timeout.refresh();
        }
        $4UN2M$assert(statusCode >= 200);
        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$ResponseExceededMaxSizeError());
            return -1;
        }
        this.bytesRead += buf.length;
        if (request.onData(buf) === false) return $dmwjB.ERROR.PAUSED;
    }
    onMessageComplete() {
        const { client: client, socket: socket, statusCode: statusCode, upgrade: upgrade, headers: headers, contentLength: contentLength, bytesRead: bytesRead, shouldKeepAlive: shouldKeepAlive } = this;
        if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
        if (upgrade) return;
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
        $4UN2M$assert(request);
        $4UN2M$assert(statusCode >= 100);
        this.statusCode = null;
        this.statusText = "";
        this.bytesRead = 0;
        this.contentLength = "";
        this.keepAlive = "";
        this.connection = "";
        $4UN2M$assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (statusCode < 200) return;
        /* istanbul ignore next: should be handled by llhttp? */ if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$ResponseContentLengthMismatchError());
            return -1;
        }
        request.onComplete(headers);
        client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]++] = null;
        if (socket[$e6c7cbcf7b17bcc2$require$kWriting]) {
            $4UN2M$assert.strictEqual(client[$e6c7cbcf7b17bcc2$require$kRunning], 0);
            // Response completed before request.
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$InformationalError("reset"));
            return $dmwjB.ERROR.PAUSED;
        } else if (!shouldKeepAlive) {
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$InformationalError("reset"));
            return $dmwjB.ERROR.PAUSED;
        } else if (socket[$e6c7cbcf7b17bcc2$require$kReset] && client[$e6c7cbcf7b17bcc2$require$kRunning] === 0) {
            // Destroy socket once all requests have completed.
            // The request at the tail of the pipeline is the one
            // that requested reset and no further requests should
            // have been queued since then.
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$InformationalError("reset"));
            return $dmwjB.ERROR.PAUSED;
        } else if (client[$e6c7cbcf7b17bcc2$require$kPipelining] === 1) // We must wait a full event loop cycle to reuse this socket to make sure
        // that non-spec compliant servers are not closing the connection even if they
        // said they won't.
        setImmediate($e6c7cbcf7b17bcc2$var$resume, client);
        else $e6c7cbcf7b17bcc2$var$resume(client);
    }
}
function $e6c7cbcf7b17bcc2$var$onParserTimeout(parser) {
    const { socket: socket, timeoutType: timeoutType, client: client } = parser;
    /* istanbul ignore else */ if (timeoutType === $e6c7cbcf7b17bcc2$var$TIMEOUT_HEADERS) {
        if (!socket[$e6c7cbcf7b17bcc2$require$kWriting] || socket.writableNeedDrain || client[$e6c7cbcf7b17bcc2$require$kRunning] > 1) {
            $4UN2M$assert(!parser.paused, "cannot be paused while waiting for headers");
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$HeadersTimeoutError());
        }
    } else if (timeoutType === $e6c7cbcf7b17bcc2$var$TIMEOUT_BODY) {
        if (!parser.paused) $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$BodyTimeoutError());
    } else if (timeoutType === $e6c7cbcf7b17bcc2$var$TIMEOUT_IDLE) {
        $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kRunning] === 0 && client[$e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutValue]);
        $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$InformationalError("socket idle timeout"));
    }
}
function $e6c7cbcf7b17bcc2$var$onSocketReadable() {
    const { [$e6c7cbcf7b17bcc2$require$kParser]: parser } = this;
    if (parser) parser.readMore();
}
function $e6c7cbcf7b17bcc2$var$onSocketError(err) {
    const { [$e6c7cbcf7b17bcc2$require$kClient]: client, [$e6c7cbcf7b17bcc2$require$kParser]: parser } = this;
    $4UN2M$assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    if (client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] !== "h2") // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
    // to the user.
    {
        if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
            // We treat all incoming data so for as a valid response.
            parser.onMessageComplete();
            return;
        }
    }
    this[$e6c7cbcf7b17bcc2$require$kError] = err;
    $e6c7cbcf7b17bcc2$var$onError(this[$e6c7cbcf7b17bcc2$require$kClient], err);
}
function $e6c7cbcf7b17bcc2$var$onError(client, err) {
    if (client[$e6c7cbcf7b17bcc2$require$kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
        // Error is not caused by running request and not a recoverable
        // socket error.
        $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kPendingIdx] === client[$e6c7cbcf7b17bcc2$require$kRunningIdx]);
        const requests = client[$e6c7cbcf7b17bcc2$require$kQueue].splice(client[$e6c7cbcf7b17bcc2$require$kRunningIdx]);
        for(let i = 0; i < requests.length; i++){
            const request = requests[i];
            $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
        }
        $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kSize] === 0);
    }
}
function $e6c7cbcf7b17bcc2$var$onSocketEnd() {
    const { [$e6c7cbcf7b17bcc2$require$kParser]: parser, [$e6c7cbcf7b17bcc2$require$kClient]: client } = this;
    if (client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] !== "h2") {
        if (parser.statusCode && !parser.shouldKeepAlive) {
            // We treat all incoming data so far as a valid response.
            parser.onMessageComplete();
            return;
        }
    }
    $dZB1o.destroy(this, new $e6c7cbcf7b17bcc2$require$SocketError("other side closed", $dZB1o.getSocketInfo(this)));
}
function $e6c7cbcf7b17bcc2$var$onSocketClose() {
    const { [$e6c7cbcf7b17bcc2$require$kClient]: client, [$e6c7cbcf7b17bcc2$require$kParser]: parser } = this;
    if (client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] === "h1" && parser) {
        if (!this[$e6c7cbcf7b17bcc2$require$kError] && parser.statusCode && !parser.shouldKeepAlive) // We treat all incoming data so far as a valid response.
        parser.onMessageComplete();
        this[$e6c7cbcf7b17bcc2$require$kParser].destroy();
        this[$e6c7cbcf7b17bcc2$require$kParser] = null;
    }
    const err = this[$e6c7cbcf7b17bcc2$require$kError] || new $e6c7cbcf7b17bcc2$require$SocketError("closed", $dZB1o.getSocketInfo(this));
    client[$e6c7cbcf7b17bcc2$require$kSocket] = null;
    if (client.destroyed) {
        $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kPending] === 0);
        // Fail entire queue.
        const requests = client[$e6c7cbcf7b17bcc2$require$kQueue].splice(client[$e6c7cbcf7b17bcc2$require$kRunningIdx]);
        for(let i = 0; i < requests.length; i++){
            const request = requests[i];
            $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
        }
    } else if (client[$e6c7cbcf7b17bcc2$require$kRunning] > 0 && err.code !== "UND_ERR_INFO") {
        // Fail head of pipeline.
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
        client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]++] = null;
        $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
    }
    client[$e6c7cbcf7b17bcc2$require$kPendingIdx] = client[$e6c7cbcf7b17bcc2$require$kRunningIdx];
    $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kRunning] === 0);
    client.emit("disconnect", client[$e6c7cbcf7b17bcc2$require$kUrl], [
        client
    ], err);
    $e6c7cbcf7b17bcc2$var$resume(client);
}
async function $e6c7cbcf7b17bcc2$var$connect(client) {
    $4UN2M$assert(!client[$e6c7cbcf7b17bcc2$require$kConnecting]);
    $4UN2M$assert(!client[$e6c7cbcf7b17bcc2$require$kSocket]);
    let { host: host, hostname: hostname, protocol: protocol, port: port } = client[$e6c7cbcf7b17bcc2$require$kUrl];
    // Resolve ipv6
    if (hostname[0] === "[") {
        const idx = hostname.indexOf("]");
        $4UN2M$assert(idx !== -1);
        const ip = hostname.substring(1, idx);
        $4UN2M$assert($4UN2M$net.isIP(ip));
        hostname = ip;
    }
    client[$e6c7cbcf7b17bcc2$require$kConnecting] = true;
    if ($e6c7cbcf7b17bcc2$var$channels.beforeConnect.hasSubscribers) $e6c7cbcf7b17bcc2$var$channels.beforeConnect.publish({
        connectParams: {
            host: host,
            hostname: hostname,
            protocol: protocol,
            port: port,
            servername: client[$e6c7cbcf7b17bcc2$require$kServerName],
            localAddress: client[$e6c7cbcf7b17bcc2$require$kLocalAddress]
        },
        connector: client[$e6c7cbcf7b17bcc2$require$kConnector]
    });
    try {
        const socket = await new Promise((resolve, reject)=>{
            client[$e6c7cbcf7b17bcc2$require$kConnector]({
                host: host,
                hostname: hostname,
                protocol: protocol,
                port: port,
                servername: client[$e6c7cbcf7b17bcc2$require$kServerName],
                localAddress: client[$e6c7cbcf7b17bcc2$require$kLocalAddress]
            }, (err, socket)=>{
                if (err) reject(err);
                else resolve(socket);
            });
        });
        if (client.destroyed) {
            $dZB1o.destroy(socket.on("error", ()=>{}), new $e6c7cbcf7b17bcc2$require$ClientDestroyedError());
            return;
        }
        client[$e6c7cbcf7b17bcc2$require$kConnecting] = false;
        $4UN2M$assert(socket);
        const isH2 = socket.alpnProtocol === "h2";
        if (isH2) {
            if (!$e6c7cbcf7b17bcc2$var$h2ExperimentalWarned) {
                $e6c7cbcf7b17bcc2$var$h2ExperimentalWarned = true;
                $4UN2M$process.emitWarning("H2 support is experimental, expect them to change at any time.", {
                    code: "UNDICI-H2"
                });
            }
            const session = $e6c7cbcf7b17bcc2$var$http2.connect(client[$e6c7cbcf7b17bcc2$require$kUrl], {
                createConnection: ()=>socket,
                peerMaxConcurrentStreams: client[$e6c7cbcf7b17bcc2$require$kHTTP2SessionState].maxConcurrentStreams
            });
            client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] = "h2";
            session[$e6c7cbcf7b17bcc2$require$kClient] = client;
            session[$e6c7cbcf7b17bcc2$require$kSocket] = socket;
            session.on("error", $e6c7cbcf7b17bcc2$var$onHttp2SessionError);
            session.on("frameError", $e6c7cbcf7b17bcc2$var$onHttp2FrameError);
            session.on("end", $e6c7cbcf7b17bcc2$var$onHttp2SessionEnd);
            session.on("goaway", $e6c7cbcf7b17bcc2$var$onHTTP2GoAway);
            session.on("close", $e6c7cbcf7b17bcc2$var$onSocketClose);
            session.unref();
            client[$e6c7cbcf7b17bcc2$require$kHTTP2Session] = session;
            socket[$e6c7cbcf7b17bcc2$require$kHTTP2Session] = session;
        } else {
            if (!$e6c7cbcf7b17bcc2$var$llhttpInstance) {
                $e6c7cbcf7b17bcc2$var$llhttpInstance = await $e6c7cbcf7b17bcc2$var$llhttpPromise;
                $e6c7cbcf7b17bcc2$var$llhttpPromise = null;
            }
            socket[$e6c7cbcf7b17bcc2$require$kNoRef] = false;
            socket[$e6c7cbcf7b17bcc2$require$kWriting] = false;
            socket[$e6c7cbcf7b17bcc2$require$kReset] = false;
            socket[$e6c7cbcf7b17bcc2$require$kBlocking] = false;
            socket[$e6c7cbcf7b17bcc2$require$kParser] = new $e6c7cbcf7b17bcc2$var$Parser(client, socket, $e6c7cbcf7b17bcc2$var$llhttpInstance);
        }
        socket[$e6c7cbcf7b17bcc2$require$kCounter] = 0;
        socket[$e6c7cbcf7b17bcc2$require$kMaxRequests] = client[$e6c7cbcf7b17bcc2$require$kMaxRequests];
        socket[$e6c7cbcf7b17bcc2$require$kClient] = client;
        socket[$e6c7cbcf7b17bcc2$require$kError] = null;
        socket.on("error", $e6c7cbcf7b17bcc2$var$onSocketError).on("readable", $e6c7cbcf7b17bcc2$var$onSocketReadable).on("end", $e6c7cbcf7b17bcc2$var$onSocketEnd).on("close", $e6c7cbcf7b17bcc2$var$onSocketClose);
        client[$e6c7cbcf7b17bcc2$require$kSocket] = socket;
        if ($e6c7cbcf7b17bcc2$var$channels.connected.hasSubscribers) $e6c7cbcf7b17bcc2$var$channels.connected.publish({
            connectParams: {
                host: host,
                hostname: hostname,
                protocol: protocol,
                port: port,
                servername: client[$e6c7cbcf7b17bcc2$require$kServerName],
                localAddress: client[$e6c7cbcf7b17bcc2$require$kLocalAddress]
            },
            connector: client[$e6c7cbcf7b17bcc2$require$kConnector],
            socket: socket
        });
        client.emit("connect", client[$e6c7cbcf7b17bcc2$require$kUrl], [
            client
        ]);
    } catch (err) {
        if (client.destroyed) return;
        client[$e6c7cbcf7b17bcc2$require$kConnecting] = false;
        if ($e6c7cbcf7b17bcc2$var$channels.connectError.hasSubscribers) $e6c7cbcf7b17bcc2$var$channels.connectError.publish({
            connectParams: {
                host: host,
                hostname: hostname,
                protocol: protocol,
                port: port,
                servername: client[$e6c7cbcf7b17bcc2$require$kServerName],
                localAddress: client[$e6c7cbcf7b17bcc2$require$kLocalAddress]
            },
            connector: client[$e6c7cbcf7b17bcc2$require$kConnector],
            error: err
        });
        if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
            $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kRunning] === 0);
            while(client[$e6c7cbcf7b17bcc2$require$kPending] > 0 && client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kPendingIdx]].servername === client[$e6c7cbcf7b17bcc2$require$kServerName]){
                const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kPendingIdx]++];
                $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
            }
        } else $e6c7cbcf7b17bcc2$var$onError(client, err);
        client.emit("connectionError", client[$e6c7cbcf7b17bcc2$require$kUrl], [
            client
        ], err);
    }
    $e6c7cbcf7b17bcc2$var$resume(client);
}
function $e6c7cbcf7b17bcc2$var$emitDrain(client) {
    client[$e6c7cbcf7b17bcc2$require$kNeedDrain] = 0;
    client.emit("drain", client[$e6c7cbcf7b17bcc2$require$kUrl], [
        client
    ]);
}
function $e6c7cbcf7b17bcc2$var$resume(client, sync) {
    if (client[$e6c7cbcf7b17bcc2$require$kResuming] === 2) return;
    client[$e6c7cbcf7b17bcc2$require$kResuming] = 2;
    $e6c7cbcf7b17bcc2$var$_resume(client, sync);
    client[$e6c7cbcf7b17bcc2$require$kResuming] = 0;
    if (client[$e6c7cbcf7b17bcc2$require$kRunningIdx] > 256) {
        client[$e6c7cbcf7b17bcc2$require$kQueue].splice(0, client[$e6c7cbcf7b17bcc2$require$kRunningIdx]);
        client[$e6c7cbcf7b17bcc2$require$kPendingIdx] -= client[$e6c7cbcf7b17bcc2$require$kRunningIdx];
        client[$e6c7cbcf7b17bcc2$require$kRunningIdx] = 0;
    }
}
function $e6c7cbcf7b17bcc2$var$_resume(client, sync) {
    while(true){
        if (client.destroyed) {
            $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kPending] === 0);
            return;
        }
        if (client[$e6c7cbcf7b17bcc2$var$kClosedResolve] && !client[$e6c7cbcf7b17bcc2$require$kSize]) {
            client[$e6c7cbcf7b17bcc2$var$kClosedResolve]();
            client[$e6c7cbcf7b17bcc2$var$kClosedResolve] = null;
            return;
        }
        const socket = client[$e6c7cbcf7b17bcc2$require$kSocket];
        if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
            if (client[$e6c7cbcf7b17bcc2$require$kSize] === 0) {
                if (!socket[$e6c7cbcf7b17bcc2$require$kNoRef] && socket.unref) {
                    socket.unref();
                    socket[$e6c7cbcf7b17bcc2$require$kNoRef] = true;
                }
            } else if (socket[$e6c7cbcf7b17bcc2$require$kNoRef] && socket.ref) {
                socket.ref();
                socket[$e6c7cbcf7b17bcc2$require$kNoRef] = false;
            }
            if (client[$e6c7cbcf7b17bcc2$require$kSize] === 0) {
                if (socket[$e6c7cbcf7b17bcc2$require$kParser].timeoutType !== $e6c7cbcf7b17bcc2$var$TIMEOUT_IDLE) socket[$e6c7cbcf7b17bcc2$require$kParser].setTimeout(client[$e6c7cbcf7b17bcc2$require$kKeepAliveTimeoutValue], $e6c7cbcf7b17bcc2$var$TIMEOUT_IDLE);
            } else if (client[$e6c7cbcf7b17bcc2$require$kRunning] > 0 && socket[$e6c7cbcf7b17bcc2$require$kParser].statusCode < 200) {
                if (socket[$e6c7cbcf7b17bcc2$require$kParser].timeoutType !== $e6c7cbcf7b17bcc2$var$TIMEOUT_HEADERS) {
                    const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kRunningIdx]];
                    const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[$e6c7cbcf7b17bcc2$require$kHeadersTimeout];
                    socket[$e6c7cbcf7b17bcc2$require$kParser].setTimeout(headersTimeout, $e6c7cbcf7b17bcc2$var$TIMEOUT_HEADERS);
                }
            }
        }
        if (client[$e6c7cbcf7b17bcc2$require$kBusy]) client[$e6c7cbcf7b17bcc2$require$kNeedDrain] = 2;
        else if (client[$e6c7cbcf7b17bcc2$require$kNeedDrain] === 2) {
            if (sync) {
                client[$e6c7cbcf7b17bcc2$require$kNeedDrain] = 1;
                $4UN2M$process.nextTick($e6c7cbcf7b17bcc2$var$emitDrain, client);
            } else $e6c7cbcf7b17bcc2$var$emitDrain(client);
            continue;
        }
        if (client[$e6c7cbcf7b17bcc2$require$kPending] === 0) return;
        if (client[$e6c7cbcf7b17bcc2$require$kRunning] >= (client[$e6c7cbcf7b17bcc2$require$kPipelining] || 1)) return;
        const request = client[$e6c7cbcf7b17bcc2$require$kQueue][client[$e6c7cbcf7b17bcc2$require$kPendingIdx]];
        if (client[$e6c7cbcf7b17bcc2$require$kUrl].protocol === "https:" && client[$e6c7cbcf7b17bcc2$require$kServerName] !== request.servername) {
            if (client[$e6c7cbcf7b17bcc2$require$kRunning] > 0) return;
            client[$e6c7cbcf7b17bcc2$require$kServerName] = request.servername;
            if (socket && socket.servername !== request.servername) {
                $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$InformationalError("servername changed"));
                return;
            }
        }
        if (client[$e6c7cbcf7b17bcc2$require$kConnecting]) return;
        if (!socket && !client[$e6c7cbcf7b17bcc2$require$kHTTP2Session]) {
            $e6c7cbcf7b17bcc2$var$connect(client);
            return;
        }
        if (socket.destroyed || socket[$e6c7cbcf7b17bcc2$require$kWriting] || socket[$e6c7cbcf7b17bcc2$require$kReset] || socket[$e6c7cbcf7b17bcc2$require$kBlocking]) return;
        if (client[$e6c7cbcf7b17bcc2$require$kRunning] > 0 && !request.idempotent) // Non-idempotent request cannot be retried.
        // Ensure that no other requests are inflight and
        // could cause failure.
        return;
        if (client[$e6c7cbcf7b17bcc2$require$kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) // Don't dispatch an upgrade until all preceding requests have completed.
        // A misbehaving server might upgrade the connection before all pipelined
        // request has completed.
        return;
        if (client[$e6c7cbcf7b17bcc2$require$kRunning] > 0 && $dZB1o.bodyLength(request.body) !== 0 && ($dZB1o.isStream(request.body) || $dZB1o.isAsyncIterable(request.body))) // Request with stream or iterator body can error while other requests
        // are inflight and indirectly error those as well.
        // Ensure this doesn't happen by waiting for inflight
        // to complete before dispatching.
        // Request with stream or iterator body cannot be retried.
        // Ensure that no other requests are inflight and
        // could cause failure.
        return;
        if (!request.aborted && $e6c7cbcf7b17bcc2$var$write(client, request)) client[$e6c7cbcf7b17bcc2$require$kPendingIdx]++;
        else client[$e6c7cbcf7b17bcc2$require$kQueue].splice(client[$e6c7cbcf7b17bcc2$require$kPendingIdx], 1);
    }
}
// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
function $e6c7cbcf7b17bcc2$var$shouldSendContentLength(method) {
    return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
}
function $e6c7cbcf7b17bcc2$var$write(client, request) {
    if (client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] === "h2") {
        $e6c7cbcf7b17bcc2$var$writeH2(client, client[$e6c7cbcf7b17bcc2$require$kHTTP2Session], request);
        return;
    }
    const { body: body, method: method, path: path, host: host, upgrade: upgrade, headers: headers, blocking: blocking, reset: reset } = request;
    // https://tools.ietf.org/html/rfc7231#section-4.3.1
    // https://tools.ietf.org/html/rfc7231#section-4.3.2
    // https://tools.ietf.org/html/rfc7231#section-4.3.5
    // Sending a payload body on a request that does not
    // expect it can cause undefined behavior on some
    // servers and corrupt connection state. Do not
    // re-use the connection for further requests.
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") // Try to read EOF in order to get length.
    body.read(0);
    const bodyLength = $dZB1o.bodyLength(body);
    let contentLength = bodyLength;
    if (contentLength === null) contentLength = request.contentLength;
    if (contentLength === 0 && !expectsPayload) // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.
    contentLength = null;
    // https://github.com/nodejs/undici/issues/2046
    // A user agent may send a Content-Length header with 0 value, this should be allowed.
    if ($e6c7cbcf7b17bcc2$var$shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
        if (client[$e6c7cbcf7b17bcc2$require$kStrictContentLength]) {
            $e6c7cbcf7b17bcc2$var$errorRequest(client, request, new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError());
            return false;
        }
        $4UN2M$process.emitWarning(new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError());
    }
    const socket = client[$e6c7cbcf7b17bcc2$require$kSocket];
    try {
        request.onConnect((err)=>{
            if (request.aborted || request.completed) return;
            $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err || new $e6c7cbcf7b17bcc2$require$RequestAbortedError());
            $dZB1o.destroy(socket, new $e6c7cbcf7b17bcc2$require$InformationalError("aborted"));
        });
    } catch (err) {
        $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
    }
    if (request.aborted) return false;
    if (method === "HEAD") // https://github.com/mcollina/undici/issues/258
    // Close after a HEAD request to interop with misbehaving servers
    // that may send a body in the response.
    socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
    if (upgrade || method === "CONNECT") // On CONNECT or upgrade, block pipeline from dispatching further
    // requests on this connection.
    socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
    if (reset != null) socket[$e6c7cbcf7b17bcc2$require$kReset] = reset;
    if (client[$e6c7cbcf7b17bcc2$require$kMaxRequests] && socket[$e6c7cbcf7b17bcc2$require$kCounter]++ >= client[$e6c7cbcf7b17bcc2$require$kMaxRequests]) socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
    if (blocking) socket[$e6c7cbcf7b17bcc2$require$kBlocking] = true;
    let header = `${method} ${path} HTTP/1.1\r\n`;
    if (typeof host === "string") header += `host: ${host}\r\n`;
    else header += client[$e6c7cbcf7b17bcc2$require$kHostHeader];
    if (upgrade) header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`;
    else if (client[$e6c7cbcf7b17bcc2$require$kPipelining] && !socket[$e6c7cbcf7b17bcc2$require$kReset]) header += "connection: keep-alive\r\n";
    else header += "connection: close\r\n";
    if (headers) header += headers;
    if ($e6c7cbcf7b17bcc2$var$channels.sendHeaders.hasSubscribers) $e6c7cbcf7b17bcc2$var$channels.sendHeaders.publish({
        request: request,
        headers: header,
        socket: socket
    });
    /* istanbul ignore else: assertion */ if (!body || bodyLength === 0) {
        if (contentLength === 0) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
        else {
            $4UN2M$assert(contentLength === null, "no body must not have content length");
            socket.write(`${header}\r\n`, "latin1");
        }
        request.onRequestSent();
    } else if ($dZB1o.isBuffer(body)) {
        $4UN2M$assert(contentLength === body.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
        socket.write(body);
        socket.uncork();
        request.onBodySent(body);
        request.onRequestSent();
        if (!expectsPayload) socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
    } else if ($dZB1o.isBlobLike(body)) {
        if (typeof body.stream === "function") $e6c7cbcf7b17bcc2$var$writeIterable({
            body: body.stream(),
            client: client,
            request: request,
            socket: socket,
            contentLength: contentLength,
            header: header,
            expectsPayload: expectsPayload
        });
        else $e6c7cbcf7b17bcc2$var$writeBlob({
            body: body,
            client: client,
            request: request,
            socket: socket,
            contentLength: contentLength,
            header: header,
            expectsPayload: expectsPayload
        });
    } else if ($dZB1o.isStream(body)) $e6c7cbcf7b17bcc2$var$writeStream({
        body: body,
        client: client,
        request: request,
        socket: socket,
        contentLength: contentLength,
        header: header,
        expectsPayload: expectsPayload
    });
    else if ($dZB1o.isIterable(body)) $e6c7cbcf7b17bcc2$var$writeIterable({
        body: body,
        client: client,
        request: request,
        socket: socket,
        contentLength: contentLength,
        header: header,
        expectsPayload: expectsPayload
    });
    else $4UN2M$assert(false);
    return true;
}
function $e6c7cbcf7b17bcc2$var$writeH2(client, session, request) {
    const { body: body, method: method, path: path, host: host, upgrade: upgrade, expectContinue: expectContinue, signal: signal, headers: reqHeaders } = request;
    let headers;
    if (typeof reqHeaders === "string") headers = $g1ydE[$e6c7cbcf7b17bcc2$require$kHTTP2CopyHeaders](reqHeaders.trim());
    else headers = reqHeaders;
    if (upgrade) {
        $e6c7cbcf7b17bcc2$var$errorRequest(client, request, new Error("Upgrade not supported for H2"));
        return false;
    }
    try {
        // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
        request.onConnect((err)=>{
            if (request.aborted || request.completed) return;
            $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err || new $e6c7cbcf7b17bcc2$require$RequestAbortedError());
        });
    } catch (err) {
        $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
    }
    if (request.aborted) return false;
    /** @type {import('node:http2').ClientHttp2Stream} */ let stream;
    const h2State = client[$e6c7cbcf7b17bcc2$require$kHTTP2SessionState];
    headers[$e6c7cbcf7b17bcc2$var$HTTP2_HEADER_AUTHORITY] = host || client[$e6c7cbcf7b17bcc2$require$kHost];
    headers[$e6c7cbcf7b17bcc2$var$HTTP2_HEADER_METHOD] = method;
    if (method === "CONNECT") {
        session.ref();
        // we are already connected, streams are pending, first request
        // will create a new stream. We trigger a request to create the stream and wait until
        // `ready` event is triggered
        // We disabled endStream to allow the user to write to the stream
        stream = session.request(headers, {
            endStream: false,
            signal: signal
        });
        if (stream.id && !stream.pending) {
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
        } else stream.once("ready", ()=>{
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
        });
        stream.once("close", ()=>{
            h2State.openStreams -= 1;
            // TODO(HTTP/2): unref only if current streams count is 0
            if (h2State.openStreams === 0) session.unref();
        });
        return true;
    }
    // https://tools.ietf.org/html/rfc7540#section-8.3
    // :path and :scheme headers must be omited when sending CONNECT
    headers[$e6c7cbcf7b17bcc2$var$HTTP2_HEADER_PATH] = path;
    headers[$e6c7cbcf7b17bcc2$var$HTTP2_HEADER_SCHEME] = "https";
    // https://tools.ietf.org/html/rfc7231#section-4.3.1
    // https://tools.ietf.org/html/rfc7231#section-4.3.2
    // https://tools.ietf.org/html/rfc7231#section-4.3.5
    // Sending a payload body on a request that does not
    // expect it can cause undefined behavior on some
    // servers and corrupt connection state. Do not
    // re-use the connection for further requests.
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") // Try to read EOF in order to get length.
    body.read(0);
    let contentLength = $dZB1o.bodyLength(body);
    if (contentLength == null) contentLength = request.contentLength;
    if (contentLength === 0 || !expectsPayload) // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.
    contentLength = null;
    // https://github.com/nodejs/undici/issues/2046
    // A user agent may send a Content-Length header with 0 value, this should be allowed.
    if ($e6c7cbcf7b17bcc2$var$shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
        if (client[$e6c7cbcf7b17bcc2$require$kStrictContentLength]) {
            $e6c7cbcf7b17bcc2$var$errorRequest(client, request, new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError());
            return false;
        }
        $4UN2M$process.emitWarning(new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError());
    }
    if (contentLength != null) {
        $4UN2M$assert(body, "no body must not have content length");
        headers[$e6c7cbcf7b17bcc2$var$HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
    }
    session.ref();
    const shouldEndStream = method === "GET" || method === "HEAD";
    if (expectContinue) {
        headers[$e6c7cbcf7b17bcc2$var$HTTP2_HEADER_EXPECT] = "100-continue";
        stream = session.request(headers, {
            endStream: shouldEndStream,
            signal: signal
        });
        stream.once("continue", writeBodyH2);
    } else {
        stream = session.request(headers, {
            endStream: shouldEndStream,
            signal: signal
        });
        writeBodyH2();
    }
    // Increment counter as we have new several streams open
    ++h2State.openStreams;
    stream.once("response", (headers)=>{
        const { [$e6c7cbcf7b17bcc2$var$HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers;
        if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) stream.pause();
    });
    stream.once("end", ()=>{
        request.onComplete([]);
    });
    stream.on("data", (chunk)=>{
        if (request.onData(chunk) === false) stream.pause();
    });
    stream.once("close", ()=>{
        h2State.openStreams -= 1;
        // TODO(HTTP/2): unref only if current streams count is 0
        if (h2State.openStreams === 0) session.unref();
    });
    stream.once("error", function(err) {
        if (client[$e6c7cbcf7b17bcc2$require$kHTTP2Session] && !client[$e6c7cbcf7b17bcc2$require$kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
            h2State.streams -= 1;
            $dZB1o.destroy(stream, err);
        }
    });
    stream.once("frameError", (type, code)=>{
        const err = new $e6c7cbcf7b17bcc2$require$InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
        $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err);
        if (client[$e6c7cbcf7b17bcc2$require$kHTTP2Session] && !client[$e6c7cbcf7b17bcc2$require$kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
            h2State.streams -= 1;
            $dZB1o.destroy(stream, err);
        }
    });
    // stream.on('aborted', () => {
    //   // TODO(HTTP/2): Support aborted
    // })
    // stream.on('timeout', () => {
    //   // TODO(HTTP/2): Support timeout
    // })
    // stream.on('push', headers => {
    //   // TODO(HTTP/2): Suppor push
    // })
    // stream.on('trailers', headers => {
    //   // TODO(HTTP/2): Support trailers
    // })
    return true;
    function writeBodyH2() {
        /* istanbul ignore else: assertion */ if (!body) request.onRequestSent();
        else if ($dZB1o.isBuffer(body)) {
            $4UN2M$assert(contentLength === body.byteLength, "buffer body must have content length");
            stream.cork();
            stream.write(body);
            stream.uncork();
            stream.end();
            request.onBodySent(body);
            request.onRequestSent();
        } else if ($dZB1o.isBlobLike(body)) {
            if (typeof body.stream === "function") $e6c7cbcf7b17bcc2$var$writeIterable({
                client: client,
                request: request,
                contentLength: contentLength,
                h2stream: stream,
                expectsPayload: expectsPayload,
                body: body.stream(),
                socket: client[$e6c7cbcf7b17bcc2$require$kSocket],
                header: ""
            });
            else $e6c7cbcf7b17bcc2$var$writeBlob({
                body: body,
                client: client,
                request: request,
                contentLength: contentLength,
                expectsPayload: expectsPayload,
                h2stream: stream,
                header: "",
                socket: client[$e6c7cbcf7b17bcc2$require$kSocket]
            });
        } else if ($dZB1o.isStream(body)) $e6c7cbcf7b17bcc2$var$writeStream({
            body: body,
            client: client,
            request: request,
            contentLength: contentLength,
            expectsPayload: expectsPayload,
            socket: client[$e6c7cbcf7b17bcc2$require$kSocket],
            h2stream: stream,
            header: ""
        });
        else if ($dZB1o.isIterable(body)) $e6c7cbcf7b17bcc2$var$writeIterable({
            body: body,
            client: client,
            request: request,
            contentLength: contentLength,
            expectsPayload: expectsPayload,
            header: "",
            h2stream: stream,
            socket: client[$e6c7cbcf7b17bcc2$require$kSocket]
        });
        else $4UN2M$assert(false);
    }
}
function $e6c7cbcf7b17bcc2$var$writeStream({ h2stream: h2stream, body: body, client: client, request: request, socket: socket, contentLength: contentLength, header: header, expectsPayload: expectsPayload }) {
    $4UN2M$assert(contentLength !== 0 || client[$e6c7cbcf7b17bcc2$require$kRunning] === 0, "stream body cannot be pipelined");
    if (client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] === "h2") {
        // For HTTP/2, is enough to pipe the stream
        const pipe = $e6c7cbcf7b17bcc2$require$pipeline(body, h2stream, (err)=>{
            if (err) {
                $dZB1o.destroy(body, err);
                $dZB1o.destroy(h2stream, err);
            } else request.onRequestSent();
        });
        pipe.on("data", onPipeData);
        pipe.once("end", ()=>{
            pipe.removeListener("data", onPipeData);
            $dZB1o.destroy(pipe);
        });
        function onPipeData(chunk) {
            request.onBodySent(chunk);
        }
        return;
    }
    let finished = false;
    const writer = new $e6c7cbcf7b17bcc2$var$AsyncWriter({
        socket: socket,
        request: request,
        contentLength: contentLength,
        client: client,
        expectsPayload: expectsPayload,
        header: header
    });
    const onData = function(chunk) {
        if (finished) return;
        try {
            if (!writer.write(chunk) && this.pause) this.pause();
        } catch (err) {
            $dZB1o.destroy(this, err);
        }
    };
    const onDrain = function() {
        if (finished) return;
        if (body.resume) body.resume();
    };
    const onAbort = function() {
        if (finished) return;
        const err = new $e6c7cbcf7b17bcc2$require$RequestAbortedError();
        queueMicrotask(()=>onFinished(err));
    };
    const onFinished = function(err) {
        if (finished) return;
        finished = true;
        $4UN2M$assert(socket.destroyed || socket[$e6c7cbcf7b17bcc2$require$kWriting] && client[$e6c7cbcf7b17bcc2$require$kRunning] <= 1);
        socket.off("drain", onDrain).off("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        if (!err) try {
            writer.end();
        } catch (er) {
            err = er;
        }
        writer.destroy(err);
        if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) $dZB1o.destroy(body, err);
        else $dZB1o.destroy(body);
    };
    body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
    if (body.resume) body.resume();
    socket.on("drain", onDrain).on("error", onFinished);
}
async function $e6c7cbcf7b17bcc2$var$writeBlob({ h2stream: h2stream, body: body, client: client, request: request, socket: socket, contentLength: contentLength, header: header, expectsPayload: expectsPayload }) {
    $4UN2M$assert(contentLength === body.size, "blob body must have content length");
    const isH2 = client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] === "h2";
    try {
        if (contentLength != null && contentLength !== body.size) throw new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError();
        const buffer = $e6c7cbcf7b17bcc2$require$Buffer.from(await body.arrayBuffer());
        if (isH2) {
            h2stream.cork();
            h2stream.write(buffer);
            h2stream.uncork();
        } else {
            socket.cork();
            socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
            socket.write(buffer);
            socket.uncork();
        }
        request.onBodySent(buffer);
        request.onRequestSent();
        if (!expectsPayload) socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
        $e6c7cbcf7b17bcc2$var$resume(client);
    } catch (err) {
        $dZB1o.destroy(isH2 ? h2stream : socket, err);
    }
}
async function $e6c7cbcf7b17bcc2$var$writeIterable({ h2stream: h2stream, body: body, client: client, request: request, socket: socket, contentLength: contentLength, header: header, expectsPayload: expectsPayload }) {
    $4UN2M$assert(contentLength !== 0 || client[$e6c7cbcf7b17bcc2$require$kRunning] === 0, "iterator body cannot be pipelined");
    let callback = null;
    function onDrain() {
        if (callback) {
            const cb = callback;
            callback = null;
            cb();
        }
    }
    const waitForDrain = ()=>new Promise((resolve, reject)=>{
            $4UN2M$assert(callback === null);
            if (socket[$e6c7cbcf7b17bcc2$require$kError]) reject(socket[$e6c7cbcf7b17bcc2$require$kError]);
            else callback = resolve;
        });
    if (client[$e6c7cbcf7b17bcc2$require$kHTTPConnVersion] === "h2") {
        h2stream.on("close", onDrain).on("drain", onDrain);
        try {
            // It's up to the user to somehow abort the async iterable.
            for await (const chunk of body){
                if (socket[$e6c7cbcf7b17bcc2$require$kError]) throw socket[$e6c7cbcf7b17bcc2$require$kError];
                const res = h2stream.write(chunk);
                request.onBodySent(chunk);
                if (!res) await waitForDrain();
            }
        } catch (err) {
            h2stream.destroy(err);
        } finally{
            request.onRequestSent();
            h2stream.end();
            h2stream.off("close", onDrain).off("drain", onDrain);
        }
        return;
    }
    socket.on("close", onDrain).on("drain", onDrain);
    const writer = new $e6c7cbcf7b17bcc2$var$AsyncWriter({
        socket: socket,
        request: request,
        contentLength: contentLength,
        client: client,
        expectsPayload: expectsPayload,
        header: header
    });
    try {
        // It's up to the user to somehow abort the async iterable.
        for await (const chunk of body){
            if (socket[$e6c7cbcf7b17bcc2$require$kError]) throw socket[$e6c7cbcf7b17bcc2$require$kError];
            if (!writer.write(chunk)) await waitForDrain();
        }
        writer.end();
    } catch (err) {
        writer.destroy(err);
    } finally{
        socket.off("close", onDrain).off("drain", onDrain);
    }
}
class $e6c7cbcf7b17bcc2$var$AsyncWriter {
    constructor({ socket: socket, request: request, contentLength: contentLength, client: client, expectsPayload: expectsPayload, header: header }){
        this.socket = socket;
        this.request = request;
        this.contentLength = contentLength;
        this.client = client;
        this.bytesWritten = 0;
        this.expectsPayload = expectsPayload;
        this.header = header;
        socket[$e6c7cbcf7b17bcc2$require$kWriting] = true;
    }
    write(chunk) {
        const { socket: socket, request: request, contentLength: contentLength, client: client, bytesWritten: bytesWritten, expectsPayload: expectsPayload, header: header } = this;
        if (socket[$e6c7cbcf7b17bcc2$require$kError]) throw socket[$e6c7cbcf7b17bcc2$require$kError];
        if (socket.destroyed) return false;
        const len = $e6c7cbcf7b17bcc2$require$Buffer.byteLength(chunk);
        if (!len) return true;
        // We should defer writing chunks.
        if (contentLength !== null && bytesWritten + len > contentLength) {
            if (client[$e6c7cbcf7b17bcc2$require$kStrictContentLength]) throw new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError();
            $4UN2M$process.emitWarning(new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError());
        }
        socket.cork();
        if (bytesWritten === 0) {
            if (!expectsPayload) socket[$e6c7cbcf7b17bcc2$require$kReset] = true;
            if (contentLength === null) socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
            else socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
        }
        if (contentLength === null) socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
        this.bytesWritten += len;
        const ret = socket.write(chunk);
        socket.uncork();
        request.onBodySent(chunk);
        if (!ret) {
            if (socket[$e6c7cbcf7b17bcc2$require$kParser].timeout && socket[$e6c7cbcf7b17bcc2$require$kParser].timeoutType === $e6c7cbcf7b17bcc2$var$TIMEOUT_HEADERS) // istanbul ignore else: only for jest
            {
                if (socket[$e6c7cbcf7b17bcc2$require$kParser].timeout.refresh) socket[$e6c7cbcf7b17bcc2$require$kParser].timeout.refresh();
            }
        }
        return ret;
    }
    end() {
        const { socket: socket, contentLength: contentLength, client: client, bytesWritten: bytesWritten, expectsPayload: expectsPayload, header: header, request: request } = this;
        request.onRequestSent();
        socket[$e6c7cbcf7b17bcc2$require$kWriting] = false;
        if (socket[$e6c7cbcf7b17bcc2$require$kError]) throw socket[$e6c7cbcf7b17bcc2$require$kError];
        if (socket.destroyed) return;
        if (bytesWritten === 0) {
            if (expectsPayload) // https://tools.ietf.org/html/rfc7230#section-3.3.2
            // A user agent SHOULD send a Content-Length in a request message when
            // no Transfer-Encoding is sent and the request method defines a meaning
            // for an enclosed payload body.
            socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
            else socket.write(`${header}\r\n`, "latin1");
        } else if (contentLength === null) socket.write("\r\n0\r\n\r\n", "latin1");
        if (contentLength !== null && bytesWritten !== contentLength) {
            if (client[$e6c7cbcf7b17bcc2$require$kStrictContentLength]) throw new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError();
            else $4UN2M$process.emitWarning(new $e6c7cbcf7b17bcc2$require$RequestContentLengthMismatchError());
        }
        if (socket[$e6c7cbcf7b17bcc2$require$kParser].timeout && socket[$e6c7cbcf7b17bcc2$require$kParser].timeoutType === $e6c7cbcf7b17bcc2$var$TIMEOUT_HEADERS) // istanbul ignore else: only for jest
        {
            if (socket[$e6c7cbcf7b17bcc2$require$kParser].timeout.refresh) socket[$e6c7cbcf7b17bcc2$require$kParser].timeout.refresh();
        }
        $e6c7cbcf7b17bcc2$var$resume(client);
    }
    destroy(err) {
        const { socket: socket, client: client } = this;
        socket[$e6c7cbcf7b17bcc2$require$kWriting] = false;
        if (err) {
            $4UN2M$assert(client[$e6c7cbcf7b17bcc2$require$kRunning] <= 1, "pipeline should only contain this request");
            $dZB1o.destroy(socket, err);
        }
    }
}
function $e6c7cbcf7b17bcc2$var$errorRequest(client, request, err) {
    try {
        request.onError(err);
        $4UN2M$assert(request.aborted);
    } catch (err) {
        client.emit("error", err);
    }
}
module.exports = $e6c7cbcf7b17bcc2$var$Client;

});
parcelRegister("lKhqR", function(module, exports) {
"use strict";
let $fd4b6a8ce056f39f$var$fastNow = Date.now();
let $fd4b6a8ce056f39f$var$fastNowTimeout;
const $fd4b6a8ce056f39f$var$fastTimers = [];
function $fd4b6a8ce056f39f$var$onTimeout() {
    $fd4b6a8ce056f39f$var$fastNow = Date.now();
    let len = $fd4b6a8ce056f39f$var$fastTimers.length;
    let idx = 0;
    while(idx < len){
        const timer = $fd4b6a8ce056f39f$var$fastTimers[idx];
        if (timer.state === 0) timer.state = $fd4b6a8ce056f39f$var$fastNow + timer.delay;
        else if (timer.state > 0 && $fd4b6a8ce056f39f$var$fastNow >= timer.state) {
            timer.state = -1;
            timer.callback(timer.opaque);
        }
        if (timer.state === -1) {
            timer.state = -2;
            if (idx !== len - 1) $fd4b6a8ce056f39f$var$fastTimers[idx] = $fd4b6a8ce056f39f$var$fastTimers.pop();
            else $fd4b6a8ce056f39f$var$fastTimers.pop();
            len -= 1;
        } else idx += 1;
    }
    if ($fd4b6a8ce056f39f$var$fastTimers.length > 0) $fd4b6a8ce056f39f$var$refreshTimeout();
}
function $fd4b6a8ce056f39f$var$refreshTimeout() {
    if ($fd4b6a8ce056f39f$var$fastNowTimeout && $fd4b6a8ce056f39f$var$fastNowTimeout.refresh) $fd4b6a8ce056f39f$var$fastNowTimeout.refresh();
    else {
        clearTimeout($fd4b6a8ce056f39f$var$fastNowTimeout);
        $fd4b6a8ce056f39f$var$fastNowTimeout = setTimeout($fd4b6a8ce056f39f$var$onTimeout, 1e3);
        if ($fd4b6a8ce056f39f$var$fastNowTimeout.unref) $fd4b6a8ce056f39f$var$fastNowTimeout.unref();
    }
}
class $fd4b6a8ce056f39f$var$Timeout {
    constructor(callback, delay, opaque){
        this.callback = callback;
        this.delay = delay;
        this.opaque = opaque;
        //  -2 not in timer list
        //  -1 in timer list but inactive
        //   0 in timer list waiting for time
        // > 0 in timer list waiting for time to expire
        this.state = -2;
        this.refresh();
    }
    refresh() {
        if (this.state === -2) {
            $fd4b6a8ce056f39f$var$fastTimers.push(this);
            if (!$fd4b6a8ce056f39f$var$fastNowTimeout || $fd4b6a8ce056f39f$var$fastTimers.length === 1) $fd4b6a8ce056f39f$var$refreshTimeout();
        }
        this.state = 0;
    }
    clear() {
        this.state = -1;
    }
}
module.exports = {
    setTimeout (callback, delay, opaque) {
        return delay < 1e3 ? setTimeout(callback, delay, opaque) : new $fd4b6a8ce056f39f$var$Timeout(callback, delay, opaque);
    },
    clearTimeout (timeout) {
        if (timeout instanceof $fd4b6a8ce056f39f$var$Timeout) timeout.clear();
        else clearTimeout(timeout);
    }
};

});

parcelRegister("g1ydE", function(module, exports) {

var $baa7488f5986e500$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $7bgOU = parcelRequire("7bgOU");
var $baa7488f5986e500$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $baa7488f5986e500$require$NotSupportedError = $7bgOU.NotSupportedError;


var $9Yodq = parcelRequire("9Yodq");
var $baa7488f5986e500$require$kHTTP2BuildRequest = $9Yodq.kHTTP2BuildRequest;
var $baa7488f5986e500$require$kHTTP2CopyHeaders = $9Yodq.kHTTP2CopyHeaders;
var $baa7488f5986e500$require$kHTTP1BuildRequest = $9Yodq.kHTTP1BuildRequest;

var $dZB1o = parcelRequire("dZB1o");
// tokenRegExp and headerCharRegex have been lifted from
// https://github.com/nodejs/node/blob/main/lib/_http_common.js
/**
 * Verifies that the given val is a valid HTTP token
 * per the rules defined in RFC 7230
 * See https://tools.ietf.org/html/rfc7230#section-3.2.6
 */ const $baa7488f5986e500$var$tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
/**
 * Matches if val contains an invalid field-vchar
 *  field-value    = *( field-content / obs-fold )
 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 *  field-vchar    = VCHAR / obs-text
 */ const $baa7488f5986e500$var$headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
// Verifies that a given path is valid does not contain control chars \x00 to \x20
const $baa7488f5986e500$var$invalidPathRegex = /[^\u0021-\u00ff]/;
const $baa7488f5986e500$var$kHandler = Symbol("handler");
const $baa7488f5986e500$var$channels = {};
let $baa7488f5986e500$var$extractBody;

try {
    const diagnosticsChannel = $baa7488f5986e500$import$8c11996ea4346c54;
    $baa7488f5986e500$var$channels.create = diagnosticsChannel.channel("undici:request:create");
    $baa7488f5986e500$var$channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
    $baa7488f5986e500$var$channels.headers = diagnosticsChannel.channel("undici:request:headers");
    $baa7488f5986e500$var$channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
    $baa7488f5986e500$var$channels.error = diagnosticsChannel.channel("undici:request:error");
} catch  {
    $baa7488f5986e500$var$channels.create = {
        hasSubscribers: false
    };
    $baa7488f5986e500$var$channels.bodySent = {
        hasSubscribers: false
    };
    $baa7488f5986e500$var$channels.headers = {
        hasSubscribers: false
    };
    $baa7488f5986e500$var$channels.trailers = {
        hasSubscribers: false
    };
    $baa7488f5986e500$var$channels.error = {
        hasSubscribers: false
    };
}

class $baa7488f5986e500$var$Request {
    constructor(origin, { path: path, method: method, body: body, headers: headers, query: query, idempotent: idempotent, blocking: blocking, upgrade: upgrade, headersTimeout: headersTimeout, bodyTimeout: bodyTimeout, reset: reset, throwOnError: throwOnError, expectContinue: expectContinue }, handler){
        if (typeof path !== "string") throw new $baa7488f5986e500$require$InvalidArgumentError("path must be a string");
        else if (path[0] !== "/" && !(path.startsWith("http://") || path.startsWith("https://")) && method !== "CONNECT") throw new $baa7488f5986e500$require$InvalidArgumentError("path must be an absolute URL or start with a slash");
        else if ($baa7488f5986e500$var$invalidPathRegex.exec(path) !== null) throw new $baa7488f5986e500$require$InvalidArgumentError("invalid request path");
        if (typeof method !== "string") throw new $baa7488f5986e500$require$InvalidArgumentError("method must be a string");
        else if ($baa7488f5986e500$var$tokenRegExp.exec(method) === null) throw new $baa7488f5986e500$require$InvalidArgumentError("invalid request method");
        if (upgrade && typeof upgrade !== "string") throw new $baa7488f5986e500$require$InvalidArgumentError("upgrade must be a string");
        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new $baa7488f5986e500$require$InvalidArgumentError("invalid headersTimeout");
        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new $baa7488f5986e500$require$InvalidArgumentError("invalid bodyTimeout");
        if (reset != null && typeof reset !== "boolean") throw new $baa7488f5986e500$require$InvalidArgumentError("invalid reset");
        if (expectContinue != null && typeof expectContinue !== "boolean") throw new $baa7488f5986e500$require$InvalidArgumentError("invalid expectContinue");
        this.headersTimeout = headersTimeout;
        this.bodyTimeout = bodyTimeout;
        this.throwOnError = throwOnError === true;
        this.method = method;
        this.abort = null;
        if (body == null) this.body = null;
        else if ($dZB1o.isStream(body)) {
            this.body = body;
            const rState = this.body._readableState;
            if (!rState || !rState.autoDestroy) {
                this.endHandler = function autoDestroy() {
                    $dZB1o.destroy(this);
                };
                this.body.on("end", this.endHandler);
            }
            this.errorHandler = (err)=>{
                if (this.abort) this.abort(err);
                else this.error = err;
            };
            this.body.on("error", this.errorHandler);
        } else if ($dZB1o.isBuffer(body)) this.body = body.byteLength ? body : null;
        else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? $baa7488f5986e500$require$Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
        else if (body instanceof ArrayBuffer) this.body = body.byteLength ? $baa7488f5986e500$require$Buffer.from(body) : null;
        else if (typeof body === "string") this.body = body.length ? $baa7488f5986e500$require$Buffer.from(body) : null;
        else if ($dZB1o.isFormDataLike(body) || $dZB1o.isIterable(body) || $dZB1o.isBlobLike(body)) this.body = body;
        else throw new $baa7488f5986e500$require$InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
        this.completed = false;
        this.aborted = false;
        this.upgrade = upgrade || null;
        this.path = query ? $dZB1o.buildURL(path, query) : path;
        this.origin = origin;
        this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
        this.blocking = blocking == null ? false : blocking;
        this.reset = reset == null ? null : reset;
        this.host = null;
        this.contentLength = null;
        this.contentType = null;
        this.headers = "";
        // Only for H2
        this.expectContinue = expectContinue != null ? expectContinue : false;
        if (Array.isArray(headers)) {
            if (headers.length % 2 !== 0) throw new $baa7488f5986e500$require$InvalidArgumentError("headers array must be even");
            for(let i = 0; i < headers.length; i += 2)$baa7488f5986e500$var$processHeader(this, headers[i], headers[i + 1]);
        } else if (headers && typeof headers === "object") {
            const keys = Object.keys(headers);
            for(let i = 0; i < keys.length; i++){
                const key = keys[i];
                $baa7488f5986e500$var$processHeader(this, key, headers[key]);
            }
        } else if (headers != null) throw new $baa7488f5986e500$require$InvalidArgumentError("headers must be an object or an array");
        if ($dZB1o.isFormDataLike(this.body)) {
            if ($dZB1o.nodeMajor < 16 || $dZB1o.nodeMajor === 16 && $dZB1o.nodeMinor < 8) throw new $baa7488f5986e500$require$InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
            if (!$baa7488f5986e500$var$extractBody) $baa7488f5986e500$var$extractBody = (parcelRequire("8gSQD")).extractBody;
            const [bodyStream, contentType] = $baa7488f5986e500$var$extractBody(body);
            if (this.contentType == null) {
                this.contentType = contentType;
                this.headers += `content-type: ${contentType}\r\n`;
            }
            this.body = bodyStream.stream;
            this.contentLength = bodyStream.length;
        } else if ($dZB1o.isBlobLike(body) && this.contentType == null && body.type) {
            this.contentType = body.type;
            this.headers += `content-type: ${body.type}\r\n`;
        }
        $dZB1o.validateHandler(handler, method, upgrade);
        this.servername = $dZB1o.getServerName(this.host);
        this[$baa7488f5986e500$var$kHandler] = handler;
        if ($baa7488f5986e500$var$channels.create.hasSubscribers) $baa7488f5986e500$var$channels.create.publish({
            request: this
        });
    }
    onBodySent(chunk) {
        if (this[$baa7488f5986e500$var$kHandler].onBodySent) try {
            return this[$baa7488f5986e500$var$kHandler].onBodySent(chunk);
        } catch (err) {
            this.abort(err);
        }
    }
    onRequestSent() {
        if ($baa7488f5986e500$var$channels.bodySent.hasSubscribers) $baa7488f5986e500$var$channels.bodySent.publish({
            request: this
        });
        if (this[$baa7488f5986e500$var$kHandler].onRequestSent) try {
            return this[$baa7488f5986e500$var$kHandler].onRequestSent();
        } catch (err) {
            this.abort(err);
        }
    }
    onConnect(abort) {
        $4UN2M$assert(!this.aborted);
        $4UN2M$assert(!this.completed);
        if (this.error) abort(this.error);
        else {
            this.abort = abort;
            return this[$baa7488f5986e500$var$kHandler].onConnect(abort);
        }
    }
    onHeaders(statusCode, headers, resume, statusText) {
        $4UN2M$assert(!this.aborted);
        $4UN2M$assert(!this.completed);
        if ($baa7488f5986e500$var$channels.headers.hasSubscribers) $baa7488f5986e500$var$channels.headers.publish({
            request: this,
            response: {
                statusCode: statusCode,
                headers: headers,
                statusText: statusText
            }
        });
        try {
            return this[$baa7488f5986e500$var$kHandler].onHeaders(statusCode, headers, resume, statusText);
        } catch (err) {
            this.abort(err);
        }
    }
    onData(chunk) {
        $4UN2M$assert(!this.aborted);
        $4UN2M$assert(!this.completed);
        try {
            return this[$baa7488f5986e500$var$kHandler].onData(chunk);
        } catch (err) {
            this.abort(err);
            return false;
        }
    }
    onUpgrade(statusCode, headers, socket) {
        $4UN2M$assert(!this.aborted);
        $4UN2M$assert(!this.completed);
        return this[$baa7488f5986e500$var$kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
        this.onFinally();
        $4UN2M$assert(!this.aborted);
        this.completed = true;
        if ($baa7488f5986e500$var$channels.trailers.hasSubscribers) $baa7488f5986e500$var$channels.trailers.publish({
            request: this,
            trailers: trailers
        });
        try {
            return this[$baa7488f5986e500$var$kHandler].onComplete(trailers);
        } catch (err) {
            // TODO (fix): This might be a bad idea?
            this.onError(err);
        }
    }
    onError(error) {
        this.onFinally();
        if ($baa7488f5986e500$var$channels.error.hasSubscribers) $baa7488f5986e500$var$channels.error.publish({
            request: this,
            error: error
        });
        if (this.aborted) return;
        this.aborted = true;
        return this[$baa7488f5986e500$var$kHandler].onError(error);
    }
    onFinally() {
        if (this.errorHandler) {
            this.body.off("error", this.errorHandler);
            this.errorHandler = null;
        }
        if (this.endHandler) {
            this.body.off("end", this.endHandler);
            this.endHandler = null;
        }
    }
    // TODO: adjust to support H2
    addHeader(key, value) {
        $baa7488f5986e500$var$processHeader(this, key, value);
        return this;
    }
    static [$baa7488f5986e500$require$kHTTP1BuildRequest](origin, opts, handler) {
        // TODO: Migrate header parsing here, to make Requests
        // HTTP agnostic
        return new $baa7488f5986e500$var$Request(origin, opts, handler);
    }
    static [$baa7488f5986e500$require$kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers;
        opts = {
            ...opts,
            headers: null
        };
        const request = new $baa7488f5986e500$var$Request(origin, opts, handler);
        request.headers = {};
        if (Array.isArray(headers)) {
            if (headers.length % 2 !== 0) throw new $baa7488f5986e500$require$InvalidArgumentError("headers array must be even");
            for(let i = 0; i < headers.length; i += 2)$baa7488f5986e500$var$processHeader(request, headers[i], headers[i + 1], true);
        } else if (headers && typeof headers === "object") {
            const keys = Object.keys(headers);
            for(let i = 0; i < keys.length; i++){
                const key = keys[i];
                $baa7488f5986e500$var$processHeader(request, key, headers[key], true);
            }
        } else if (headers != null) throw new $baa7488f5986e500$require$InvalidArgumentError("headers must be an object or an array");
        return request;
    }
    static [$baa7488f5986e500$require$kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split("\r\n");
        const headers = {};
        for (const header of rawHeaders){
            const [key, value] = header.split(": ");
            if (value == null || value.length === 0) continue;
            if (headers[key]) headers[key] += `,${value}`;
            else headers[key] = value;
        }
        return headers;
    }
}
function $baa7488f5986e500$var$processHeaderValue(key, val, skipAppend) {
    if (val && typeof val === "object") throw new $baa7488f5986e500$require$InvalidArgumentError(`invalid ${key} header`);
    val = val != null ? `${val}` : "";
    if ($baa7488f5986e500$var$headerCharRegex.exec(val) !== null) throw new $baa7488f5986e500$require$InvalidArgumentError(`invalid ${key} header`);
    return skipAppend ? val : `${key}: ${val}\r\n`;
}
function $baa7488f5986e500$var$processHeader(request, key, val, skipAppend = false) {
    if (val && typeof val === "object" && !Array.isArray(val)) throw new $baa7488f5986e500$require$InvalidArgumentError(`invalid ${key} header`);
    else if (val === undefined) return;
    if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
        if ($baa7488f5986e500$var$headerCharRegex.exec(val) !== null) throw new $baa7488f5986e500$require$InvalidArgumentError(`invalid ${key} header`);
        // Consumed by Client
        request.host = val;
    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
        request.contentLength = parseInt(val, 10);
        if (!Number.isFinite(request.contentLength)) throw new $baa7488f5986e500$require$InvalidArgumentError("invalid content-length header");
    } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
        request.contentType = val;
        if (skipAppend) request.headers[key] = $baa7488f5986e500$var$processHeaderValue(key, val, skipAppend);
        else request.headers += $baa7488f5986e500$var$processHeaderValue(key, val);
    } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") throw new $baa7488f5986e500$require$InvalidArgumentError("invalid transfer-encoding header");
    else if (key.length === 10 && key.toLowerCase() === "connection") {
        const value = typeof val === "string" ? val.toLowerCase() : null;
        if (value !== "close" && value !== "keep-alive") throw new $baa7488f5986e500$require$InvalidArgumentError("invalid connection header");
        else if (value === "close") request.reset = true;
    } else if (key.length === 10 && key.toLowerCase() === "keep-alive") throw new $baa7488f5986e500$require$InvalidArgumentError("invalid keep-alive header");
    else if (key.length === 7 && key.toLowerCase() === "upgrade") throw new $baa7488f5986e500$require$InvalidArgumentError("invalid upgrade header");
    else if (key.length === 6 && key.toLowerCase() === "expect") throw new $baa7488f5986e500$require$NotSupportedError("expect header not supported");
    else if ($baa7488f5986e500$var$tokenRegExp.exec(key) === null) throw new $baa7488f5986e500$require$InvalidArgumentError("invalid header key");
    else {
        if (Array.isArray(val)) {
            for(let i = 0; i < val.length; i++)if (skipAppend) {
                if (request.headers[key]) request.headers[key] += `,${$baa7488f5986e500$var$processHeaderValue(key, val[i], skipAppend)}`;
                else request.headers[key] = $baa7488f5986e500$var$processHeaderValue(key, val[i], skipAppend);
            } else request.headers += $baa7488f5986e500$var$processHeaderValue(key, val[i]);
        } else if (skipAppend) request.headers[key] = $baa7488f5986e500$var$processHeaderValue(key, val, skipAppend);
        else request.headers += $baa7488f5986e500$var$processHeaderValue(key, val);
    }
}
module.exports = $baa7488f5986e500$var$Request;

});

parcelRegister("hb74B", function(module, exports) {

"use strict";



var $dZB1o = parcelRequire("dZB1o");

var $7bgOU = parcelRequire("7bgOU");
var $c818f358db9320fb$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $c818f358db9320fb$require$ConnectTimeoutError = $7bgOU.ConnectTimeoutError;
let $c818f358db9320fb$var$tls // include tls conditionally since it is not always available
;
// TODO: session re-use does not wait for the first
// connection to resolve the session and might therefore
// resolve the same servername multiple times even when
// re-use is enabled.
let $c818f358db9320fb$var$SessionCache;
// FIXME: remove workaround when the Node bug is fixed
// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
if ($parcel$global.FinalizationRegistry && true) $c818f358db9320fb$var$SessionCache = class WeakSessionCache {
    constructor(maxCachedSessions){
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map();
        this._sessionRegistry = new $parcel$global.FinalizationRegistry((key)=>{
            if (this._sessionCache.size < this._maxCachedSessions) return;
            const ref = this._sessionCache.get(key);
            if (ref !== undefined && ref.deref() === undefined) this._sessionCache.delete(key);
        });
    }
    get(sessionKey) {
        const ref = this._sessionCache.get(sessionKey);
        return ref ? ref.deref() : null;
    }
    set(sessionKey, session) {
        if (this._maxCachedSessions === 0) return;
        this._sessionCache.set(sessionKey, new WeakRef(session));
        this._sessionRegistry.register(session, sessionKey);
    }
};
else $c818f358db9320fb$var$SessionCache = class SimpleSessionCache {
    constructor(maxCachedSessions){
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map();
    }
    get(sessionKey) {
        return this._sessionCache.get(sessionKey);
    }
    set(sessionKey, session) {
        if (this._maxCachedSessions === 0) return;
        if (this._sessionCache.size >= this._maxCachedSessions) {
            // remove the oldest session
            const { value: oldestKey } = this._sessionCache.keys().next();
            this._sessionCache.delete(oldestKey);
        }
        this._sessionCache.set(sessionKey, session);
    }
};

function $c818f358db9320fb$var$buildConnector({ allowH2: allowH2, maxCachedSessions: maxCachedSessions, socketPath: socketPath, timeout: timeout, ...opts }) {
    if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new $c818f358db9320fb$require$InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
    const options = {
        path: socketPath,
        ...opts
    };
    const sessionCache = new $c818f358db9320fb$var$SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
    timeout = timeout == null ? 10e3 : timeout;
    allowH2 = allowH2 != null ? allowH2 : false;
    return function connect({ hostname: hostname, host: host, protocol: protocol, port: port, servername: servername, localAddress: localAddress, httpSocket: httpSocket }, callback) {
        let socket;
        if (protocol === "https:") {
            if (!$c818f358db9320fb$var$tls) $c818f358db9320fb$var$tls = $4UN2M$tls;
            servername = servername || options.servername || $dZB1o.getServerName(host) || null;
            const sessionKey = servername || hostname;
            const session = sessionCache.get(sessionKey) || null;
            $4UN2M$assert(sessionKey);
            socket = $c818f358db9320fb$var$tls.connect({
                highWaterMark: 16384,
                ...options,
                servername: servername,
                session: session,
                localAddress: localAddress,
                // TODO(HTTP/2): Add support for h2c
                ALPNProtocols: allowH2 ? [
                    "http/1.1",
                    "h2"
                ] : [
                    "http/1.1"
                ],
                socket: httpSocket,
                port: port || 443,
                host: hostname
            });
            socket.on("session", function(session) {
                // TODO (fix): Can a session become invalid once established? Don't think so?
                sessionCache.set(sessionKey, session);
            });
        } else {
            $4UN2M$assert(!httpSocket, "httpSocket can only be sent on TLS update");
            socket = $4UN2M$net.connect({
                highWaterMark: 65536,
                ...options,
                localAddress: localAddress,
                port: port || 80,
                host: hostname
            });
        }
        // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
        if (options.keepAlive == null || options.keepAlive) {
            const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay;
            socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        const cancelTimeout = $c818f358db9320fb$var$setupTimeout(()=>$c818f358db9320fb$var$onConnectTimeout(socket), timeout);
        socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
            cancelTimeout();
            if (callback) {
                const cb = callback;
                callback = null;
                cb(null, this);
            }
        }).on("error", function(err) {
            cancelTimeout();
            if (callback) {
                const cb = callback;
                callback = null;
                cb(err);
            }
        });
        return socket;
    };
}
function $c818f358db9320fb$var$setupTimeout(onConnectTimeout, timeout) {
    if (!timeout) return ()=>{};
    let s1 = null;
    let s2 = null;
    const timeoutId = setTimeout(()=>{
        // setImmediate is added to make sure that we priotorise socket error events over timeouts
        s1 = setImmediate(()=>{
            if ($4UN2M$process.platform === "win32") // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
            s2 = setImmediate(()=>onConnectTimeout());
            else onConnectTimeout();
        });
    }, timeout);
    return ()=>{
        clearTimeout(timeoutId);
        clearImmediate(s1);
        clearImmediate(s2);
    };
}
function $c818f358db9320fb$var$onConnectTimeout(socket) {
    $dZB1o.destroy(socket, new $c818f358db9320fb$require$ConnectTimeoutError());
}
module.exports = $c818f358db9320fb$var$buildConnector;

});

parcelRegister("dmwjB", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SPECIAL_HEADERS = module.exports.HEADER_STATE = module.exports.MINOR = module.exports.MAJOR = module.exports.CONNECTION_TOKEN_CHARS = module.exports.HEADER_CHARS = module.exports.TOKEN = module.exports.STRICT_TOKEN = module.exports.HEX = module.exports.URL_CHAR = module.exports.STRICT_URL_CHAR = module.exports.USERINFO_CHARS = module.exports.MARK = module.exports.ALPHANUM = module.exports.NUM = module.exports.HEX_MAP = module.exports.NUM_MAP = module.exports.ALPHA = module.exports.FINISH = module.exports.H_METHOD_MAP = module.exports.METHOD_MAP = module.exports.METHODS_RTSP = module.exports.METHODS_ICE = module.exports.METHODS_HTTP = module.exports.METHODS = module.exports.LENIENT_FLAGS = module.exports.FLAGS = module.exports.TYPE = module.exports.ERROR = void 0;

var $4ip6M = parcelRequire("4ip6M");
// C headers
var $9ba6658eaf68bb7b$var$ERROR;
(function(ERROR) {
    ERROR[ERROR["OK"] = 0] = "OK";
    ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
    ERROR[ERROR["STRICT"] = 2] = "STRICT";
    ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
    ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR[ERROR["USER"] = 24] = "USER";
})($9ba6658eaf68bb7b$var$ERROR = module.exports.ERROR || (module.exports.ERROR = {}));
var $9ba6658eaf68bb7b$var$TYPE;
(function(TYPE) {
    TYPE[TYPE["BOTH"] = 0] = "BOTH";
    TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
    TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
})($9ba6658eaf68bb7b$var$TYPE = module.exports.TYPE || (module.exports.TYPE = {}));
var $9ba6658eaf68bb7b$var$FLAGS;
(function(FLAGS) {
    FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
    FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
    FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
    // 1 << 8 is unused
    FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
})($9ba6658eaf68bb7b$var$FLAGS = module.exports.FLAGS || (module.exports.FLAGS = {}));
var $9ba6658eaf68bb7b$var$LENIENT_FLAGS;
(function(LENIENT_FLAGS) {
    LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
})($9ba6658eaf68bb7b$var$LENIENT_FLAGS = module.exports.LENIENT_FLAGS || (module.exports.LENIENT_FLAGS = {}));
var $9ba6658eaf68bb7b$var$METHODS;
(function(METHODS) {
    METHODS[METHODS["DELETE"] = 0] = "DELETE";
    METHODS[METHODS["GET"] = 1] = "GET";
    METHODS[METHODS["HEAD"] = 2] = "HEAD";
    METHODS[METHODS["POST"] = 3] = "POST";
    METHODS[METHODS["PUT"] = 4] = "PUT";
    /* pathological */ METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
    METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
    METHODS[METHODS["TRACE"] = 7] = "TRACE";
    /* WebDAV */ METHODS[METHODS["COPY"] = 8] = "COPY";
    METHODS[METHODS["LOCK"] = 9] = "LOCK";
    METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
    METHODS[METHODS["MOVE"] = 11] = "MOVE";
    METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
    METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
    METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
    METHODS[METHODS["BIND"] = 16] = "BIND";
    METHODS[METHODS["REBIND"] = 17] = "REBIND";
    METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
    METHODS[METHODS["ACL"] = 19] = "ACL";
    /* subversion */ METHODS[METHODS["REPORT"] = 20] = "REPORT";
    METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS[METHODS["MERGE"] = 23] = "MERGE";
    /* upnp */ METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
    METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    /* RFC-5789 */ METHODS[METHODS["PATCH"] = 28] = "PATCH";
    METHODS[METHODS["PURGE"] = 29] = "PURGE";
    /* CalDAV */ METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
    /* RFC-2068, section 19.6.1.2 */ METHODS[METHODS["LINK"] = 31] = "LINK";
    METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
    /* icecast */ METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
    /* RFC-7540, section 11.6 */ METHODS[METHODS["PRI"] = 34] = "PRI";
    /* RFC-2326 RTSP */ METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS[METHODS["SETUP"] = 37] = "SETUP";
    METHODS[METHODS["PLAY"] = 38] = "PLAY";
    METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
    METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
    METHODS[METHODS["RECORD"] = 44] = "RECORD";
    /* RAOP */ METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
})($9ba6658eaf68bb7b$var$METHODS = module.exports.METHODS || (module.exports.METHODS = {}));
module.exports.METHODS_HTTP = [
    $9ba6658eaf68bb7b$var$METHODS.DELETE,
    $9ba6658eaf68bb7b$var$METHODS.GET,
    $9ba6658eaf68bb7b$var$METHODS.HEAD,
    $9ba6658eaf68bb7b$var$METHODS.POST,
    $9ba6658eaf68bb7b$var$METHODS.PUT,
    $9ba6658eaf68bb7b$var$METHODS.CONNECT,
    $9ba6658eaf68bb7b$var$METHODS.OPTIONS,
    $9ba6658eaf68bb7b$var$METHODS.TRACE,
    $9ba6658eaf68bb7b$var$METHODS.COPY,
    $9ba6658eaf68bb7b$var$METHODS.LOCK,
    $9ba6658eaf68bb7b$var$METHODS.MKCOL,
    $9ba6658eaf68bb7b$var$METHODS.MOVE,
    $9ba6658eaf68bb7b$var$METHODS.PROPFIND,
    $9ba6658eaf68bb7b$var$METHODS.PROPPATCH,
    $9ba6658eaf68bb7b$var$METHODS.SEARCH,
    $9ba6658eaf68bb7b$var$METHODS.UNLOCK,
    $9ba6658eaf68bb7b$var$METHODS.BIND,
    $9ba6658eaf68bb7b$var$METHODS.REBIND,
    $9ba6658eaf68bb7b$var$METHODS.UNBIND,
    $9ba6658eaf68bb7b$var$METHODS.ACL,
    $9ba6658eaf68bb7b$var$METHODS.REPORT,
    $9ba6658eaf68bb7b$var$METHODS.MKACTIVITY,
    $9ba6658eaf68bb7b$var$METHODS.CHECKOUT,
    $9ba6658eaf68bb7b$var$METHODS.MERGE,
    $9ba6658eaf68bb7b$var$METHODS["M-SEARCH"],
    $9ba6658eaf68bb7b$var$METHODS.NOTIFY,
    $9ba6658eaf68bb7b$var$METHODS.SUBSCRIBE,
    $9ba6658eaf68bb7b$var$METHODS.UNSUBSCRIBE,
    $9ba6658eaf68bb7b$var$METHODS.PATCH,
    $9ba6658eaf68bb7b$var$METHODS.PURGE,
    $9ba6658eaf68bb7b$var$METHODS.MKCALENDAR,
    $9ba6658eaf68bb7b$var$METHODS.LINK,
    $9ba6658eaf68bb7b$var$METHODS.UNLINK,
    $9ba6658eaf68bb7b$var$METHODS.PRI,
    // TODO(indutny): should we allow it with HTTP?
    $9ba6658eaf68bb7b$var$METHODS.SOURCE
];
module.exports.METHODS_ICE = [
    $9ba6658eaf68bb7b$var$METHODS.SOURCE
];
module.exports.METHODS_RTSP = [
    $9ba6658eaf68bb7b$var$METHODS.OPTIONS,
    $9ba6658eaf68bb7b$var$METHODS.DESCRIBE,
    $9ba6658eaf68bb7b$var$METHODS.ANNOUNCE,
    $9ba6658eaf68bb7b$var$METHODS.SETUP,
    $9ba6658eaf68bb7b$var$METHODS.PLAY,
    $9ba6658eaf68bb7b$var$METHODS.PAUSE,
    $9ba6658eaf68bb7b$var$METHODS.TEARDOWN,
    $9ba6658eaf68bb7b$var$METHODS.GET_PARAMETER,
    $9ba6658eaf68bb7b$var$METHODS.SET_PARAMETER,
    $9ba6658eaf68bb7b$var$METHODS.REDIRECT,
    $9ba6658eaf68bb7b$var$METHODS.RECORD,
    $9ba6658eaf68bb7b$var$METHODS.FLUSH,
    // For AirPlay
    $9ba6658eaf68bb7b$var$METHODS.GET,
    $9ba6658eaf68bb7b$var$METHODS.POST
];
module.exports.METHOD_MAP = $4ip6M.enumToMap($9ba6658eaf68bb7b$var$METHODS);
module.exports.H_METHOD_MAP = {};
Object.keys(module.exports.METHOD_MAP).forEach((key)=>{
    if (/^H/.test(key)) module.exports.H_METHOD_MAP[key] = module.exports.METHOD_MAP[key];
});
var $9ba6658eaf68bb7b$var$FINISH;
(function(FINISH) {
    FINISH[FINISH["SAFE"] = 0] = "SAFE";
    FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
})($9ba6658eaf68bb7b$var$FINISH = module.exports.FINISH || (module.exports.FINISH = {}));
module.exports.ALPHA = [];
for(let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++){
    // Upper case
    module.exports.ALPHA.push(String.fromCharCode(i));
    // Lower case
    module.exports.ALPHA.push(String.fromCharCode(i + 0x20));
}
module.exports.NUM_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9
};
module.exports.HEX_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 0XA,
    B: 0XB,
    C: 0XC,
    D: 0XD,
    E: 0XE,
    F: 0XF,
    a: 0xa,
    b: 0xb,
    c: 0xc,
    d: 0xd,
    e: 0xe,
    f: 0xf
};
module.exports.NUM = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9"
];
module.exports.ALPHANUM = module.exports.ALPHA.concat(module.exports.NUM);
module.exports.MARK = [
    "-",
    "_",
    ".",
    "!",
    "~",
    "*",
    "'",
    "(",
    ")"
];
module.exports.USERINFO_CHARS = module.exports.ALPHANUM.concat(module.exports.MARK).concat([
    "%",
    ";",
    ":",
    "&",
    "=",
    "+",
    "$",
    ","
]);
// TODO(indutny): use RFC
module.exports.STRICT_URL_CHAR = [
    "!",
    '"',
    "$",
    "%",
    "&",
    "'",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "{",
    "|",
    "}",
    "~"
].concat(module.exports.ALPHANUM);
module.exports.URL_CHAR = module.exports.STRICT_URL_CHAR.concat([
    "	",
    "\f"
]);
// All characters with 0x80 bit set to 1
for(let i = 0x80; i <= 0xff; i++)module.exports.URL_CHAR.push(i);
module.exports.HEX = module.exports.NUM.concat([
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F"
]);
/* Tokens as defined by rfc 2616. Also lowercases them.
 *        token       = 1*<any CHAR except CTLs or separators>
 *     separators     = "(" | ")" | "<" | ">" | "@"
 *                    | "," | ";" | ":" | "\" | <">
 *                    | "/" | "[" | "]" | "?" | "="
 *                    | "{" | "}" | SP | HT
 */ module.exports.STRICT_TOKEN = [
    "!",
    "#",
    "$",
    "%",
    "&",
    "'",
    "*",
    "+",
    "-",
    ".",
    "^",
    "_",
    "`",
    "|",
    "~"
].concat(module.exports.ALPHANUM);
module.exports.TOKEN = module.exports.STRICT_TOKEN.concat([
    " "
]);
/*
 * Verify that a char is a valid visible (printable) US-ASCII
 * character or %x80-FF
 */ module.exports.HEADER_CHARS = [
    "	"
];
for(let i = 32; i <= 255; i++)if (i !== 127) module.exports.HEADER_CHARS.push(i);
// ',' = \x44
module.exports.CONNECTION_TOKEN_CHARS = module.exports.HEADER_CHARS.filter((c)=>c !== 44);
module.exports.MAJOR = module.exports.NUM_MAP;
module.exports.MINOR = module.exports.MAJOR;
var $9ba6658eaf68bb7b$var$HEADER_STATE;
(function(HEADER_STATE) {
    HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
})($9ba6658eaf68bb7b$var$HEADER_STATE = module.exports.HEADER_STATE || (module.exports.HEADER_STATE = {}));
module.exports.SPECIAL_HEADERS = {
    "connection": $9ba6658eaf68bb7b$var$HEADER_STATE.CONNECTION,
    "content-length": $9ba6658eaf68bb7b$var$HEADER_STATE.CONTENT_LENGTH,
    "proxy-connection": $9ba6658eaf68bb7b$var$HEADER_STATE.CONNECTION,
    "transfer-encoding": $9ba6658eaf68bb7b$var$HEADER_STATE.TRANSFER_ENCODING,
    "upgrade": $9ba6658eaf68bb7b$var$HEADER_STATE.UPGRADE
};

});
parcelRegister("4ip6M", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.enumToMap = void 0;
function $320c51d9fc862ef7$var$enumToMap(obj) {
    const res = {};
    Object.keys(obj).forEach((key)=>{
        const value = obj[key];
        if (typeof value === "number") res[key] = value;
    });
    return res;
}
module.exports.enumToMap = $320c51d9fc862ef7$var$enumToMap;

});


parcelRegister("hzQZh", function(module, exports) {
"use strict";

var $4yvUc = parcelRequire("4yvUc");
function $ccbecebbc2bfc6a1$var$createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
    return (dispatch)=>{
        return function Intercept(opts, handler) {
            const { maxRedirections: maxRedirections = defaultMaxRedirections } = opts;
            if (!maxRedirections) return dispatch(opts, handler);
            const redirectHandler = new $4yvUc(dispatch, maxRedirections, opts, handler);
            opts = {
                ...opts,
                maxRedirections: 0
            } // Stop sub dispatcher from also redirecting.
            ;
            return dispatch(opts, redirectHandler);
        };
    };
}
module.exports = $ccbecebbc2bfc6a1$var$createRedirectInterceptor;

});
parcelRegister("4yvUc", function(module, exports) {
"use strict";

var $dZB1o = parcelRequire("dZB1o");

var $9Yodq = parcelRequire("9Yodq");
var $35131628aa84e5f4$require$kBodyUsed = $9Yodq.kBodyUsed;


var $7bgOU = parcelRequire("7bgOU");
var $35131628aa84e5f4$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

const $35131628aa84e5f4$var$redirectableStatusCodes = [
    300,
    301,
    302,
    303,
    307,
    308
];
const $35131628aa84e5f4$var$kBody = Symbol("body");
class $35131628aa84e5f4$var$BodyAsyncIterable {
    constructor(body){
        this[$35131628aa84e5f4$var$kBody] = body;
        this[$35131628aa84e5f4$require$kBodyUsed] = false;
    }
    async *[Symbol.asyncIterator]() {
        $4UN2M$assert(!this[$35131628aa84e5f4$require$kBodyUsed], "disturbed");
        this[$35131628aa84e5f4$require$kBodyUsed] = true;
        yield* this[$35131628aa84e5f4$var$kBody];
    }
}
class $35131628aa84e5f4$var$RedirectHandler {
    constructor(dispatch, maxRedirections, opts, handler){
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new $35131628aa84e5f4$require$InvalidArgumentError("maxRedirections must be a positive number");
        $dZB1o.validateHandler(handler, opts.method, opts.upgrade);
        this.dispatch = dispatch;
        this.location = null;
        this.abort = null;
        this.opts = {
            ...opts,
            maxRedirections: 0
        } // opts must be a copy
        ;
        this.maxRedirections = maxRedirections;
        this.handler = handler;
        this.history = [];
        if ($dZB1o.isStream(this.opts.body)) {
            // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
            // so that it can be dispatched again?
            // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
            if ($dZB1o.bodyLength(this.opts.body) === 0) this.opts.body.on("data", function() {
                $4UN2M$assert(false);
            });
            if (typeof this.opts.body.readableDidRead !== "boolean") {
                this.opts.body[$35131628aa84e5f4$require$kBodyUsed] = false;
                $4UN2M$events.prototype.on.call(this.opts.body, "data", function() {
                    this[$35131628aa84e5f4$require$kBodyUsed] = true;
                });
            }
        } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") // TODO (fix): We can't access ReadableStream internal state
        // to determine whether or not it has been disturbed. This is just
        // a workaround.
        this.opts.body = new $35131628aa84e5f4$var$BodyAsyncIterable(this.opts.body);
        else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && $dZB1o.isIterable(this.opts.body)) // TODO: Should we allow re-using iterable if !this.opts.idempotent
        // or through some other flag?
        this.opts.body = new $35131628aa84e5f4$var$BodyAsyncIterable(this.opts.body);
    }
    onConnect(abort) {
        this.abort = abort;
        this.handler.onConnect(abort, {
            history: this.history
        });
    }
    onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket);
    }
    onError(error) {
        this.handler.onError(error);
    }
    onHeaders(statusCode, headers, resume, statusText) {
        this.location = this.history.length >= this.maxRedirections || $dZB1o.isDisturbed(this.opts.body) ? null : $35131628aa84e5f4$var$parseLocation(statusCode, headers);
        if (this.opts.origin) this.history.push(new URL(this.opts.path, this.opts.origin));
        if (!this.location) return this.handler.onHeaders(statusCode, headers, resume, statusText);
        const { origin: origin, pathname: pathname, search: search } = $dZB1o.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
        const path = search ? `${pathname}${search}` : pathname;
        // Remove headers referring to the original URL.
        // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
        // https://tools.ietf.org/html/rfc7231#section-6.4
        this.opts.headers = $35131628aa84e5f4$var$cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
        this.opts.path = path;
        this.opts.origin = origin;
        this.opts.maxRedirections = 0;
        this.opts.query = null;
        // https://tools.ietf.org/html/rfc7231#section-6.4.4
        // In case of HTTP 303, always replace method to be either HEAD or GET
        if (statusCode === 303 && this.opts.method !== "HEAD") {
            this.opts.method = "GET";
            this.opts.body = null;
        }
    }
    onData(chunk) {
        if (this.location) ;
        else return this.handler.onData(chunk);
    }
    onComplete(trailers) {
        if (this.location) {
            /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
        and neither are useful if present.

        See comment on onData method above for more detailed informations.
      */ this.location = null;
            this.abort = null;
            this.dispatch(this.opts, this);
        } else this.handler.onComplete(trailers);
    }
    onBodySent(chunk) {
        if (this.handler.onBodySent) this.handler.onBodySent(chunk);
    }
}
function $35131628aa84e5f4$var$parseLocation(statusCode, headers) {
    if ($35131628aa84e5f4$var$redirectableStatusCodes.indexOf(statusCode) === -1) return null;
    for(let i = 0; i < headers.length; i += 2){
        if (headers[i].toString().toLowerCase() === "location") return headers[i + 1];
    }
}
// https://tools.ietf.org/html/rfc7231#section-6.4.4
function $35131628aa84e5f4$var$shouldRemoveHeader(header, removeContent, unknownOrigin) {
    if (header.length === 4) return $dZB1o.headerNameToString(header) === "host";
    if (removeContent && $dZB1o.headerNameToString(header).startsWith("content-")) return true;
    if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
        const name = $dZB1o.headerNameToString(header);
        return name === "authorization" || name === "cookie" || name === "proxy-authorization";
    }
    return false;
}
// https://tools.ietf.org/html/rfc7231#section-6.4
function $35131628aa84e5f4$var$cleanRequestHeaders(headers, removeContent, unknownOrigin) {
    const ret = [];
    if (Array.isArray(headers)) {
        for(let i = 0; i < headers.length; i += 2)if (!$35131628aa84e5f4$var$shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) ret.push(headers[i], headers[i + 1]);
    } else if (headers && typeof headers === "object") {
        for (const key of Object.keys(headers))if (!$35131628aa84e5f4$var$shouldRemoveHeader(key, removeContent, unknownOrigin)) ret.push(key, headers[key]);
    } else $4UN2M$assert(headers == null, "headers must be an object or an array");
    return ret;
}
module.exports = $35131628aa84e5f4$var$RedirectHandler;

});







parcelRegister("4Vqdu", function(module, exports) {
"use strict";

var $j6vWJ = parcelRequire("j6vWJ");
var $3960d25f7dde4c28$require$staticPropertyDescriptors = $j6vWJ.staticPropertyDescriptors;
var $3960d25f7dde4c28$require$readOperation = $j6vWJ.readOperation;
var $3960d25f7dde4c28$require$fireAProgressEvent = $j6vWJ.fireAProgressEvent;

var $2Rm1z = parcelRequire("2Rm1z");
var $3960d25f7dde4c28$require$kState = $2Rm1z.kState;
var $3960d25f7dde4c28$require$kError = $2Rm1z.kError;
var $3960d25f7dde4c28$require$kResult = $2Rm1z.kResult;
var $3960d25f7dde4c28$require$kEvents = $2Rm1z.kEvents;
var $3960d25f7dde4c28$require$kAborted = $2Rm1z.kAborted;

var $7jIZt = parcelRequire("7jIZt");
var $3960d25f7dde4c28$require$webidl = $7jIZt.webidl;

var $dZB1o = parcelRequire("dZB1o");
var $3960d25f7dde4c28$require$kEnumerableProperty = $dZB1o.kEnumerableProperty;
class $3960d25f7dde4c28$var$FileReader extends EventTarget {
    constructor(){
        super();
        this[$3960d25f7dde4c28$require$kState] = "empty";
        this[$3960d25f7dde4c28$require$kResult] = null;
        this[$3960d25f7dde4c28$require$kError] = null;
        this[$3960d25f7dde4c28$require$kEvents] = {
            loadend: null,
            error: null,
            abort: null,
            load: null,
            progress: null,
            loadstart: null
        };
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
   * @param {import('buffer').Blob} blob
   */ readAsArrayBuffer(blob) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        $3960d25f7dde4c28$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsArrayBuffer"
        });
        blob = $3960d25f7dde4c28$require$webidl.converters.Blob(blob, {
            strict: false
        });
        // The readAsArrayBuffer(blob) method, when invoked,
        // must initiate a read operation for blob with ArrayBuffer.
        $3960d25f7dde4c28$require$readOperation(this, blob, "ArrayBuffer");
    }
    /**
   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
   * @param {import('buffer').Blob} blob
   */ readAsBinaryString(blob) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        $3960d25f7dde4c28$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsBinaryString"
        });
        blob = $3960d25f7dde4c28$require$webidl.converters.Blob(blob, {
            strict: false
        });
        // The readAsBinaryString(blob) method, when invoked,
        // must initiate a read operation for blob with BinaryString.
        $3960d25f7dde4c28$require$readOperation(this, blob, "BinaryString");
    }
    /**
   * @see https://w3c.github.io/FileAPI/#readAsDataText
   * @param {import('buffer').Blob} blob
   * @param {string?} encoding
   */ readAsText(blob, encoding) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        $3960d25f7dde4c28$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsText"
        });
        blob = $3960d25f7dde4c28$require$webidl.converters.Blob(blob, {
            strict: false
        });
        if (encoding !== undefined) encoding = $3960d25f7dde4c28$require$webidl.converters.DOMString(encoding);
        // The readAsText(blob, encoding) method, when invoked,
        // must initiate a read operation for blob with Text and encoding.
        $3960d25f7dde4c28$require$readOperation(this, blob, "Text", encoding);
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
   * @param {import('buffer').Blob} blob
   */ readAsDataURL(blob) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        $3960d25f7dde4c28$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsDataURL"
        });
        blob = $3960d25f7dde4c28$require$webidl.converters.Blob(blob, {
            strict: false
        });
        // The readAsDataURL(blob) method, when invoked, must
        // initiate a read operation for blob with DataURL.
        $3960d25f7dde4c28$require$readOperation(this, blob, "DataURL");
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dfn-abort
   */ abort() {
        // 1. If this's state is "empty" or if this's state is
        //    "done" set this's result to null and terminate
        //    this algorithm.
        if (this[$3960d25f7dde4c28$require$kState] === "empty" || this[$3960d25f7dde4c28$require$kState] === "done") {
            this[$3960d25f7dde4c28$require$kResult] = null;
            return;
        }
        // 2. If this's state is "loading" set this's state to
        //    "done" and set this's result to null.
        if (this[$3960d25f7dde4c28$require$kState] === "loading") {
            this[$3960d25f7dde4c28$require$kState] = "done";
            this[$3960d25f7dde4c28$require$kResult] = null;
        }
        // 3. If there are any tasks from this on the file reading
        //    task source in an affiliated task queue, then remove
        //    those tasks from that task queue.
        this[$3960d25f7dde4c28$require$kAborted] = true;
        // 4. Terminate the algorithm for the read method being processed.
        // TODO
        // 5. Fire a progress event called abort at this.
        $3960d25f7dde4c28$require$fireAProgressEvent("abort", this);
        // 6. If this's state is not "loading", fire a progress
        //    event called loadend at this.
        if (this[$3960d25f7dde4c28$require$kState] !== "loading") $3960d25f7dde4c28$require$fireAProgressEvent("loadend", this);
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
   */ get readyState() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        switch(this[$3960d25f7dde4c28$require$kState]){
            case "empty":
                return this.EMPTY;
            case "loading":
                return this.LOADING;
            case "done":
                return this.DONE;
        }
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
   */ get result() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        // The result attribute’s getter, when invoked, must return
        // this's result.
        return this[$3960d25f7dde4c28$require$kResult];
    }
    /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
   */ get error() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        // The error attribute’s getter, when invoked, must return
        // this's error.
        return this[$3960d25f7dde4c28$require$kError];
    }
    get onloadend() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        return this[$3960d25f7dde4c28$require$kEvents].loadend;
    }
    set onloadend(fn) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        if (this[$3960d25f7dde4c28$require$kEvents].loadend) this.removeEventListener("loadend", this[$3960d25f7dde4c28$require$kEvents].loadend);
        if (typeof fn === "function") {
            this[$3960d25f7dde4c28$require$kEvents].loadend = fn;
            this.addEventListener("loadend", fn);
        } else this[$3960d25f7dde4c28$require$kEvents].loadend = null;
    }
    get onerror() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        return this[$3960d25f7dde4c28$require$kEvents].error;
    }
    set onerror(fn) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        if (this[$3960d25f7dde4c28$require$kEvents].error) this.removeEventListener("error", this[$3960d25f7dde4c28$require$kEvents].error);
        if (typeof fn === "function") {
            this[$3960d25f7dde4c28$require$kEvents].error = fn;
            this.addEventListener("error", fn);
        } else this[$3960d25f7dde4c28$require$kEvents].error = null;
    }
    get onloadstart() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        return this[$3960d25f7dde4c28$require$kEvents].loadstart;
    }
    set onloadstart(fn) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        if (this[$3960d25f7dde4c28$require$kEvents].loadstart) this.removeEventListener("loadstart", this[$3960d25f7dde4c28$require$kEvents].loadstart);
        if (typeof fn === "function") {
            this[$3960d25f7dde4c28$require$kEvents].loadstart = fn;
            this.addEventListener("loadstart", fn);
        } else this[$3960d25f7dde4c28$require$kEvents].loadstart = null;
    }
    get onprogress() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        return this[$3960d25f7dde4c28$require$kEvents].progress;
    }
    set onprogress(fn) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        if (this[$3960d25f7dde4c28$require$kEvents].progress) this.removeEventListener("progress", this[$3960d25f7dde4c28$require$kEvents].progress);
        if (typeof fn === "function") {
            this[$3960d25f7dde4c28$require$kEvents].progress = fn;
            this.addEventListener("progress", fn);
        } else this[$3960d25f7dde4c28$require$kEvents].progress = null;
    }
    get onload() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        return this[$3960d25f7dde4c28$require$kEvents].load;
    }
    set onload(fn) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        if (this[$3960d25f7dde4c28$require$kEvents].load) this.removeEventListener("load", this[$3960d25f7dde4c28$require$kEvents].load);
        if (typeof fn === "function") {
            this[$3960d25f7dde4c28$require$kEvents].load = fn;
            this.addEventListener("load", fn);
        } else this[$3960d25f7dde4c28$require$kEvents].load = null;
    }
    get onabort() {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        return this[$3960d25f7dde4c28$require$kEvents].abort;
    }
    set onabort(fn) {
        $3960d25f7dde4c28$require$webidl.brandCheck(this, $3960d25f7dde4c28$var$FileReader);
        if (this[$3960d25f7dde4c28$require$kEvents].abort) this.removeEventListener("abort", this[$3960d25f7dde4c28$require$kEvents].abort);
        if (typeof fn === "function") {
            this[$3960d25f7dde4c28$require$kEvents].abort = fn;
            this.addEventListener("abort", fn);
        } else this[$3960d25f7dde4c28$require$kEvents].abort = null;
    }
}
// https://w3c.github.io/FileAPI/#dom-filereader-empty
$3960d25f7dde4c28$var$FileReader.EMPTY = $3960d25f7dde4c28$var$FileReader.prototype.EMPTY = 0;
// https://w3c.github.io/FileAPI/#dom-filereader-loading
$3960d25f7dde4c28$var$FileReader.LOADING = $3960d25f7dde4c28$var$FileReader.prototype.LOADING = 1;
// https://w3c.github.io/FileAPI/#dom-filereader-done
$3960d25f7dde4c28$var$FileReader.DONE = $3960d25f7dde4c28$var$FileReader.prototype.DONE = 2;
Object.defineProperties($3960d25f7dde4c28$var$FileReader.prototype, {
    EMPTY: $3960d25f7dde4c28$require$staticPropertyDescriptors,
    LOADING: $3960d25f7dde4c28$require$staticPropertyDescriptors,
    DONE: $3960d25f7dde4c28$require$staticPropertyDescriptors,
    readAsArrayBuffer: $3960d25f7dde4c28$require$kEnumerableProperty,
    readAsBinaryString: $3960d25f7dde4c28$require$kEnumerableProperty,
    readAsText: $3960d25f7dde4c28$require$kEnumerableProperty,
    readAsDataURL: $3960d25f7dde4c28$require$kEnumerableProperty,
    abort: $3960d25f7dde4c28$require$kEnumerableProperty,
    readyState: $3960d25f7dde4c28$require$kEnumerableProperty,
    result: $3960d25f7dde4c28$require$kEnumerableProperty,
    error: $3960d25f7dde4c28$require$kEnumerableProperty,
    onloadstart: $3960d25f7dde4c28$require$kEnumerableProperty,
    onprogress: $3960d25f7dde4c28$require$kEnumerableProperty,
    onload: $3960d25f7dde4c28$require$kEnumerableProperty,
    onabort: $3960d25f7dde4c28$require$kEnumerableProperty,
    onerror: $3960d25f7dde4c28$require$kEnumerableProperty,
    onloadend: $3960d25f7dde4c28$require$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "FileReader",
        writable: false,
        enumerable: false,
        configurable: true
    }
});
Object.defineProperties($3960d25f7dde4c28$var$FileReader, {
    EMPTY: $3960d25f7dde4c28$require$staticPropertyDescriptors,
    LOADING: $3960d25f7dde4c28$require$staticPropertyDescriptors,
    DONE: $3960d25f7dde4c28$require$staticPropertyDescriptors
});
module.exports = {
    FileReader: $3960d25f7dde4c28$var$FileReader
};

});
parcelRegister("j6vWJ", function(module, exports) {
"use strict";

var $2Rm1z = parcelRequire("2Rm1z");
var $de875bb881a804af$require$kState = $2Rm1z.kState;
var $de875bb881a804af$require$kError = $2Rm1z.kError;
var $de875bb881a804af$require$kResult = $2Rm1z.kResult;
var $de875bb881a804af$require$kAborted = $2Rm1z.kAborted;
var $de875bb881a804af$require$kLastProgressEventFired = $2Rm1z.kLastProgressEventFired;

var $9g7mF = parcelRequire("9g7mF");
var $de875bb881a804af$require$ProgressEvent = $9g7mF.ProgressEvent;

var $8EWtK = parcelRequire("8EWtK");
var $de875bb881a804af$require$getEncoding = $8EWtK.getEncoding;

var $fUNmM = parcelRequire("fUNmM");
var $de875bb881a804af$require$DOMException = $fUNmM.DOMException;

var $h1hYV = parcelRequire("h1hYV");
var $de875bb881a804af$require$serializeAMimeType = $h1hYV.serializeAMimeType;
var $de875bb881a804af$require$parseMIMEType = $h1hYV.parseMIMEType;

var $de875bb881a804af$require$types = $4UN2M$util.types;

var $de875bb881a804af$require$StringDecoder = $4UN2M$string_decoder.StringDecoder;

var $de875bb881a804af$require$btoa = $4UN2M$buffer.btoa;
/** @type {PropertyDescriptor} */ const $de875bb881a804af$var$staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
};
/**
 * @see https://w3c.github.io/FileAPI/#readOperation
 * @param {import('./filereader').FileReader} fr
 * @param {import('buffer').Blob} blob
 * @param {string} type
 * @param {string?} encodingName
 */ function $de875bb881a804af$var$readOperation(fr, blob, type, encodingName) {
    // 1. If fr’s state is "loading", throw an InvalidStateError
    //    DOMException.
    if (fr[$de875bb881a804af$require$kState] === "loading") throw new $de875bb881a804af$require$DOMException("Invalid state", "InvalidStateError");
    // 2. Set fr’s state to "loading".
    fr[$de875bb881a804af$require$kState] = "loading";
    // 3. Set fr’s result to null.
    fr[$de875bb881a804af$require$kResult] = null;
    // 4. Set fr’s error to null.
    fr[$de875bb881a804af$require$kError] = null;
    // 5. Let stream be the result of calling get stream on blob.
    /** @type {import('stream/web').ReadableStream} */ const stream = blob.stream();
    // 6. Let reader be the result of getting a reader from stream.
    const reader = stream.getReader();
    // 7. Let bytes be an empty byte sequence.
    /** @type {Uint8Array[]} */ const bytes = [];
    // 8. Let chunkPromise be the result of reading a chunk from
    //    stream with reader.
    let chunkPromise = reader.read();
    // 9. Let isFirstChunk be true.
    let isFirstChunk = true;
    (async ()=>{
        while(!fr[$de875bb881a804af$require$kAborted])// 1. Wait for chunkPromise to be fulfilled or rejected.
        try {
            const { done: done, value: value } = await chunkPromise;
            // 2. If chunkPromise is fulfilled, and isFirstChunk is
            //    true, queue a task to fire a progress event called
            //    loadstart at fr.
            if (isFirstChunk && !fr[$de875bb881a804af$require$kAborted]) queueMicrotask(()=>{
                $de875bb881a804af$var$fireAProgressEvent("loadstart", fr);
            });
            // 3. Set isFirstChunk to false.
            isFirstChunk = false;
            // 4. If chunkPromise is fulfilled with an object whose
            //    done property is false and whose value property is
            //    a Uint8Array object, run these steps:
            if (!done && $de875bb881a804af$require$types.isUint8Array(value)) {
                // 1. Let bs be the byte sequence represented by the
                //    Uint8Array object.
                // 2. Append bs to bytes.
                bytes.push(value);
                // 3. If roughly 50ms have passed since these steps
                //    were last invoked, queue a task to fire a
                //    progress event called progress at fr.
                if ((fr[$de875bb881a804af$require$kLastProgressEventFired] === undefined || Date.now() - fr[$de875bb881a804af$require$kLastProgressEventFired] >= 50) && !fr[$de875bb881a804af$require$kAborted]) {
                    fr[$de875bb881a804af$require$kLastProgressEventFired] = Date.now();
                    queueMicrotask(()=>{
                        $de875bb881a804af$var$fireAProgressEvent("progress", fr);
                    });
                }
                // 4. Set chunkPromise to the result of reading a
                //    chunk from stream with reader.
                chunkPromise = reader.read();
            } else if (done) {
                // 5. Otherwise, if chunkPromise is fulfilled with an
                //    object whose done property is true, queue a task
                //    to run the following steps and abort this algorithm:
                queueMicrotask(()=>{
                    // 1. Set fr’s state to "done".
                    fr[$de875bb881a804af$require$kState] = "done";
                    // 2. Let result be the result of package data given
                    //    bytes, type, blob’s type, and encodingName.
                    try {
                        const result = $de875bb881a804af$var$packageData(bytes, type, blob.type, encodingName);
                        // 4. Else:
                        if (fr[$de875bb881a804af$require$kAborted]) return;
                        // 1. Set fr’s result to result.
                        fr[$de875bb881a804af$require$kResult] = result;
                        // 2. Fire a progress event called load at the fr.
                        $de875bb881a804af$var$fireAProgressEvent("load", fr);
                    } catch (error) {
                        // 3. If package data threw an exception error:
                        // 1. Set fr’s error to error.
                        fr[$de875bb881a804af$require$kError] = error;
                        // 2. Fire a progress event called error at fr.
                        $de875bb881a804af$var$fireAProgressEvent("error", fr);
                    }
                    // 5. If fr’s state is not "loading", fire a progress
                    //    event called loadend at the fr.
                    if (fr[$de875bb881a804af$require$kState] !== "loading") $de875bb881a804af$var$fireAProgressEvent("loadend", fr);
                });
                break;
            }
        } catch (error) {
            if (fr[$de875bb881a804af$require$kAborted]) return;
            // 6. Otherwise, if chunkPromise is rejected with an
            //    error error, queue a task to run the following
            //    steps and abort this algorithm:
            queueMicrotask(()=>{
                // 1. Set fr’s state to "done".
                fr[$de875bb881a804af$require$kState] = "done";
                // 2. Set fr’s error to error.
                fr[$de875bb881a804af$require$kError] = error;
                // 3. Fire a progress event called error at fr.
                $de875bb881a804af$var$fireAProgressEvent("error", fr);
                // 4. If fr’s state is not "loading", fire a progress
                //    event called loadend at fr.
                if (fr[$de875bb881a804af$require$kState] !== "loading") $de875bb881a804af$var$fireAProgressEvent("loadend", fr);
            });
            break;
        }
    })();
}
/**
 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e The name of the event
 * @param {import('./filereader').FileReader} reader
 */ function $de875bb881a804af$var$fireAProgressEvent(e, reader) {
    // The progress event e does not bubble. e.bubbles must be false
    // The progress event e is NOT cancelable. e.cancelable must be false
    const event = new $de875bb881a804af$require$ProgressEvent(e, {
        bubbles: false,
        cancelable: false
    });
    reader.dispatchEvent(event);
}
/**
 * @see https://w3c.github.io/FileAPI/#blob-package-data
 * @param {Uint8Array[]} bytes
 * @param {string} type
 * @param {string?} mimeType
 * @param {string?} encodingName
 */ function $de875bb881a804af$var$packageData(bytes, type, mimeType, encodingName) {
    // 1. A Blob has an associated package data algorithm, given
    //    bytes, a type, a optional mimeType, and a optional
    //    encodingName, which switches on type and runs the
    //    associated steps:
    switch(type){
        case "DataURL":
            {
                // 1. Return bytes as a DataURL [RFC2397] subject to
                //    the considerations below:
                //  * Use mimeType as part of the Data URL if it is
                //    available in keeping with the Data URL
                //    specification [RFC2397].
                //  * If mimeType is not available return a Data URL
                //    without a media-type. [RFC2397].
                // https://datatracker.ietf.org/doc/html/rfc2397#section-3
                // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
                // mediatype  := [ type "/" subtype ] *( ";" parameter )
                // data       := *urlchar
                // parameter  := attribute "=" value
                let dataURL = "data:";
                const parsed = $de875bb881a804af$require$parseMIMEType(mimeType || "application/octet-stream");
                if (parsed !== "failure") dataURL += $de875bb881a804af$require$serializeAMimeType(parsed);
                dataURL += ";base64,";
                const decoder = new $de875bb881a804af$require$StringDecoder("latin1");
                for (const chunk of bytes)dataURL += $de875bb881a804af$require$btoa(decoder.write(chunk));
                dataURL += $de875bb881a804af$require$btoa(decoder.end());
                return dataURL;
            }
        case "Text":
            {
                // 1. Let encoding be failure
                let encoding = "failure";
                // 2. If the encodingName is present, set encoding to the
                //    result of getting an encoding from encodingName.
                if (encodingName) encoding = $de875bb881a804af$require$getEncoding(encodingName);
                // 3. If encoding is failure, and mimeType is present:
                if (encoding === "failure" && mimeType) {
                    // 1. Let type be the result of parse a MIME type
                    //    given mimeType.
                    const type = $de875bb881a804af$require$parseMIMEType(mimeType);
                    // 2. If type is not failure, set encoding to the result
                    //    of getting an encoding from type’s parameters["charset"].
                    if (type !== "failure") encoding = $de875bb881a804af$require$getEncoding(type.parameters.get("charset"));
                }
                // 4. If encoding is failure, then set encoding to UTF-8.
                if (encoding === "failure") encoding = "UTF-8";
                // 5. Decode bytes using fallback encoding encoding, and
                //    return the result.
                return $de875bb881a804af$var$decode(bytes, encoding);
            }
        case "ArrayBuffer":
            {
                // Return a new ArrayBuffer whose contents are bytes.
                const sequence = $de875bb881a804af$var$combineByteSequences(bytes);
                return sequence.buffer;
            }
        case "BinaryString":
            {
                // Return bytes as a binary string, in which every byte
                //  is represented by a code unit of equal value [0..255].
                let binaryString = "";
                const decoder = new $de875bb881a804af$require$StringDecoder("latin1");
                for (const chunk of bytes)binaryString += decoder.write(chunk);
                binaryString += decoder.end();
                return binaryString;
            }
    }
}
/**
 * @see https://encoding.spec.whatwg.org/#decode
 * @param {Uint8Array[]} ioQueue
 * @param {string} encoding
 */ function $de875bb881a804af$var$decode(ioQueue, encoding) {
    const bytes = $de875bb881a804af$var$combineByteSequences(ioQueue);
    // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
    const BOMEncoding = $de875bb881a804af$var$BOMSniffing(bytes);
    let slice = 0;
    // 2. If BOMEncoding is non-null:
    if (BOMEncoding !== null) {
        // 1. Set encoding to BOMEncoding.
        encoding = BOMEncoding;
        // 2. Read three bytes from ioQueue, if BOMEncoding is
        //    UTF-8; otherwise read two bytes.
        //    (Do nothing with those bytes.)
        slice = BOMEncoding === "UTF-8" ? 3 : 2;
    }
    // 3. Process a queue with an instance of encoding’s
    //    decoder, ioQueue, output, and "replacement".
    // 4. Return output.
    const sliced = bytes.slice(slice);
    return new TextDecoder(encoding).decode(sliced);
}
/**
 * @see https://encoding.spec.whatwg.org/#bom-sniff
 * @param {Uint8Array} ioQueue
 */ function $de875bb881a804af$var$BOMSniffing(ioQueue) {
    // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
    //    converted to a byte sequence.
    const [a, b, c] = ioQueue;
    // 2. For each of the rows in the table below, starting with
    //    the first one and going down, if BOM starts with the
    //    bytes given in the first column, then return the
    //    encoding given in the cell in the second column of that
    //    row. Otherwise, return null.
    if (a === 0xEF && b === 0xBB && c === 0xBF) return "UTF-8";
    else if (a === 0xFE && b === 0xFF) return "UTF-16BE";
    else if (a === 0xFF && b === 0xFE) return "UTF-16LE";
    return null;
}
/**
 * @param {Uint8Array[]} sequences
 */ function $de875bb881a804af$var$combineByteSequences(sequences) {
    const size = sequences.reduce((a, b)=>{
        return a + b.byteLength;
    }, 0);
    let offset = 0;
    return sequences.reduce((a, b)=>{
        a.set(b, offset);
        offset += b.byteLength;
        return a;
    }, new Uint8Array(size));
}
module.exports = {
    staticPropertyDescriptors: $de875bb881a804af$var$staticPropertyDescriptors,
    readOperation: $de875bb881a804af$var$readOperation,
    fireAProgressEvent: $de875bb881a804af$var$fireAProgressEvent
};

});
parcelRegister("2Rm1z", function(module, exports) {
"use strict";
module.exports = {
    kState: Symbol("FileReader state"),
    kResult: Symbol("FileReader result"),
    kError: Symbol("FileReader error"),
    kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
    kEvents: Symbol("FileReader events"),
    kAborted: Symbol("FileReader aborted")
};

});

parcelRegister("9g7mF", function(module, exports) {
"use strict";

var $7jIZt = parcelRequire("7jIZt");
var $6bdb521d138052e8$require$webidl = $7jIZt.webidl;
const $6bdb521d138052e8$var$kState = Symbol("ProgressEvent state");
/**
 * @see https://xhr.spec.whatwg.org/#progressevent
 */ class $6bdb521d138052e8$var$ProgressEvent extends Event {
    constructor(type, eventInitDict = {}){
        type = $6bdb521d138052e8$require$webidl.converters.DOMString(type);
        eventInitDict = $6bdb521d138052e8$require$webidl.converters.ProgressEventInit(eventInitDict ?? {});
        super(type, eventInitDict);
        this[$6bdb521d138052e8$var$kState] = {
            lengthComputable: eventInitDict.lengthComputable,
            loaded: eventInitDict.loaded,
            total: eventInitDict.total
        };
    }
    get lengthComputable() {
        $6bdb521d138052e8$require$webidl.brandCheck(this, $6bdb521d138052e8$var$ProgressEvent);
        return this[$6bdb521d138052e8$var$kState].lengthComputable;
    }
    get loaded() {
        $6bdb521d138052e8$require$webidl.brandCheck(this, $6bdb521d138052e8$var$ProgressEvent);
        return this[$6bdb521d138052e8$var$kState].loaded;
    }
    get total() {
        $6bdb521d138052e8$require$webidl.brandCheck(this, $6bdb521d138052e8$var$ProgressEvent);
        return this[$6bdb521d138052e8$var$kState].total;
    }
}
$6bdb521d138052e8$require$webidl.converters.ProgressEventInit = $6bdb521d138052e8$require$webidl.dictionaryConverter([
    {
        key: "lengthComputable",
        converter: $6bdb521d138052e8$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "loaded",
        converter: $6bdb521d138052e8$require$webidl.converters["unsigned long long"],
        defaultValue: 0
    },
    {
        key: "total",
        converter: $6bdb521d138052e8$require$webidl.converters["unsigned long long"],
        defaultValue: 0
    },
    {
        key: "bubbles",
        converter: $6bdb521d138052e8$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "cancelable",
        converter: $6bdb521d138052e8$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "composed",
        converter: $6bdb521d138052e8$require$webidl.converters.boolean,
        defaultValue: false
    }
]);
module.exports = {
    ProgressEvent: $6bdb521d138052e8$var$ProgressEvent
};

});

parcelRegister("8EWtK", function(module, exports) {
"use strict";
/**
 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
 * @param {string|undefined} label
 */ function $64df6bdaa0aff41c$var$getEncoding(label) {
    if (!label) return "failure";
    // 1. Remove any leading and trailing ASCII whitespace from label.
    // 2. If label is an ASCII case-insensitive match for any of the
    //    labels listed in the table below, then return the
    //    corresponding encoding; otherwise return failure.
    switch(label.trim().toLowerCase()){
        case "unicode-1-1-utf-8":
        case "unicode11utf8":
        case "unicode20utf8":
        case "utf-8":
        case "utf8":
        case "x-unicode20utf8":
            return "UTF-8";
        case "866":
        case "cp866":
        case "csibm866":
        case "ibm866":
            return "IBM866";
        case "csisolatin2":
        case "iso-8859-2":
        case "iso-ir-101":
        case "iso8859-2":
        case "iso88592":
        case "iso_8859-2":
        case "iso_8859-2:1987":
        case "l2":
        case "latin2":
            return "ISO-8859-2";
        case "csisolatin3":
        case "iso-8859-3":
        case "iso-ir-109":
        case "iso8859-3":
        case "iso88593":
        case "iso_8859-3":
        case "iso_8859-3:1988":
        case "l3":
        case "latin3":
            return "ISO-8859-3";
        case "csisolatin4":
        case "iso-8859-4":
        case "iso-ir-110":
        case "iso8859-4":
        case "iso88594":
        case "iso_8859-4":
        case "iso_8859-4:1988":
        case "l4":
        case "latin4":
            return "ISO-8859-4";
        case "csisolatincyrillic":
        case "cyrillic":
        case "iso-8859-5":
        case "iso-ir-144":
        case "iso8859-5":
        case "iso88595":
        case "iso_8859-5":
        case "iso_8859-5:1988":
            return "ISO-8859-5";
        case "arabic":
        case "asmo-708":
        case "csiso88596e":
        case "csiso88596i":
        case "csisolatinarabic":
        case "ecma-114":
        case "iso-8859-6":
        case "iso-8859-6-e":
        case "iso-8859-6-i":
        case "iso-ir-127":
        case "iso8859-6":
        case "iso88596":
        case "iso_8859-6":
        case "iso_8859-6:1987":
            return "ISO-8859-6";
        case "csisolatingreek":
        case "ecma-118":
        case "elot_928":
        case "greek":
        case "greek8":
        case "iso-8859-7":
        case "iso-ir-126":
        case "iso8859-7":
        case "iso88597":
        case "iso_8859-7":
        case "iso_8859-7:1987":
        case "sun_eu_greek":
            return "ISO-8859-7";
        case "csiso88598e":
        case "csisolatinhebrew":
        case "hebrew":
        case "iso-8859-8":
        case "iso-8859-8-e":
        case "iso-ir-138":
        case "iso8859-8":
        case "iso88598":
        case "iso_8859-8":
        case "iso_8859-8:1988":
        case "visual":
            return "ISO-8859-8";
        case "csiso88598i":
        case "iso-8859-8-i":
        case "logical":
            return "ISO-8859-8-I";
        case "csisolatin6":
        case "iso-8859-10":
        case "iso-ir-157":
        case "iso8859-10":
        case "iso885910":
        case "l6":
        case "latin6":
            return "ISO-8859-10";
        case "iso-8859-13":
        case "iso8859-13":
        case "iso885913":
            return "ISO-8859-13";
        case "iso-8859-14":
        case "iso8859-14":
        case "iso885914":
            return "ISO-8859-14";
        case "csisolatin9":
        case "iso-8859-15":
        case "iso8859-15":
        case "iso885915":
        case "iso_8859-15":
        case "l9":
            return "ISO-8859-15";
        case "iso-8859-16":
            return "ISO-8859-16";
        case "cskoi8r":
        case "koi":
        case "koi8":
        case "koi8-r":
        case "koi8_r":
            return "KOI8-R";
        case "koi8-ru":
        case "koi8-u":
            return "KOI8-U";
        case "csmacintosh":
        case "mac":
        case "macintosh":
        case "x-mac-roman":
            return "macintosh";
        case "iso-8859-11":
        case "iso8859-11":
        case "iso885911":
        case "tis-620":
        case "windows-874":
            return "windows-874";
        case "cp1250":
        case "windows-1250":
        case "x-cp1250":
            return "windows-1250";
        case "cp1251":
        case "windows-1251":
        case "x-cp1251":
            return "windows-1251";
        case "ansi_x3.4-1968":
        case "ascii":
        case "cp1252":
        case "cp819":
        case "csisolatin1":
        case "ibm819":
        case "iso-8859-1":
        case "iso-ir-100":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "iso_8859-1:1987":
        case "l1":
        case "latin1":
        case "us-ascii":
        case "windows-1252":
        case "x-cp1252":
            return "windows-1252";
        case "cp1253":
        case "windows-1253":
        case "x-cp1253":
            return "windows-1253";
        case "cp1254":
        case "csisolatin5":
        case "iso-8859-9":
        case "iso-ir-148":
        case "iso8859-9":
        case "iso88599":
        case "iso_8859-9":
        case "iso_8859-9:1989":
        case "l5":
        case "latin5":
        case "windows-1254":
        case "x-cp1254":
            return "windows-1254";
        case "cp1255":
        case "windows-1255":
        case "x-cp1255":
            return "windows-1255";
        case "cp1256":
        case "windows-1256":
        case "x-cp1256":
            return "windows-1256";
        case "cp1257":
        case "windows-1257":
        case "x-cp1257":
            return "windows-1257";
        case "cp1258":
        case "windows-1258":
        case "x-cp1258":
            return "windows-1258";
        case "x-mac-cyrillic":
        case "x-mac-ukrainian":
            return "x-mac-cyrillic";
        case "chinese":
        case "csgb2312":
        case "csiso58gb231280":
        case "gb2312":
        case "gb_2312":
        case "gb_2312-80":
        case "gbk":
        case "iso-ir-58":
        case "x-gbk":
            return "GBK";
        case "gb18030":
            return "gb18030";
        case "big5":
        case "big5-hkscs":
        case "cn-big5":
        case "csbig5":
        case "x-x-big5":
            return "Big5";
        case "cseucpkdfmtjapanese":
        case "euc-jp":
        case "x-euc-jp":
            return "EUC-JP";
        case "csiso2022jp":
        case "iso-2022-jp":
            return "ISO-2022-JP";
        case "csshiftjis":
        case "ms932":
        case "ms_kanji":
        case "shift-jis":
        case "shift_jis":
        case "sjis":
        case "windows-31j":
        case "x-sjis":
            return "Shift_JIS";
        case "cseuckr":
        case "csksc56011987":
        case "euc-kr":
        case "iso-ir-149":
        case "korean":
        case "ks_c_5601-1987":
        case "ks_c_5601-1989":
        case "ksc5601":
        case "ksc_5601":
        case "windows-949":
            return "EUC-KR";
        case "csiso2022kr":
        case "hz-gb-2312":
        case "iso-2022-cn":
        case "iso-2022-cn-ext":
        case "iso-2022-kr":
        case "replacement":
            return "replacement";
        case "unicodefffe":
        case "utf-16be":
            return "UTF-16BE";
        case "csunicode":
        case "iso-10646-ucs-2":
        case "ucs-2":
        case "unicode":
        case "unicodefeff":
        case "utf-16":
        case "utf-16le":
            return "UTF-16LE";
        case "x-user-defined":
            return "x-user-defined";
        default:
            return "failure";
    }
}
module.exports = {
    getEncoding: $64df6bdaa0aff41c$var$getEncoding
};

});



parcelRegister("3blyY", function(module, exports) {
"use strict";

var $hzb0i = parcelRequire("hzb0i");
var $2513202a653c56e7$require$kConstruct = $hzb0i.kConstruct;

var $534Kr = parcelRequire("534Kr");
var $2513202a653c56e7$require$Cache = $534Kr.Cache;

var $7jIZt = parcelRequire("7jIZt");
var $2513202a653c56e7$require$webidl = $7jIZt.webidl;

var $dZB1o = parcelRequire("dZB1o");
var $2513202a653c56e7$require$kEnumerableProperty = $dZB1o.kEnumerableProperty;
class $2513202a653c56e7$var$CacheStorage {
    /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
   * @type {Map<string, import('./cache').requestResponseList}
   */ #caches = new Map();
    constructor(){
        if (arguments[0] !== $2513202a653c56e7$require$kConstruct) $2513202a653c56e7$require$webidl.illegalConstructor();
    }
    async match(request, options = {}) {
        $2513202a653c56e7$require$webidl.brandCheck(this, $2513202a653c56e7$var$CacheStorage);
        $2513202a653c56e7$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.match"
        });
        request = $2513202a653c56e7$require$webidl.converters.RequestInfo(request);
        options = $2513202a653c56e7$require$webidl.converters.MultiCacheQueryOptions(options);
        // 1.
        if (options.cacheName != null) // 1.1.1.1
        {
            if (this.#caches.has(options.cacheName)) {
                // 1.1.1.1.1
                const cacheList = this.#caches.get(options.cacheName);
                const cache = new $2513202a653c56e7$require$Cache($2513202a653c56e7$require$kConstruct, cacheList);
                return await cache.match(request, options);
            }
        } else // 2.2
        for (const cacheList of this.#caches.values()){
            const cache = new $2513202a653c56e7$require$Cache($2513202a653c56e7$require$kConstruct, cacheList);
            // 2.2.1.2
            const response = await cache.match(request, options);
            if (response !== undefined) return response;
        }
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */ async has(cacheName) {
        $2513202a653c56e7$require$webidl.brandCheck(this, $2513202a653c56e7$var$CacheStorage);
        $2513202a653c56e7$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.has"
        });
        cacheName = $2513202a653c56e7$require$webidl.converters.DOMString(cacheName);
        // 2.1.1
        // 2.2
        return this.#caches.has(cacheName);
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
   * @param {string} cacheName
   * @returns {Promise<Cache>}
   */ async open(cacheName) {
        $2513202a653c56e7$require$webidl.brandCheck(this, $2513202a653c56e7$var$CacheStorage);
        $2513202a653c56e7$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.open"
        });
        cacheName = $2513202a653c56e7$require$webidl.converters.DOMString(cacheName);
        // 2.1
        if (this.#caches.has(cacheName)) {
            // await caches.open('v1') !== await caches.open('v1')
            // 2.1.1
            const cache = this.#caches.get(cacheName);
            // 2.1.1.1
            return new $2513202a653c56e7$require$Cache($2513202a653c56e7$require$kConstruct, cache);
        }
        // 2.2
        const cache = [];
        // 2.3
        this.#caches.set(cacheName, cache);
        // 2.4
        return new $2513202a653c56e7$require$Cache($2513202a653c56e7$require$kConstruct, cache);
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */ async delete(cacheName) {
        $2513202a653c56e7$require$webidl.brandCheck(this, $2513202a653c56e7$var$CacheStorage);
        $2513202a653c56e7$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.delete"
        });
        cacheName = $2513202a653c56e7$require$webidl.converters.DOMString(cacheName);
        return this.#caches.delete(cacheName);
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
   * @returns {string[]}
   */ async keys() {
        $2513202a653c56e7$require$webidl.brandCheck(this, $2513202a653c56e7$var$CacheStorage);
        // 2.1
        const keys = this.#caches.keys();
        // 2.2
        return [
            ...keys
        ];
    }
}
Object.defineProperties($2513202a653c56e7$var$CacheStorage.prototype, {
    [Symbol.toStringTag]: {
        value: "CacheStorage",
        configurable: true
    },
    match: $2513202a653c56e7$require$kEnumerableProperty,
    has: $2513202a653c56e7$require$kEnumerableProperty,
    open: $2513202a653c56e7$require$kEnumerableProperty,
    delete: $2513202a653c56e7$require$kEnumerableProperty,
    keys: $2513202a653c56e7$require$kEnumerableProperty
});
module.exports = {
    CacheStorage: $2513202a653c56e7$var$CacheStorage
};

});
parcelRegister("hzb0i", function(module, exports) {
"use strict";

module.exports = {
    kConstruct: (parcelRequire("9Yodq")).kConstruct
};

});

parcelRegister("534Kr", function(module, exports) {
"use strict";

var $hzb0i = parcelRequire("hzb0i");
var $3ad0ea6d06b0b13b$require$kConstruct = $hzb0i.kConstruct;

var $fgNuq = parcelRequire("fgNuq");
var $3ad0ea6d06b0b13b$require$urlEquals = $fgNuq.urlEquals;
var $3ad0ea6d06b0b13b$require$getFieldValues = $fgNuq.fieldValues;

var $dZB1o = parcelRequire("dZB1o");
var $3ad0ea6d06b0b13b$require$kEnumerableProperty = $dZB1o.kEnumerableProperty;
var $3ad0ea6d06b0b13b$require$isDisturbed = $dZB1o.isDisturbed;

var $9Yodq = parcelRequire("9Yodq");
var $3ad0ea6d06b0b13b$require$kHeadersList = $9Yodq.kHeadersList;

var $7jIZt = parcelRequire("7jIZt");
var $3ad0ea6d06b0b13b$require$webidl = $7jIZt.webidl;

var $PC2zs = parcelRequire("PC2zs");
var $3ad0ea6d06b0b13b$require$Response = $PC2zs.Response;
var $3ad0ea6d06b0b13b$require$cloneResponse = $PC2zs.cloneResponse;

var $73TbT = parcelRequire("73TbT");
var $3ad0ea6d06b0b13b$require$Request = $73TbT.Request;

var $2cSZe = parcelRequire("2cSZe");
var $3ad0ea6d06b0b13b$require$kState = $2cSZe.kState;
var $3ad0ea6d06b0b13b$require$kHeaders = $2cSZe.kHeaders;
var $3ad0ea6d06b0b13b$require$kGuard = $2cSZe.kGuard;
var $3ad0ea6d06b0b13b$require$kRealm = $2cSZe.kRealm;

var $9lkwe = parcelRequire("9lkwe");
var $3ad0ea6d06b0b13b$require$fetching = $9lkwe.fetching;

var $7zBpt = parcelRequire("7zBpt");
var $3ad0ea6d06b0b13b$require$urlIsHttpHttpsScheme = $7zBpt.urlIsHttpHttpsScheme;
var $3ad0ea6d06b0b13b$require$createDeferredPromise = $7zBpt.createDeferredPromise;
var $3ad0ea6d06b0b13b$require$readAllBytes = $7zBpt.readAllBytes;


var $9L2fX = parcelRequire("9L2fX");
var $3ad0ea6d06b0b13b$require$getGlobalDispatcher = $9L2fX.getGlobalDispatcher;
/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
 * @typedef {Object} CacheBatchOperation
 * @property {'delete' | 'put'} type
 * @property {any} request
 * @property {any} response
 * @property {import('../../types/cache').CacheQueryOptions} options
 */ /**
 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
 * @typedef {[any, any][]} requestResponseList
 */ class $3ad0ea6d06b0b13b$var$Cache {
    /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
   * @type {requestResponseList}
   */ #relevantRequestResponseList;
    constructor(){
        if (arguments[0] !== $3ad0ea6d06b0b13b$require$kConstruct) $3ad0ea6d06b0b13b$require$webidl.illegalConstructor();
        this.#relevantRequestResponseList = arguments[1];
    }
    async match(request, options = {}) {
        $3ad0ea6d06b0b13b$require$webidl.brandCheck(this, $3ad0ea6d06b0b13b$var$Cache);
        $3ad0ea6d06b0b13b$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.match"
        });
        request = $3ad0ea6d06b0b13b$require$webidl.converters.RequestInfo(request);
        options = $3ad0ea6d06b0b13b$require$webidl.converters.CacheQueryOptions(options);
        const p = await this.matchAll(request, options);
        if (p.length === 0) return;
        return p[0];
    }
    async matchAll(request, options = {}) {
        $3ad0ea6d06b0b13b$require$webidl.brandCheck(this, $3ad0ea6d06b0b13b$var$Cache);
        if (request !== undefined) request = $3ad0ea6d06b0b13b$require$webidl.converters.RequestInfo(request);
        options = $3ad0ea6d06b0b13b$require$webidl.converters.CacheQueryOptions(options);
        // 1.
        let r = null;
        // 2.
        if (request !== undefined) {
            if (request instanceof $3ad0ea6d06b0b13b$require$Request) {
                // 2.1.1
                r = request[$3ad0ea6d06b0b13b$require$kState];
                // 2.1.2
                if (r.method !== "GET" && !options.ignoreMethod) return [];
            } else if (typeof request === "string") // 2.2.1
            r = new $3ad0ea6d06b0b13b$require$Request(request)[$3ad0ea6d06b0b13b$require$kState];
        }
        // 5.
        // 5.1
        const responses = [];
        // 5.2
        if (request === undefined) // 5.2.1
        for (const requestResponse of this.#relevantRequestResponseList)responses.push(requestResponse[1]);
        else {
            // 5.3.1
            const requestResponses = this.#queryCache(r, options);
            // 5.3.2
            for (const requestResponse of requestResponses)responses.push(requestResponse[1]);
        }
        // 5.4
        // We don't implement CORs so we don't need to loop over the responses, yay!
        // 5.5.1
        const responseList = [];
        // 5.5.2
        for (const response of responses){
            // 5.5.2.1
            const responseObject = new $3ad0ea6d06b0b13b$require$Response(response.body?.source ?? null);
            const body = responseObject[$3ad0ea6d06b0b13b$require$kState].body;
            responseObject[$3ad0ea6d06b0b13b$require$kState] = response;
            responseObject[$3ad0ea6d06b0b13b$require$kState].body = body;
            responseObject[$3ad0ea6d06b0b13b$require$kHeaders][$3ad0ea6d06b0b13b$require$kHeadersList] = response.headersList;
            responseObject[$3ad0ea6d06b0b13b$require$kHeaders][$3ad0ea6d06b0b13b$require$kGuard] = "immutable";
            responseList.push(responseObject);
        }
        // 6.
        return Object.freeze(responseList);
    }
    async add(request) {
        $3ad0ea6d06b0b13b$require$webidl.brandCheck(this, $3ad0ea6d06b0b13b$var$Cache);
        $3ad0ea6d06b0b13b$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.add"
        });
        request = $3ad0ea6d06b0b13b$require$webidl.converters.RequestInfo(request);
        // 1.
        const requests = [
            request
        ];
        // 2.
        const responseArrayPromise = this.addAll(requests);
        // 3.
        return await responseArrayPromise;
    }
    async addAll(requests) {
        $3ad0ea6d06b0b13b$require$webidl.brandCheck(this, $3ad0ea6d06b0b13b$var$Cache);
        $3ad0ea6d06b0b13b$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.addAll"
        });
        requests = $3ad0ea6d06b0b13b$require$webidl.converters["sequence<RequestInfo>"](requests);
        // 1.
        const responsePromises = [];
        // 2.
        const requestList = [];
        // 3.
        for (const request of requests){
            if (typeof request === "string") continue;
            // 3.1
            const r = request[$3ad0ea6d06b0b13b$require$kState];
            // 3.2
            if (!$3ad0ea6d06b0b13b$require$urlIsHttpHttpsScheme(r.url) || r.method !== "GET") throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                header: "Cache.addAll",
                message: "Expected http/s scheme when method is not GET."
            });
        }
        // 4.
        /** @type {ReturnType<typeof fetching>[]} */ const fetchControllers = [];
        // 5.
        for (const request of requests){
            // 5.1
            const r = new $3ad0ea6d06b0b13b$require$Request(request)[$3ad0ea6d06b0b13b$require$kState];
            // 5.2
            if (!$3ad0ea6d06b0b13b$require$urlIsHttpHttpsScheme(r.url)) throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                header: "Cache.addAll",
                message: "Expected http/s scheme."
            });
            // 5.4
            r.initiator = "fetch";
            r.destination = "subresource";
            // 5.5
            requestList.push(r);
            // 5.6
            const responsePromise = $3ad0ea6d06b0b13b$require$createDeferredPromise();
            // 5.7
            fetchControllers.push($3ad0ea6d06b0b13b$require$fetching({
                request: r,
                dispatcher: $3ad0ea6d06b0b13b$require$getGlobalDispatcher(),
                processResponse (response) {
                    // 1.
                    if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) responsePromise.reject($3ad0ea6d06b0b13b$require$webidl.errors.exception({
                        header: "Cache.addAll",
                        message: "Received an invalid status code or the request failed."
                    }));
                    else if (response.headersList.contains("vary")) {
                        // 2.1
                        const fieldValues = $3ad0ea6d06b0b13b$require$getFieldValues(response.headersList.get("vary"));
                        // 2.2
                        for (const fieldValue of fieldValues)// 2.2.1
                        if (fieldValue === "*") {
                            responsePromise.reject($3ad0ea6d06b0b13b$require$webidl.errors.exception({
                                header: "Cache.addAll",
                                message: "invalid vary field value"
                            }));
                            for (const controller of fetchControllers)controller.abort();
                            return;
                        }
                    }
                },
                processResponseEndOfBody (response) {
                    // 1.
                    if (response.aborted) {
                        responsePromise.reject(new DOMException("aborted", "AbortError"));
                        return;
                    }
                    // 2.
                    responsePromise.resolve(response);
                }
            }));
            // 5.8
            responsePromises.push(responsePromise.promise);
        }
        // 6.
        const p = Promise.all(responsePromises);
        // 7.
        const responses = await p;
        // 7.1
        const operations = [];
        // 7.2
        let index = 0;
        // 7.3
        for (const response of responses){
            // 7.3.1
            /** @type {CacheBatchOperation} */ const operation = {
                type: "put",
                request: requestList[index],
                response: response // 7.3.4
            };
            operations.push(operation) // 7.3.5
            ;
            index++ // 7.3.6
            ;
        }
        // 7.5
        const cacheJobPromise = $3ad0ea6d06b0b13b$require$createDeferredPromise();
        // 7.6.1
        let errorData = null;
        // 7.6.2
        try {
            this.#batchCacheOperations(operations);
        } catch (e) {
            errorData = e;
        }
        // 7.6.3
        queueMicrotask(()=>{
            // 7.6.3.1
            if (errorData === null) cacheJobPromise.resolve(undefined);
            else // 7.6.3.2
            cacheJobPromise.reject(errorData);
        });
        // 7.7
        return cacheJobPromise.promise;
    }
    async put(request, response) {
        $3ad0ea6d06b0b13b$require$webidl.brandCheck(this, $3ad0ea6d06b0b13b$var$Cache);
        $3ad0ea6d06b0b13b$require$webidl.argumentLengthCheck(arguments, 2, {
            header: "Cache.put"
        });
        request = $3ad0ea6d06b0b13b$require$webidl.converters.RequestInfo(request);
        response = $3ad0ea6d06b0b13b$require$webidl.converters.Response(response);
        // 1.
        let innerRequest = null;
        // 2.
        if (request instanceof $3ad0ea6d06b0b13b$require$Request) innerRequest = request[$3ad0ea6d06b0b13b$require$kState];
        else innerRequest = new $3ad0ea6d06b0b13b$require$Request(request)[$3ad0ea6d06b0b13b$require$kState];
        // 4.
        if (!$3ad0ea6d06b0b13b$require$urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
            header: "Cache.put",
            message: "Expected an http/s scheme when method is not GET"
        });
        // 5.
        const innerResponse = response[$3ad0ea6d06b0b13b$require$kState];
        // 6.
        if (innerResponse.status === 206) throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
            header: "Cache.put",
            message: "Got 206 status"
        });
        // 7.
        if (innerResponse.headersList.contains("vary")) {
            // 7.1.
            const fieldValues = $3ad0ea6d06b0b13b$require$getFieldValues(innerResponse.headersList.get("vary"));
            // 7.2.
            for (const fieldValue of fieldValues){
                // 7.2.1
                if (fieldValue === "*") throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                    header: "Cache.put",
                    message: "Got * vary field value"
                });
            }
        }
        // 8.
        if (innerResponse.body && ($3ad0ea6d06b0b13b$require$isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
            header: "Cache.put",
            message: "Response body is locked or disturbed"
        });
        // 9.
        const clonedResponse = $3ad0ea6d06b0b13b$require$cloneResponse(innerResponse);
        // 10.
        const bodyReadPromise = $3ad0ea6d06b0b13b$require$createDeferredPromise();
        // 11.
        if (innerResponse.body != null) {
            // 11.1
            const stream = innerResponse.body.stream;
            // 11.2
            const reader = stream.getReader();
            // 11.3
            $3ad0ea6d06b0b13b$require$readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
        } else bodyReadPromise.resolve(undefined);
        // 12.
        /** @type {CacheBatchOperation[]} */ const operations = [];
        // 13.
        /** @type {CacheBatchOperation} */ const operation = {
            type: "put",
            request: innerRequest,
            response: clonedResponse // 16.
        };
        // 17.
        operations.push(operation);
        // 19.
        const bytes = await bodyReadPromise.promise;
        if (clonedResponse.body != null) clonedResponse.body.source = bytes;
        // 19.1
        const cacheJobPromise = $3ad0ea6d06b0b13b$require$createDeferredPromise();
        // 19.2.1
        let errorData = null;
        // 19.2.2
        try {
            this.#batchCacheOperations(operations);
        } catch (e) {
            errorData = e;
        }
        // 19.2.3
        queueMicrotask(()=>{
            // 19.2.3.1
            if (errorData === null) cacheJobPromise.resolve();
            else cacheJobPromise.reject(errorData);
        });
        return cacheJobPromise.promise;
    }
    async delete(request, options = {}) {
        $3ad0ea6d06b0b13b$require$webidl.brandCheck(this, $3ad0ea6d06b0b13b$var$Cache);
        $3ad0ea6d06b0b13b$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "Cache.delete"
        });
        request = $3ad0ea6d06b0b13b$require$webidl.converters.RequestInfo(request);
        options = $3ad0ea6d06b0b13b$require$webidl.converters.CacheQueryOptions(options);
        /**
     * @type {Request}
     */ let r = null;
        if (request instanceof $3ad0ea6d06b0b13b$require$Request) {
            r = request[$3ad0ea6d06b0b13b$require$kState];
            if (r.method !== "GET" && !options.ignoreMethod) return false;
        } else {
            $4UN2M$assert(typeof request === "string");
            r = new $3ad0ea6d06b0b13b$require$Request(request)[$3ad0ea6d06b0b13b$require$kState];
        }
        /** @type {CacheBatchOperation[]} */ const operations = [];
        /** @type {CacheBatchOperation} */ const operation = {
            type: "delete",
            request: r,
            options: options
        };
        operations.push(operation);
        const cacheJobPromise = $3ad0ea6d06b0b13b$require$createDeferredPromise();
        let errorData = null;
        let requestResponses;
        try {
            requestResponses = this.#batchCacheOperations(operations);
        } catch (e) {
            errorData = e;
        }
        queueMicrotask(()=>{
            if (errorData === null) cacheJobPromise.resolve(!!requestResponses?.length);
            else cacheJobPromise.reject(errorData);
        });
        return cacheJobPromise.promise;
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
   * @param {any} request
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @returns {readonly Request[]}
   */ async keys(request, options = {}) {
        $3ad0ea6d06b0b13b$require$webidl.brandCheck(this, $3ad0ea6d06b0b13b$var$Cache);
        if (request !== undefined) request = $3ad0ea6d06b0b13b$require$webidl.converters.RequestInfo(request);
        options = $3ad0ea6d06b0b13b$require$webidl.converters.CacheQueryOptions(options);
        // 1.
        let r = null;
        // 2.
        if (request !== undefined) {
            // 2.1
            if (request instanceof $3ad0ea6d06b0b13b$require$Request) {
                // 2.1.1
                r = request[$3ad0ea6d06b0b13b$require$kState];
                // 2.1.2
                if (r.method !== "GET" && !options.ignoreMethod) return [];
            } else if (typeof request === "string") r = new $3ad0ea6d06b0b13b$require$Request(request)[$3ad0ea6d06b0b13b$require$kState];
        }
        // 4.
        const promise = $3ad0ea6d06b0b13b$require$createDeferredPromise();
        // 5.
        // 5.1
        const requests = [];
        // 5.2
        if (request === undefined) // 5.2.1
        for (const requestResponse of this.#relevantRequestResponseList)// 5.2.1.1
        requests.push(requestResponse[0]);
        else {
            // 5.3.1
            const requestResponses = this.#queryCache(r, options);
            // 5.3.2
            for (const requestResponse of requestResponses)// 5.3.2.1
            requests.push(requestResponse[0]);
        }
        // 5.4
        queueMicrotask(()=>{
            // 5.4.1
            const requestList = [];
            // 5.4.2
            for (const request of requests){
                const requestObject = new $3ad0ea6d06b0b13b$require$Request("https://a");
                requestObject[$3ad0ea6d06b0b13b$require$kState] = request;
                requestObject[$3ad0ea6d06b0b13b$require$kHeaders][$3ad0ea6d06b0b13b$require$kHeadersList] = request.headersList;
                requestObject[$3ad0ea6d06b0b13b$require$kHeaders][$3ad0ea6d06b0b13b$require$kGuard] = "immutable";
                requestObject[$3ad0ea6d06b0b13b$require$kRealm] = request.client;
                // 5.4.2.1
                requestList.push(requestObject);
            }
            // 5.4.3
            promise.resolve(Object.freeze(requestList));
        });
        return promise.promise;
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
   * @param {CacheBatchOperation[]} operations
   * @returns {requestResponseList}
   */ #batchCacheOperations(operations) {
        // 1.
        const cache = this.#relevantRequestResponseList;
        // 2.
        const backupCache = [
            ...cache
        ];
        // 3.
        const addedItems = [];
        // 4.1
        const resultList = [];
        try {
            // 4.2
            for (const operation of operations){
                // 4.2.1
                if (operation.type !== "delete" && operation.type !== "put") throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: 'operation type does not match "delete" or "put"'
                });
                // 4.2.2
                if (operation.type === "delete" && operation.response != null) throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: "delete operation should not have an associated response"
                });
                // 4.2.3
                if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
                // 4.2.4
                let requestResponses;
                // 4.2.5
                if (operation.type === "delete") {
                    // 4.2.5.1
                    requestResponses = this.#queryCache(operation.request, operation.options);
                    // TODO: the spec is wrong, this is needed to pass WPTs
                    if (requestResponses.length === 0) return [];
                    // 4.2.5.2
                    for (const requestResponse of requestResponses){
                        const idx = cache.indexOf(requestResponse);
                        $4UN2M$assert(idx !== -1);
                        // 4.2.5.2.1
                        cache.splice(idx, 1);
                    }
                } else if (operation.type === "put") {
                    // 4.2.6.1
                    if (operation.response == null) throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "put operation should have an associated response"
                    });
                    // 4.2.6.2
                    const r = operation.request;
                    // 4.2.6.3
                    if (!$3ad0ea6d06b0b13b$require$urlIsHttpHttpsScheme(r.url)) throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "expected http or https scheme"
                    });
                    // 4.2.6.4
                    if (r.method !== "GET") throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "not get method"
                    });
                    // 4.2.6.5
                    if (operation.options != null) throw $3ad0ea6d06b0b13b$require$webidl.errors.exception({
                        header: "Cache.#batchCacheOperations",
                        message: "options must not be defined"
                    });
                    // 4.2.6.6
                    requestResponses = this.#queryCache(operation.request);
                    // 4.2.6.7
                    for (const requestResponse of requestResponses){
                        const idx = cache.indexOf(requestResponse);
                        $4UN2M$assert(idx !== -1);
                        // 4.2.6.7.1
                        cache.splice(idx, 1);
                    }
                    // 4.2.6.8
                    cache.push([
                        operation.request,
                        operation.response
                    ]);
                    // 4.2.6.10
                    addedItems.push([
                        operation.request,
                        operation.response
                    ]);
                }
                // 4.2.7
                resultList.push([
                    operation.request,
                    operation.response
                ]);
            }
            // 4.3
            return resultList;
        } catch (e) {
            // 5.1
            this.#relevantRequestResponseList.length = 0;
            // 5.2
            this.#relevantRequestResponseList = backupCache;
            // 5.3
            throw e;
        }
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#query-cache
   * @param {any} requestQuery
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @param {requestResponseList} targetStorage
   * @returns {requestResponseList}
   */ #queryCache(requestQuery, options, targetStorage) {
        /** @type {requestResponseList} */ const resultList = [];
        const storage = targetStorage ?? this.#relevantRequestResponseList;
        for (const requestResponse of storage){
            const [cachedRequest, cachedResponse] = requestResponse;
            if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) resultList.push(requestResponse);
        }
        return resultList;
    }
    /**
   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
   * @param {any} requestQuery
   * @param {any} request
   * @param {any | null} response
   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
   * @returns {boolean}
   */ #requestMatchesCachedItem(requestQuery, request, response = null, options) {
        // if (options?.ignoreMethod === false && request.method === 'GET') {
        //   return false
        // }
        const queryURL = new URL(requestQuery.url);
        const cachedURL = new URL(request.url);
        if (options?.ignoreSearch) {
            cachedURL.search = "";
            queryURL.search = "";
        }
        if (!$3ad0ea6d06b0b13b$require$urlEquals(queryURL, cachedURL, true)) return false;
        if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) return true;
        const fieldValues = $3ad0ea6d06b0b13b$require$getFieldValues(response.headersList.get("vary"));
        for (const fieldValue of fieldValues){
            if (fieldValue === "*") return false;
            const requestValue = request.headersList.get(fieldValue);
            const queryValue = requestQuery.headersList.get(fieldValue);
            // If one has the header and the other doesn't, or one has
            // a different value than the other, return false
            if (requestValue !== queryValue) return false;
        }
        return true;
    }
}
Object.defineProperties($3ad0ea6d06b0b13b$var$Cache.prototype, {
    [Symbol.toStringTag]: {
        value: "Cache",
        configurable: true
    },
    match: $3ad0ea6d06b0b13b$require$kEnumerableProperty,
    matchAll: $3ad0ea6d06b0b13b$require$kEnumerableProperty,
    add: $3ad0ea6d06b0b13b$require$kEnumerableProperty,
    addAll: $3ad0ea6d06b0b13b$require$kEnumerableProperty,
    put: $3ad0ea6d06b0b13b$require$kEnumerableProperty,
    delete: $3ad0ea6d06b0b13b$require$kEnumerableProperty,
    keys: $3ad0ea6d06b0b13b$require$kEnumerableProperty
});
const $3ad0ea6d06b0b13b$var$cacheQueryOptionConverters = [
    {
        key: "ignoreSearch",
        converter: $3ad0ea6d06b0b13b$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "ignoreMethod",
        converter: $3ad0ea6d06b0b13b$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "ignoreVary",
        converter: $3ad0ea6d06b0b13b$require$webidl.converters.boolean,
        defaultValue: false
    }
];
$3ad0ea6d06b0b13b$require$webidl.converters.CacheQueryOptions = $3ad0ea6d06b0b13b$require$webidl.dictionaryConverter($3ad0ea6d06b0b13b$var$cacheQueryOptionConverters);
$3ad0ea6d06b0b13b$require$webidl.converters.MultiCacheQueryOptions = $3ad0ea6d06b0b13b$require$webidl.dictionaryConverter([
    ...$3ad0ea6d06b0b13b$var$cacheQueryOptionConverters,
    {
        key: "cacheName",
        converter: $3ad0ea6d06b0b13b$require$webidl.converters.DOMString
    }
]);
$3ad0ea6d06b0b13b$require$webidl.converters.Response = $3ad0ea6d06b0b13b$require$webidl.interfaceConverter($3ad0ea6d06b0b13b$require$Response);
$3ad0ea6d06b0b13b$require$webidl.converters["sequence<RequestInfo>"] = $3ad0ea6d06b0b13b$require$webidl.sequenceConverter($3ad0ea6d06b0b13b$require$webidl.converters.RequestInfo);
module.exports = {
    Cache: $3ad0ea6d06b0b13b$var$Cache
};

});
parcelRegister("fgNuq", function(module, exports) {
"use strict";


var $h1hYV = parcelRequire("h1hYV");
var $b1debd3df9f1961e$require$URLSerializer = $h1hYV.URLSerializer;

var $7zBpt = parcelRequire("7zBpt");
var $b1debd3df9f1961e$require$isValidHeaderName = $7zBpt.isValidHeaderName;
/**
 * @see https://url.spec.whatwg.org/#concept-url-equals
 * @param {URL} A
 * @param {URL} B
 * @param {boolean | undefined} excludeFragment
 * @returns {boolean}
 */ function $b1debd3df9f1961e$var$urlEquals(A, B, excludeFragment = false) {
    const serializedA = $b1debd3df9f1961e$require$URLSerializer(A, excludeFragment);
    const serializedB = $b1debd3df9f1961e$require$URLSerializer(B, excludeFragment);
    return serializedA === serializedB;
}
/**
 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
 * @param {string} header
 */ function $b1debd3df9f1961e$var$fieldValues(header) {
    $4UN2M$assert(header !== null);
    const values = [];
    for (let value of header.split(",")){
        value = value.trim();
        if (!value.length) continue;
        else if (!$b1debd3df9f1961e$require$isValidHeaderName(value)) continue;
        values.push(value);
    }
    return values;
}
module.exports = {
    urlEquals: $b1debd3df9f1961e$var$urlEquals,
    fieldValues: $b1debd3df9f1961e$var$fieldValues
};

});



parcelRegister("3M0tk", function(module, exports) {
"use strict";

var $dG4zp = parcelRequire("dG4zp");
var $2bf63884420f3991$require$parseSetCookie = $dG4zp.parseSetCookie;

var $cik3A = parcelRequire("cik3A");
var $2bf63884420f3991$require$stringify = $cik3A.stringify;
var $2bf63884420f3991$require$getHeadersList = $cik3A.getHeadersList;

var $7jIZt = parcelRequire("7jIZt");
var $2bf63884420f3991$require$webidl = $7jIZt.webidl;

var $30zmV = parcelRequire("30zmV");
var $2bf63884420f3991$require$Headers = $30zmV.Headers;
/**
 * @typedef {Object} Cookie
 * @property {string} name
 * @property {string} value
 * @property {Date|number|undefined} expires
 * @property {number|undefined} maxAge
 * @property {string|undefined} domain
 * @property {string|undefined} path
 * @property {boolean|undefined} secure
 * @property {boolean|undefined} httpOnly
 * @property {'Strict'|'Lax'|'None'} sameSite
 * @property {string[]} unparsed
 */ /**
 * @param {Headers} headers
 * @returns {Record<string, string>}
 */ function $2bf63884420f3991$var$getCookies(headers) {
    $2bf63884420f3991$require$webidl.argumentLengthCheck(arguments, 1, {
        header: "getCookies"
    });
    $2bf63884420f3991$require$webidl.brandCheck(headers, $2bf63884420f3991$require$Headers, {
        strict: false
    });
    const cookie = headers.get("cookie");
    const out = {};
    if (!cookie) return out;
    for (const piece of cookie.split(";")){
        const [name, ...value] = piece.split("=");
        out[name.trim()] = value.join("=");
    }
    return out;
}
/**
 * @param {Headers} headers
 * @param {string} name
 * @param {{ path?: string, domain?: string }|undefined} attributes
 * @returns {void}
 */ function $2bf63884420f3991$var$deleteCookie(headers, name, attributes) {
    $2bf63884420f3991$require$webidl.argumentLengthCheck(arguments, 2, {
        header: "deleteCookie"
    });
    $2bf63884420f3991$require$webidl.brandCheck(headers, $2bf63884420f3991$require$Headers, {
        strict: false
    });
    name = $2bf63884420f3991$require$webidl.converters.DOMString(name);
    attributes = $2bf63884420f3991$require$webidl.converters.DeleteCookieAttributes(attributes);
    // Matches behavior of
    // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
    $2bf63884420f3991$var$setCookie(headers, {
        name: name,
        value: "",
        expires: new Date(0),
        ...attributes
    });
}
/**
 * @param {Headers} headers
 * @returns {Cookie[]}
 */ function $2bf63884420f3991$var$getSetCookies(headers) {
    $2bf63884420f3991$require$webidl.argumentLengthCheck(arguments, 1, {
        header: "getSetCookies"
    });
    $2bf63884420f3991$require$webidl.brandCheck(headers, $2bf63884420f3991$require$Headers, {
        strict: false
    });
    const cookies = $2bf63884420f3991$require$getHeadersList(headers).cookies;
    if (!cookies) return [];
    // In older versions of undici, cookies is a list of name:value.
    return cookies.map((pair)=>$2bf63884420f3991$require$parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
}
/**
 * @param {Headers} headers
 * @param {Cookie} cookie
 * @returns {void}
 */ function $2bf63884420f3991$var$setCookie(headers, cookie) {
    $2bf63884420f3991$require$webidl.argumentLengthCheck(arguments, 2, {
        header: "setCookie"
    });
    $2bf63884420f3991$require$webidl.brandCheck(headers, $2bf63884420f3991$require$Headers, {
        strict: false
    });
    cookie = $2bf63884420f3991$require$webidl.converters.Cookie(cookie);
    const str = $2bf63884420f3991$require$stringify(cookie);
    if (str) headers.append("Set-Cookie", $2bf63884420f3991$require$stringify(cookie));
}
$2bf63884420f3991$require$webidl.converters.DeleteCookieAttributes = $2bf63884420f3991$require$webidl.dictionaryConverter([
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter($2bf63884420f3991$require$webidl.converters.DOMString),
        key: "path",
        defaultValue: null
    },
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter($2bf63884420f3991$require$webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
    }
]);
$2bf63884420f3991$require$webidl.converters.Cookie = $2bf63884420f3991$require$webidl.dictionaryConverter([
    {
        converter: $2bf63884420f3991$require$webidl.converters.DOMString,
        key: "name"
    },
    {
        converter: $2bf63884420f3991$require$webidl.converters.DOMString,
        key: "value"
    },
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter((value)=>{
            if (typeof value === "number") return $2bf63884420f3991$require$webidl.converters["unsigned long long"](value);
            return new Date(value);
        }),
        key: "expires",
        defaultValue: null
    },
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter($2bf63884420f3991$require$webidl.converters["long long"]),
        key: "maxAge",
        defaultValue: null
    },
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter($2bf63884420f3991$require$webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
    },
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter($2bf63884420f3991$require$webidl.converters.DOMString),
        key: "path",
        defaultValue: null
    },
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter($2bf63884420f3991$require$webidl.converters.boolean),
        key: "secure",
        defaultValue: null
    },
    {
        converter: $2bf63884420f3991$require$webidl.nullableConverter($2bf63884420f3991$require$webidl.converters.boolean),
        key: "httpOnly",
        defaultValue: null
    },
    {
        converter: $2bf63884420f3991$require$webidl.converters.USVString,
        key: "sameSite",
        allowedValues: [
            "Strict",
            "Lax",
            "None"
        ]
    },
    {
        converter: $2bf63884420f3991$require$webidl.sequenceConverter($2bf63884420f3991$require$webidl.converters.DOMString),
        key: "unparsed",
        defaultValue: []
    }
]);
module.exports = {
    getCookies: $2bf63884420f3991$var$getCookies,
    deleteCookie: $2bf63884420f3991$var$deleteCookie,
    getSetCookies: $2bf63884420f3991$var$getSetCookies,
    setCookie: $2bf63884420f3991$var$setCookie
};

});
parcelRegister("dG4zp", function(module, exports) {
"use strict";

var $g32nV = parcelRequire("g32nV");
var $9f52be1ea247738e$require$maxNameValuePairSize = $g32nV.maxNameValuePairSize;
var $9f52be1ea247738e$require$maxAttributeValueSize = $g32nV.maxAttributeValueSize;

var $cik3A = parcelRequire("cik3A");
var $9f52be1ea247738e$require$isCTLExcludingHtab = $cik3A.isCTLExcludingHtab;

var $h1hYV = parcelRequire("h1hYV");
var $9f52be1ea247738e$require$collectASequenceOfCodePointsFast = $h1hYV.collectASequenceOfCodePointsFast;

/**
 * @description Parses the field-value attributes of a set-cookie header string.
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} header
 * @returns if the header is invalid, null will be returned
 */ function $9f52be1ea247738e$var$parseSetCookie(header) {
    // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
    //    character (CTL characters excluding HTAB): Abort these steps and
    //    ignore the set-cookie-string entirely.
    if ($9f52be1ea247738e$require$isCTLExcludingHtab(header)) return null;
    let nameValuePair = "";
    let unparsedAttributes = "";
    let name = "";
    let value = "";
    // 2. If the set-cookie-string contains a %x3B (";") character:
    if (header.includes(";")) {
        // 1. The name-value-pair string consists of the characters up to,
        //    but not including, the first %x3B (";"), and the unparsed-
        //    attributes consist of the remainder of the set-cookie-string
        //    (including the %x3B (";") in question).
        const position = {
            position: 0
        };
        nameValuePair = $9f52be1ea247738e$require$collectASequenceOfCodePointsFast(";", header, position);
        unparsedAttributes = header.slice(position.position);
    } else // Otherwise:
    // 1. The name-value-pair string consists of all the characters
    //    contained in the set-cookie-string, and the unparsed-
    //    attributes is the empty string.
    nameValuePair = header;
    // 3. If the name-value-pair string lacks a %x3D ("=") character, then
    //    the name string is empty, and the value string is the value of
    //    name-value-pair.
    if (!nameValuePair.includes("=")) value = nameValuePair;
    else {
        //    Otherwise, the name string consists of the characters up to, but
        //    not including, the first %x3D ("=") character, and the (possibly
        //    empty) value string consists of the characters after the first
        //    %x3D ("=") character.
        const position = {
            position: 0
        };
        name = $9f52be1ea247738e$require$collectASequenceOfCodePointsFast("=", nameValuePair, position);
        value = nameValuePair.slice(position.position + 1);
    }
    // 4. Remove any leading or trailing WSP characters from the name
    //    string and the value string.
    name = name.trim();
    value = value.trim();
    // 5. If the sum of the lengths of the name string and the value string
    //    is more than 4096 octets, abort these steps and ignore the set-
    //    cookie-string entirely.
    if (name.length + value.length > $9f52be1ea247738e$require$maxNameValuePairSize) return null;
    // 6. The cookie-name is the name string, and the cookie-value is the
    //    value string.
    return {
        name: name,
        value: value,
        ...$9f52be1ea247738e$var$parseUnparsedAttributes(unparsedAttributes)
    };
}
/**
 * Parses the remaining attributes of a set-cookie header
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} unparsedAttributes
 * @param {[Object.<string, unknown>]={}} cookieAttributeList
 */ function $9f52be1ea247738e$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
    // 1. If the unparsed-attributes string is empty, skip the rest of
    //    these steps.
    if (unparsedAttributes.length === 0) return cookieAttributeList;
    // 2. Discard the first character of the unparsed-attributes (which
    //    will be a %x3B (";") character).
    $4UN2M$assert(unparsedAttributes[0] === ";");
    unparsedAttributes = unparsedAttributes.slice(1);
    let cookieAv = "";
    // 3. If the remaining unparsed-attributes contains a %x3B (";")
    //    character:
    if (unparsedAttributes.includes(";")) {
        // 1. Consume the characters of the unparsed-attributes up to, but
        //    not including, the first %x3B (";") character.
        cookieAv = $9f52be1ea247738e$require$collectASequenceOfCodePointsFast(";", unparsedAttributes, {
            position: 0
        });
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
    } else {
        // Otherwise:
        // 1. Consume the remainder of the unparsed-attributes.
        cookieAv = unparsedAttributes;
        unparsedAttributes = "";
    }
    // Let the cookie-av string be the characters consumed in this step.
    let attributeName = "";
    let attributeValue = "";
    // 4. If the cookie-av string contains a %x3D ("=") character:
    if (cookieAv.includes("=")) {
        // 1. The (possibly empty) attribute-name string consists of the
        //    characters up to, but not including, the first %x3D ("=")
        //    character, and the (possibly empty) attribute-value string
        //    consists of the characters after the first %x3D ("=")
        //    character.
        const position = {
            position: 0
        };
        attributeName = $9f52be1ea247738e$require$collectASequenceOfCodePointsFast("=", cookieAv, position);
        attributeValue = cookieAv.slice(position.position + 1);
    } else // Otherwise:
    // 1. The attribute-name string consists of the entire cookie-av
    //    string, and the attribute-value string is empty.
    attributeName = cookieAv;
    // 5. Remove any leading or trailing WSP characters from the attribute-
    //    name string and the attribute-value string.
    attributeName = attributeName.trim();
    attributeValue = attributeValue.trim();
    // 6. If the attribute-value is longer than 1024 octets, ignore the
    //    cookie-av string and return to Step 1 of this algorithm.
    if (attributeValue.length > $9f52be1ea247738e$require$maxAttributeValueSize) return $9f52be1ea247738e$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    // 7. Process the attribute-name and attribute-value according to the
    //    requirements in the following subsections.  (Notice that
    //    attributes with unrecognized attribute-names are ignored.)
    const attributeNameLowercase = attributeName.toLowerCase();
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
    // If the attribute-name case-insensitively matches the string
    // "Expires", the user agent MUST process the cookie-av as follows.
    if (attributeNameLowercase === "expires") {
        // 1. Let the expiry-time be the result of parsing the attribute-value
        //    as cookie-date (see Section 5.1.1).
        const expiryTime = new Date(attributeValue);
        // 2. If the attribute-value failed to parse as a cookie date, ignore
        //    the cookie-av.
        cookieAttributeList.expires = expiryTime;
    } else if (attributeNameLowercase === "max-age") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
        // If the attribute-name case-insensitively matches the string "Max-
        // Age", the user agent MUST process the cookie-av as follows.
        // 1. If the first character of the attribute-value is not a DIGIT or a
        //    "-" character, ignore the cookie-av.
        const charCode = attributeValue.charCodeAt(0);
        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") return $9f52be1ea247738e$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        // 2. If the remainder of attribute-value contains a non-DIGIT
        //    character, ignore the cookie-av.
        if (!/^\d+$/.test(attributeValue)) return $9f52be1ea247738e$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        // 3. Let delta-seconds be the attribute-value converted to an integer.
        const deltaSeconds = Number(attributeValue);
        // 4. Let cookie-age-limit be the maximum age of the cookie (which
        //    SHOULD be 400 days or less, see Section 4.1.2.2).
        // 5. Set delta-seconds to the smaller of its present value and cookie-
        //    age-limit.
        // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)
        // 6. If delta-seconds is less than or equal to zero (0), let expiry-
        //    time be the earliest representable date and time.  Otherwise, let
        //    the expiry-time be the current date and time plus delta-seconds
        //    seconds.
        // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds
        // 7. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Max-Age and an attribute-value of expiry-time.
        cookieAttributeList.maxAge = deltaSeconds;
    } else if (attributeNameLowercase === "domain") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
        // If the attribute-name case-insensitively matches the string "Domain",
        // the user agent MUST process the cookie-av as follows.
        // 1. Let cookie-domain be the attribute-value.
        let cookieDomain = attributeValue;
        // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
        //    cookie-domain without its leading %x2E (".").
        if (cookieDomain[0] === ".") cookieDomain = cookieDomain.slice(1);
        // 3. Convert the cookie-domain to lower case.
        cookieDomain = cookieDomain.toLowerCase();
        // 4. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Domain and an attribute-value of cookie-domain.
        cookieAttributeList.domain = cookieDomain;
    } else if (attributeNameLowercase === "path") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
        // If the attribute-name case-insensitively matches the string "Path",
        // the user agent MUST process the cookie-av as follows.
        // 1. If the attribute-value is empty or if the first character of the
        //    attribute-value is not %x2F ("/"):
        let cookiePath = "";
        if (attributeValue.length === 0 || attributeValue[0] !== "/") // 1. Let cookie-path be the default-path.
        cookiePath = "/";
        else // Otherwise:
        // 1. Let cookie-path be the attribute-value.
        cookiePath = attributeValue;
        // 2. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of Path and an attribute-value of cookie-path.
        cookieAttributeList.path = cookiePath;
    } else if (attributeNameLowercase === "secure") // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
    // If the attribute-name case-insensitively matches the string "Secure",
    // the user agent MUST append an attribute to the cookie-attribute-list
    // with an attribute-name of Secure and an empty attribute-value.
    cookieAttributeList.secure = true;
    else if (attributeNameLowercase === "httponly") // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
    // If the attribute-name case-insensitively matches the string
    // "HttpOnly", the user agent MUST append an attribute to the cookie-
    // attribute-list with an attribute-name of HttpOnly and an empty
    // attribute-value.
    cookieAttributeList.httpOnly = true;
    else if (attributeNameLowercase === "samesite") {
        // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
        // If the attribute-name case-insensitively matches the string
        // "SameSite", the user agent MUST process the cookie-av as follows:
        // 1. Let enforcement be "Default".
        let enforcement = "Default";
        const attributeValueLowercase = attributeValue.toLowerCase();
        // 2. If cookie-av's attribute-value is a case-insensitive match for
        //    "None", set enforcement to "None".
        if (attributeValueLowercase.includes("none")) enforcement = "None";
        // 3. If cookie-av's attribute-value is a case-insensitive match for
        //    "Strict", set enforcement to "Strict".
        if (attributeValueLowercase.includes("strict")) enforcement = "Strict";
        // 4. If cookie-av's attribute-value is a case-insensitive match for
        //    "Lax", set enforcement to "Lax".
        if (attributeValueLowercase.includes("lax")) enforcement = "Lax";
        // 5. Append an attribute to the cookie-attribute-list with an
        //    attribute-name of "SameSite" and an attribute-value of
        //    enforcement.
        cookieAttributeList.sameSite = enforcement;
    } else {
        cookieAttributeList.unparsed ??= [];
        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
    }
    // 8. Return to Step 1 of this algorithm.
    return $9f52be1ea247738e$var$parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
}
module.exports = {
    parseSetCookie: $9f52be1ea247738e$var$parseSetCookie,
    parseUnparsedAttributes: $9f52be1ea247738e$var$parseUnparsedAttributes
};

});
parcelRegister("g32nV", function(module, exports) {
"use strict";
// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
const $baeec6bc9809bfcf$var$maxAttributeValueSize = 1024;
// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
const $baeec6bc9809bfcf$var$maxNameValuePairSize = 4096;
module.exports = {
    maxAttributeValueSize: $baeec6bc9809bfcf$var$maxAttributeValueSize,
    maxNameValuePairSize: $baeec6bc9809bfcf$var$maxNameValuePairSize
};

});

parcelRegister("cik3A", function(module, exports) {
"use strict";


var $9Yodq = parcelRequire("9Yodq");
var $8f36b959f8ef5528$require$kHeadersList = $9Yodq.kHeadersList;
function $8f36b959f8ef5528$var$isCTLExcludingHtab(value) {
    if (value.length === 0) return false;
    for (const char of value){
        const code = char.charCodeAt(0);
        if (code >= 0x00 || code <= 0x08 || code >= 0x0A || code <= 0x1F || code === 0x7F) return false;
    }
}
/**
 CHAR           = <any US-ASCII character (octets 0 - 127)>
 token          = 1*<any CHAR except CTLs or separators>
 separators     = "(" | ")" | "<" | ">" | "@"
                | "," | ";" | ":" | "\" | <">
                | "/" | "[" | "]" | "?" | "="
                | "{" | "}" | SP | HT
 * @param {string} name
 */ function $8f36b959f8ef5528$var$validateCookieName(name) {
    for (const char of name){
        const code = char.charCodeAt(0);
        if (code <= 0x20 || code > 0x7F || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") throw new Error("Invalid cookie name");
    }
}
/**
 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
 * @param {string} value
 */ function $8f36b959f8ef5528$var$validateCookieValue(value) {
    for (const char of value){
        const code = char.charCodeAt(0);
        if (code < 0x21 || // exclude CTLs (0-31)
        code === 0x22 || code === 0x2C || code === 0x3B || code === 0x5C || code > 0x7E // non-ascii
        ) throw new Error("Invalid header value");
    }
}
/**
 * path-value        = <any CHAR except CTLs or ";">
 * @param {string} path
 */ function $8f36b959f8ef5528$var$validateCookiePath(path) {
    for (const char of path){
        const code = char.charCodeAt(0);
        if (code < 0x21 || char === ";") throw new Error("Invalid cookie path");
    }
}
/**
 * I have no idea why these values aren't allowed to be honest,
 * but Deno tests these. - Khafra
 * @param {string} domain
 */ function $8f36b959f8ef5528$var$validateCookieDomain(domain) {
    if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
}
/**
 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
 * @param {number|Date} date
  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]

  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
              / %x54.75.65 ; "Tue", case-sensitive
              / %x57.65.64 ; "Wed", case-sensitive
              / %x54.68.75 ; "Thu", case-sensitive
              / %x46.72.69 ; "Fri", case-sensitive
              / %x53.61.74 ; "Sat", case-sensitive
              / %x53.75.6E ; "Sun", case-sensitive
  date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %x4A.61.6E ; "Jan", case-sensitive
              / %x46.65.62 ; "Feb", case-sensitive
              / %x4D.61.72 ; "Mar", case-sensitive
              / %x41.70.72 ; "Apr", case-sensitive
              / %x4D.61.79 ; "May", case-sensitive
              / %x4A.75.6E ; "Jun", case-sensitive
              / %x4A.75.6C ; "Jul", case-sensitive
              / %x41.75.67 ; "Aug", case-sensitive
              / %x53.65.70 ; "Sep", case-sensitive
              / %x4F.63.74 ; "Oct", case-sensitive
              / %x4E.6F.76 ; "Nov", case-sensitive
              / %x44.65.63 ; "Dec", case-sensitive
  year         = 4DIGIT

  GMT          = %x47.4D.54 ; "GMT", case-sensitive

  time-of-day  = hour ":" minute ":" second
              ; 00:00:00 - 23:59:60 (leap second)

  hour         = 2DIGIT
  minute       = 2DIGIT
  second       = 2DIGIT
 */ function $8f36b959f8ef5528$var$toIMFDate(date) {
    if (typeof date === "number") date = new Date(date);
    const days = [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
    ];
    const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ];
    const dayName = days[date.getUTCDay()];
    const day = date.getUTCDate().toString().padStart(2, "0");
    const month = months[date.getUTCMonth()];
    const year = date.getUTCFullYear();
    const hour = date.getUTCHours().toString().padStart(2, "0");
    const minute = date.getUTCMinutes().toString().padStart(2, "0");
    const second = date.getUTCSeconds().toString().padStart(2, "0");
    return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
}
/**
 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
                       ; In practice, both expires-av and max-age-av
                       ; are limited to dates representable by the
                       ; user agent.
 * @param {number} maxAge
 */ function $8f36b959f8ef5528$var$validateCookieMaxAge(maxAge) {
    if (maxAge < 0) throw new Error("Invalid cookie max-age");
}
/**
 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
 * @param {import('./index').Cookie} cookie
 */ function $8f36b959f8ef5528$var$stringify(cookie) {
    if (cookie.name.length === 0) return null;
    $8f36b959f8ef5528$var$validateCookieName(cookie.name);
    $8f36b959f8ef5528$var$validateCookieValue(cookie.value);
    const out = [
        `${cookie.name}=${cookie.value}`
    ];
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
    if (cookie.name.startsWith("__Secure-")) cookie.secure = true;
    if (cookie.name.startsWith("__Host-")) {
        cookie.secure = true;
        cookie.domain = null;
        cookie.path = "/";
    }
    if (cookie.secure) out.push("Secure");
    if (cookie.httpOnly) out.push("HttpOnly");
    if (typeof cookie.maxAge === "number") {
        $8f36b959f8ef5528$var$validateCookieMaxAge(cookie.maxAge);
        out.push(`Max-Age=${cookie.maxAge}`);
    }
    if (cookie.domain) {
        $8f36b959f8ef5528$var$validateCookieDomain(cookie.domain);
        out.push(`Domain=${cookie.domain}`);
    }
    if (cookie.path) {
        $8f36b959f8ef5528$var$validateCookiePath(cookie.path);
        out.push(`Path=${cookie.path}`);
    }
    if (cookie.expires && cookie.expires.toString() !== "Invalid Date") out.push(`Expires=${$8f36b959f8ef5528$var$toIMFDate(cookie.expires)}`);
    if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);
    for (const part of cookie.unparsed){
        if (!part.includes("=")) throw new Error("Invalid unparsed");
        const [key, ...value] = part.split("=");
        out.push(`${key.trim()}=${value.join("=")}`);
    }
    return out.join("; ");
}
let $8f36b959f8ef5528$var$kHeadersListNode;
function $8f36b959f8ef5528$var$getHeadersList(headers) {
    if (headers[$8f36b959f8ef5528$require$kHeadersList]) return headers[$8f36b959f8ef5528$require$kHeadersList];
    if (!$8f36b959f8ef5528$var$kHeadersListNode) {
        $8f36b959f8ef5528$var$kHeadersListNode = Object.getOwnPropertySymbols(headers).find((symbol)=>symbol.description === "headers list");
        $4UN2M$assert($8f36b959f8ef5528$var$kHeadersListNode, "Headers cannot be parsed");
    }
    const headersList = headers[$8f36b959f8ef5528$var$kHeadersListNode];
    $4UN2M$assert(headersList);
    return headersList;
}
module.exports = {
    isCTLExcludingHtab: $8f36b959f8ef5528$var$isCTLExcludingHtab,
    stringify: $8f36b959f8ef5528$var$stringify,
    getHeadersList: $8f36b959f8ef5528$var$getHeadersList
};

});



parcelRegister("5hf7R", function(module, exports) {


var $3d7a45f655508531$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $7jIZt = parcelRequire("7jIZt");
var $3d7a45f655508531$require$webidl = $7jIZt.webidl;

var $fUNmM = parcelRequire("fUNmM");
var $3d7a45f655508531$require$DOMException = $fUNmM.DOMException;

var $h1hYV = parcelRequire("h1hYV");
var $3d7a45f655508531$require$URLSerializer = $h1hYV.URLSerializer;

var $lezha = parcelRequire("lezha");
var $3d7a45f655508531$require$getGlobalOrigin = $lezha.getGlobalOrigin;

var $6aI0s = parcelRequire("6aI0s");
var $3d7a45f655508531$require$staticPropertyDescriptors = $6aI0s.staticPropertyDescriptors;
var $3d7a45f655508531$require$states = $6aI0s.states;
var $3d7a45f655508531$require$opcodes = $6aI0s.opcodes;
var $3d7a45f655508531$require$emptyBuffer = $6aI0s.emptyBuffer;

var $9Qg1r = parcelRequire("9Qg1r");
var $3d7a45f655508531$require$kWebSocketURL = $9Qg1r.kWebSocketURL;
var $3d7a45f655508531$require$kReadyState = $9Qg1r.kReadyState;
var $3d7a45f655508531$require$kController = $9Qg1r.kController;
var $3d7a45f655508531$require$kBinaryType = $9Qg1r.kBinaryType;
var $3d7a45f655508531$require$kResponse = $9Qg1r.kResponse;
var $3d7a45f655508531$require$kSentClose = $9Qg1r.kSentClose;
var $3d7a45f655508531$require$kByteParser = $9Qg1r.kByteParser;

var $kFTRJ = parcelRequire("kFTRJ");
var $3d7a45f655508531$require$isEstablished = $kFTRJ.isEstablished;
var $3d7a45f655508531$require$isClosing = $kFTRJ.isClosing;
var $3d7a45f655508531$require$isValidSubprotocol = $kFTRJ.isValidSubprotocol;
var $3d7a45f655508531$require$failWebsocketConnection = $kFTRJ.failWebsocketConnection;
var $3d7a45f655508531$require$fireEvent = $kFTRJ.fireEvent;

var $9Vpet = parcelRequire("9Vpet");
var $3d7a45f655508531$require$establishWebSocketConnection = $9Vpet.establishWebSocketConnection;

var $7g8Fv = parcelRequire("7g8Fv");
var $3d7a45f655508531$require$WebsocketFrameSend = $7g8Fv.WebsocketFrameSend;

var $c4XEr = parcelRequire("c4XEr");
var $3d7a45f655508531$require$ByteParser = $c4XEr.ByteParser;

var $dZB1o = parcelRequire("dZB1o");
var $3d7a45f655508531$require$kEnumerableProperty = $dZB1o.kEnumerableProperty;
var $3d7a45f655508531$require$isBlobLike = $dZB1o.isBlobLike;

var $9L2fX = parcelRequire("9L2fX");
var $3d7a45f655508531$require$getGlobalDispatcher = $9L2fX.getGlobalDispatcher;

var $3d7a45f655508531$require$types = $4UN2M$util.types;
let $3d7a45f655508531$var$experimentalWarned = false;
// https://websockets.spec.whatwg.org/#interface-definition
class $3d7a45f655508531$var$WebSocket extends EventTarget {
    #events = {
        open: null,
        error: null,
        close: null,
        message: null
    };
    #bufferedAmount = 0;
    #protocol = "";
    #extensions = "";
    /**
   * @param {string} url
   * @param {string|string[]} protocols
   */ constructor(url, protocols = []){
        super();
        $3d7a45f655508531$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "WebSocket constructor"
        });
        if (!$3d7a45f655508531$var$experimentalWarned) {
            $3d7a45f655508531$var$experimentalWarned = true;
            $4UN2M$process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
                code: "UNDICI-WS"
            });
        }
        const options = $3d7a45f655508531$require$webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
        url = $3d7a45f655508531$require$webidl.converters.USVString(url);
        protocols = options.protocols;
        // 1. Let baseURL be this's relevant settings object's API base URL.
        const baseURL = $3d7a45f655508531$require$getGlobalOrigin();
        // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
        let urlRecord;
        try {
            urlRecord = new URL(url, baseURL);
        } catch (e) {
            // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
            throw new $3d7a45f655508531$require$DOMException(e, "SyntaxError");
        }
        // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
        if (urlRecord.protocol === "http:") urlRecord.protocol = "ws:";
        else if (urlRecord.protocol === "https:") // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
        urlRecord.protocol = "wss:";
        // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
        if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") throw new $3d7a45f655508531$require$DOMException(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
        // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
        //    DOMException.
        if (urlRecord.hash || urlRecord.href.endsWith("#")) throw new $3d7a45f655508531$require$DOMException("Got fragment", "SyntaxError");
        // 8. If protocols is a string, set protocols to a sequence consisting
        //    of just that string.
        if (typeof protocols === "string") protocols = [
            protocols
        ];
        // 9. If any of the values in protocols occur more than once or otherwise
        //    fail to match the requirements for elements that comprise the value
        //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
        //    protocol, then throw a "SyntaxError" DOMException.
        if (protocols.length !== new Set(protocols.map((p)=>p.toLowerCase())).size) throw new $3d7a45f655508531$require$DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        if (protocols.length > 0 && !protocols.every((p)=>$3d7a45f655508531$require$isValidSubprotocol(p))) throw new $3d7a45f655508531$require$DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        // 10. Set this's url to urlRecord.
        this[$3d7a45f655508531$require$kWebSocketURL] = new URL(urlRecord.href);
        // 11. Let client be this's relevant settings object.
        // 12. Run this step in parallel:
        //    1. Establish a WebSocket connection given urlRecord, protocols,
        //       and client.
        this[$3d7a45f655508531$require$kController] = $3d7a45f655508531$require$establishWebSocketConnection(urlRecord, protocols, this, (response)=>this.#onConnectionEstablished(response), options);
        // Each WebSocket object has an associated ready state, which is a
        // number representing the state of the connection. Initially it must
        // be CONNECTING (0).
        this[$3d7a45f655508531$require$kReadyState] = $3d7a45f655508531$var$WebSocket.CONNECTING;
        // The extensions attribute must initially return the empty string.
        // The protocol attribute must initially return the empty string.
        // Each WebSocket object has an associated binary type, which is a
        // BinaryType. Initially it must be "blob".
        this[$3d7a45f655508531$require$kBinaryType] = "blob";
    }
    /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
   * @param {number|undefined} code
   * @param {string|undefined} reason
   */ close(code, reason) {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        if (code !== undefined) code = $3d7a45f655508531$require$webidl.converters["unsigned short"](code, {
            clamp: true
        });
        if (reason !== undefined) reason = $3d7a45f655508531$require$webidl.converters.USVString(reason);
        // 1. If code is present, but is neither an integer equal to 1000 nor an
        //    integer in the range 3000 to 4999, inclusive, throw an
        //    "InvalidAccessError" DOMException.
        if (code !== undefined) {
            if (code !== 1000 && (code < 3000 || code > 4999)) throw new $3d7a45f655508531$require$DOMException("invalid code", "InvalidAccessError");
        }
        let reasonByteLength = 0;
        // 2. If reason is present, then run these substeps:
        if (reason !== undefined) {
            // 1. Let reasonBytes be the result of encoding reason.
            // 2. If reasonBytes is longer than 123 bytes, then throw a
            //    "SyntaxError" DOMException.
            reasonByteLength = $3d7a45f655508531$require$Buffer.byteLength(reason);
            if (reasonByteLength > 123) throw new $3d7a45f655508531$require$DOMException(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
        }
        // 3. Run the first matching steps from the following list:
        if (this[$3d7a45f655508531$require$kReadyState] === $3d7a45f655508531$var$WebSocket.CLOSING || this[$3d7a45f655508531$require$kReadyState] === $3d7a45f655508531$var$WebSocket.CLOSED) ;
        else if (!$3d7a45f655508531$require$isEstablished(this)) {
            // If the WebSocket connection is not yet established
            // Fail the WebSocket connection and set this's ready state
            // to CLOSING (2).
            $3d7a45f655508531$require$failWebsocketConnection(this, "Connection was closed before it was established.");
            this[$3d7a45f655508531$require$kReadyState] = $3d7a45f655508531$var$WebSocket.CLOSING;
        } else if (!$3d7a45f655508531$require$isClosing(this)) {
            // If the WebSocket closing handshake has not yet been started
            // Start the WebSocket closing handshake and set this's ready
            // state to CLOSING (2).
            // - If neither code nor reason is present, the WebSocket Close
            //   message must not have a body.
            // - If code is present, then the status code to use in the
            //   WebSocket Close message must be the integer given by code.
            // - If reason is also present, then reasonBytes must be
            //   provided in the Close message after the status code.
            const frame = new $3d7a45f655508531$require$WebsocketFrameSend();
            // If neither code nor reason is present, the WebSocket Close
            // message must not have a body.
            // If code is present, then the status code to use in the
            // WebSocket Close message must be the integer given by code.
            if (code !== undefined && reason === undefined) {
                frame.frameData = $3d7a45f655508531$require$Buffer.allocUnsafe(2);
                frame.frameData.writeUInt16BE(code, 0);
            } else if (code !== undefined && reason !== undefined) {
                // If reason is also present, then reasonBytes must be
                // provided in the Close message after the status code.
                frame.frameData = $3d7a45f655508531$require$Buffer.allocUnsafe(2 + reasonByteLength);
                frame.frameData.writeUInt16BE(code, 0);
                // the body MAY contain UTF-8-encoded data with value /reason/
                frame.frameData.write(reason, 2, "utf-8");
            } else frame.frameData = $3d7a45f655508531$require$emptyBuffer;
            /** @type {import('stream').Duplex} */ const socket = this[$3d7a45f655508531$require$kResponse].socket;
            socket.write(frame.createFrame($3d7a45f655508531$require$opcodes.CLOSE), (err)=>{
                if (!err) this[$3d7a45f655508531$require$kSentClose] = true;
            });
            // Upon either sending or receiving a Close control frame, it is said
            // that _The WebSocket Closing Handshake is Started_ and that the
            // WebSocket connection is in the CLOSING state.
            this[$3d7a45f655508531$require$kReadyState] = $3d7a45f655508531$require$states.CLOSING;
        } else // Otherwise
        // Set this's ready state to CLOSING (2).
        this[$3d7a45f655508531$require$kReadyState] = $3d7a45f655508531$var$WebSocket.CLOSING;
    }
    /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
   */ send(data) {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        $3d7a45f655508531$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "WebSocket.send"
        });
        data = $3d7a45f655508531$require$webidl.converters.WebSocketSendData(data);
        // 1. If this's ready state is CONNECTING, then throw an
        //    "InvalidStateError" DOMException.
        if (this[$3d7a45f655508531$require$kReadyState] === $3d7a45f655508531$var$WebSocket.CONNECTING) throw new $3d7a45f655508531$require$DOMException("Sent before connected.", "InvalidStateError");
        // 2. Run the appropriate set of steps from the following list:
        // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
        // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2
        if (!$3d7a45f655508531$require$isEstablished(this) || $3d7a45f655508531$require$isClosing(this)) return;
        /** @type {import('stream').Duplex} */ const socket = this[$3d7a45f655508531$require$kResponse].socket;
        // If data is a string
        if (typeof data === "string") {
            // If the WebSocket connection is established and the WebSocket
            // closing handshake has not yet started, then the user agent
            // must send a WebSocket Message comprised of the data argument
            // using a text frame opcode; if the data cannot be sent, e.g.
            // because it would need to be buffered but the buffer is full,
            // the user agent must flag the WebSocket as full and then close
            // the WebSocket connection. Any invocation of this method with a
            // string argument that does not throw an exception must increase
            // the bufferedAmount attribute by the number of bytes needed to
            // express the argument as UTF-8.
            const value = $3d7a45f655508531$require$Buffer.from(data);
            const frame = new $3d7a45f655508531$require$WebsocketFrameSend(value);
            const buffer = frame.createFrame($3d7a45f655508531$require$opcodes.TEXT);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, ()=>{
                this.#bufferedAmount -= value.byteLength;
            });
        } else if ($3d7a45f655508531$require$types.isArrayBuffer(data)) {
            // If the WebSocket connection is established, and the WebSocket
            // closing handshake has not yet started, then the user agent must
            // send a WebSocket Message comprised of data using a binary frame
            // opcode; if the data cannot be sent, e.g. because it would need
            // to be buffered but the buffer is full, the user agent must flag
            // the WebSocket as full and then close the WebSocket connection.
            // The data to be sent is the data stored in the buffer described
            // by the ArrayBuffer object. Any invocation of this method with an
            // ArrayBuffer argument that does not throw an exception must
            // increase the bufferedAmount attribute by the length of the
            // ArrayBuffer in bytes.
            const value = $3d7a45f655508531$require$Buffer.from(data);
            const frame = new $3d7a45f655508531$require$WebsocketFrameSend(value);
            const buffer = frame.createFrame($3d7a45f655508531$require$opcodes.BINARY);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, ()=>{
                this.#bufferedAmount -= value.byteLength;
            });
        } else if (ArrayBuffer.isView(data)) {
            // If the WebSocket connection is established, and the WebSocket
            // closing handshake has not yet started, then the user agent must
            // send a WebSocket Message comprised of data using a binary frame
            // opcode; if the data cannot be sent, e.g. because it would need to
            // be buffered but the buffer is full, the user agent must flag the
            // WebSocket as full and then close the WebSocket connection. The
            // data to be sent is the data stored in the section of the buffer
            // described by the ArrayBuffer object that data references. Any
            // invocation of this method with this kind of argument that does
            // not throw an exception must increase the bufferedAmount attribute
            // by the length of data’s buffer in bytes.
            const ab = $3d7a45f655508531$require$Buffer.from(data, data.byteOffset, data.byteLength);
            const frame = new $3d7a45f655508531$require$WebsocketFrameSend(ab);
            const buffer = frame.createFrame($3d7a45f655508531$require$opcodes.BINARY);
            this.#bufferedAmount += ab.byteLength;
            socket.write(buffer, ()=>{
                this.#bufferedAmount -= ab.byteLength;
            });
        } else if ($3d7a45f655508531$require$isBlobLike(data)) {
            // If the WebSocket connection is established, and the WebSocket
            // closing handshake has not yet started, then the user agent must
            // send a WebSocket Message comprised of data using a binary frame
            // opcode; if the data cannot be sent, e.g. because it would need to
            // be buffered but the buffer is full, the user agent must flag the
            // WebSocket as full and then close the WebSocket connection. The data
            // to be sent is the raw data represented by the Blob object. Any
            // invocation of this method with a Blob argument that does not throw
            // an exception must increase the bufferedAmount attribute by the size
            // of the Blob object’s raw data, in bytes.
            const frame = new $3d7a45f655508531$require$WebsocketFrameSend();
            data.arrayBuffer().then((ab)=>{
                const value = $3d7a45f655508531$require$Buffer.from(ab);
                frame.frameData = value;
                const buffer = frame.createFrame($3d7a45f655508531$require$opcodes.BINARY);
                this.#bufferedAmount += value.byteLength;
                socket.write(buffer, ()=>{
                    this.#bufferedAmount -= value.byteLength;
                });
            });
        }
    }
    get readyState() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        // The readyState getter steps are to return this's ready state.
        return this[$3d7a45f655508531$require$kReadyState];
    }
    get bufferedAmount() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this.#bufferedAmount;
    }
    get url() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        // The url getter steps are to return this's url, serialized.
        return $3d7a45f655508531$require$URLSerializer(this[$3d7a45f655508531$require$kWebSocketURL]);
    }
    get extensions() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this.#extensions;
    }
    get protocol() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this.#protocol;
    }
    get onopen() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this.#events.open;
    }
    set onopen(fn) {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        if (this.#events.open) this.removeEventListener("open", this.#events.open);
        if (typeof fn === "function") {
            this.#events.open = fn;
            this.addEventListener("open", fn);
        } else this.#events.open = null;
    }
    get onerror() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this.#events.error;
    }
    set onerror(fn) {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        if (this.#events.error) this.removeEventListener("error", this.#events.error);
        if (typeof fn === "function") {
            this.#events.error = fn;
            this.addEventListener("error", fn);
        } else this.#events.error = null;
    }
    get onclose() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this.#events.close;
    }
    set onclose(fn) {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        if (this.#events.close) this.removeEventListener("close", this.#events.close);
        if (typeof fn === "function") {
            this.#events.close = fn;
            this.addEventListener("close", fn);
        } else this.#events.close = null;
    }
    get onmessage() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this.#events.message;
    }
    set onmessage(fn) {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        if (this.#events.message) this.removeEventListener("message", this.#events.message);
        if (typeof fn === "function") {
            this.#events.message = fn;
            this.addEventListener("message", fn);
        } else this.#events.message = null;
    }
    get binaryType() {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        return this[$3d7a45f655508531$require$kBinaryType];
    }
    set binaryType(type) {
        $3d7a45f655508531$require$webidl.brandCheck(this, $3d7a45f655508531$var$WebSocket);
        if (type !== "blob" && type !== "arraybuffer") this[$3d7a45f655508531$require$kBinaryType] = "blob";
        else this[$3d7a45f655508531$require$kBinaryType] = type;
    }
    /**
   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
   */ #onConnectionEstablished(response) {
        // processResponse is called when the "response’s header list has been received and initialized."
        // once this happens, the connection is open
        this[$3d7a45f655508531$require$kResponse] = response;
        const parser = new $3d7a45f655508531$require$ByteParser(this);
        parser.on("drain", function onParserDrain() {
            this.ws[$3d7a45f655508531$require$kResponse].socket.resume();
        });
        response.socket.ws = this;
        this[$3d7a45f655508531$require$kByteParser] = parser;
        // 1. Change the ready state to OPEN (1).
        this[$3d7a45f655508531$require$kReadyState] = $3d7a45f655508531$require$states.OPEN;
        // 2. Change the extensions attribute’s value to the extensions in use, if
        //    it is not the null value.
        // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
        const extensions = response.headersList.get("sec-websocket-extensions");
        if (extensions !== null) this.#extensions = extensions;
        // 3. Change the protocol attribute’s value to the subprotocol in use, if
        //    it is not the null value.
        // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
        const protocol = response.headersList.get("sec-websocket-protocol");
        if (protocol !== null) this.#protocol = protocol;
        // 4. Fire an event named open at the WebSocket object.
        $3d7a45f655508531$require$fireEvent("open", this);
    }
}
// https://websockets.spec.whatwg.org/#dom-websocket-connecting
$3d7a45f655508531$var$WebSocket.CONNECTING = $3d7a45f655508531$var$WebSocket.prototype.CONNECTING = $3d7a45f655508531$require$states.CONNECTING;
// https://websockets.spec.whatwg.org/#dom-websocket-open
$3d7a45f655508531$var$WebSocket.OPEN = $3d7a45f655508531$var$WebSocket.prototype.OPEN = $3d7a45f655508531$require$states.OPEN;
// https://websockets.spec.whatwg.org/#dom-websocket-closing
$3d7a45f655508531$var$WebSocket.CLOSING = $3d7a45f655508531$var$WebSocket.prototype.CLOSING = $3d7a45f655508531$require$states.CLOSING;
// https://websockets.spec.whatwg.org/#dom-websocket-closed
$3d7a45f655508531$var$WebSocket.CLOSED = $3d7a45f655508531$var$WebSocket.prototype.CLOSED = $3d7a45f655508531$require$states.CLOSED;
Object.defineProperties($3d7a45f655508531$var$WebSocket.prototype, {
    CONNECTING: $3d7a45f655508531$require$staticPropertyDescriptors,
    OPEN: $3d7a45f655508531$require$staticPropertyDescriptors,
    CLOSING: $3d7a45f655508531$require$staticPropertyDescriptors,
    CLOSED: $3d7a45f655508531$require$staticPropertyDescriptors,
    url: $3d7a45f655508531$require$kEnumerableProperty,
    readyState: $3d7a45f655508531$require$kEnumerableProperty,
    bufferedAmount: $3d7a45f655508531$require$kEnumerableProperty,
    onopen: $3d7a45f655508531$require$kEnumerableProperty,
    onerror: $3d7a45f655508531$require$kEnumerableProperty,
    onclose: $3d7a45f655508531$require$kEnumerableProperty,
    close: $3d7a45f655508531$require$kEnumerableProperty,
    onmessage: $3d7a45f655508531$require$kEnumerableProperty,
    binaryType: $3d7a45f655508531$require$kEnumerableProperty,
    send: $3d7a45f655508531$require$kEnumerableProperty,
    extensions: $3d7a45f655508531$require$kEnumerableProperty,
    protocol: $3d7a45f655508531$require$kEnumerableProperty,
    [Symbol.toStringTag]: {
        value: "WebSocket",
        writable: false,
        enumerable: false,
        configurable: true
    }
});
Object.defineProperties($3d7a45f655508531$var$WebSocket, {
    CONNECTING: $3d7a45f655508531$require$staticPropertyDescriptors,
    OPEN: $3d7a45f655508531$require$staticPropertyDescriptors,
    CLOSING: $3d7a45f655508531$require$staticPropertyDescriptors,
    CLOSED: $3d7a45f655508531$require$staticPropertyDescriptors
});
$3d7a45f655508531$require$webidl.converters["sequence<DOMString>"] = $3d7a45f655508531$require$webidl.sequenceConverter($3d7a45f655508531$require$webidl.converters.DOMString);
$3d7a45f655508531$require$webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
    if ($3d7a45f655508531$require$webidl.util.Type(V) === "Object" && Symbol.iterator in V) return $3d7a45f655508531$require$webidl.converters["sequence<DOMString>"](V);
    return $3d7a45f655508531$require$webidl.converters.DOMString(V);
};
// This implements the propsal made in https://github.com/whatwg/websockets/issues/42
$3d7a45f655508531$require$webidl.converters.WebSocketInit = $3d7a45f655508531$require$webidl.dictionaryConverter([
    {
        key: "protocols",
        converter: $3d7a45f655508531$require$webidl.converters["DOMString or sequence<DOMString>"],
        get defaultValue () {
            return [];
        }
    },
    {
        key: "dispatcher",
        converter: (V)=>V,
        get defaultValue () {
            return $3d7a45f655508531$require$getGlobalDispatcher();
        }
    },
    {
        key: "headers",
        converter: $3d7a45f655508531$require$webidl.nullableConverter($3d7a45f655508531$require$webidl.converters.HeadersInit)
    }
]);
$3d7a45f655508531$require$webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
    if ($3d7a45f655508531$require$webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) return $3d7a45f655508531$require$webidl.converters.WebSocketInit(V);
    return {
        protocols: $3d7a45f655508531$require$webidl.converters["DOMString or sequence<DOMString>"](V)
    };
};
$3d7a45f655508531$require$webidl.converters.WebSocketSendData = function(V) {
    if ($3d7a45f655508531$require$webidl.util.Type(V) === "Object") {
        if ($3d7a45f655508531$require$isBlobLike(V)) return $3d7a45f655508531$require$webidl.converters.Blob(V, {
            strict: false
        });
        if (ArrayBuffer.isView(V) || $3d7a45f655508531$require$types.isAnyArrayBuffer(V)) return $3d7a45f655508531$require$webidl.converters.BufferSource(V);
    }
    return $3d7a45f655508531$require$webidl.converters.USVString(V);
};
module.exports = {
    WebSocket: $3d7a45f655508531$var$WebSocket
};

});
parcelRegister("6aI0s", function(module, exports) {

var $47e5d0013c677ca6$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";
// This is a Globally Unique Identifier unique used
// to validate that the endpoint accepts websocket
// connections.
// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
const $47e5d0013c677ca6$var$uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
/** @type {PropertyDescriptor} */ const $47e5d0013c677ca6$var$staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
};
const $47e5d0013c677ca6$var$states = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3
};
const $47e5d0013c677ca6$var$opcodes = {
    CONTINUATION: 0x0,
    TEXT: 0x1,
    BINARY: 0x2,
    CLOSE: 0x8,
    PING: 0x9,
    PONG: 0xA
};
const $47e5d0013c677ca6$var$maxUnsigned16Bit = 2 ** 16 - 1 // 65535
;
const $47e5d0013c677ca6$var$parserStates = {
    INFO: 0,
    PAYLOADLENGTH_16: 2,
    PAYLOADLENGTH_64: 3,
    READ_DATA: 4
};
const $47e5d0013c677ca6$var$emptyBuffer = $47e5d0013c677ca6$require$Buffer.allocUnsafe(0);
module.exports = {
    uid: $47e5d0013c677ca6$var$uid,
    staticPropertyDescriptors: $47e5d0013c677ca6$var$staticPropertyDescriptors,
    states: $47e5d0013c677ca6$var$states,
    opcodes: $47e5d0013c677ca6$var$opcodes,
    maxUnsigned16Bit: $47e5d0013c677ca6$var$maxUnsigned16Bit,
    parserStates: $47e5d0013c677ca6$var$parserStates,
    emptyBuffer: $47e5d0013c677ca6$var$emptyBuffer
};

});

parcelRegister("9Qg1r", function(module, exports) {
"use strict";
module.exports = {
    kWebSocketURL: Symbol("url"),
    kReadyState: Symbol("ready state"),
    kController: Symbol("controller"),
    kResponse: Symbol("response"),
    kBinaryType: Symbol("binary type"),
    kSentClose: Symbol("sent close"),
    kReceivedClose: Symbol("received close"),
    kByteParser: Symbol("byte parser")
};

});

parcelRegister("kFTRJ", function(module, exports) {
"use strict";

var $9Qg1r = parcelRequire("9Qg1r");
var $f0d2f8c0e0772370$require$kReadyState = $9Qg1r.kReadyState;
var $f0d2f8c0e0772370$require$kController = $9Qg1r.kController;
var $f0d2f8c0e0772370$require$kResponse = $9Qg1r.kResponse;
var $f0d2f8c0e0772370$require$kBinaryType = $9Qg1r.kBinaryType;
var $f0d2f8c0e0772370$require$kWebSocketURL = $9Qg1r.kWebSocketURL;

var $6aI0s = parcelRequire("6aI0s");
var $f0d2f8c0e0772370$require$states = $6aI0s.states;
var $f0d2f8c0e0772370$require$opcodes = $6aI0s.opcodes;

var $71vtE = parcelRequire("71vtE");
var $f0d2f8c0e0772370$require$MessageEvent = $71vtE.MessageEvent;
var $f0d2f8c0e0772370$require$ErrorEvent = $71vtE.ErrorEvent;
/* globals Blob */ /**
 * @param {import('./websocket').WebSocket} ws
 */ function $f0d2f8c0e0772370$var$isEstablished(ws) {
    // If the server's response is validated as provided for above, it is
    // said that _The WebSocket Connection is Established_ and that the
    // WebSocket Connection is in the OPEN state.
    return ws[$f0d2f8c0e0772370$require$kReadyState] === $f0d2f8c0e0772370$require$states.OPEN;
}
/**
 * @param {import('./websocket').WebSocket} ws
 */ function $f0d2f8c0e0772370$var$isClosing(ws) {
    // Upon either sending or receiving a Close control frame, it is said
    // that _The WebSocket Closing Handshake is Started_ and that the
    // WebSocket connection is in the CLOSING state.
    return ws[$f0d2f8c0e0772370$require$kReadyState] === $f0d2f8c0e0772370$require$states.CLOSING;
}
/**
 * @param {import('./websocket').WebSocket} ws
 */ function $f0d2f8c0e0772370$var$isClosed(ws) {
    return ws[$f0d2f8c0e0772370$require$kReadyState] === $f0d2f8c0e0772370$require$states.CLOSED;
}
/**
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e
 * @param {EventTarget} target
 * @param {EventInit | undefined} eventInitDict
 */ function $f0d2f8c0e0772370$var$fireEvent(e, target, eventConstructor = Event, eventInitDict) {
    // 1. If eventConstructor is not given, then let eventConstructor be Event.
    // 2. Let event be the result of creating an event given eventConstructor,
    //    in the relevant realm of target.
    // 3. Initialize event’s type attribute to e.
    const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap
    ;
    // 4. Initialize any other IDL attributes of event as described in the
    //    invocation of this algorithm.
    // 5. Return the result of dispatching event at target, with legacy target
    //    override flag set if set.
    target.dispatchEvent(event);
}
/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @param {import('./websocket').WebSocket} ws
 * @param {number} type Opcode
 * @param {Buffer} data application data
 */ function $f0d2f8c0e0772370$var$websocketMessageReceived(ws, type, data) {
    // 1. If ready state is not OPEN (1), then return.
    if (ws[$f0d2f8c0e0772370$require$kReadyState] !== $f0d2f8c0e0772370$require$states.OPEN) return;
    // 2. Let dataForEvent be determined by switching on type and binary type:
    let dataForEvent;
    if (type === $f0d2f8c0e0772370$require$opcodes.TEXT) // -> type indicates that the data is Text
    //      a new DOMString containing data
    try {
        dataForEvent = new TextDecoder("utf-8", {
            fatal: true
        }).decode(data);
    } catch  {
        $f0d2f8c0e0772370$var$failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
        return;
    }
    else if (type === $f0d2f8c0e0772370$require$opcodes.BINARY) {
        if (ws[$f0d2f8c0e0772370$require$kBinaryType] === "blob") // -> type indicates that the data is Binary and binary type is "blob"
        //      a new Blob object, created in the relevant Realm of the WebSocket
        //      object, that represents data as its raw data
        dataForEvent = new Blob([
            data
        ]);
        else // -> type indicates that the data is Binary and binary type is "arraybuffer"
        //      a new ArrayBuffer object, created in the relevant Realm of the
        //      WebSocket object, whose contents are data
        dataForEvent = new Uint8Array(data).buffer;
    }
    // 3. Fire an event named message at the WebSocket object, using MessageEvent,
    //    with the origin attribute initialized to the serialization of the WebSocket
    //    object’s url's origin, and the data attribute initialized to dataForEvent.
    $f0d2f8c0e0772370$var$fireEvent("message", ws, $f0d2f8c0e0772370$require$MessageEvent, {
        origin: ws[$f0d2f8c0e0772370$require$kWebSocketURL].origin,
        data: dataForEvent
    });
}
/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455
 * @see https://datatracker.ietf.org/doc/html/rfc2616
 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
 * @param {string} protocol
 */ function $f0d2f8c0e0772370$var$isValidSubprotocol(protocol) {
    // If present, this value indicates one
    // or more comma-separated subprotocol the client wishes to speak,
    // ordered by preference.  The elements that comprise this value
    // MUST be non-empty strings with characters in the range U+0021 to
    // U+007E not including separator characters as defined in
    // [RFC2616] and MUST all be unique strings.
    if (protocol.length === 0) return false;
    for (const char of protocol){
        const code = char.charCodeAt(0);
        if (code < 0x21 || code > 0x7E || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || // SP
        code === 9 // HT
        ) return false;
    }
    return true;
}
/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
 * @param {number} code
 */ function $f0d2f8c0e0772370$var$isValidStatusCode(code) {
    if (code >= 1000 && code < 1015) return code !== 1004 && // reserved
    code !== 1005 && // "MUST NOT be set as a status code"
    code !== 1006 // "MUST NOT be set as a status code"
    ;
    return code >= 3000 && code <= 4999;
}
/**
 * @param {import('./websocket').WebSocket} ws
 * @param {string|undefined} reason
 */ function $f0d2f8c0e0772370$var$failWebsocketConnection(ws, reason) {
    const { [$f0d2f8c0e0772370$require$kController]: controller, [$f0d2f8c0e0772370$require$kResponse]: response } = ws;
    controller.abort();
    if (response?.socket && !response.socket.destroyed) response.socket.destroy();
    if (reason) $f0d2f8c0e0772370$var$fireEvent("error", ws, $f0d2f8c0e0772370$require$ErrorEvent, {
        error: new Error(reason)
    });
}
module.exports = {
    isEstablished: $f0d2f8c0e0772370$var$isEstablished,
    isClosing: $f0d2f8c0e0772370$var$isClosing,
    isClosed: $f0d2f8c0e0772370$var$isClosed,
    fireEvent: $f0d2f8c0e0772370$var$fireEvent,
    isValidSubprotocol: $f0d2f8c0e0772370$var$isValidSubprotocol,
    isValidStatusCode: $f0d2f8c0e0772370$var$isValidStatusCode,
    failWebsocketConnection: $f0d2f8c0e0772370$var$failWebsocketConnection,
    websocketMessageReceived: $f0d2f8c0e0772370$var$websocketMessageReceived
};

});
parcelRegister("71vtE", function(module, exports) {
"use strict";

var $7jIZt = parcelRequire("7jIZt");
var $51d10b259baf1ab9$require$webidl = $7jIZt.webidl;

var $dZB1o = parcelRequire("dZB1o");
var $51d10b259baf1ab9$require$kEnumerableProperty = $dZB1o.kEnumerableProperty;

var $51d10b259baf1ab9$require$MessagePort = $4UN2M$worker_threads.MessagePort;
/**
 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
 */ class $51d10b259baf1ab9$var$MessageEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}){
        $51d10b259baf1ab9$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "MessageEvent constructor"
        });
        type = $51d10b259baf1ab9$require$webidl.converters.DOMString(type);
        eventInitDict = $51d10b259baf1ab9$require$webidl.converters.MessageEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
    }
    get data() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$MessageEvent);
        return this.#eventInit.data;
    }
    get origin() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$MessageEvent);
        return this.#eventInit.origin;
    }
    get lastEventId() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$MessageEvent);
        return this.#eventInit.lastEventId;
    }
    get source() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$MessageEvent);
        return this.#eventInit.source;
    }
    get ports() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$MessageEvent);
        if (!Object.isFrozen(this.#eventInit.ports)) Object.freeze(this.#eventInit.ports);
        return this.#eventInit.ports;
    }
    initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$MessageEvent);
        $51d10b259baf1ab9$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "MessageEvent.initMessageEvent"
        });
        return new $51d10b259baf1ab9$var$MessageEvent(type, {
            bubbles: bubbles,
            cancelable: cancelable,
            data: data,
            origin: origin,
            lastEventId: lastEventId,
            source: source,
            ports: ports
        });
    }
}
/**
 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
 */ class $51d10b259baf1ab9$var$CloseEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}){
        $51d10b259baf1ab9$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "CloseEvent constructor"
        });
        type = $51d10b259baf1ab9$require$webidl.converters.DOMString(type);
        eventInitDict = $51d10b259baf1ab9$require$webidl.converters.CloseEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
    }
    get wasClean() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$CloseEvent);
        return this.#eventInit.wasClean;
    }
    get code() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$CloseEvent);
        return this.#eventInit.code;
    }
    get reason() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$CloseEvent);
        return this.#eventInit.reason;
    }
}
// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
class $51d10b259baf1ab9$var$ErrorEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict){
        $51d10b259baf1ab9$require$webidl.argumentLengthCheck(arguments, 1, {
            header: "ErrorEvent constructor"
        });
        super(type, eventInitDict);
        type = $51d10b259baf1ab9$require$webidl.converters.DOMString(type);
        eventInitDict = $51d10b259baf1ab9$require$webidl.converters.ErrorEventInit(eventInitDict ?? {});
        this.#eventInit = eventInitDict;
    }
    get message() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$ErrorEvent);
        return this.#eventInit.message;
    }
    get filename() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$ErrorEvent);
        return this.#eventInit.filename;
    }
    get lineno() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$ErrorEvent);
        return this.#eventInit.lineno;
    }
    get colno() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$ErrorEvent);
        return this.#eventInit.colno;
    }
    get error() {
        $51d10b259baf1ab9$require$webidl.brandCheck(this, $51d10b259baf1ab9$var$ErrorEvent);
        return this.#eventInit.error;
    }
}
Object.defineProperties($51d10b259baf1ab9$var$MessageEvent.prototype, {
    [Symbol.toStringTag]: {
        value: "MessageEvent",
        configurable: true
    },
    data: $51d10b259baf1ab9$require$kEnumerableProperty,
    origin: $51d10b259baf1ab9$require$kEnumerableProperty,
    lastEventId: $51d10b259baf1ab9$require$kEnumerableProperty,
    source: $51d10b259baf1ab9$require$kEnumerableProperty,
    ports: $51d10b259baf1ab9$require$kEnumerableProperty,
    initMessageEvent: $51d10b259baf1ab9$require$kEnumerableProperty
});
Object.defineProperties($51d10b259baf1ab9$var$CloseEvent.prototype, {
    [Symbol.toStringTag]: {
        value: "CloseEvent",
        configurable: true
    },
    reason: $51d10b259baf1ab9$require$kEnumerableProperty,
    code: $51d10b259baf1ab9$require$kEnumerableProperty,
    wasClean: $51d10b259baf1ab9$require$kEnumerableProperty
});
Object.defineProperties($51d10b259baf1ab9$var$ErrorEvent.prototype, {
    [Symbol.toStringTag]: {
        value: "ErrorEvent",
        configurable: true
    },
    message: $51d10b259baf1ab9$require$kEnumerableProperty,
    filename: $51d10b259baf1ab9$require$kEnumerableProperty,
    lineno: $51d10b259baf1ab9$require$kEnumerableProperty,
    colno: $51d10b259baf1ab9$require$kEnumerableProperty,
    error: $51d10b259baf1ab9$require$kEnumerableProperty
});
$51d10b259baf1ab9$require$webidl.converters.MessagePort = $51d10b259baf1ab9$require$webidl.interfaceConverter($51d10b259baf1ab9$require$MessagePort);
$51d10b259baf1ab9$require$webidl.converters["sequence<MessagePort>"] = $51d10b259baf1ab9$require$webidl.sequenceConverter($51d10b259baf1ab9$require$webidl.converters.MessagePort);
const $51d10b259baf1ab9$var$eventInit = [
    {
        key: "bubbles",
        converter: $51d10b259baf1ab9$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "cancelable",
        converter: $51d10b259baf1ab9$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "composed",
        converter: $51d10b259baf1ab9$require$webidl.converters.boolean,
        defaultValue: false
    }
];
$51d10b259baf1ab9$require$webidl.converters.MessageEventInit = $51d10b259baf1ab9$require$webidl.dictionaryConverter([
    ...$51d10b259baf1ab9$var$eventInit,
    {
        key: "data",
        converter: $51d10b259baf1ab9$require$webidl.converters.any,
        defaultValue: null
    },
    {
        key: "origin",
        converter: $51d10b259baf1ab9$require$webidl.converters.USVString,
        defaultValue: ""
    },
    {
        key: "lastEventId",
        converter: $51d10b259baf1ab9$require$webidl.converters.DOMString,
        defaultValue: ""
    },
    {
        key: "source",
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: $51d10b259baf1ab9$require$webidl.nullableConverter($51d10b259baf1ab9$require$webidl.converters.MessagePort),
        defaultValue: null
    },
    {
        key: "ports",
        converter: $51d10b259baf1ab9$require$webidl.converters["sequence<MessagePort>"],
        get defaultValue () {
            return [];
        }
    }
]);
$51d10b259baf1ab9$require$webidl.converters.CloseEventInit = $51d10b259baf1ab9$require$webidl.dictionaryConverter([
    ...$51d10b259baf1ab9$var$eventInit,
    {
        key: "wasClean",
        converter: $51d10b259baf1ab9$require$webidl.converters.boolean,
        defaultValue: false
    },
    {
        key: "code",
        converter: $51d10b259baf1ab9$require$webidl.converters["unsigned short"],
        defaultValue: 0
    },
    {
        key: "reason",
        converter: $51d10b259baf1ab9$require$webidl.converters.USVString,
        defaultValue: ""
    }
]);
$51d10b259baf1ab9$require$webidl.converters.ErrorEventInit = $51d10b259baf1ab9$require$webidl.dictionaryConverter([
    ...$51d10b259baf1ab9$var$eventInit,
    {
        key: "message",
        converter: $51d10b259baf1ab9$require$webidl.converters.DOMString,
        defaultValue: ""
    },
    {
        key: "filename",
        converter: $51d10b259baf1ab9$require$webidl.converters.USVString,
        defaultValue: ""
    },
    {
        key: "lineno",
        converter: $51d10b259baf1ab9$require$webidl.converters["unsigned long"],
        defaultValue: 0
    },
    {
        key: "colno",
        converter: $51d10b259baf1ab9$require$webidl.converters["unsigned long"],
        defaultValue: 0
    },
    {
        key: "error",
        converter: $51d10b259baf1ab9$require$webidl.converters.any
    }
]);
module.exports = {
    MessageEvent: $51d10b259baf1ab9$var$MessageEvent,
    CloseEvent: $51d10b259baf1ab9$var$CloseEvent,
    ErrorEvent: $51d10b259baf1ab9$var$ErrorEvent
};

});


parcelRegister("9Vpet", function(module, exports) {
"use strict";


var $6aI0s = parcelRequire("6aI0s");
var $739d028e00fd8222$require$uid = $6aI0s.uid;
var $739d028e00fd8222$require$states = $6aI0s.states;

var $9Qg1r = parcelRequire("9Qg1r");
var $739d028e00fd8222$require$kReadyState = $9Qg1r.kReadyState;
var $739d028e00fd8222$require$kSentClose = $9Qg1r.kSentClose;
var $739d028e00fd8222$require$kByteParser = $9Qg1r.kByteParser;
var $739d028e00fd8222$require$kReceivedClose = $9Qg1r.kReceivedClose;

var $kFTRJ = parcelRequire("kFTRJ");
var $739d028e00fd8222$require$fireEvent = $kFTRJ.fireEvent;
var $739d028e00fd8222$require$failWebsocketConnection = $kFTRJ.failWebsocketConnection;

var $71vtE = parcelRequire("71vtE");
var $739d028e00fd8222$require$CloseEvent = $71vtE.CloseEvent;

var $73TbT = parcelRequire("73TbT");
var $739d028e00fd8222$require$makeRequest = $73TbT.makeRequest;

var $9lkwe = parcelRequire("9lkwe");
var $739d028e00fd8222$require$fetching = $9lkwe.fetching;

var $30zmV = parcelRequire("30zmV");
var $739d028e00fd8222$require$Headers = $30zmV.Headers;

var $9L2fX = parcelRequire("9L2fX");
var $739d028e00fd8222$require$getGlobalDispatcher = $9L2fX.getGlobalDispatcher;

var $9Yodq = parcelRequire("9Yodq");
var $739d028e00fd8222$require$kHeadersList = $9Yodq.kHeadersList;
const $739d028e00fd8222$var$channels = {};
$739d028e00fd8222$var$channels.open = $4UN2M$diagnostics_channel.channel("undici:websocket:open");
$739d028e00fd8222$var$channels.close = $4UN2M$diagnostics_channel.channel("undici:websocket:close");
$739d028e00fd8222$var$channels.socketError = $4UN2M$diagnostics_channel.channel("undici:websocket:socket_error");
/** @type {import('crypto')} */ let $739d028e00fd8222$var$crypto;

try {
    $739d028e00fd8222$var$crypto = $739d028e00fd8222$import$dcf5ad41f4662e6f;
} catch  {}
/**
 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
 * @param {URL} url
 * @param {string|string[]} protocols
 * @param {import('./websocket').WebSocket} ws
 * @param {(response: any) => void} onEstablish
 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
 */ function $739d028e00fd8222$var$establishWebSocketConnection(url, protocols, ws, onEstablish, options) {
    // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
    //    scheme is "ws", and to "https" otherwise.
    const requestURL = url;
    requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
    // 2. Let request be a new request, whose URL is requestURL, client is client,
    //    service-workers mode is "none", referrer is "no-referrer", mode is
    //    "websocket", credentials mode is "include", cache mode is "no-store" ,
    //    and redirect mode is "error".
    const request = $739d028e00fd8222$require$makeRequest({
        urlList: [
            requestURL
        ],
        serviceWorkers: "none",
        referrer: "no-referrer",
        mode: "websocket",
        credentials: "include",
        cache: "no-store",
        redirect: "error"
    });
    // Note: undici extension, allow setting custom headers.
    if (options.headers) {
        const headersList = new $739d028e00fd8222$require$Headers(options.headers)[$739d028e00fd8222$require$kHeadersList];
        request.headersList = headersList;
    }
    // 3. Append (`Upgrade`, `websocket`) to request’s header list.
    // 4. Append (`Connection`, `Upgrade`) to request’s header list.
    // Note: both of these are handled by undici currently.
    // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397
    // 5. Let keyValue be a nonce consisting of a randomly selected
    //    16-byte value that has been forgiving-base64-encoded and
    //    isomorphic encoded.
    const keyValue = $739d028e00fd8222$var$crypto.randomBytes(16).toString("base64");
    // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
    //    header list.
    request.headersList.append("sec-websocket-key", keyValue);
    // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
    //    header list.
    request.headersList.append("sec-websocket-version", "13");
    // 8. For each protocol in protocols, combine
    //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
    //    list.
    for (const protocol of protocols)request.headersList.append("sec-websocket-protocol", protocol);
    // 9. Let permessageDeflate be a user-agent defined
    //    "permessage-deflate" extension header value.
    // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
    // TODO: enable once permessage-deflate is supported
    const permessageDeflate = "" // 'permessage-deflate; 15'
    ;
    // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
    //     request’s header list.
    // request.headersList.append('sec-websocket-extensions', permessageDeflate)
    // 11. Fetch request with useParallelQueue set to true, and
    //     processResponse given response being these steps:
    const controller = $739d028e00fd8222$require$fetching({
        request: request,
        useParallelQueue: true,
        dispatcher: options.dispatcher ?? $739d028e00fd8222$require$getGlobalDispatcher(),
        processResponse (response) {
            // 1. If response is a network error or its status is not 101,
            //    fail the WebSocket connection.
            if (response.type === "error" || response.status !== 101) {
                $739d028e00fd8222$require$failWebsocketConnection(ws, "Received network error or non-101 status code.");
                return;
            }
            // 2. If protocols is not the empty list and extracting header
            //    list values given `Sec-WebSocket-Protocol` and response’s
            //    header list results in null, failure, or the empty byte
            //    sequence, then fail the WebSocket connection.
            if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
                $739d028e00fd8222$require$failWebsocketConnection(ws, "Server did not respond with sent protocols.");
                return;
            }
            // 3. Follow the requirements stated step 2 to step 6, inclusive,
            //    of the last set of steps in section 4.1 of The WebSocket
            //    Protocol to validate response. This either results in fail
            //    the WebSocket connection or the WebSocket connection is
            //    established.
            // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
            //    header field contains a value that is not an ASCII case-
            //    insensitive match for the value "websocket", the client MUST
            //    _Fail the WebSocket Connection_.
            if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
                $739d028e00fd8222$require$failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
                return;
            }
            // 3. If the response lacks a |Connection| header field or the
            //    |Connection| header field doesn't contain a token that is an
            //    ASCII case-insensitive match for the value "Upgrade", the client
            //    MUST _Fail the WebSocket Connection_.
            if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
                $739d028e00fd8222$require$failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
                return;
            }
            // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
            //    the |Sec-WebSocket-Accept| contains a value other than the
            //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
            //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
            //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
            //    trailing whitespace, the client MUST _Fail the WebSocket
            //    Connection_.
            const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
            const digest = $739d028e00fd8222$var$crypto.createHash("sha1").update(keyValue + $739d028e00fd8222$require$uid).digest("base64");
            if (secWSAccept !== digest) {
                $739d028e00fd8222$require$failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
                return;
            }
            // 5. If the response includes a |Sec-WebSocket-Extensions| header
            //    field and this header field indicates the use of an extension
            //    that was not present in the client's handshake (the server has
            //    indicated an extension not requested by the client), the client
            //    MUST _Fail the WebSocket Connection_.  (The parsing of this
            //    header field to determine which extensions are requested is
            //    discussed in Section 9.1.)
            const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
            if (secExtension !== null && secExtension !== permessageDeflate) {
                $739d028e00fd8222$require$failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
                return;
            }
            // 6. If the response includes a |Sec-WebSocket-Protocol| header field
            //    and this header field indicates the use of a subprotocol that was
            //    not present in the client's handshake (the server has indicated a
            //    subprotocol not requested by the client), the client MUST _Fail
            //    the WebSocket Connection_.
            const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
            if (secProtocol !== null && secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")) {
                $739d028e00fd8222$require$failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
                return;
            }
            response.socket.on("data", $739d028e00fd8222$var$onSocketData);
            response.socket.on("close", $739d028e00fd8222$var$onSocketClose);
            response.socket.on("error", $739d028e00fd8222$var$onSocketError);
            if ($739d028e00fd8222$var$channels.open.hasSubscribers) $739d028e00fd8222$var$channels.open.publish({
                address: response.socket.address(),
                protocol: secProtocol,
                extensions: secExtension
            });
            onEstablish(response);
        }
    });
    return controller;
}
/**
 * @param {Buffer} chunk
 */ function $739d028e00fd8222$var$onSocketData(chunk) {
    if (!this.ws[$739d028e00fd8222$require$kByteParser].write(chunk)) this.pause();
}
/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
 */ function $739d028e00fd8222$var$onSocketClose() {
    const { ws: ws } = this;
    // If the TCP connection was closed after the
    // WebSocket closing handshake was completed, the WebSocket connection
    // is said to have been closed _cleanly_.
    const wasClean = ws[$739d028e00fd8222$require$kSentClose] && ws[$739d028e00fd8222$require$kReceivedClose];
    let code = 1005;
    let reason = "";
    const result = ws[$739d028e00fd8222$require$kByteParser].closingInfo;
    if (result) {
        code = result.code ?? 1005;
        reason = result.reason;
    } else if (!ws[$739d028e00fd8222$require$kSentClose]) // If _The WebSocket
    // Connection is Closed_ and no Close control frame was received by the
    // endpoint (such as could occur if the underlying transport connection
    // is lost), _The WebSocket Connection Close Code_ is considered to be
    // 1006.
    code = 1006;
    // 1. Change the ready state to CLOSED (3).
    ws[$739d028e00fd8222$require$kReadyState] = $739d028e00fd8222$require$states.CLOSED;
    // 2. If the user agent was required to fail the WebSocket
    //    connection, or if the WebSocket connection was closed
    //    after being flagged as full, fire an event named error
    //    at the WebSocket object.
    // TODO
    // 3. Fire an event named close at the WebSocket object,
    //    using CloseEvent, with the wasClean attribute
    //    initialized to true if the connection closed cleanly
    //    and false otherwise, the code attribute initialized to
    //    the WebSocket connection close code, and the reason
    //    attribute initialized to the result of applying UTF-8
    //    decode without BOM to the WebSocket connection close
    //    reason.
    $739d028e00fd8222$require$fireEvent("close", ws, $739d028e00fd8222$require$CloseEvent, {
        wasClean: wasClean,
        code: code,
        reason: reason
    });
    if ($739d028e00fd8222$var$channels.close.hasSubscribers) $739d028e00fd8222$var$channels.close.publish({
        websocket: ws,
        code: code,
        reason: reason
    });
}
function $739d028e00fd8222$var$onSocketError(error) {
    const { ws: ws } = this;
    ws[$739d028e00fd8222$require$kReadyState] = $739d028e00fd8222$require$states.CLOSING;
    if ($739d028e00fd8222$var$channels.socketError.hasSubscribers) $739d028e00fd8222$var$channels.socketError.publish(error);
    this.destroy();
}
module.exports = {
    establishWebSocketConnection: $739d028e00fd8222$var$establishWebSocketConnection
};

});

parcelRegister("7g8Fv", function(module, exports) {

var $5490c068bb44cc51$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $6aI0s = parcelRequire("6aI0s");
var $5490c068bb44cc51$require$maxUnsigned16Bit = $6aI0s.maxUnsigned16Bit;
/** @type {import('crypto')} */ let $5490c068bb44cc51$var$crypto;

try {
    $5490c068bb44cc51$var$crypto = $5490c068bb44cc51$import$804f562e18a94705;
} catch  {}
class $5490c068bb44cc51$var$WebsocketFrameSend {
    /**
   * @param {Buffer|undefined} data
   */ constructor(data){
        this.frameData = data;
        this.maskKey = $5490c068bb44cc51$var$crypto.randomBytes(4);
    }
    createFrame(opcode) {
        const bodyLength = this.frameData?.byteLength ?? 0;
        /** @type {number} */ let payloadLength = bodyLength // 0-125
        ;
        let offset = 6;
        if (bodyLength > $5490c068bb44cc51$require$maxUnsigned16Bit) {
            offset += 8 // payload length is next 8 bytes
            ;
            payloadLength = 127;
        } else if (bodyLength > 125) {
            offset += 2 // payload length is next 2 bytes
            ;
            payloadLength = 126;
        }
        const buffer = $5490c068bb44cc51$require$Buffer.allocUnsafe(bodyLength + offset);
        // Clear first 2 bytes, everything else is overwritten
        buffer[0] = buffer[1] = 0;
        buffer[0] |= 0x80 // FIN
        ;
        buffer[0] = (buffer[0] & 0xF0) + opcode // opcode
        ;
        /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */ buffer[offset - 4] = this.maskKey[0];
        buffer[offset - 3] = this.maskKey[1];
        buffer[offset - 2] = this.maskKey[2];
        buffer[offset - 1] = this.maskKey[3];
        buffer[1] = payloadLength;
        if (payloadLength === 126) buffer.writeUInt16BE(bodyLength, 2);
        else if (payloadLength === 127) {
            // Clear extended payload length
            buffer[2] = buffer[3] = 0;
            buffer.writeUIntBE(bodyLength, 4, 6);
        }
        buffer[1] |= 0x80 // MASK
        ;
        // mask body
        for(let i = 0; i < bodyLength; i++)buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
        return buffer;
    }
}
module.exports = {
    WebsocketFrameSend: $5490c068bb44cc51$var$WebsocketFrameSend
};

});

parcelRegister("c4XEr", function(module, exports) {

var $8cb42148d21e106d$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $8cb42148d21e106d$require$Writable = $4UN2M$stream.Writable;


var $6aI0s = parcelRequire("6aI0s");
var $8cb42148d21e106d$require$parserStates = $6aI0s.parserStates;
var $8cb42148d21e106d$require$opcodes = $6aI0s.opcodes;
var $8cb42148d21e106d$require$states = $6aI0s.states;
var $8cb42148d21e106d$require$emptyBuffer = $6aI0s.emptyBuffer;

var $9Qg1r = parcelRequire("9Qg1r");
var $8cb42148d21e106d$require$kReadyState = $9Qg1r.kReadyState;
var $8cb42148d21e106d$require$kSentClose = $9Qg1r.kSentClose;
var $8cb42148d21e106d$require$kResponse = $9Qg1r.kResponse;
var $8cb42148d21e106d$require$kReceivedClose = $9Qg1r.kReceivedClose;

var $kFTRJ = parcelRequire("kFTRJ");
var $8cb42148d21e106d$require$isValidStatusCode = $kFTRJ.isValidStatusCode;
var $8cb42148d21e106d$require$failWebsocketConnection = $kFTRJ.failWebsocketConnection;
var $8cb42148d21e106d$require$websocketMessageReceived = $kFTRJ.websocketMessageReceived;

var $7g8Fv = parcelRequire("7g8Fv");
var $8cb42148d21e106d$require$WebsocketFrameSend = $7g8Fv.WebsocketFrameSend;
// This code was influenced by ws released under the MIT license.
// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
// Copyright (c) 2013 Arnout Kazemier and contributors
// Copyright (c) 2016 Luigi Pinca and contributors
const $8cb42148d21e106d$var$channels = {};
$8cb42148d21e106d$var$channels.ping = $4UN2M$diagnostics_channel.channel("undici:websocket:ping");
$8cb42148d21e106d$var$channels.pong = $4UN2M$diagnostics_channel.channel("undici:websocket:pong");
class $8cb42148d21e106d$var$ByteParser extends $8cb42148d21e106d$require$Writable {
    #buffers = [];
    #byteOffset = 0;
    #state = $8cb42148d21e106d$require$parserStates.INFO;
    #info = {};
    #fragments = [];
    constructor(ws){
        super();
        this.ws = ws;
    }
    /**
   * @param {Buffer} chunk
   * @param {() => void} callback
   */ _write(chunk, _, callback) {
        this.#buffers.push(chunk);
        this.#byteOffset += chunk.length;
        this.run(callback);
    }
    /**
   * Runs whenever a new chunk is received.
   * Callback is called whenever there are no more chunks buffering,
   * or not enough bytes are buffered to parse.
   */ run(callback) {
        while(true){
            if (this.#state === $8cb42148d21e106d$require$parserStates.INFO) {
                // If there aren't enough bytes to parse the payload length, etc.
                if (this.#byteOffset < 2) return callback();
                const buffer = this.consume(2);
                this.#info.fin = (buffer[0] & 0x80) !== 0;
                this.#info.opcode = buffer[0] & 0x0F;
                // If we receive a fragmented message, we use the type of the first
                // frame to parse the full message as binary/text, when it's terminated
                this.#info.originalOpcode ??= this.#info.opcode;
                this.#info.fragmented = !this.#info.fin && this.#info.opcode !== $8cb42148d21e106d$require$opcodes.CONTINUATION;
                if (this.#info.fragmented && this.#info.opcode !== $8cb42148d21e106d$require$opcodes.BINARY && this.#info.opcode !== $8cb42148d21e106d$require$opcodes.TEXT) {
                    // Only text and binary frames can be fragmented
                    $8cb42148d21e106d$require$failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
                    return;
                }
                const payloadLength = buffer[1] & 0x7F;
                if (payloadLength <= 125) {
                    this.#info.payloadLength = payloadLength;
                    this.#state = $8cb42148d21e106d$require$parserStates.READ_DATA;
                } else if (payloadLength === 126) this.#state = $8cb42148d21e106d$require$parserStates.PAYLOADLENGTH_16;
                else if (payloadLength === 127) this.#state = $8cb42148d21e106d$require$parserStates.PAYLOADLENGTH_64;
                if (this.#info.fragmented && payloadLength > 125) {
                    // A fragmented frame can't be fragmented itself
                    $8cb42148d21e106d$require$failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
                    return;
                } else if ((this.#info.opcode === $8cb42148d21e106d$require$opcodes.PING || this.#info.opcode === $8cb42148d21e106d$require$opcodes.PONG || this.#info.opcode === $8cb42148d21e106d$require$opcodes.CLOSE) && payloadLength > 125) {
                    // Control frames can have a payload length of 125 bytes MAX
                    $8cb42148d21e106d$require$failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
                    return;
                } else if (this.#info.opcode === $8cb42148d21e106d$require$opcodes.CLOSE) {
                    if (payloadLength === 1) {
                        $8cb42148d21e106d$require$failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
                        return;
                    }
                    const body = this.consume(payloadLength);
                    this.#info.closeInfo = this.parseCloseBody(false, body);
                    if (!this.ws[$8cb42148d21e106d$require$kSentClose]) {
                        // If an endpoint receives a Close frame and did not previously send a
                        // Close frame, the endpoint MUST send a Close frame in response.  (When
                        // sending a Close frame in response, the endpoint typically echos the
                        // status code it received.)
                        const body = $8cb42148d21e106d$require$Buffer.allocUnsafe(2);
                        body.writeUInt16BE(this.#info.closeInfo.code, 0);
                        const closeFrame = new $8cb42148d21e106d$require$WebsocketFrameSend(body);
                        this.ws[$8cb42148d21e106d$require$kResponse].socket.write(closeFrame.createFrame($8cb42148d21e106d$require$opcodes.CLOSE), (err)=>{
                            if (!err) this.ws[$8cb42148d21e106d$require$kSentClose] = true;
                        });
                    }
                    // Upon either sending or receiving a Close control frame, it is said
                    // that _The WebSocket Closing Handshake is Started_ and that the
                    // WebSocket connection is in the CLOSING state.
                    this.ws[$8cb42148d21e106d$require$kReadyState] = $8cb42148d21e106d$require$states.CLOSING;
                    this.ws[$8cb42148d21e106d$require$kReceivedClose] = true;
                    this.end();
                    return;
                } else if (this.#info.opcode === $8cb42148d21e106d$require$opcodes.PING) {
                    // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
                    // response, unless it already received a Close frame.
                    // A Pong frame sent in response to a Ping frame must have identical
                    // "Application data"
                    const body = this.consume(payloadLength);
                    if (!this.ws[$8cb42148d21e106d$require$kReceivedClose]) {
                        const frame = new $8cb42148d21e106d$require$WebsocketFrameSend(body);
                        this.ws[$8cb42148d21e106d$require$kResponse].socket.write(frame.createFrame($8cb42148d21e106d$require$opcodes.PONG));
                        if ($8cb42148d21e106d$var$channels.ping.hasSubscribers) $8cb42148d21e106d$var$channels.ping.publish({
                            payload: body
                        });
                    }
                    this.#state = $8cb42148d21e106d$require$parserStates.INFO;
                    if (this.#byteOffset > 0) continue;
                    else {
                        callback();
                        return;
                    }
                } else if (this.#info.opcode === $8cb42148d21e106d$require$opcodes.PONG) {
                    // A Pong frame MAY be sent unsolicited.  This serves as a
                    // unidirectional heartbeat.  A response to an unsolicited Pong frame is
                    // not expected.
                    const body = this.consume(payloadLength);
                    if ($8cb42148d21e106d$var$channels.pong.hasSubscribers) $8cb42148d21e106d$var$channels.pong.publish({
                        payload: body
                    });
                    if (this.#byteOffset > 0) continue;
                    else {
                        callback();
                        return;
                    }
                }
            } else if (this.#state === $8cb42148d21e106d$require$parserStates.PAYLOADLENGTH_16) {
                if (this.#byteOffset < 2) return callback();
                const buffer = this.consume(2);
                this.#info.payloadLength = buffer.readUInt16BE(0);
                this.#state = $8cb42148d21e106d$require$parserStates.READ_DATA;
            } else if (this.#state === $8cb42148d21e106d$require$parserStates.PAYLOADLENGTH_64) {
                if (this.#byteOffset < 8) return callback();
                const buffer = this.consume(8);
                const upper = buffer.readUInt32BE(0);
                // 2^31 is the maxinimum bytes an arraybuffer can contain
                // on 32-bit systems. Although, on 64-bit systems, this is
                // 2^53-1 bytes.
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
                // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
                if (upper > 2 ** 31 - 1) {
                    $8cb42148d21e106d$require$failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
                    return;
                }
                const lower = buffer.readUInt32BE(4);
                this.#info.payloadLength = (upper << 8) + lower;
                this.#state = $8cb42148d21e106d$require$parserStates.READ_DATA;
            } else if (this.#state === $8cb42148d21e106d$require$parserStates.READ_DATA) {
                if (this.#byteOffset < this.#info.payloadLength) // If there is still more data in this chunk that needs to be read
                return callback();
                else if (this.#byteOffset >= this.#info.payloadLength) {
                    // If the server sent multiple frames in a single chunk
                    const body = this.consume(this.#info.payloadLength);
                    this.#fragments.push(body);
                    // If the frame is unfragmented, or a fragmented frame was terminated,
                    // a message was received
                    if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === $8cb42148d21e106d$require$opcodes.CONTINUATION) {
                        const fullMessage = $8cb42148d21e106d$require$Buffer.concat(this.#fragments);
                        $8cb42148d21e106d$require$websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
                        this.#info = {};
                        this.#fragments.length = 0;
                    }
                    this.#state = $8cb42148d21e106d$require$parserStates.INFO;
                }
            }
            if (this.#byteOffset > 0) continue;
            else {
                callback();
                break;
            }
        }
    }
    /**
   * Take n bytes from the buffered Buffers
   * @param {number} n
   * @returns {Buffer|null}
   */ consume(n) {
        if (n > this.#byteOffset) return null;
        else if (n === 0) return $8cb42148d21e106d$require$emptyBuffer;
        if (this.#buffers[0].length === n) {
            this.#byteOffset -= this.#buffers[0].length;
            return this.#buffers.shift();
        }
        const buffer = $8cb42148d21e106d$require$Buffer.allocUnsafe(n);
        let offset = 0;
        while(offset !== n){
            const next = this.#buffers[0];
            const { length: length } = next;
            if (length + offset === n) {
                buffer.set(this.#buffers.shift(), offset);
                break;
            } else if (length + offset > n) {
                buffer.set(next.subarray(0, n - offset), offset);
                this.#buffers[0] = next.subarray(n - offset);
                break;
            } else {
                buffer.set(this.#buffers.shift(), offset);
                offset += next.length;
            }
        }
        this.#byteOffset -= n;
        return buffer;
    }
    parseCloseBody(onlyCode, data) {
        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
        /** @type {number|undefined} */ let code;
        if (data.length >= 2) // _The WebSocket Connection Close Code_ is
        // defined as the status code (Section 7.4) contained in the first Close
        // control frame received by the application
        code = data.readUInt16BE(0);
        if (onlyCode) {
            if (!$8cb42148d21e106d$require$isValidStatusCode(code)) return null;
            return {
                code: code
            };
        }
        // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
        /** @type {Buffer} */ let reason = data.subarray(2);
        // Remove BOM
        if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) reason = reason.subarray(3);
        if (code !== undefined && !$8cb42148d21e106d$require$isValidStatusCode(code)) return null;
        try {
            // TODO: optimize this
            reason = new TextDecoder("utf-8", {
                fatal: true
            }).decode(reason);
        } catch  {
            return null;
        }
        return {
            code: code,
            reason: reason
        };
    }
    get closingInfo() {
        return this.#info.closeInfo;
    }
}
module.exports = {
    ByteParser: $8cb42148d21e106d$var$ByteParser
};

});


parcelRegister("gmOM2", function(module, exports) {

var $bea61609b6226417$require$promisify = $4UN2M$util.promisify;

const $bea61609b6226417$var$gzip = $bea61609b6226417$require$promisify($4UN2M$zlib.gzip);
const $bea61609b6226417$var$unzip = $bea61609b6226417$require$promisify($4UN2M$zlib.unzip);
module.exports = {
    /**
   * @param {Encoder} encoder
   * @returns {Promise}
   */ async compress (encoder) {
        return await $bea61609b6226417$var$gzip(encoder.buffer);
    },
    /**
   * @param {Buffer} buffer
   * @returns {Promise}
   */ async decompress (buffer) {
        return await $bea61609b6226417$var$unzip(buffer);
    }
};

});

parcelRegister("3SMyI", function(module, exports) {
















const $2d3c150ccadf3ba8$var$versions = {
    0: ({ acks: acks, timeout: timeout, topicData: topicData })=>{
        const request = (parcelRequire("3ADpX"));
        const response = (parcelRequire("5pBHy"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                topicData: topicData
            }),
            response: response
        };
    },
    1: ({ acks: acks, timeout: timeout, topicData: topicData })=>{
        const request = (parcelRequire("9XSBF"));
        const response = (parcelRequire("b7F5D"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                topicData: topicData
            }),
            response: response
        };
    },
    2: ({ acks: acks, timeout: timeout, topicData: topicData, compression: compression })=>{
        const request = (parcelRequire("3qAmp"));
        const response = (parcelRequire("a2GBX"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                compression: compression,
                topicData: topicData
            }),
            response: response
        };
    },
    3: ({ acks: acks, timeout: timeout, compression: compression, topicData: topicData, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch })=>{
        const request = (parcelRequire("aIzpH"));
        const response = (parcelRequire("gBWOW"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                compression: compression,
                topicData: topicData,
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch
            }),
            response: response
        };
    },
    4: ({ acks: acks, timeout: timeout, compression: compression, topicData: topicData, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch })=>{
        const request = (parcelRequire("iGTpA"));
        const response = (parcelRequire("7kvp9"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                compression: compression,
                topicData: topicData,
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch
            }),
            response: response
        };
    },
    5: ({ acks: acks, timeout: timeout, compression: compression, topicData: topicData, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch })=>{
        const request = (parcelRequire("5kLTx"));
        const response = (parcelRequire("1dTgR"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                compression: compression,
                topicData: topicData,
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch
            }),
            response: response
        };
    },
    6: ({ acks: acks, timeout: timeout, compression: compression, topicData: topicData, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch })=>{
        const request = (parcelRequire("eR1kb"));
        const response = (parcelRequire("6pbGk"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                compression: compression,
                topicData: topicData,
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch
            }),
            response: response
        };
    },
    7: ({ acks: acks, timeout: timeout, compression: compression, topicData: topicData, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch })=>{
        const request = (parcelRequire("3kRix"));
        const response = (parcelRequire("aW25B"));
        return {
            request: request({
                acks: acks,
                timeout: timeout,
                compression: compression,
                topicData: topicData,
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($2d3c150ccadf3ba8$var$versions),
    protocol: ({ version: version })=>$2d3c150ccadf3ba8$var$versions[version]
};

});
parcelRegister("3ADpX", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $29d34f6f3b3ad03a$require$apiKey = $9kH2s.Produce;

var $gDPhv = parcelRequire("gDPhv");
/**
 * Produce Request (Version: 0) => acks timeout [topic_data]
 *   acks => INT16
 *   timeout => INT32
 *   topic_data => topic [data]
 *     topic => STRING
 *     data => partition record_set record_set_size
 *       partition => INT32
 *       record_set_size => INT32
 *       record_set => RECORDS
 */ /**
 * MessageV0:
 * {
 *   key: bytes,
 *   value: bytes
 * }
 *
 * MessageSet:
 * [
 *   { key: "<value>", value: "<value>" },
 *   { key: "<value>", value: "<value>" },
 * ]
 *
 * TopicData:
 * [
 *   {
 *     topic: 'name1',
 *     partitions: [
 *       {
 *         partition: 0,
 *         messages: [<MessageSet>]
 *       }
 *     ]
 *   }
 * ]
 */ /**
 * @param acks {Integer} This field indicates how many acknowledgements the servers should receive before
 *                       responding to the request. If it is 0 the server will not send any response
 *                       (this is the only case where the server will not reply to a request). If it is 1,
 *                       the server will wait the data is written to the local log before sending a response.
 *                       If it is -1 the server will block until the message is committed by all in sync replicas
 *                       before sending a response.
 *
 * @param timeout {Integer} This provides a maximum time in milliseconds the server can await the receipt of the number
 *                          of acknowledgements in RequiredAcks. The timeout is not an exact limit on the request time
 *                          for a few reasons:
 *                          (1) it does not include network latency,
 *                          (2) the timer begins at the beginning of the processing of this request so if many requests are
 *                              queued due to server overload that wait time will not be included,
 *                          (3) we will not terminate a local write so if the local write time exceeds this timeout it will not
 *                              be respected. To get a hard timeout of this type the client should use the socket timeout.
 *
 * @param topicData {Array}
 */ module.exports = ({ acks: acks, timeout: timeout, topicData: topicData })=>({
        apiKey: $29d34f6f3b3ad03a$require$apiKey,
        apiVersion: 0,
        apiName: "Produce",
        expectResponse: ()=>acks !== 0,
        encode: async ()=>{
            return new $7jO81().writeInt16(acks).writeInt32(timeout).writeArray(topicData.map($29d34f6f3b3ad03a$var$encodeTopic));
        }
    });
const $29d34f6f3b3ad03a$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($29d34f6f3b3ad03a$var$encodePartitions));
};
const $29d34f6f3b3ad03a$var$encodePartitions = ({ partition: partition, messages: messages })=>{
    const messageSet = $gDPhv({
        messageVersion: 0,
        entries: messages
    });
    return new $7jO81().writeInt32(partition).writeInt32(messageSet.size()).writeEncoder(messageSet);
};

});
parcelRegister("7jO81", function(module, exports) {

var $5541313a0c4f1d6a$require$Buffer = $4UN2M$buffer.Buffer;

var $dSqZK = parcelRequire("dSqZK");
const $5541313a0c4f1d6a$var$INT8_SIZE = 1;
const $5541313a0c4f1d6a$var$INT16_SIZE = 2;
const $5541313a0c4f1d6a$var$INT32_SIZE = 4;
const $5541313a0c4f1d6a$var$INT64_SIZE = 8;
const $5541313a0c4f1d6a$var$DOUBLE_SIZE = 8;
const $5541313a0c4f1d6a$var$MOST_SIGNIFICANT_BIT = 0x80 // 128
;
const $5541313a0c4f1d6a$var$OTHER_BITS = 0x7f // 127
;
const $5541313a0c4f1d6a$var$UNSIGNED_INT32_MAX_NUMBER = 0xffffff80;
const $5541313a0c4f1d6a$var$UNSIGNED_INT64_MAX_NUMBER = 0xffffffffffffff80n;
module.exports = class Encoder {
    static encodeZigZag(value) {
        return value << 1 ^ value >> 31;
    }
    static encodeZigZag64(value) {
        const longValue = $dSqZK.fromValue(value);
        return longValue.shiftLeft(1).xor(longValue.shiftRight(63));
    }
    static sizeOfVarInt(value) {
        let encodedValue = this.encodeZigZag(value);
        let bytes = 1;
        while((encodedValue & $5541313a0c4f1d6a$var$UNSIGNED_INT32_MAX_NUMBER) !== 0){
            bytes += 1;
            encodedValue >>>= 7;
        }
        return bytes;
    }
    static sizeOfVarLong(value) {
        let longValue = Encoder.encodeZigZag64(value);
        let bytes = 1;
        while(longValue.and($5541313a0c4f1d6a$var$UNSIGNED_INT64_MAX_NUMBER).notEquals($dSqZK.fromInt(0))){
            bytes += 1;
            longValue = longValue.shiftRightUnsigned(7);
        }
        return bytes;
    }
    static sizeOfVarIntBytes(value) {
        const size = value == null ? -1 : $5541313a0c4f1d6a$require$Buffer.byteLength(value);
        if (size < 0) return Encoder.sizeOfVarInt(-1);
        return Encoder.sizeOfVarInt(size) + size;
    }
    static nextPowerOfTwo(value) {
        return 1 << 31 - Math.clz32(value) + 1;
    }
    /**
   * Construct a new encoder with the given initial size
   *
   * @param {number} [initialSize] initial size
   */ constructor(initialSize = 511){
        this.buf = $5541313a0c4f1d6a$require$Buffer.alloc(Encoder.nextPowerOfTwo(initialSize));
        this.offset = 0;
    }
    /**
   * @param {Buffer} buffer
   */ writeBufferInternal(buffer) {
        const bufferLength = buffer.length;
        this.ensureAvailable(bufferLength);
        buffer.copy(this.buf, this.offset, 0);
        this.offset += bufferLength;
    }
    ensureAvailable(length) {
        if (this.offset + length > this.buf.length) {
            const newLength = Encoder.nextPowerOfTwo(this.offset + length);
            const newBuffer = $5541313a0c4f1d6a$require$Buffer.alloc(newLength);
            this.buf.copy(newBuffer, 0, 0, this.offset);
            this.buf = newBuffer;
        }
    }
    get buffer() {
        return this.buf.slice(0, this.offset);
    }
    writeInt8(value) {
        this.ensureAvailable($5541313a0c4f1d6a$var$INT8_SIZE);
        this.buf.writeInt8(value, this.offset);
        this.offset += $5541313a0c4f1d6a$var$INT8_SIZE;
        return this;
    }
    writeInt16(value) {
        this.ensureAvailable($5541313a0c4f1d6a$var$INT16_SIZE);
        this.buf.writeInt16BE(value, this.offset);
        this.offset += $5541313a0c4f1d6a$var$INT16_SIZE;
        return this;
    }
    writeInt32(value) {
        this.ensureAvailable($5541313a0c4f1d6a$var$INT32_SIZE);
        this.buf.writeInt32BE(value, this.offset);
        this.offset += $5541313a0c4f1d6a$var$INT32_SIZE;
        return this;
    }
    writeUInt32(value) {
        this.ensureAvailable($5541313a0c4f1d6a$var$INT32_SIZE);
        this.buf.writeUInt32BE(value, this.offset);
        this.offset += $5541313a0c4f1d6a$var$INT32_SIZE;
        return this;
    }
    writeInt64(value) {
        this.ensureAvailable($5541313a0c4f1d6a$var$INT64_SIZE);
        const longValue = $dSqZK.fromValue(value);
        this.buf.writeInt32BE(longValue.getHighBits(), this.offset);
        this.buf.writeInt32BE(longValue.getLowBits(), this.offset + $5541313a0c4f1d6a$var$INT32_SIZE);
        this.offset += $5541313a0c4f1d6a$var$INT64_SIZE;
        return this;
    }
    writeDouble(value) {
        this.ensureAvailable($5541313a0c4f1d6a$var$DOUBLE_SIZE);
        this.buf.writeDoubleBE(value, this.offset);
        this.offset += $5541313a0c4f1d6a$var$DOUBLE_SIZE;
        return this;
    }
    writeBoolean(value) {
        value ? this.writeInt8(1) : this.writeInt8(0);
        return this;
    }
    writeString(value) {
        if (value == null) {
            this.writeInt16(-1);
            return this;
        }
        const byteLength = $5541313a0c4f1d6a$require$Buffer.byteLength(value, "utf8");
        this.ensureAvailable($5541313a0c4f1d6a$var$INT16_SIZE + byteLength);
        this.writeInt16(byteLength);
        this.buf.write(value, this.offset, byteLength, "utf8");
        this.offset += byteLength;
        return this;
    }
    writeVarIntString(value) {
        if (value == null) {
            this.writeVarInt(-1);
            return this;
        }
        const byteLength = $5541313a0c4f1d6a$require$Buffer.byteLength(value, "utf8");
        this.writeVarInt(byteLength);
        this.ensureAvailable(byteLength);
        this.buf.write(value, this.offset, byteLength, "utf8");
        this.offset += byteLength;
        return this;
    }
    writeUVarIntString(value) {
        if (value == null) {
            this.writeUVarInt(0);
            return this;
        }
        const byteLength = $5541313a0c4f1d6a$require$Buffer.byteLength(value, "utf8");
        this.writeUVarInt(byteLength + 1);
        this.ensureAvailable(byteLength);
        this.buf.write(value, this.offset, byteLength, "utf8");
        this.offset += byteLength;
        return this;
    }
    writeBytes(value) {
        if (value == null) {
            this.writeInt32(-1);
            return this;
        }
        if ($5541313a0c4f1d6a$require$Buffer.isBuffer(value)) {
            // raw bytes
            this.ensureAvailable($5541313a0c4f1d6a$var$INT32_SIZE + value.length);
            this.writeInt32(value.length);
            this.writeBufferInternal(value);
        } else {
            const valueToWrite = String(value);
            const byteLength = $5541313a0c4f1d6a$require$Buffer.byteLength(valueToWrite, "utf8");
            this.ensureAvailable($5541313a0c4f1d6a$var$INT32_SIZE + byteLength);
            this.writeInt32(byteLength);
            this.buf.write(valueToWrite, this.offset, byteLength, "utf8");
            this.offset += byteLength;
        }
        return this;
    }
    writeVarIntBytes(value) {
        if (value == null) {
            this.writeVarInt(-1);
            return this;
        }
        if ($5541313a0c4f1d6a$require$Buffer.isBuffer(value)) {
            // raw bytes
            this.writeVarInt(value.length);
            this.writeBufferInternal(value);
        } else {
            const valueToWrite = String(value);
            const byteLength = $5541313a0c4f1d6a$require$Buffer.byteLength(valueToWrite, "utf8");
            this.writeVarInt(byteLength);
            this.ensureAvailable(byteLength);
            this.buf.write(valueToWrite, this.offset, byteLength, "utf8");
            this.offset += byteLength;
        }
        return this;
    }
    writeUVarIntBytes(value) {
        if (value == null) {
            this.writeVarInt(0);
            return this;
        }
        if ($5541313a0c4f1d6a$require$Buffer.isBuffer(value)) {
            // raw bytes
            this.writeUVarInt(value.length + 1);
            this.writeBufferInternal(value);
        } else {
            const valueToWrite = String(value);
            const byteLength = $5541313a0c4f1d6a$require$Buffer.byteLength(valueToWrite, "utf8");
            this.writeUVarInt(byteLength + 1);
            this.ensureAvailable(byteLength);
            this.buf.write(valueToWrite, this.offset, byteLength, "utf8");
            this.offset += byteLength;
        }
        return this;
    }
    writeEncoder(value) {
        if (value == null || !$5541313a0c4f1d6a$require$Buffer.isBuffer(value.buf)) throw new Error("value should be an instance of Encoder");
        this.writeBufferInternal(value.buffer);
        return this;
    }
    writeEncoderArray(value) {
        if (!Array.isArray(value) || value.some((v)=>v == null || !$5541313a0c4f1d6a$require$Buffer.isBuffer(v.buf))) throw new Error("all values should be an instance of Encoder[]");
        value.forEach((v)=>{
            this.writeBufferInternal(v.buffer);
        });
        return this;
    }
    writeBuffer(value) {
        if (!$5541313a0c4f1d6a$require$Buffer.isBuffer(value)) throw new Error("value should be an instance of Buffer");
        this.writeBufferInternal(value);
        return this;
    }
    /**
   * @param {any[]} array
   * @param {'int32'|'number'|'string'|'object'} [type]
   */ writeNullableArray(array, type) {
        // A null value is encoded with length of -1 and there are no following bytes
        // On the context of this library, empty array and null are the same thing
        const length = array.length !== 0 ? array.length : -1;
        this.writeArray(array, type, length);
        return this;
    }
    /**
   * @param {any[]} array
   * @param {'int32'|'number'|'string'|'object'} [type]
   * @param {number} [length]
   */ writeArray(array, type, length) {
        const arrayLength = length == null ? array.length : length;
        this.writeInt32(arrayLength);
        if (type !== undefined) switch(type){
            case "int32":
            case "number":
                array.forEach((value)=>this.writeInt32(value));
                break;
            case "string":
                array.forEach((value)=>this.writeString(value));
                break;
            case "object":
                this.writeEncoderArray(array);
                break;
        }
        else array.forEach((value)=>{
            switch(typeof value){
                case "number":
                    this.writeInt32(value);
                    break;
                case "string":
                    this.writeString(value);
                    break;
                case "object":
                    this.writeEncoder(value);
                    break;
            }
        });
        return this;
    }
    writeVarIntArray(array, type) {
        if (type === "object") {
            this.writeVarInt(array.length);
            this.writeEncoderArray(array);
        } else {
            const objectArray = array.filter((v)=>typeof v === "object");
            this.writeVarInt(objectArray.length);
            this.writeEncoderArray(objectArray);
        }
        return this;
    }
    writeUVarIntArray(array, type) {
        if (type === "object") {
            this.writeUVarInt(array.length + 1);
            this.writeEncoderArray(array);
        } else if (array === null) this.writeUVarInt(0);
        else {
            const objectArray = array.filter((v)=>typeof v === "object");
            this.writeUVarInt(objectArray.length + 1);
            this.writeEncoderArray(objectArray);
        }
        return this;
    }
    // Based on:
    // https://en.wikipedia.org/wiki/LEB128 Using LEB128 format similar to VLQ.
    // https://github.com/addthis/stream-lib/blob/master/src/main/java/com/clearspring/analytics/util/Varint.java#L106
    writeVarInt(value) {
        return this.writeUVarInt(Encoder.encodeZigZag(value));
    }
    writeUVarInt(value) {
        const byteArray = [];
        while((value & $5541313a0c4f1d6a$var$UNSIGNED_INT32_MAX_NUMBER) !== 0){
            byteArray.push(value & $5541313a0c4f1d6a$var$OTHER_BITS | $5541313a0c4f1d6a$var$MOST_SIGNIFICANT_BIT);
            value >>>= 7;
        }
        byteArray.push(value & $5541313a0c4f1d6a$var$OTHER_BITS);
        this.writeBufferInternal($5541313a0c4f1d6a$require$Buffer.from(byteArray));
        return this;
    }
    writeVarLong(value) {
        const byteArray = [];
        let longValue = Encoder.encodeZigZag64(value);
        while(longValue.and($5541313a0c4f1d6a$var$UNSIGNED_INT64_MAX_NUMBER).notEquals($dSqZK.fromInt(0))){
            byteArray.push(longValue.and($5541313a0c4f1d6a$var$OTHER_BITS).or($5541313a0c4f1d6a$var$MOST_SIGNIFICANT_BIT).toInt());
            longValue = longValue.shiftRightUnsigned(7);
        }
        byteArray.push(longValue.toInt());
        this.writeBufferInternal($5541313a0c4f1d6a$require$Buffer.from(byteArray));
        return this;
    }
    size() {
        // We can use the offset here directly, because we anyways will not re-encode the buffer when writing
        return this.offset;
    }
    toJSON() {
        return this.buffer.toJSON();
    }
};

});
parcelRegister("dSqZK", function(module, exports) {
/**
 * @exports Long
 * @class A Long class for representing a 64 bit int (BigInt)
 * @param {bigint} value The value of the 64 bit int
 * @constructor
 */ class $a1a5421ec4193eec$var$Long {
    constructor(value){
        this.value = value;
    }
    /**
   * @function isLong
   * @param {*} obj Object
   * @returns {boolean}
   * @inner
   */ static isLong(obj) {
        return typeof obj.value === "bigint";
    }
    /**
   * @param {number} value
   * @returns {!Long}
   * @inner
   */ static fromBits(value) {
        return new $a1a5421ec4193eec$var$Long(BigInt(value));
    }
    /**
   * @param {number} value
   * @returns {!Long}
   * @inner
   */ static fromInt(value) {
        if (isNaN(value)) return $a1a5421ec4193eec$var$Long.ZERO;
        return new $a1a5421ec4193eec$var$Long(BigInt.asIntN(64, BigInt(value)));
    }
    /**
   * @param {number} value
   * @returns {!Long}
   * @inner
   */ static fromNumber(value) {
        if (isNaN(value)) return $a1a5421ec4193eec$var$Long.ZERO;
        return new $a1a5421ec4193eec$var$Long(BigInt(value));
    }
    /**
   * @function
   * @param {bigint|number|string|Long} val
   * @returns {!Long}
   * @inner
   */ static fromValue(val) {
        if (typeof val === "number") return this.fromNumber(val);
        if (typeof val === "string") return this.fromString(val);
        if (typeof val === "bigint") return new $a1a5421ec4193eec$var$Long(val);
        if (this.isLong(val)) return new $a1a5421ec4193eec$var$Long(BigInt(val.value));
        return new $a1a5421ec4193eec$var$Long(BigInt(val));
    }
    /**
   * @param {string} str
   * @returns {!Long}
   * @inner
   */ static fromString(str) {
        if (str.length === 0) throw Error("empty string");
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return $a1a5421ec4193eec$var$Long.ZERO;
        return new $a1a5421ec4193eec$var$Long(BigInt(str));
    }
    /**
   * Tests if this Long's value equals zero.
   * @returns {boolean}
   */ isZero() {
        return this.value === BigInt(0);
    }
    /**
   * Tests if this Long's value is negative.
   * @returns {boolean}
   */ isNegative() {
        return this.value < BigInt(0);
    }
    /**
   * Converts the Long to a string.
   * @returns {string}
   * @override
   */ toString() {
        return String(this.value);
    }
    /**
   * Converts the Long to the nearest floating-point representation (double, 53-bit mantissa)
   * @returns {number}
   * @override
   */ toNumber() {
        return Number(this.value);
    }
    /**
   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
   * @returns {number}
   */ toInt() {
        return Number(BigInt.asIntN(32, this.value));
    }
    /**
   * Converts the Long to JSON
   * @returns {string}
   * @override
   */ toJSON() {
        return this.toString();
    }
    /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number|bigint} numBits Number of bits
   * @returns {!Long} Shifted bigint
   */ shiftLeft(numBits) {
        return new $a1a5421ec4193eec$var$Long(this.value << BigInt(numBits));
    }
    /**
   * Returns this Long with bits arithmetically shifted to the right by the given amount.
   * @param {number|bigint} numBits Number of bits
   * @returns {!Long} Shifted bigint
   */ shiftRight(numBits) {
        return new $a1a5421ec4193eec$var$Long(this.value >> BigInt(numBits));
    }
    /**
   * Returns the bitwise OR of this Long and the specified.
   * @param {bigint|number|string} other Other Long
   * @returns {!Long}
   */ or(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        return $a1a5421ec4193eec$var$Long.fromBits(this.value | other.value);
    }
    /**
   * Returns the bitwise XOR of this Long and the given one.
   * @param {bigint|number|string} other Other Long
   * @returns {!Long}
   */ xor(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        return new $a1a5421ec4193eec$var$Long(this.value ^ other.value);
    }
    /**
   * Returns the bitwise AND of this Long and the specified.
   * @param {bigint|number|string} other Other Long
   * @returns {!Long}
   */ and(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        return new $a1a5421ec4193eec$var$Long(this.value & other.value);
    }
    /**
   * Returns the bitwise NOT of this Long.
   * @returns {!Long}
   */ not() {
        return new $a1a5421ec4193eec$var$Long(~this.value);
    }
    /**
   * Returns this Long with bits logically shifted to the right by the given amount.
   * @param {number|bigint} numBits Number of bits
   * @returns {!Long} Shifted bigint
   */ shiftRightUnsigned(numBits) {
        return new $a1a5421ec4193eec$var$Long(this.value >> BigInt.asUintN(64, BigInt(numBits)));
    }
    /**
   * Tests if this Long's value equals the specified's.
   * @param {bigint|number|string} other Other value
   * @returns {boolean}
   */ equals(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        return this.value === other.value;
    }
    /**
   * Tests if this Long's value is greater than or equal the specified's.
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */ greaterThanOrEqual(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        return this.value >= other.value;
    }
    gte(other) {
        return this.greaterThanOrEqual(other);
    }
    notEquals(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        return !this.equals(/* validates */ other);
    }
    /**
   * Returns the sum of this and the specified Long.
   * @param {!Long|number|string} addend Addend
   * @returns {!Long} Sum
   */ add(addend) {
        if (!$a1a5421ec4193eec$var$Long.isLong(addend)) addend = $a1a5421ec4193eec$var$Long.fromValue(addend);
        return new $a1a5421ec4193eec$var$Long(this.value + addend.value);
    }
    /**
   * Returns the difference of this and the specified Long.
   * @param {!Long|number|string} subtrahend Subtrahend
   * @returns {!Long} Difference
   */ subtract(subtrahend) {
        if (!$a1a5421ec4193eec$var$Long.isLong(subtrahend)) subtrahend = $a1a5421ec4193eec$var$Long.fromValue(subtrahend);
        return this.add(subtrahend.negate());
    }
    /**
   * Returns the product of this and the specified Long.
   * @param {!Long|number|string} multiplier Multiplier
   * @returns {!Long} Product
   */ multiply(multiplier) {
        if (this.isZero()) return $a1a5421ec4193eec$var$Long.ZERO;
        if (!$a1a5421ec4193eec$var$Long.isLong(multiplier)) multiplier = $a1a5421ec4193eec$var$Long.fromValue(multiplier);
        return new $a1a5421ec4193eec$var$Long(this.value * multiplier.value);
    }
    /**
   * Returns this Long divided by the specified. The result is signed if this Long is signed or
   *  unsigned if this Long is unsigned.
   * @param {!Long|number|string} divisor Divisor
   * @returns {!Long} Quotient
   */ divide(divisor) {
        if (!$a1a5421ec4193eec$var$Long.isLong(divisor)) divisor = $a1a5421ec4193eec$var$Long.fromValue(divisor);
        if (divisor.isZero()) throw Error("division by zero");
        return new $a1a5421ec4193eec$var$Long(this.value / divisor.value);
    }
    /**
   * Compares this Long's value with the specified's.
   * @param {!Long|number|string} other Other value
   * @returns {number} 0 if they are the same, 1 if the this is greater and -1
   *  if the given one is greater
   */ compare(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        if (this.value === other.value) return 0;
        if (this.value > other.value) return 1;
        if (other.value > this.value) return -1;
    }
    /**
   * Tests if this Long's value is less than the specified's.
   * @param {!Long|number|string} other Other value
   * @returns {boolean}
   */ lessThan(other) {
        if (!$a1a5421ec4193eec$var$Long.isLong(other)) other = $a1a5421ec4193eec$var$Long.fromValue(other);
        return this.value < other.value;
    }
    /**
   * Negates this Long's value.
   * @returns {!Long} Negated Long
   */ negate() {
        if (this.equals($a1a5421ec4193eec$var$Long.MIN_VALUE)) return $a1a5421ec4193eec$var$Long.MIN_VALUE;
        return this.not().add($a1a5421ec4193eec$var$Long.ONE);
    }
    /**
   * Gets the high 32 bits as a signed integer.
   * @returns {number} Signed high bits
   */ getHighBits() {
        return Number(BigInt.asIntN(32, this.value >> BigInt(32)));
    }
    /**
   * Gets the low 32 bits as a signed integer.
   * @returns {number} Signed low bits
   */ getLowBits() {
        return Number(BigInt.asIntN(32, this.value));
    }
}
/**
 * Minimum signed value.
 * @type {bigint}
 */ $a1a5421ec4193eec$var$Long.MIN_VALUE = new $a1a5421ec4193eec$var$Long(BigInt("-9223372036854775808"));
/**
 * Maximum signed value.
 * @type {bigint}
 */ $a1a5421ec4193eec$var$Long.MAX_VALUE = new $a1a5421ec4193eec$var$Long(BigInt("9223372036854775807"));
/**
 * Signed zero.
 * @type {Long}
 */ $a1a5421ec4193eec$var$Long.ZERO = $a1a5421ec4193eec$var$Long.fromInt(0);
/**
 * Signed one.
 * @type {!Long}
 */ $a1a5421ec4193eec$var$Long.ONE = $a1a5421ec4193eec$var$Long.fromInt(1);
module.exports = $a1a5421ec4193eec$var$Long;

});


parcelRegister("9kH2s", function(module, exports) {
module.exports = {
    Produce: 0,
    Fetch: 1,
    ListOffsets: 2,
    Metadata: 3,
    LeaderAndIsr: 4,
    StopReplica: 5,
    UpdateMetadata: 6,
    ControlledShutdown: 7,
    OffsetCommit: 8,
    OffsetFetch: 9,
    GroupCoordinator: 10,
    JoinGroup: 11,
    Heartbeat: 12,
    LeaveGroup: 13,
    SyncGroup: 14,
    DescribeGroups: 15,
    ListGroups: 16,
    SaslHandshake: 17,
    ApiVersions: 18,
    CreateTopics: 19,
    DeleteTopics: 20,
    DeleteRecords: 21,
    InitProducerId: 22,
    OffsetForLeaderEpoch: 23,
    AddPartitionsToTxn: 24,
    AddOffsetsToTxn: 25,
    EndTxn: 26,
    WriteTxnMarkers: 27,
    TxnOffsetCommit: 28,
    DescribeAcls: 29,
    CreateAcls: 30,
    DeleteAcls: 31,
    DescribeConfigs: 32,
    AlterConfigs: 33,
    AlterReplicaLogDirs: 34,
    DescribeLogDirs: 35,
    SaslAuthenticate: 36,
    CreatePartitions: 37,
    CreateDelegationToken: 38,
    RenewDelegationToken: 39,
    ExpireDelegationToken: 40,
    DescribeDelegationToken: 41,
    DeleteGroups: 42,
    ElectPreferredLeaders: 43,
    IncrementalAlterConfigs: 44,
    AlterPartitionReassignments: 45,
    ListPartitionReassignments: 46
};

});

parcelRegister("gDPhv", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $42Hcs = parcelRequire("42Hcs");

var $2aK07 = parcelRequire("2aK07");
var $c1d8114a945fa94b$require$Types = $2aK07.Types;
/**
 * MessageSet => [Offset MessageSize Message]
 *  Offset => int64
 *  MessageSize => int32
 *  Message => Bytes
 */ /**
 * [
 *   { key: "<value>", value: "<value>" },
 *   { key: "<value>", value: "<value>" },
 * ]
 */ module.exports = ({ messageVersion: messageVersion = 0, compression: compression, entries: entries })=>{
    const isCompressed = compression !== $c1d8114a945fa94b$require$Types.None;
    const Message = $42Hcs({
        version: messageVersion
    });
    const encoder = new $7jO81();
    // Messages in a message set are __not__ encoded as an array.
    // They are written in sequence.
    // https://cwiki.apache.org/confluence/display/KAFKA/A+Guide+To+The+Kafka+Protocol#AGuideToTheKafkaProtocol-Messagesets
    entries.forEach((entry, i)=>{
        const message = Message(entry);
        // This is the offset used in kafka as the log sequence number.
        // When the producer is sending non compressed messages, it can set the offsets to anything
        // When the producer is sending compressed messages, to avoid server side recompression, each compressed message
        // should have offset starting from 0 and increasing by one for each inner message in the compressed message
        encoder.writeInt64(isCompressed ? i : -1);
        encoder.writeInt32(message.size());
        encoder.writeEncoder(message);
    });
    return encoder;
};

});
parcelRegister("42Hcs", function(module, exports) {


const $2f18dbe93b08541a$var$versions = {
    0: (parcelRequire("lzPsu")),
    1: (parcelRequire("3eHRO"))
};
module.exports = ({ version: version = 0 })=>$2f18dbe93b08541a$var$versions[version];

});
parcelRegister("lzPsu", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $gcyPR = parcelRequire("gcyPR");

var $2aK07 = parcelRequire("2aK07");
var $fb54c86cfe3b01eb$require$Compression = $2aK07.Types;
var $fb54c86cfe3b01eb$require$COMPRESSION_CODEC_MASK = $2aK07.COMPRESSION_CODEC_MASK;
/**
 * v0
 * Message => Crc MagicByte Attributes Key Value
 *   Crc => int32
 *   MagicByte => int8
 *   Attributes => int8
 *   Key => bytes
 *   Value => bytes
 */ module.exports = ({ compression: compression = $fb54c86cfe3b01eb$require$Compression.None, key: key, value: value })=>{
    const content = new $7jO81().writeInt8(0) // magicByte
    .writeInt8(compression & $fb54c86cfe3b01eb$require$COMPRESSION_CODEC_MASK).writeBytes(key).writeBytes(value);
    const crc = $gcyPR(content);
    return new $7jO81().writeInt32(crc).writeEncoder(content);
};

});
parcelRegister("gcyPR", function(module, exports) {
// Based on https://github.com/brianloveswords/buffer-crc32/blob/master/index.js
var $bcb8c9e84f1a81c9$var$CRC_TABLE = new Int32Array([
    0x00000000,
    0x77073096,
    0xee0e612c,
    0x990951ba,
    0x076dc419,
    0x706af48f,
    0xe963a535,
    0x9e6495a3,
    0x0edb8832,
    0x79dcb8a4,
    0xe0d5e91e,
    0x97d2d988,
    0x09b64c2b,
    0x7eb17cbd,
    0xe7b82d07,
    0x90bf1d91,
    0x1db71064,
    0x6ab020f2,
    0xf3b97148,
    0x84be41de,
    0x1adad47d,
    0x6ddde4eb,
    0xf4d4b551,
    0x83d385c7,
    0x136c9856,
    0x646ba8c0,
    0xfd62f97a,
    0x8a65c9ec,
    0x14015c4f,
    0x63066cd9,
    0xfa0f3d63,
    0x8d080df5,
    0x3b6e20c8,
    0x4c69105e,
    0xd56041e4,
    0xa2677172,
    0x3c03e4d1,
    0x4b04d447,
    0xd20d85fd,
    0xa50ab56b,
    0x35b5a8fa,
    0x42b2986c,
    0xdbbbc9d6,
    0xacbcf940,
    0x32d86ce3,
    0x45df5c75,
    0xdcd60dcf,
    0xabd13d59,
    0x26d930ac,
    0x51de003a,
    0xc8d75180,
    0xbfd06116,
    0x21b4f4b5,
    0x56b3c423,
    0xcfba9599,
    0xb8bda50f,
    0x2802b89e,
    0x5f058808,
    0xc60cd9b2,
    0xb10be924,
    0x2f6f7c87,
    0x58684c11,
    0xc1611dab,
    0xb6662d3d,
    0x76dc4190,
    0x01db7106,
    0x98d220bc,
    0xefd5102a,
    0x71b18589,
    0x06b6b51f,
    0x9fbfe4a5,
    0xe8b8d433,
    0x7807c9a2,
    0x0f00f934,
    0x9609a88e,
    0xe10e9818,
    0x7f6a0dbb,
    0x086d3d2d,
    0x91646c97,
    0xe6635c01,
    0x6b6b51f4,
    0x1c6c6162,
    0x856530d8,
    0xf262004e,
    0x6c0695ed,
    0x1b01a57b,
    0x8208f4c1,
    0xf50fc457,
    0x65b0d9c6,
    0x12b7e950,
    0x8bbeb8ea,
    0xfcb9887c,
    0x62dd1ddf,
    0x15da2d49,
    0x8cd37cf3,
    0xfbd44c65,
    0x4db26158,
    0x3ab551ce,
    0xa3bc0074,
    0xd4bb30e2,
    0x4adfa541,
    0x3dd895d7,
    0xa4d1c46d,
    0xd3d6f4fb,
    0x4369e96a,
    0x346ed9fc,
    0xad678846,
    0xda60b8d0,
    0x44042d73,
    0x33031de5,
    0xaa0a4c5f,
    0xdd0d7cc9,
    0x5005713c,
    0x270241aa,
    0xbe0b1010,
    0xc90c2086,
    0x5768b525,
    0x206f85b3,
    0xb966d409,
    0xce61e49f,
    0x5edef90e,
    0x29d9c998,
    0xb0d09822,
    0xc7d7a8b4,
    0x59b33d17,
    0x2eb40d81,
    0xb7bd5c3b,
    0xc0ba6cad,
    0xedb88320,
    0x9abfb3b6,
    0x03b6e20c,
    0x74b1d29a,
    0xead54739,
    0x9dd277af,
    0x04db2615,
    0x73dc1683,
    0xe3630b12,
    0x94643b84,
    0x0d6d6a3e,
    0x7a6a5aa8,
    0xe40ecf0b,
    0x9309ff9d,
    0x0a00ae27,
    0x7d079eb1,
    0xf00f9344,
    0x8708a3d2,
    0x1e01f268,
    0x6906c2fe,
    0xf762575d,
    0x806567cb,
    0x196c3671,
    0x6e6b06e7,
    0xfed41b76,
    0x89d32be0,
    0x10da7a5a,
    0x67dd4acc,
    0xf9b9df6f,
    0x8ebeeff9,
    0x17b7be43,
    0x60b08ed5,
    0xd6d6a3e8,
    0xa1d1937e,
    0x38d8c2c4,
    0x4fdff252,
    0xd1bb67f1,
    0xa6bc5767,
    0x3fb506dd,
    0x48b2364b,
    0xd80d2bda,
    0xaf0a1b4c,
    0x36034af6,
    0x41047a60,
    0xdf60efc3,
    0xa867df55,
    0x316e8eef,
    0x4669be79,
    0xcb61b38c,
    0xbc66831a,
    0x256fd2a0,
    0x5268e236,
    0xcc0c7795,
    0xbb0b4703,
    0x220216b9,
    0x5505262f,
    0xc5ba3bbe,
    0xb2bd0b28,
    0x2bb45a92,
    0x5cb36a04,
    0xc2d7ffa7,
    0xb5d0cf31,
    0x2cd99e8b,
    0x5bdeae1d,
    0x9b64c2b0,
    0xec63f226,
    0x756aa39c,
    0x026d930a,
    0x9c0906a9,
    0xeb0e363f,
    0x72076785,
    0x05005713,
    0x95bf4a82,
    0xe2b87a14,
    0x7bb12bae,
    0x0cb61b38,
    0x92d28e9b,
    0xe5d5be0d,
    0x7cdcefb7,
    0x0bdbdf21,
    0x86d3d2d4,
    0xf1d4e242,
    0x68ddb3f8,
    0x1fda836e,
    0x81be16cd,
    0xf6b9265b,
    0x6fb077e1,
    0x18b74777,
    0x88085ae6,
    0xff0f6a70,
    0x66063bca,
    0x11010b5c,
    0x8f659eff,
    0xf862ae69,
    0x616bffd3,
    0x166ccf45,
    0xa00ae278,
    0xd70dd2ee,
    0x4e048354,
    0x3903b3c2,
    0xa7672661,
    0xd06016f7,
    0x4969474d,
    0x3e6e77db,
    0xaed16a4a,
    0xd9d65adc,
    0x40df0b66,
    0x37d83bf0,
    0xa9bcae53,
    0xdebb9ec5,
    0x47b2cf7f,
    0x30b5ffe9,
    0xbdbdf21c,
    0xcabac28a,
    0x53b39330,
    0x24b4a3a6,
    0xbad03605,
    0xcdd70693,
    0x54de5729,
    0x23d967bf,
    0xb3667a2e,
    0xc4614ab8,
    0x5d681b02,
    0x2a6f2b94,
    0xb40bbe37,
    0xc30c8ea1,
    0x5a05df1b,
    0x2d02ef8d
]);
module.exports = (encoder)=>{
    const { buffer: buffer } = encoder;
    const l = buffer.length;
    let crc = -1;
    for(let n = 0; n < l; n++)crc = $bcb8c9e84f1a81c9$var$CRC_TABLE[(crc ^ buffer[n]) & 0xff] ^ crc >>> 8;
    return crc ^ -1;
};

});

parcelRegister("2aK07", function(module, exports) {

var $8mQRr = parcelRequire("8mQRr");
var $195032be1f5a70da$require$KafkaJSNotImplemented = $8mQRr.KafkaJSNotImplemented;
const $195032be1f5a70da$var$COMPRESSION_CODEC_MASK = 0x07;
const $195032be1f5a70da$var$Types = {
    None: 0,
    GZIP: 1,
    Snappy: 2,
    LZ4: 3,
    ZSTD: 4
};

const $195032be1f5a70da$var$Codecs = {
    [$195032be1f5a70da$var$Types.GZIP]: ()=>(parcelRequire("gmOM2")),
    [$195032be1f5a70da$var$Types.Snappy]: ()=>{
        throw new $195032be1f5a70da$require$KafkaJSNotImplemented("Snappy compression not implemented");
    },
    [$195032be1f5a70da$var$Types.LZ4]: ()=>{
        throw new $195032be1f5a70da$require$KafkaJSNotImplemented("LZ4 compression not implemented");
    },
    [$195032be1f5a70da$var$Types.ZSTD]: ()=>{
        throw new $195032be1f5a70da$require$KafkaJSNotImplemented("ZSTD compression not implemented");
    }
};
const $195032be1f5a70da$var$lookupCodec = (type)=>$195032be1f5a70da$var$Codecs[type] ? $195032be1f5a70da$var$Codecs[type]() : null;
const $195032be1f5a70da$var$lookupCodecByAttributes = (attributes)=>{
    const codec = $195032be1f5a70da$var$Codecs[attributes & $195032be1f5a70da$var$COMPRESSION_CODEC_MASK];
    return codec ? codec() : null;
};
module.exports = {
    Types: $195032be1f5a70da$var$Types,
    Codecs: $195032be1f5a70da$var$Codecs,
    lookupCodec: $195032be1f5a70da$var$lookupCodec,
    lookupCodecByAttributes: $195032be1f5a70da$var$lookupCodecByAttributes,
    COMPRESSION_CODEC_MASK: $195032be1f5a70da$var$COMPRESSION_CODEC_MASK
};

});
parcelRegister("8mQRr", function(module, exports) {

var $9llL0 = parcelRequire("9llL0");
const { bugs: $617961e32c7ee8aa$var$bugs } = $9llL0;
class $617961e32c7ee8aa$var$KafkaJSError extends Error {
    constructor(e, { retriable: retriable = true, cause: cause } = {}){
        super(e, {
            cause: cause
        });
        Error.captureStackTrace(this, this.constructor);
        this.message = e.message || e;
        this.name = "KafkaJSError";
        this.retriable = retriable;
        this.helpUrl = e.helpUrl;
        this.cause = cause;
    }
}
class $617961e32c7ee8aa$var$KafkaJSNonRetriableError extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(e, { cause: cause } = {}){
        super(e, {
            retriable: false,
            cause: cause
        });
        this.name = "KafkaJSNonRetriableError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSProtocolError extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(e, { retriable: retriable = e.retriable } = {}){
        super(e, {
            retriable: retriable
        });
        this.type = e.type;
        this.code = e.code;
        this.name = "KafkaJSProtocolError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSOffsetOutOfRange extends $617961e32c7ee8aa$var$KafkaJSProtocolError {
    constructor(e, { topic: topic, partition: partition }){
        super(e);
        this.topic = topic;
        this.partition = partition;
        this.name = "KafkaJSOffsetOutOfRange";
    }
}
class $617961e32c7ee8aa$var$KafkaJSMemberIdRequired extends $617961e32c7ee8aa$var$KafkaJSProtocolError {
    constructor(e, { memberId: memberId }){
        super(e);
        this.memberId = memberId;
        this.name = "KafkaJSMemberIdRequired";
    }
}
class $617961e32c7ee8aa$var$KafkaJSNumberOfRetriesExceeded extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(e, { retryCount: retryCount, retryTime: retryTime }){
        super(e, {
            cause: e
        });
        this.stack = `${this.name}\n  Caused by: ${e.stack}`;
        this.retryCount = retryCount;
        this.retryTime = retryTime;
        this.name = "KafkaJSNumberOfRetriesExceeded";
    }
}
class $617961e32c7ee8aa$var$KafkaJSConnectionError extends $617961e32c7ee8aa$var$KafkaJSError {
    /**
   * @param {string} e
   * @param {object} options
   * @param {string} [options.broker]
   * @param {string} [options.code]
   */ constructor(e, { broker: broker, code: code } = {}){
        super(e);
        this.broker = broker;
        this.code = code;
        this.name = "KafkaJSConnectionError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSConnectionClosedError extends $617961e32c7ee8aa$var$KafkaJSConnectionError {
    constructor(e, { host: host, port: port } = {}){
        super(e, {
            broker: `${host}:${port}`
        });
        this.host = host;
        this.port = port;
        this.name = "KafkaJSConnectionClosedError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSRequestTimeoutError extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(e, { broker: broker, correlationId: correlationId, createdAt: createdAt, sentAt: sentAt, pendingDuration: pendingDuration } = {}){
        super(e);
        this.broker = broker;
        this.correlationId = correlationId;
        this.createdAt = createdAt;
        this.sentAt = sentAt;
        this.pendingDuration = pendingDuration;
        this.name = "KafkaJSRequestTimeoutError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSMetadataNotLoaded extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSMetadataNotLoaded";
    }
}
class $617961e32c7ee8aa$var$KafkaJSTopicMetadataNotLoaded extends $617961e32c7ee8aa$var$KafkaJSMetadataNotLoaded {
    constructor(e, { topic: topic } = {}){
        super(e);
        this.topic = topic;
        this.name = "KafkaJSTopicMetadataNotLoaded";
    }
}
class $617961e32c7ee8aa$var$KafkaJSStaleTopicMetadataAssignment extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(e, { topic: topic, unknownPartitions: unknownPartitions } = {}){
        super(e);
        this.topic = topic;
        this.unknownPartitions = unknownPartitions;
        this.name = "KafkaJSStaleTopicMetadataAssignment";
    }
}
class $617961e32c7ee8aa$var$KafkaJSDeleteGroupsError extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(e, groups = []){
        super(e);
        this.groups = groups;
        this.name = "KafkaJSDeleteGroupsError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSServerDoesNotSupportApiKey extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(e, { apiKey: apiKey, apiName: apiName } = {}){
        super(e);
        this.apiKey = apiKey;
        this.apiName = apiName;
        this.name = "KafkaJSServerDoesNotSupportApiKey";
    }
}
class $617961e32c7ee8aa$var$KafkaJSBrokerNotFound extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSBrokerNotFound";
    }
}
class $617961e32c7ee8aa$var$KafkaJSPartialMessageError extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSPartialMessageError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSSASLAuthenticationError extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSSASLAuthenticationError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSGroupCoordinatorNotFound extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSGroupCoordinatorNotFound";
    }
}
class $617961e32c7ee8aa$var$KafkaJSNotImplemented extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSNotImplemented";
    }
}
class $617961e32c7ee8aa$var$KafkaJSTimeout extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSTimeout";
    }
}
class $617961e32c7ee8aa$var$KafkaJSLockTimeout extends $617961e32c7ee8aa$var$KafkaJSTimeout {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSLockTimeout";
    }
}
class $617961e32c7ee8aa$var$KafkaJSUnsupportedMagicByteInMessageSet extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSUnsupportedMagicByteInMessageSet";
    }
}
class $617961e32c7ee8aa$var$KafkaJSDeleteTopicRecordsError extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor({ partitions: partitions }){
        /*
     * This error is retriable if all the errors were retriable
     */ const retriable = partitions.filter(({ error: error })=>error != null).every(({ error: error })=>error.retriable === true);
        super("Error while deleting records", {
            retriable: retriable
        });
        this.name = "KafkaJSDeleteTopicRecordsError";
        this.partitions = partitions;
    }
}
const $617961e32c7ee8aa$var$issueUrl = $617961e32c7ee8aa$var$bugs ? $617961e32c7ee8aa$var$bugs.url : null;
class $617961e32c7ee8aa$var$KafkaJSInvariantViolation extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(e){
        const message = e.message || e;
        super(`Invariant violated: ${message}. This is likely a bug and should be reported.`);
        this.name = "KafkaJSInvariantViolation";
        if ($617961e32c7ee8aa$var$issueUrl !== null) {
            const issueTitle = encodeURIComponent(`Invariant violation: ${message}`);
            this.helpUrl = `${$617961e32c7ee8aa$var$issueUrl}/new?assignees=&labels=bug&template=bug_report.md&title=${issueTitle}`;
        }
    }
}
class $617961e32c7ee8aa$var$KafkaJSInvalidVarIntError extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSNonRetriableError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSInvalidLongError extends $617961e32c7ee8aa$var$KafkaJSNonRetriableError {
    constructor(){
        super(...arguments);
        this.name = "KafkaJSNonRetriableError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSCreateTopicError extends $617961e32c7ee8aa$var$KafkaJSProtocolError {
    constructor(e, topicName){
        super(e);
        this.topic = topicName;
        this.name = "KafkaJSCreateTopicError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSAlterPartitionReassignmentsError extends $617961e32c7ee8aa$var$KafkaJSProtocolError {
    constructor(e, topicName, partition){
        super(e);
        this.topic = topicName;
        this.partition = partition;
        this.name = "KafkaJSAlterPartitionReassignmentsError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSAggregateError extends Error {
    constructor(message, errors){
        super(message);
        this.errors = errors;
        this.name = "KafkaJSAggregateError";
    }
}
class $617961e32c7ee8aa$var$KafkaJSFetcherRebalanceError extends Error {
}
class $617961e32c7ee8aa$var$KafkaJSNoBrokerAvailableError extends $617961e32c7ee8aa$var$KafkaJSError {
    constructor(){
        super("No broker available");
        this.name = "KafkaJSNoBrokerAvailableError";
    }
}
const $617961e32c7ee8aa$var$isRebalancing = (e)=>e.type === "REBALANCE_IN_PROGRESS" || e.type === "NOT_COORDINATOR_FOR_GROUP" || e.type === "ILLEGAL_GENERATION";
const $617961e32c7ee8aa$var$isKafkaJSError = (e)=>e instanceof $617961e32c7ee8aa$var$KafkaJSError;
module.exports = {
    KafkaJSError: $617961e32c7ee8aa$var$KafkaJSError,
    KafkaJSNonRetriableError: $617961e32c7ee8aa$var$KafkaJSNonRetriableError,
    KafkaJSPartialMessageError: $617961e32c7ee8aa$var$KafkaJSPartialMessageError,
    KafkaJSBrokerNotFound: $617961e32c7ee8aa$var$KafkaJSBrokerNotFound,
    KafkaJSProtocolError: $617961e32c7ee8aa$var$KafkaJSProtocolError,
    KafkaJSConnectionError: $617961e32c7ee8aa$var$KafkaJSConnectionError,
    KafkaJSConnectionClosedError: $617961e32c7ee8aa$var$KafkaJSConnectionClosedError,
    KafkaJSRequestTimeoutError: $617961e32c7ee8aa$var$KafkaJSRequestTimeoutError,
    KafkaJSSASLAuthenticationError: $617961e32c7ee8aa$var$KafkaJSSASLAuthenticationError,
    KafkaJSNumberOfRetriesExceeded: $617961e32c7ee8aa$var$KafkaJSNumberOfRetriesExceeded,
    KafkaJSOffsetOutOfRange: $617961e32c7ee8aa$var$KafkaJSOffsetOutOfRange,
    KafkaJSMemberIdRequired: $617961e32c7ee8aa$var$KafkaJSMemberIdRequired,
    KafkaJSGroupCoordinatorNotFound: $617961e32c7ee8aa$var$KafkaJSGroupCoordinatorNotFound,
    KafkaJSNotImplemented: $617961e32c7ee8aa$var$KafkaJSNotImplemented,
    KafkaJSMetadataNotLoaded: $617961e32c7ee8aa$var$KafkaJSMetadataNotLoaded,
    KafkaJSTopicMetadataNotLoaded: $617961e32c7ee8aa$var$KafkaJSTopicMetadataNotLoaded,
    KafkaJSStaleTopicMetadataAssignment: $617961e32c7ee8aa$var$KafkaJSStaleTopicMetadataAssignment,
    KafkaJSDeleteGroupsError: $617961e32c7ee8aa$var$KafkaJSDeleteGroupsError,
    KafkaJSTimeout: $617961e32c7ee8aa$var$KafkaJSTimeout,
    KafkaJSLockTimeout: $617961e32c7ee8aa$var$KafkaJSLockTimeout,
    KafkaJSServerDoesNotSupportApiKey: $617961e32c7ee8aa$var$KafkaJSServerDoesNotSupportApiKey,
    KafkaJSUnsupportedMagicByteInMessageSet: $617961e32c7ee8aa$var$KafkaJSUnsupportedMagicByteInMessageSet,
    KafkaJSDeleteTopicRecordsError: $617961e32c7ee8aa$var$KafkaJSDeleteTopicRecordsError,
    KafkaJSInvariantViolation: $617961e32c7ee8aa$var$KafkaJSInvariantViolation,
    KafkaJSInvalidVarIntError: $617961e32c7ee8aa$var$KafkaJSInvalidVarIntError,
    KafkaJSInvalidLongError: $617961e32c7ee8aa$var$KafkaJSInvalidLongError,
    KafkaJSCreateTopicError: $617961e32c7ee8aa$var$KafkaJSCreateTopicError,
    KafkaJSAggregateError: $617961e32c7ee8aa$var$KafkaJSAggregateError,
    KafkaJSFetcherRebalanceError: $617961e32c7ee8aa$var$KafkaJSFetcherRebalanceError,
    KafkaJSNoBrokerAvailableError: $617961e32c7ee8aa$var$KafkaJSNoBrokerAvailableError,
    KafkaJSAlterPartitionReassignmentsError: $617961e32c7ee8aa$var$KafkaJSAlterPartitionReassignmentsError,
    isRebalancing: $617961e32c7ee8aa$var$isRebalancing,
    isKafkaJSError: $617961e32c7ee8aa$var$isKafkaJSError
};

});
parcelRegister("9llL0", function(module, exports) {
module.exports = JSON.parse('{"name":"kafkajs","version":"2.2.4","description":"A modern Apache Kafka client for node.js","author":"Tulio Ornelas <ornelas.tulio@gmail.com>","main":"index.js","types":"types/index.d.ts","license":"MIT","keywords":["kafka","sasl","scram"],"engines":{"node":">=14.0.0"},"repository":{"type":"git","url":"https://github.com/tulios/kafkajs.git"},"bugs":{"url":"https://github.com/tulios/kafkajs/issues"},"homepage":"https://kafka.js.org","scripts":{"jest":"export KAFKA_VERSION=${KAFKA_VERSION:=\'2.4\'} && NODE_ENV=test echo \\"KAFKA_VERSION: ${KAFKA_VERSION}\\" && KAFKAJS_DEBUG_PROTOCOL_BUFFERS=1 jest","test:local":"yarn jest --detectOpenHandles","test:debug":"NODE_ENV=test KAFKAJS_DEBUG_PROTOCOL_BUFFERS=1 node --inspect-brk $(yarn bin 2>/dev/null)/jest --detectOpenHandles --runInBand --watch","test:local:watch":"yarn test:local --watch","test":"yarn lint && JEST_JUNIT_OUTPUT_NAME=test-report.xml ./scripts/testWithKafka.sh \'yarn jest --ci --maxWorkers=4 --no-watchman --forceExit\'","lint":"find . -path ./node_modules -prune -o -path ./coverage -prune -o -path ./website -prune -o -name \'*.js\' -print0 | xargs -0 eslint","format":"find . -path ./node_modules -prune -o -path ./coverage -prune -o -path ./website -prune -o -name \'*.js\' -print0 | xargs -0 prettier --write","precommit":"lint-staged","test:group:broker":"yarn jest --forceExit --testPathPattern \'src/broker/.*\'","test:group:admin":"yarn jest --forceExit --testPathPattern \'src/admin/.*\'","test:group:producer":"yarn jest --forceExit --testPathPattern \'src/producer/.*\'","test:group:consumer":"yarn jest --forceExit --testPathPattern \'src/consumer/.*.spec.js\'","test:group:others":"yarn jest --forceExit --testPathPattern \'src/(?!(broker|admin|producer|consumer)/).*\'","test:group:oauthbearer":"OAUTHBEARER_ENABLED=1 yarn jest --forceExit src/producer/index.spec.js src/broker/__tests__/connect.spec.js src/consumer/__tests__/connection.spec.js src/broker/__tests__/disconnect.spec.js src/admin/__tests__/connection.spec.js src/broker/__tests__/reauthenticate.spec.js","test:group:broker:ci":"JEST_JUNIT_OUTPUT_NAME=test-report.xml ./scripts/testWithKafka.sh \\"yarn test:group:broker --ci --maxWorkers=4 --no-watchman\\"","test:group:admin:ci":"JEST_JUNIT_OUTPUT_NAME=test-report.xml ./scripts/testWithKafka.sh \\"yarn test:group:admin --ci --maxWorkers=4 --no-watchman\\"","test:group:producer:ci":"JEST_JUNIT_OUTPUT_NAME=test-report.xml ./scripts/testWithKafka.sh \\"yarn test:group:producer --ci --maxWorkers=4 --no-watchman\\"","test:group:consumer:ci":"JEST_JUNIT_OUTPUT_NAME=test-report.xml ./scripts/testWithKafka.sh \\"yarn test:group:consumer --ci --maxWorkers=4 --no-watchman\\"","test:group:others:ci":"JEST_JUNIT_OUTPUT_NAME=test-report.xml ./scripts/testWithKafka.sh \\"yarn test:group:others --ci --maxWorkers=4 --no-watchman\\"","test:group:oauthbearer:ci":"JEST_JUNIT_OUTPUT_NAME=test-report.xml COMPOSE_FILE=\'docker-compose.2_4_oauthbearer.yml\' ./scripts/testWithKafka.sh \\"yarn test:group:oauthbearer --ci --maxWorkers=4 --no-watchman\\"","test:types":"tsc -p types/"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^12.0.8","@typescript-eslint/typescript-estree":"^1.10.2","eslint":"^6.8.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.18.2","eslint-plugin-jest":"^26.1.0","eslint-plugin-node":"^11.0.0","eslint-plugin-prettier":"^3.1.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.0","execa":"^2.0.3","glob":"^7.1.4","husky":"^3.0.1","ip":"^1.1.5","jest":"^25.1.0","jest-circus":"^25.1.0","jest-extended":"^0.11.2","jest-junit":"^10.0.0","jsonwebtoken":"^9.0.0","lint-staged":"^9.2.0","mockdate":"^2.0.5","prettier":"^1.18.2","semver":"^6.2.0","typescript":"^3.8.3","uuid":"^3.3.2"},"dependencies":{},"lint-staged":{"*.js":["prettier --write","git add"]}}');

});




parcelRegister("3eHRO", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $gcyPR = parcelRequire("gcyPR");

var $2aK07 = parcelRequire("2aK07");
var $25b4b4f7b089d97e$require$Compression = $2aK07.Types;
var $25b4b4f7b089d97e$require$COMPRESSION_CODEC_MASK = $2aK07.COMPRESSION_CODEC_MASK;
/**
 * v1 (supported since 0.10.0)
 * Message => Crc MagicByte Attributes Key Value
 *   Crc => int32
 *   MagicByte => int8
 *   Attributes => int8
 *   Timestamp => int64
 *   Key => bytes
 *   Value => bytes
 */ module.exports = ({ compression: compression = $25b4b4f7b089d97e$require$Compression.None, timestamp: timestamp = Date.now(), key: key, value: value })=>{
    const content = new $7jO81().writeInt8(1) // magicByte
    .writeInt8(compression & $25b4b4f7b089d97e$require$COMPRESSION_CODEC_MASK).writeInt64(timestamp).writeBytes(key).writeBytes(value);
    const crc = $gcyPR(content);
    return new $7jO81().writeInt32(crc).writeEncoder(content);
};

});




parcelRegister("5pBHy", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $3f0c8849457208c3$require$failure = $iL9Wd.failure;
var $3f0c8849457208c3$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * v0
 * ProduceResponse => [TopicName [Partition ErrorCode Offset]]
 *   TopicName => string
 *   Partition => int32
 *   ErrorCode => int16
 *   Offset => int64
 */ const $3f0c8849457208c3$var$partition = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        offset: decoder.readInt64().toString()
    });
const $3f0c8849457208c3$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const topics = decoder.readArray((decoder)=>({
            topicName: decoder.readString(),
            partitions: decoder.readArray($3f0c8849457208c3$var$partition)
        }));
    return {
        topics: topics
    };
};
const $3f0c8849457208c3$var$parse = async (data)=>{
    const errors = data.topics.flatMap((topic)=>{
        return topic.partitions.filter((partition)=>$3f0c8849457208c3$require$failure(partition.errorCode));
    });
    if (errors.length > 0) {
        const { errorCode: errorCode } = errors[0];
        throw $3f0c8849457208c3$require$createErrorFromCode(errorCode);
    }
    return data;
};
module.exports = {
    decode: $3f0c8849457208c3$var$decode,
    parse: $3f0c8849457208c3$var$parse
};

});
parcelRegister("eMnPM", function(module, exports) {

var $ac28095ddc2ac4f5$require$Buffer = $4UN2M$buffer.Buffer;

var $8mQRr = parcelRequire("8mQRr");
var $ac28095ddc2ac4f5$require$KafkaJSInvalidVarIntError = $8mQRr.KafkaJSInvalidVarIntError;
var $ac28095ddc2ac4f5$require$KafkaJSInvalidLongError = $8mQRr.KafkaJSInvalidLongError;

var $dSqZK = parcelRequire("dSqZK");
const $ac28095ddc2ac4f5$var$INT8_SIZE = 1;
const $ac28095ddc2ac4f5$var$INT16_SIZE = 2;
const $ac28095ddc2ac4f5$var$INT32_SIZE = 4;
const $ac28095ddc2ac4f5$var$INT64_SIZE = 8;
const $ac28095ddc2ac4f5$var$DOUBLE_SIZE = 8;
const $ac28095ddc2ac4f5$var$MOST_SIGNIFICANT_BIT = 0x80 // 128
;
const $ac28095ddc2ac4f5$var$OTHER_BITS = 0x7f // 127
;
module.exports = class Decoder {
    static int32Size() {
        return $ac28095ddc2ac4f5$var$INT32_SIZE;
    }
    static decodeZigZag(value) {
        return value >>> 1 ^ -(value & 1);
    }
    static decodeZigZag64(longValue) {
        return longValue.shiftRightUnsigned(1).xor(longValue.and($dSqZK.fromInt(1)).negate());
    }
    constructor(buffer){
        this.buffer = buffer;
        this.offset = 0;
    }
    readInt8() {
        const value = this.buffer.readInt8(this.offset);
        this.offset += $ac28095ddc2ac4f5$var$INT8_SIZE;
        return value;
    }
    canReadInt16() {
        return this.canReadBytes($ac28095ddc2ac4f5$var$INT16_SIZE);
    }
    readInt16() {
        const value = this.buffer.readInt16BE(this.offset);
        this.offset += $ac28095ddc2ac4f5$var$INT16_SIZE;
        return value;
    }
    canReadInt32() {
        return this.canReadBytes($ac28095ddc2ac4f5$var$INT32_SIZE);
    }
    readInt32() {
        const value = this.buffer.readInt32BE(this.offset);
        this.offset += $ac28095ddc2ac4f5$var$INT32_SIZE;
        return value;
    }
    canReadInt64() {
        return this.canReadBytes($ac28095ddc2ac4f5$var$INT64_SIZE);
    }
    readInt64() {
        const first = this.buffer[this.offset];
        const last = this.buffer[this.offset + 7];
        const low = (first << 24) + // Overflow
        this.buffer[this.offset + 1] * 2 ** 16 + this.buffer[this.offset + 2] * 256 + this.buffer[this.offset + 3];
        const high = this.buffer[this.offset + 4] * 2 ** 24 + this.buffer[this.offset + 5] * 2 ** 16 + this.buffer[this.offset + 6] * 256 + last;
        this.offset += $ac28095ddc2ac4f5$var$INT64_SIZE;
        return (BigInt(low) << 32n) + BigInt(high);
    }
    readDouble() {
        const value = this.buffer.readDoubleBE(this.offset);
        this.offset += $ac28095ddc2ac4f5$var$DOUBLE_SIZE;
        return value;
    }
    readString() {
        const byteLength = this.readInt16();
        if (byteLength === -1) return null;
        const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);
        const value = stringBuffer.toString("utf8");
        this.offset += byteLength;
        return value;
    }
    readVarIntString() {
        const byteLength = this.readVarInt();
        if (byteLength === -1) return null;
        const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);
        const value = stringBuffer.toString("utf8");
        this.offset += byteLength;
        return value;
    }
    readUVarIntString() {
        const byteLength = this.readUVarInt();
        if (byteLength === 0) return null;
        const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength - 1);
        const value = stringBuffer.toString("utf8");
        this.offset += byteLength - 1;
        return value;
    }
    canReadBytes(length) {
        return $ac28095ddc2ac4f5$require$Buffer.byteLength(this.buffer) - this.offset >= length;
    }
    readBytes(byteLength = this.readInt32()) {
        if (byteLength === -1) return null;
        const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);
        this.offset += byteLength;
        return stringBuffer;
    }
    readVarIntBytes() {
        const byteLength = this.readVarInt();
        if (byteLength === -1) return null;
        const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);
        this.offset += byteLength;
        return stringBuffer;
    }
    readUVarIntBytes() {
        const byteLength = this.readUVarInt();
        if (byteLength === 0) return null;
        const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);
        this.offset += byteLength - 1;
        return stringBuffer;
    }
    readBoolean() {
        return this.readInt8() === 1;
    }
    readAll() {
        const result = this.buffer.slice(this.offset);
        this.offset += $ac28095ddc2ac4f5$require$Buffer.byteLength(this.buffer);
        return result;
    }
    readArray(reader) {
        const length = this.readInt32();
        if (length === -1) return [];
        const array = new Array(length);
        for(let i = 0; i < length; i++)array[i] = reader(this);
        return array;
    }
    readVarIntArray(reader) {
        const length = this.readVarInt();
        if (length === -1) return [];
        const array = new Array(length);
        for(let i = 0; i < length; i++)array[i] = reader(this);
        return array;
    }
    /* According to the protocol type documentation: https://kafka.apache.org/protocol#protocol_types,
  a compact array with length zero is a null array. An array with length 1 is an empty array. */ readUVarIntArray(reader) {
        const length = this.readUVarInt();
        if (length === 0) return null;
        const array = new Array(length - 1);
        for(let i = 0; i < length - 1; i++)array[i] = reader(this);
        return array;
    }
    async readArrayAsync(reader) {
        const length = this.readInt32();
        if (length === -1) return [];
        const array = new Array(length);
        for(let i = 0; i < length; i++)array[i] = await reader(this);
        return array;
    }
    readVarInt() {
        let currentByte;
        let result = 0;
        let i = 0;
        do {
            currentByte = this.buffer[this.offset++];
            result += (currentByte & $ac28095ddc2ac4f5$var$OTHER_BITS) << i;
            i += 7;
        }while (currentByte >= $ac28095ddc2ac4f5$var$MOST_SIGNIFICANT_BIT);
        return Decoder.decodeZigZag(result);
    }
    // By default JavaScript's numbers are of type float64, performing bitwise operations converts the numbers to a signed 32-bit integer
    // Unsigned Right Shift Operator >>> ensures the returned value is an unsigned 32-bit integer
    readUVarInt() {
        let currentByte;
        let result = 0;
        let i = 0;
        while(((currentByte = this.buffer[this.offset++]) & $ac28095ddc2ac4f5$var$MOST_SIGNIFICANT_BIT) !== 0){
            result |= (currentByte & $ac28095ddc2ac4f5$var$OTHER_BITS) << i;
            i += 7;
            if (i > 28) throw new $ac28095ddc2ac4f5$require$KafkaJSInvalidVarIntError("Invalid VarInt, must contain 5 bytes or less");
        }
        result |= currentByte << i;
        return result >>> 0;
    }
    readTaggedFields() {
        const numberOfTaggedFields = this.readUVarInt();
        if (numberOfTaggedFields === 0) return null;
        const taggedFields = {};
        for(let i = 0; i < numberOfTaggedFields; i++){
            // Right now this will read tag, the field length, and then length number of bytes for the field value skipping over the tag
            this.readUVarInt();
            this.readUVarIntBytes();
        }
        return taggedFields;
    }
    readVarLong() {
        let currentByte;
        let result = $dSqZK.fromInt(0);
        let i = 0;
        do {
            if (i > 63) throw new $ac28095ddc2ac4f5$require$KafkaJSInvalidLongError("Invalid Long, must contain 9 bytes or less");
            currentByte = this.buffer[this.offset++];
            result = result.add($dSqZK.fromInt(currentByte & $ac28095ddc2ac4f5$var$OTHER_BITS).shiftLeft(i));
            i += 7;
        }while (currentByte >= $ac28095ddc2ac4f5$var$MOST_SIGNIFICANT_BIT);
        return Decoder.decodeZigZag64(result);
    }
    slice(size) {
        return new Decoder(this.buffer.slice(this.offset, this.offset + size));
    }
    forward(size) {
        this.offset += size;
    }
};

});

parcelRegister("iL9Wd", function(module, exports) {

var $8mQRr = parcelRequire("8mQRr");
var $da84534448030686$require$KafkaJSProtocolError = $8mQRr.KafkaJSProtocolError;

var $4jZ5a = parcelRequire("4jZ5a");
const $da84534448030686$var$errorCodes = [
    {
        type: "UNKNOWN",
        code: -1,
        retriable: false,
        message: "The server experienced an unexpected error when processing the request"
    },
    {
        type: "OFFSET_OUT_OF_RANGE",
        code: 1,
        retriable: false,
        message: "The requested offset is not within the range of offsets maintained by the server"
    },
    {
        type: "CORRUPT_MESSAGE",
        code: 2,
        retriable: true,
        message: "This message has failed its CRC checksum, exceeds the valid size, or is otherwise corrupt"
    },
    {
        type: "UNKNOWN_TOPIC_OR_PARTITION",
        code: 3,
        retriable: true,
        message: "This server does not host this topic-partition"
    },
    {
        type: "INVALID_FETCH_SIZE",
        code: 4,
        retriable: false,
        message: "The requested fetch size is invalid"
    },
    {
        type: "LEADER_NOT_AVAILABLE",
        code: 5,
        retriable: true,
        message: "There is no leader for this topic-partition as we are in the middle of a leadership election"
    },
    {
        type: "NOT_LEADER_FOR_PARTITION",
        code: 6,
        retriable: true,
        message: "This server is not the leader for that topic-partition"
    },
    {
        type: "REQUEST_TIMED_OUT",
        code: 7,
        retriable: true,
        message: "The request timed out"
    },
    {
        type: "BROKER_NOT_AVAILABLE",
        code: 8,
        retriable: false,
        message: "The broker is not available"
    },
    {
        type: "REPLICA_NOT_AVAILABLE",
        code: 9,
        retriable: true,
        message: "The replica is not available for the requested topic-partition"
    },
    {
        type: "MESSAGE_TOO_LARGE",
        code: 10,
        retriable: false,
        message: "The request included a message larger than the max message size the server will accept"
    },
    {
        type: "STALE_CONTROLLER_EPOCH",
        code: 11,
        retriable: false,
        message: "The controller moved to another broker"
    },
    {
        type: "OFFSET_METADATA_TOO_LARGE",
        code: 12,
        retriable: false,
        message: "The metadata field of the offset request was too large"
    },
    {
        type: "NETWORK_EXCEPTION",
        code: 13,
        retriable: true,
        message: "The server disconnected before a response was received"
    },
    {
        type: "GROUP_LOAD_IN_PROGRESS",
        code: 14,
        retriable: true,
        message: "The coordinator is loading and hence can't process requests for this group"
    },
    {
        type: "GROUP_COORDINATOR_NOT_AVAILABLE",
        code: 15,
        retriable: true,
        message: "The group coordinator is not available"
    },
    {
        type: "NOT_COORDINATOR_FOR_GROUP",
        code: 16,
        retriable: true,
        message: "This is not the correct coordinator for this group"
    },
    {
        type: "INVALID_TOPIC_EXCEPTION",
        code: 17,
        retriable: false,
        message: "The request attempted to perform an operation on an invalid topic"
    },
    {
        type: "RECORD_LIST_TOO_LARGE",
        code: 18,
        retriable: false,
        message: "The request included message batch larger than the configured segment size on the server"
    },
    {
        type: "NOT_ENOUGH_REPLICAS",
        code: 19,
        retriable: true,
        message: "Messages are rejected since there are fewer in-sync replicas than required"
    },
    {
        type: "NOT_ENOUGH_REPLICAS_AFTER_APPEND",
        code: 20,
        retriable: true,
        message: "Messages are written to the log, but to fewer in-sync replicas than required"
    },
    {
        type: "INVALID_REQUIRED_ACKS",
        code: 21,
        retriable: false,
        message: "Produce request specified an invalid value for required acks"
    },
    {
        type: "ILLEGAL_GENERATION",
        code: 22,
        retriable: false,
        message: "Specified group generation id is not valid"
    },
    {
        type: "INCONSISTENT_GROUP_PROTOCOL",
        code: 23,
        retriable: false,
        message: "The group member's supported protocols are incompatible with those of existing members"
    },
    {
        type: "INVALID_GROUP_ID",
        code: 24,
        retriable: false,
        message: "The configured groupId is invalid"
    },
    {
        type: "UNKNOWN_MEMBER_ID",
        code: 25,
        retriable: false,
        message: "The coordinator is not aware of this member"
    },
    {
        type: "INVALID_SESSION_TIMEOUT",
        code: 26,
        retriable: false,
        message: "The session timeout is not within the range allowed by the broker (as configured by group.min.session.timeout.ms and group.max.session.timeout.ms)"
    },
    {
        type: "REBALANCE_IN_PROGRESS",
        code: 27,
        retriable: false,
        message: "The group is rebalancing, so a rejoin is needed",
        helpUrl: $4jZ5a("docs/faq", "what-does-it-mean-to-get-rebalance-in-progress-errors")
    },
    {
        type: "INVALID_COMMIT_OFFSET_SIZE",
        code: 28,
        retriable: false,
        message: "The committing offset data size is not valid"
    },
    {
        type: "TOPIC_AUTHORIZATION_FAILED",
        code: 29,
        retriable: false,
        message: "Not authorized to access topics: [Topic authorization failed]"
    },
    {
        type: "GROUP_AUTHORIZATION_FAILED",
        code: 30,
        retriable: false,
        message: "Not authorized to access group: Group authorization failed"
    },
    {
        type: "CLUSTER_AUTHORIZATION_FAILED",
        code: 31,
        retriable: false,
        message: "Cluster authorization failed"
    },
    {
        type: "INVALID_TIMESTAMP",
        code: 32,
        retriable: false,
        message: "The timestamp of the message is out of acceptable range"
    },
    {
        type: "UNSUPPORTED_SASL_MECHANISM",
        code: 33,
        retriable: false,
        message: "The broker does not support the requested SASL mechanism"
    },
    {
        type: "ILLEGAL_SASL_STATE",
        code: 34,
        retriable: false,
        message: "Request is not valid given the current SASL state"
    },
    {
        type: "UNSUPPORTED_VERSION",
        code: 35,
        retriable: false,
        message: "The version of API is not supported"
    },
    {
        type: "TOPIC_ALREADY_EXISTS",
        code: 36,
        retriable: false,
        message: "Topic with this name already exists"
    },
    {
        type: "INVALID_PARTITIONS",
        code: 37,
        retriable: false,
        message: "Number of partitions is invalid"
    },
    {
        type: "INVALID_REPLICATION_FACTOR",
        code: 38,
        retriable: false,
        message: "Replication-factor is invalid"
    },
    {
        type: "INVALID_REPLICA_ASSIGNMENT",
        code: 39,
        retriable: false,
        message: "Replica assignment is invalid"
    },
    {
        type: "INVALID_CONFIG",
        code: 40,
        retriable: false,
        message: "Configuration is invalid"
    },
    {
        type: "NOT_CONTROLLER",
        code: 41,
        retriable: true,
        message: "This is not the correct controller for this cluster"
    },
    {
        type: "INVALID_REQUEST",
        code: 42,
        retriable: false,
        message: "This most likely occurs because of a request being malformed by the client library or the message was sent to an incompatible broker. See the broker logs for more details"
    },
    {
        type: "UNSUPPORTED_FOR_MESSAGE_FORMAT",
        code: 43,
        retriable: false,
        message: "The message format version on the broker does not support the request"
    },
    {
        type: "POLICY_VIOLATION",
        code: 44,
        retriable: false,
        message: "Request parameters do not satisfy the configured policy"
    },
    {
        type: "OUT_OF_ORDER_SEQUENCE_NUMBER",
        code: 45,
        retriable: false,
        message: "The broker received an out of order sequence number"
    },
    {
        type: "DUPLICATE_SEQUENCE_NUMBER",
        code: 46,
        retriable: false,
        message: "The broker received a duplicate sequence number"
    },
    {
        type: "INVALID_PRODUCER_EPOCH",
        code: 47,
        retriable: false,
        message: "Producer attempted an operation with an old epoch. Either there is a newer producer with the same transactionalId, or the producer's transaction has been expired by the broker"
    },
    {
        type: "INVALID_TXN_STATE",
        code: 48,
        retriable: false,
        message: "The producer attempted a transactional operation in an invalid state"
    },
    {
        type: "INVALID_PRODUCER_ID_MAPPING",
        code: 49,
        retriable: false,
        message: "The producer attempted to use a producer id which is not currently assigned to its transactional id"
    },
    {
        type: "INVALID_TRANSACTION_TIMEOUT",
        code: 50,
        retriable: false,
        message: "The transaction timeout is larger than the maximum value allowed by the broker (as configured by max.transaction.timeout.ms)"
    },
    {
        type: "CONCURRENT_TRANSACTIONS",
        code: 51,
        /**
     * The concurrent transactions error has "retriable" set to false on the protocol documentation (https://kafka.apache.org/protocol.html#protocol_error_codes)
     * but the server expects the clients to retry. PR #223
     * @see https://github.com/apache/kafka/blob/12f310d50e7f5b1c18c4f61a119a6cd830da3bc0/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala#L153
     */ retriable: true,
        message: "The producer attempted to update a transaction while another concurrent operation on the same transaction was ongoing"
    },
    {
        type: "TRANSACTION_COORDINATOR_FENCED",
        code: 52,
        retriable: false,
        message: "Indicates that the transaction coordinator sending a WriteTxnMarker is no longer the current coordinator for a given producer"
    },
    {
        type: "TRANSACTIONAL_ID_AUTHORIZATION_FAILED",
        code: 53,
        retriable: false,
        message: "Transactional Id authorization failed"
    },
    {
        type: "SECURITY_DISABLED",
        code: 54,
        retriable: false,
        message: "Security features are disabled"
    },
    {
        type: "OPERATION_NOT_ATTEMPTED",
        code: 55,
        retriable: false,
        message: "The broker did not attempt to execute this operation. This may happen for batched RPCs where some operations in the batch failed, causing the broker to respond without trying the rest"
    },
    {
        type: "KAFKA_STORAGE_ERROR",
        code: 56,
        retriable: true,
        message: "Disk error when trying to access log file on the disk"
    },
    {
        type: "LOG_DIR_NOT_FOUND",
        code: 57,
        retriable: false,
        message: "The user-specified log directory is not found in the broker config"
    },
    {
        type: "SASL_AUTHENTICATION_FAILED",
        code: 58,
        retriable: false,
        message: "SASL Authentication failed",
        helpUrl: $4jZ5a("docs/configuration", "sasl")
    },
    {
        type: "UNKNOWN_PRODUCER_ID",
        code: 59,
        retriable: false,
        message: "This exception is raised by the broker if it could not locate the producer metadata associated with the producerId in question. This could happen if, for instance, the producer's records were deleted because their retention time had elapsed. Once the last records of the producerId are removed, the producer's metadata is removed from the broker, and future appends by the producer will return this exception"
    },
    {
        type: "REASSIGNMENT_IN_PROGRESS",
        code: 60,
        retriable: false,
        message: "A partition reassignment is in progress"
    },
    {
        type: "DELEGATION_TOKEN_AUTH_DISABLED",
        code: 61,
        retriable: false,
        message: "Delegation Token feature is not enabled"
    },
    {
        type: "DELEGATION_TOKEN_NOT_FOUND",
        code: 62,
        retriable: false,
        message: "Delegation Token is not found on server"
    },
    {
        type: "DELEGATION_TOKEN_OWNER_MISMATCH",
        code: 63,
        retriable: false,
        message: "Specified Principal is not valid Owner/Renewer"
    },
    {
        type: "DELEGATION_TOKEN_REQUEST_NOT_ALLOWED",
        code: 64,
        retriable: false,
        message: "Delegation Token requests are not allowed on PLAINTEXT/1-way SSL channels and on delegation token authenticated channels"
    },
    {
        type: "DELEGATION_TOKEN_AUTHORIZATION_FAILED",
        code: 65,
        retriable: false,
        message: "Delegation Token authorization failed"
    },
    {
        type: "DELEGATION_TOKEN_EXPIRED",
        code: 66,
        retriable: false,
        message: "Delegation Token is expired"
    },
    {
        type: "INVALID_PRINCIPAL_TYPE",
        code: 67,
        retriable: false,
        message: "Supplied principalType is not supported"
    },
    {
        type: "NON_EMPTY_GROUP",
        code: 68,
        retriable: false,
        message: "The group is not empty"
    },
    {
        type: "GROUP_ID_NOT_FOUND",
        code: 69,
        retriable: false,
        message: "The group id was not found"
    },
    {
        type: "FETCH_SESSION_ID_NOT_FOUND",
        code: 70,
        retriable: true,
        message: "The fetch session ID was not found"
    },
    {
        type: "INVALID_FETCH_SESSION_EPOCH",
        code: 71,
        retriable: true,
        message: "The fetch session epoch is invalid"
    },
    {
        type: "LISTENER_NOT_FOUND",
        code: 72,
        retriable: true,
        message: "There is no listener on the leader broker that matches the listener on which metadata request was processed"
    },
    {
        type: "TOPIC_DELETION_DISABLED",
        code: 73,
        retriable: false,
        message: "Topic deletion is disabled"
    },
    {
        type: "FENCED_LEADER_EPOCH",
        code: 74,
        retriable: true,
        message: "The leader epoch in the request is older than the epoch on the broker"
    },
    {
        type: "UNKNOWN_LEADER_EPOCH",
        code: 75,
        retriable: true,
        message: "The leader epoch in the request is newer than the epoch on the broker"
    },
    {
        type: "UNSUPPORTED_COMPRESSION_TYPE",
        code: 76,
        retriable: false,
        message: "The requesting client does not support the compression type of given partition"
    },
    {
        type: "STALE_BROKER_EPOCH",
        code: 77,
        retriable: false,
        message: "Broker epoch has changed"
    },
    {
        type: "OFFSET_NOT_AVAILABLE",
        code: 78,
        retriable: true,
        message: "The leader high watermark has not caught up from a recent leader election so the offsets cannot be guaranteed to be monotonically increasing"
    },
    {
        type: "MEMBER_ID_REQUIRED",
        code: 79,
        retriable: false,
        message: "The group member needs to have a valid member id before actually entering a consumer group"
    },
    {
        type: "PREFERRED_LEADER_NOT_AVAILABLE",
        code: 80,
        retriable: true,
        message: "The preferred leader was not available"
    },
    {
        type: "GROUP_MAX_SIZE_REACHED",
        code: 81,
        retriable: false,
        message: "The consumer group has reached its max size. It already has the configured maximum number of members"
    },
    {
        type: "FENCED_INSTANCE_ID",
        code: 82,
        retriable: false,
        message: "The broker rejected this static consumer since another consumer with the same group instance id has registered with a different member id"
    },
    {
        type: "ELIGIBLE_LEADERS_NOT_AVAILABLE",
        code: 83,
        retriable: true,
        message: "Eligible topic partition leaders are not available"
    },
    {
        type: "ELECTION_NOT_NEEDED",
        code: 84,
        retriable: true,
        message: "Leader election not needed for topic partition"
    },
    {
        type: "NO_REASSIGNMENT_IN_PROGRESS",
        code: 85,
        retriable: false,
        message: "No partition reassignment is in progress"
    },
    {
        type: "GROUP_SUBSCRIBED_TO_TOPIC",
        code: 86,
        retriable: false,
        message: "Deleting offsets of a topic is forbidden while the consumer group is actively subscribed to it"
    },
    {
        type: "INVALID_RECORD",
        code: 87,
        retriable: false,
        message: "This record has failed the validation on broker and hence be rejected"
    },
    {
        type: "UNSTABLE_OFFSET_COMMIT",
        code: 88,
        retriable: true,
        message: "There are unstable offsets that need to be cleared"
    }
];
const $da84534448030686$var$unknownErrorCode = (errorCode)=>({
        type: "KAFKAJS_UNKNOWN_ERROR_CODE",
        code: -99,
        retriable: false,
        message: `Unknown error code ${errorCode}`
    });
const $da84534448030686$var$SUCCESS_CODE = 0;
const $da84534448030686$var$UNSUPPORTED_VERSION_CODE = 35;
const $da84534448030686$var$failure = (code)=>code !== $da84534448030686$var$SUCCESS_CODE;
const $da84534448030686$var$createErrorFromCode = (code)=>{
    return new $da84534448030686$require$KafkaJSProtocolError($da84534448030686$var$errorCodes.find((e)=>e.code === code) || $da84534448030686$var$unknownErrorCode(code));
};
const $da84534448030686$var$failIfVersionNotSupported = (code)=>{
    if (code === $da84534448030686$var$UNSUPPORTED_VERSION_CODE) throw $da84534448030686$var$createErrorFromCode($da84534448030686$var$UNSUPPORTED_VERSION_CODE);
};
const $da84534448030686$var$staleMetadata = (e)=>[
        "UNKNOWN_TOPIC_OR_PARTITION",
        "LEADER_NOT_AVAILABLE",
        "NOT_LEADER_FOR_PARTITION"
    ].includes(e.type);
module.exports = {
    failure: $da84534448030686$var$failure,
    errorCodes: $da84534448030686$var$errorCodes,
    createErrorFromCode: $da84534448030686$var$createErrorFromCode,
    failIfVersionNotSupported: $da84534448030686$var$failIfVersionNotSupported,
    staleMetadata: $da84534448030686$var$staleMetadata
};

});
parcelRegister("4jZ5a", function(module, exports) {
const $325851790674e3aa$var$BASE_URL = "https://kafka.js.org";
const $325851790674e3aa$var$stripLeading = (char)=>(str)=>str.charAt(0) === char ? str.substring(1) : str;
const $325851790674e3aa$var$stripLeadingSlash = $325851790674e3aa$var$stripLeading("/");
const $325851790674e3aa$var$stripLeadingHash = $325851790674e3aa$var$stripLeading("#");
module.exports = (path, hash)=>`${$325851790674e3aa$var$BASE_URL}/${$325851790674e3aa$var$stripLeadingSlash(path)}${hash ? "#" + $325851790674e3aa$var$stripLeadingHash(hash) : ""}`;

});



parcelRegister("9XSBF", function(module, exports) {

var $3ADpX = parcelRequire("3ADpX");
// Produce Request on or after v1 indicates the client can parse the quota throttle time
// in the Produce Response.
module.exports = ({ acks: acks, timeout: timeout, topicData: topicData })=>{
    return Object.assign($3ADpX({
        acks: acks,
        timeout: timeout,
        topicData: topicData
    }), {
        apiVersion: 1
    });
};

});

parcelRegister("b7F5D", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $5pBHy = parcelRequire("5pBHy");
var $819038c3a20d2e4d$require$parseV0 = $5pBHy.parse;
/**
 * v1 (supported in 0.9.0 or later)
 * ProduceResponse => [TopicName [Partition ErrorCode Offset]] ThrottleTime
 *   TopicName => string
 *   Partition => int32
 *   ErrorCode => int16
 *   Offset => int64
 *   ThrottleTime => int32
 */ const $819038c3a20d2e4d$var$partition = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        offset: decoder.readInt64().toString()
    });
const $819038c3a20d2e4d$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const topics = decoder.readArray((decoder)=>({
            topicName: decoder.readString(),
            partitions: decoder.readArray($819038c3a20d2e4d$var$partition)
        }));
    const throttleTime = decoder.readInt32();
    return {
        topics: topics,
        throttleTime: throttleTime
    };
};
module.exports = {
    decode: $819038c3a20d2e4d$var$decode,
    parse: $819038c3a20d2e4d$require$parseV0
};

});

parcelRegister("3qAmp", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $27f0013cedd0e85e$require$apiKey = $9kH2s.Produce;

var $gDPhv = parcelRequire("gDPhv");

var $2aK07 = parcelRequire("2aK07");
var $27f0013cedd0e85e$require$Types = $2aK07.Types;
var $27f0013cedd0e85e$require$lookupCodec = $2aK07.lookupCodec;
// Produce Request on or after v2 indicates the client can parse the timestamp field
// in the produce Response.
module.exports = ({ acks: acks, timeout: timeout, compression: compression = $27f0013cedd0e85e$require$Types.None, topicData: topicData })=>({
        apiKey: $27f0013cedd0e85e$require$apiKey,
        apiVersion: 2,
        apiName: "Produce",
        expectResponse: ()=>acks !== 0,
        encode: async ()=>{
            const encodeTopic = $27f0013cedd0e85e$var$topicEncoder(compression);
            const encodedTopicData = [];
            for (const data of topicData)encodedTopicData.push(await encodeTopic(data));
            return new $7jO81().writeInt16(acks).writeInt32(timeout).writeArray(encodedTopicData);
        }
    });
const $27f0013cedd0e85e$var$topicEncoder = (compression)=>{
    const encodePartitions = $27f0013cedd0e85e$var$partitionsEncoder(compression);
    return async ({ topic: topic, partitions: partitions })=>{
        const encodedPartitions = [];
        for (const data of partitions)encodedPartitions.push(await encodePartitions(data));
        return new $7jO81().writeString(topic).writeArray(encodedPartitions);
    };
};
const $27f0013cedd0e85e$var$partitionsEncoder = (compression)=>async ({ partition: partition, messages: messages })=>{
        const messageSet = $gDPhv({
            messageVersion: 1,
            compression: compression,
            entries: messages
        });
        if (compression === $27f0013cedd0e85e$require$Types.None) return new $7jO81().writeInt32(partition).writeInt32(messageSet.size()).writeEncoder(messageSet);
        const timestamp = messages[0].timestamp || Date.now();
        const codec = $27f0013cedd0e85e$require$lookupCodec(compression);
        const compressedValue = await codec.compress(messageSet);
        const compressedMessageSet = $gDPhv({
            messageVersion: 1,
            entries: [
                {
                    compression: compression,
                    timestamp: timestamp,
                    value: compressedValue
                }
            ]
        });
        return new $7jO81().writeInt32(partition).writeInt32(compressedMessageSet.size()).writeEncoder(compressedMessageSet);
    };

});

parcelRegister("a2GBX", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $5pBHy = parcelRequire("5pBHy");
var $74fb250098efcaf6$require$parseV0 = $5pBHy.parse;
/**
 * v2 (supported in 0.10.0 or later)
 * ProduceResponse => [TopicName [Partition ErrorCode Offset Timestamp]] ThrottleTime
 *   TopicName => string
 *   Partition => int32
 *   ErrorCode => int16
 *   Offset => int64
 *   Timestamp => int64
 *   ThrottleTime => int32
 */ const $74fb250098efcaf6$var$partition = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        offset: decoder.readInt64().toString(),
        timestamp: decoder.readInt64().toString()
    });
const $74fb250098efcaf6$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const topics = decoder.readArray((decoder)=>({
            topicName: decoder.readString(),
            partitions: decoder.readArray($74fb250098efcaf6$var$partition)
        }));
    const throttleTime = decoder.readInt32();
    return {
        topics: topics,
        throttleTime: throttleTime
    };
};
module.exports = {
    decode: $74fb250098efcaf6$var$decode,
    parse: $74fb250098efcaf6$require$parseV0
};

});

parcelRegister("aIzpH", function(module, exports) {

var $dSqZK = parcelRequire("dSqZK");

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $7cd97bd284f5cb54$require$apiKey = $9kH2s.Produce;

var $2aK07 = parcelRequire("2aK07");
var $7cd97bd284f5cb54$require$Types = $2aK07.Types;

var $46RfK = parcelRequire("46RfK");

var $8Nq5m = parcelRequire("8Nq5m");
var $7cd97bd284f5cb54$require$RecordBatch = $8Nq5m.RecordBatch;
/**
 * Produce Request (Version: 3) => transactional_id acks timeout [topic_data]
 *   transactional_id => NULLABLE_STRING
 *   acks => INT16
 *   timeout => INT32
 *   topic_data => topic [data]
 *     topic => STRING
 *     data => partition record_set
 *       partition => INT32
 *       record_set => RECORDS
 */ /**
 * @param [transactionalId=null] {String} The transactional id or null if the producer is not transactional
 * @param acks {Integer} See producer request v0
 * @param timeout {Integer} See producer request v0
 * @param [compression=CompressionTypes.None] {CompressionTypes}
 * @param topicData {Array}
 */ module.exports = ({ acks: acks, timeout: timeout, transactionalId: transactionalId = null, producerId: producerId = $dSqZK.fromInt(-1), producerEpoch: producerEpoch = 0, compression: compression = $7cd97bd284f5cb54$require$Types.None, topicData: topicData })=>({
        apiKey: $7cd97bd284f5cb54$require$apiKey,
        apiVersion: 3,
        apiName: "Produce",
        expectResponse: ()=>acks !== 0,
        encode: async ()=>{
            const encodeTopic = $7cd97bd284f5cb54$var$topicEncoder(compression);
            const encodedTopicData = [];
            for (const data of topicData)encodedTopicData.push(await encodeTopic({
                ...data,
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch
            }));
            return new $7jO81().writeString(transactionalId).writeInt16(acks).writeInt32(timeout).writeArray(encodedTopicData);
        }
    });
const $7cd97bd284f5cb54$var$topicEncoder = (compression)=>async ({ topic: topic, partitions: partitions, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch })=>{
        const encodePartitions = $7cd97bd284f5cb54$var$partitionsEncoder(compression);
        const encodedPartitions = [];
        for (const data of partitions)encodedPartitions.push(await encodePartitions({
            ...data,
            transactionalId: transactionalId,
            producerId: producerId,
            producerEpoch: producerEpoch
        }));
        return new $7jO81().writeString(topic).writeArray(encodedPartitions);
    };
const $7cd97bd284f5cb54$var$partitionsEncoder = (compression)=>async ({ partition: partition, messages: messages, transactionalId: transactionalId, firstSequence: firstSequence, producerId: producerId, producerEpoch: producerEpoch })=>{
        const dateNow = Date.now();
        const messageTimestamps = messages.map((m)=>m.timestamp).filter((timestamp)=>timestamp != null).sort();
        const timestamps = messageTimestamps.length === 0 ? [
            dateNow
        ] : messageTimestamps;
        const firstTimestamp = timestamps[0];
        const maxTimestamp = timestamps[timestamps.length - 1];
        const records = messages.map((message, i)=>$46RfK({
                ...message,
                offsetDelta: i,
                timestampDelta: (message.timestamp || dateNow) - firstTimestamp
            }));
        const recordBatch = await $7cd97bd284f5cb54$require$RecordBatch({
            compression: compression,
            records: records,
            firstTimestamp: firstTimestamp,
            maxTimestamp: maxTimestamp,
            producerId: producerId,
            producerEpoch: producerEpoch,
            firstSequence: firstSequence,
            transactional: !!transactionalId,
            lastOffsetDelta: records.length - 1
        });
        return new $7jO81().writeInt32(partition).writeInt32(recordBatch.size()).writeEncoder(recordBatch);
    };

});
parcelRegister("46RfK", function(module, exports) {

var $2fe107e3cc1a7f76$require$Buffer = $4UN2M$buffer.Buffer;

var $7jO81 = parcelRequire("7jO81");

var $316F9 = parcelRequire("316F9");
/**
 * v0
 * Record =>
 *   Length => Varint
 *   Attributes => Int8
 *   TimestampDelta => Varlong
 *   OffsetDelta => Varint
 *   Key => varInt|Bytes
 *   Value => varInt|Bytes
 *   Headers => [HeaderKey HeaderValue]
 *     HeaderKey => VarInt|String
 *     HeaderValue => VarInt|Bytes
 */ /**
 * @param [offsetDelta=0] {Integer}
 * @param [timestampDelta=0] {Long}
 * @param key {Buffer}
 * @param value {Buffer}
 * @param [headers={}] {Object}
 */ module.exports = ({ offsetDelta: offsetDelta = 0, timestampDelta: timestampDelta = 0, key: key, value: value, headers: headers = {} })=>{
    const headersArray = Object.keys(headers).flatMap((headerKey)=>!Array.isArray(headers[headerKey]) ? [
            {
                key: headerKey,
                value: headers[headerKey]
            }
        ] : headers[headerKey].map((headerValue)=>({
                key: headerKey,
                value: headerValue
            })));
    const sizeOfBody = 1 + // always one byte for attributes
    $7jO81.sizeOfVarLong(timestampDelta) + $7jO81.sizeOfVarInt(offsetDelta) + $7jO81.sizeOfVarIntBytes(key) + $7jO81.sizeOfVarIntBytes(value) + $2fe107e3cc1a7f76$var$sizeOfHeaders(headersArray);
    return new $7jO81().writeVarInt(sizeOfBody).writeInt8(0) // no used record attributes at the moment
    .writeVarLong(timestampDelta).writeVarInt(offsetDelta).writeVarIntBytes(key).writeVarIntBytes(value).writeVarIntArray(headersArray.map($316F9));
};
const $2fe107e3cc1a7f76$var$sizeOfHeaders = (headersArray)=>{
    let size = $7jO81.sizeOfVarInt(headersArray.length);
    for (const header of headersArray){
        const keySize = $2fe107e3cc1a7f76$require$Buffer.byteLength(header.key);
        const valueSize = $2fe107e3cc1a7f76$require$Buffer.byteLength(header.value);
        size += $7jO81.sizeOfVarInt(keySize) + keySize;
        if (header.value === null) size += $7jO81.sizeOfVarInt(-1);
        else size += $7jO81.sizeOfVarInt(valueSize) + valueSize;
    }
    return size;
};

});
parcelRegister("316F9", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");
/**
 * v0
 * Header => Key Value
 *   Key => varInt|string
 *   Value => varInt|bytes
 */ module.exports = ({ key: key, value: value })=>{
    return new $7jO81().writeVarIntString(key).writeVarIntBytes(value);
};

});


parcelRegister("8Nq5m", function(module, exports) {

var $dSqZK = parcelRequire("dSqZK");

var $7jO81 = parcelRequire("7jO81");

var $Ids6i = parcelRequire("Ids6i");

var $2aK07 = parcelRequire("2aK07");
var $6677226209639bd8$require$Compression = $2aK07.Types;
var $6677226209639bd8$require$lookupCodec = $2aK07.lookupCodec;
var $6677226209639bd8$require$COMPRESSION_CODEC_MASK = $2aK07.COMPRESSION_CODEC_MASK;
const $6677226209639bd8$var$MAGIC_BYTE = 2;
const $6677226209639bd8$var$TIMESTAMP_MASK = 0 // The fourth lowest bit, always set this bit to 0 (since 0.10.0)
;
const $6677226209639bd8$var$TRANSACTIONAL_MASK = 16 // The fifth lowest bit
;
/**
 * v0
 * RecordBatch =>
 *  FirstOffset => int64
 *  Length => int32
 *  PartitionLeaderEpoch => int32
 *  Magic => int8
 *  CRC => int32
 *  Attributes => int16
 *  LastOffsetDelta => int32
 *  FirstTimestamp => int64
 *  MaxTimestamp => int64
 *  ProducerId => int64
 *  ProducerEpoch => int16
 *  FirstSequence => int32
 *  Records => [Record]
 */ const $6677226209639bd8$var$RecordBatch = async ({ compression: compression = $6677226209639bd8$require$Compression.None, firstOffset: firstOffset = $dSqZK.fromInt(0), firstTimestamp: firstTimestamp = Date.now(), maxTimestamp: maxTimestamp = Date.now(), partitionLeaderEpoch: partitionLeaderEpoch = 0, lastOffsetDelta: lastOffsetDelta = 0, transactional: transactional = false, producerId: producerId = $dSqZK.fromValue(-1), producerEpoch: producerEpoch = 0, firstSequence: firstSequence = 0, records: records = [] })=>{
    const COMPRESSION_CODEC = compression & $6677226209639bd8$require$COMPRESSION_CODEC_MASK;
    const IN_TRANSACTION = transactional ? $6677226209639bd8$var$TRANSACTIONAL_MASK : 0;
    const attributes = COMPRESSION_CODEC | $6677226209639bd8$var$TIMESTAMP_MASK | IN_TRANSACTION;
    const batchBody = new $7jO81().writeInt16(attributes).writeInt32(lastOffsetDelta).writeInt64(firstTimestamp).writeInt64(maxTimestamp).writeInt64(producerId).writeInt16(producerEpoch).writeInt32(firstSequence);
    if (compression === $6677226209639bd8$require$Compression.None) {
        if (records.every((v)=>typeof v === typeof records[0])) batchBody.writeArray(records, typeof records[0]);
        else batchBody.writeArray(records);
    } else {
        const compressedRecords = await $6677226209639bd8$var$compressRecords(compression, records);
        batchBody.writeInt32(records.length).writeBuffer(compressedRecords);
    }
    // CRC32C validation is happening here:
    // https://github.com/apache/kafka/blob/0.11.0.1/clients/src/main/java/org/apache/kafka/common/record/DefaultRecordBatch.java#L148
    const batch = new $7jO81().writeInt32(partitionLeaderEpoch).writeInt8($6677226209639bd8$var$MAGIC_BYTE).writeUInt32($Ids6i(batchBody.buffer)).writeEncoder(batchBody);
    return new $7jO81().writeInt64(firstOffset).writeBytes(batch.buffer);
};
const $6677226209639bd8$var$compressRecords = async (compression, records)=>{
    const codec = $6677226209639bd8$require$lookupCodec(compression);
    const recordsEncoder = new $7jO81();
    recordsEncoder.writeEncoderArray(records);
    return codec.compress(recordsEncoder);
};
module.exports = {
    RecordBatch: $6677226209639bd8$var$RecordBatch,
    MAGIC_BYTE: $6677226209639bd8$var$MAGIC_BYTE
};

});
parcelRegister("Ids6i", function(module, exports) {

var $64ALF = parcelRequire("64ALF");
const $084e8b826693a200$var$unsigned = (value)=>Uint32Array.from([
        value
    ])[0];
module.exports = (buffer)=>$084e8b826693a200$var$unsigned($64ALF(buffer));

});
parcelRegister("64ALF", function(module, exports) {
/**
 * A javascript implementation of the CRC32 checksum that uses
 * the CRC32-C polynomial, the same polynomial used by iSCSI
 *
 * also known as CRC32 Castagnoli
 * based on: https://github.com/ashi009/node-fast-crc32c/blob/master/impls/js_crc32c.js
 */ const $46bfa31e96221aaa$var$crc32C = (buffer)=>{
    let crc = -1;
    for(let i = 0; i < buffer.length; i++)crc = $46bfa31e96221aaa$var$T[(crc ^ buffer[i]) & 0xff] ^ crc >>> 8;
    return (crc ^ -1) >>> 0;
};
module.exports = $46bfa31e96221aaa$var$crc32C;
// prettier-ignore
var $46bfa31e96221aaa$var$T = new Int32Array([
    0x00000000,
    0xf26b8303,
    0xe13b70f7,
    0x1350f3f4,
    0xc79a971f,
    0x35f1141c,
    0x26a1e7e8,
    0xd4ca64eb,
    0x8ad958cf,
    0x78b2dbcc,
    0x6be22838,
    0x9989ab3b,
    0x4d43cfd0,
    0xbf284cd3,
    0xac78bf27,
    0x5e133c24,
    0x105ec76f,
    0xe235446c,
    0xf165b798,
    0x030e349b,
    0xd7c45070,
    0x25afd373,
    0x36ff2087,
    0xc494a384,
    0x9a879fa0,
    0x68ec1ca3,
    0x7bbcef57,
    0x89d76c54,
    0x5d1d08bf,
    0xaf768bbc,
    0xbc267848,
    0x4e4dfb4b,
    0x20bd8ede,
    0xd2d60ddd,
    0xc186fe29,
    0x33ed7d2a,
    0xe72719c1,
    0x154c9ac2,
    0x061c6936,
    0xf477ea35,
    0xaa64d611,
    0x580f5512,
    0x4b5fa6e6,
    0xb93425e5,
    0x6dfe410e,
    0x9f95c20d,
    0x8cc531f9,
    0x7eaeb2fa,
    0x30e349b1,
    0xc288cab2,
    0xd1d83946,
    0x23b3ba45,
    0xf779deae,
    0x05125dad,
    0x1642ae59,
    0xe4292d5a,
    0xba3a117e,
    0x4851927d,
    0x5b016189,
    0xa96ae28a,
    0x7da08661,
    0x8fcb0562,
    0x9c9bf696,
    0x6ef07595,
    0x417b1dbc,
    0xb3109ebf,
    0xa0406d4b,
    0x522bee48,
    0x86e18aa3,
    0x748a09a0,
    0x67dafa54,
    0x95b17957,
    0xcba24573,
    0x39c9c670,
    0x2a993584,
    0xd8f2b687,
    0x0c38d26c,
    0xfe53516f,
    0xed03a29b,
    0x1f682198,
    0x5125dad3,
    0xa34e59d0,
    0xb01eaa24,
    0x42752927,
    0x96bf4dcc,
    0x64d4cecf,
    0x77843d3b,
    0x85efbe38,
    0xdbfc821c,
    0x2997011f,
    0x3ac7f2eb,
    0xc8ac71e8,
    0x1c661503,
    0xee0d9600,
    0xfd5d65f4,
    0x0f36e6f7,
    0x61c69362,
    0x93ad1061,
    0x80fde395,
    0x72966096,
    0xa65c047d,
    0x5437877e,
    0x4767748a,
    0xb50cf789,
    0xeb1fcbad,
    0x197448ae,
    0x0a24bb5a,
    0xf84f3859,
    0x2c855cb2,
    0xdeeedfb1,
    0xcdbe2c45,
    0x3fd5af46,
    0x7198540d,
    0x83f3d70e,
    0x90a324fa,
    0x62c8a7f9,
    0xb602c312,
    0x44694011,
    0x5739b3e5,
    0xa55230e6,
    0xfb410cc2,
    0x092a8fc1,
    0x1a7a7c35,
    0xe811ff36,
    0x3cdb9bdd,
    0xceb018de,
    0xdde0eb2a,
    0x2f8b6829,
    0x82f63b78,
    0x709db87b,
    0x63cd4b8f,
    0x91a6c88c,
    0x456cac67,
    0xb7072f64,
    0xa457dc90,
    0x563c5f93,
    0x082f63b7,
    0xfa44e0b4,
    0xe9141340,
    0x1b7f9043,
    0xcfb5f4a8,
    0x3dde77ab,
    0x2e8e845f,
    0xdce5075c,
    0x92a8fc17,
    0x60c37f14,
    0x73938ce0,
    0x81f80fe3,
    0x55326b08,
    0xa759e80b,
    0xb4091bff,
    0x466298fc,
    0x1871a4d8,
    0xea1a27db,
    0xf94ad42f,
    0x0b21572c,
    0xdfeb33c7,
    0x2d80b0c4,
    0x3ed04330,
    0xccbbc033,
    0xa24bb5a6,
    0x502036a5,
    0x4370c551,
    0xb11b4652,
    0x65d122b9,
    0x97baa1ba,
    0x84ea524e,
    0x7681d14d,
    0x2892ed69,
    0xdaf96e6a,
    0xc9a99d9e,
    0x3bc21e9d,
    0xef087a76,
    0x1d63f975,
    0x0e330a81,
    0xfc588982,
    0xb21572c9,
    0x407ef1ca,
    0x532e023e,
    0xa145813d,
    0x758fe5d6,
    0x87e466d5,
    0x94b49521,
    0x66df1622,
    0x38cc2a06,
    0xcaa7a905,
    0xd9f75af1,
    0x2b9cd9f2,
    0xff56bd19,
    0x0d3d3e1a,
    0x1e6dcdee,
    0xec064eed,
    0xc38d26c4,
    0x31e6a5c7,
    0x22b65633,
    0xd0ddd530,
    0x0417b1db,
    0xf67c32d8,
    0xe52cc12c,
    0x1747422f,
    0x49547e0b,
    0xbb3ffd08,
    0xa86f0efc,
    0x5a048dff,
    0x8ecee914,
    0x7ca56a17,
    0x6ff599e3,
    0x9d9e1ae0,
    0xd3d3e1ab,
    0x21b862a8,
    0x32e8915c,
    0xc083125f,
    0x144976b4,
    0xe622f5b7,
    0xf5720643,
    0x07198540,
    0x590ab964,
    0xab613a67,
    0xb831c993,
    0x4a5a4a90,
    0x9e902e7b,
    0x6cfbad78,
    0x7fab5e8c,
    0x8dc0dd8f,
    0xe330a81a,
    0x115b2b19,
    0x020bd8ed,
    0xf0605bee,
    0x24aa3f05,
    0xd6c1bc06,
    0xc5914ff2,
    0x37faccf1,
    0x69e9f0d5,
    0x9b8273d6,
    0x88d28022,
    0x7ab90321,
    0xae7367ca,
    0x5c18e4c9,
    0x4f48173d,
    0xbd23943e,
    0xf36e6f75,
    0x0105ec76,
    0x12551f82,
    0xe03e9c81,
    0x34f4f86a,
    0xc69f7b69,
    0xd5cf889d,
    0x27a40b9e,
    0x79b737ba,
    0x8bdcb4b9,
    0x988c474d,
    0x6ae7c44e,
    0xbe2da0a5,
    0x4c4623a6,
    0x5f16d052,
    0xad7d5351
]);

});




parcelRegister("gBWOW", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $c17dba9c4fb0579e$require$failure = $iL9Wd.failure;
var $c17dba9c4fb0579e$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * Produce Response (Version: 3) => [responses] throttle_time_ms
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code base_offset log_append_time
 *       partition => INT32
 *       error_code => INT16
 *       base_offset => INT64
 *       log_append_time => INT64
 *   throttle_time_ms => INT32
 */ const $c17dba9c4fb0579e$var$partition = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        baseOffset: decoder.readInt64().toString(),
        logAppendTime: decoder.readInt64().toString()
    });
const $c17dba9c4fb0579e$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const topics = decoder.readArray((decoder)=>({
            topicName: decoder.readString(),
            partitions: decoder.readArray($c17dba9c4fb0579e$var$partition)
        }));
    const throttleTime = decoder.readInt32();
    return {
        topics: topics,
        throttleTime: throttleTime
    };
};
const $c17dba9c4fb0579e$var$parse = async (data)=>{
    const errors = data.topics.flatMap((response)=>{
        return response.partitions.filter((partition)=>$c17dba9c4fb0579e$require$failure(partition.errorCode));
    });
    if (errors.length > 0) {
        const { errorCode: errorCode } = errors[0];
        throw $c17dba9c4fb0579e$require$createErrorFromCode(errorCode);
    }
    return data;
};
module.exports = {
    decode: $c17dba9c4fb0579e$var$decode,
    parse: $c17dba9c4fb0579e$var$parse
};

});

parcelRegister("iGTpA", function(module, exports) {

var $aIzpH = parcelRequire("aIzpH");
/**
 * Produce Request (Version: 4) => transactional_id acks timeout [topic_data]
 *   transactional_id => NULLABLE_STRING
 *   acks => INT16
 *   timeout => INT32
 *   topic_data => topic [data]
 *     topic => STRING
 *     data => partition record_set
 *       partition => INT32
 *       record_set => RECORDS
 */ module.exports = ({ acks: acks, timeout: timeout, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, compression: compression, topicData: topicData })=>Object.assign($aIzpH({
        acks: acks,
        timeout: timeout,
        transactionalId: transactionalId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        compression: compression,
        topicData: topicData
    }), {
        apiVersion: 4
    });

});

parcelRegister("7kvp9", function(module, exports) {

var $gBWOW = parcelRequire("gBWOW");
var $5562c2f4d79616c6$require$decode = $gBWOW.decode;
var $5562c2f4d79616c6$require$parse = $gBWOW.parse;
/**
 * Produce Response (Version: 4) => [responses] throttle_time_ms
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code base_offset log_append_time
 *       partition => INT32
 *       error_code => INT16
 *       base_offset => INT64
 *       log_append_time => INT64
 *   throttle_time_ms => INT32
 */ module.exports = {
    decode: $5562c2f4d79616c6$require$decode,
    parse: $5562c2f4d79616c6$require$parse
};

});

parcelRegister("5kLTx", function(module, exports) {

var $aIzpH = parcelRequire("aIzpH");
/**
 * Produce Request (Version: 5) => transactional_id acks timeout [topic_data]
 *   transactional_id => NULLABLE_STRING
 *   acks => INT16
 *   timeout => INT32
 *   topic_data => topic [data]
 *     topic => STRING
 *     data => partition record_set
 *       partition => INT32
 *       record_set => RECORDS
 */ module.exports = ({ acks: acks, timeout: timeout, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, compression: compression, topicData: topicData })=>Object.assign($aIzpH({
        acks: acks,
        timeout: timeout,
        transactionalId: transactionalId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        compression: compression,
        topicData: topicData
    }), {
        apiVersion: 5
    });

});

parcelRegister("1dTgR", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $gBWOW = parcelRequire("gBWOW");
var $0e41e102c85a0195$require$parseV3 = $gBWOW.parse;
/**
 * Produce Response (Version: 5) => [responses] throttle_time_ms
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code base_offset log_append_time log_start_offset
 *       partition => INT32
 *       error_code => INT16
 *       base_offset => INT64
 *       log_append_time => INT64
 *       log_start_offset => INT64
 *   throttle_time_ms => INT32
 */ const $0e41e102c85a0195$var$partition = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        baseOffset: decoder.readInt64().toString(),
        logAppendTime: decoder.readInt64().toString(),
        logStartOffset: decoder.readInt64().toString()
    });
const $0e41e102c85a0195$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const topics = decoder.readArray((decoder)=>({
            topicName: decoder.readString(),
            partitions: decoder.readArray($0e41e102c85a0195$var$partition)
        }));
    const throttleTime = decoder.readInt32();
    return {
        topics: topics,
        throttleTime: throttleTime
    };
};
module.exports = {
    decode: $0e41e102c85a0195$var$decode,
    parse: $0e41e102c85a0195$require$parseV3
};

});

parcelRegister("eR1kb", function(module, exports) {

var $5kLTx = parcelRequire("5kLTx");
/**
 * The version number is bumped to indicate that on quota violation brokers send out responses before throttling.
 * @see https://github.com/apache/kafka/blob/9c8f75c4b624084c954b4da69f092211a9ac4689/clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java#L113-L117
 *
 * Produce Request (Version: 6) => transactional_id acks timeout [topic_data]
 *   transactional_id => NULLABLE_STRING
 *   acks => INT16
 *   timeout => INT32
 *   topic_data => topic [data]
 *     topic => STRING
 *     data => partition record_set
 *       partition => INT32
 *       record_set => RECORDS
 */ module.exports = ({ acks: acks, timeout: timeout, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, compression: compression, topicData: topicData })=>Object.assign($5kLTx({
        acks: acks,
        timeout: timeout,
        transactionalId: transactionalId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        compression: compression,
        topicData: topicData
    }), {
        apiVersion: 6
    });

});

parcelRegister("6pbGk", function(module, exports) {

var $1dTgR = parcelRequire("1dTgR");
var $4a9e239ffb15fc8f$require$parse = $1dTgR.parse;
var $4a9e239ffb15fc8f$require$decodeV5 = $1dTgR.decode;
/**
 * The version number is bumped to indicate that on quota violation brokers send out responses before throttling.
 * @see https://github.com/apache/kafka/blob/9c8f75c4b624084c954b4da69f092211a9ac4689/clients/src/main/java/org/apache/kafka/common/requests/ProduceResponse.java#L152-L156
 *
 * Produce Response (Version: 6) => [responses] throttle_time_ms
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code base_offset log_append_time log_start_offset
 *       partition => INT32
 *       error_code => INT16
 *       base_offset => INT64
 *       log_append_time => INT64
 *       log_start_offset => INT64
 *   throttle_time_ms => INT32
 */ const $4a9e239ffb15fc8f$var$decode = async (rawData)=>{
    const decoded = await $4a9e239ffb15fc8f$require$decodeV5(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $4a9e239ffb15fc8f$var$decode,
    parse: $4a9e239ffb15fc8f$require$parse
};

});

parcelRegister("3kRix", function(module, exports) {

var $eR1kb = parcelRequire("eR1kb");
/**
 * V7 indicates ZStandard capability (see KIP-110)
 * @see https://github.com/apache/kafka/blob/9c8f75c4b624084c954b4da69f092211a9ac4689/clients/src/main/java/org/apache/kafka/common/requests/ProduceRequest.java#L118-L121
 *
 * Produce Request (Version: 7) => transactional_id acks timeout [topic_data]
 *   transactional_id => NULLABLE_STRING
 *   acks => INT16
 *   timeout => INT32
 *   topic_data => topic [data]
 *     topic => STRING
 *     data => partition record_set
 *       partition => INT32
 *       record_set => RECORDS
 */ module.exports = ({ acks: acks, timeout: timeout, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, compression: compression, topicData: topicData })=>Object.assign($eR1kb({
        acks: acks,
        timeout: timeout,
        transactionalId: transactionalId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        compression: compression,
        topicData: topicData
    }), {
        apiVersion: 7
    });

});

parcelRegister("aW25B", function(module, exports) {

var $6pbGk = parcelRequire("6pbGk");
var $7f60f1152dc826c5$require$decode = $6pbGk.decode;
var $7f60f1152dc826c5$require$parse = $6pbGk.parse;
/**
 * Produce Response (Version: 7) => [responses] throttle_time_ms
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code base_offset log_append_time log_start_offset
 *       partition => INT32
 *       error_code => INT16
 *       base_offset => INT64
 *       log_append_time => INT64
 *       log_start_offset => INT64
 *   throttle_time_ms => INT32
 */ module.exports = {
    decode: $7f60f1152dc826c5$require$decode,
    parse: $7f60f1152dc826c5$require$parse
};

});


parcelRegister("fqZMV", function(module, exports) {

var $hNBWH = parcelRequire("hNBWH");
// For normal consumers, use -1
const $b3c9368f7e7cefc1$var$REPLICA_ID = -1;
const $b3c9368f7e7cefc1$var$NETWORK_DELAY = 100;
/**
 * The FETCH request can block up to maxWaitTime, which can be bigger than the configured
 * request timeout. It's safer to always use the maxWaitTime
 **/ const $b3c9368f7e7cefc1$var$requestTimeout = (timeout)=>Number.isSafeInteger(timeout + $b3c9368f7e7cefc1$var$NETWORK_DELAY) ? timeout + $b3c9368f7e7cefc1$var$NETWORK_DELAY : timeout;
























const $b3c9368f7e7cefc1$var$versions = {
    0: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, maxWaitTime: maxWaitTime, minBytes: minBytes, topics: topics })=>{
        const request = (parcelRequire("kgJGr"));
        const response = (parcelRequire("8IboQ"));
        return {
            request: request({
                replicaId: replicaId,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    1: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, maxWaitTime: maxWaitTime, minBytes: minBytes, topics: topics })=>{
        const request = (parcelRequire("7rP0A"));
        const response = (parcelRequire("g9mOF"));
        return {
            request: request({
                replicaId: replicaId,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    2: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, maxWaitTime: maxWaitTime, minBytes: minBytes, topics: topics })=>{
        const request = (parcelRequire("9Wo2Y"));
        const response = (parcelRequire("bCPTJ"));
        return {
            request: request({
                replicaId: replicaId,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    3: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("j3yzT"));
        const response = (parcelRequire("2LTo5"));
        return {
            request: request({
                replicaId: replicaId,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    4: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("iPqEq"));
        const response = (parcelRequire("c6uwH"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    5: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("kGUcV"));
        const response = (parcelRequire("k4aVp"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    6: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("5I0Lu"));
        const response = (parcelRequire("1iF7H"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    7: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [], maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("iqC0l"));
        const response = (parcelRequire("bvBKX"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                sessionId: sessionId,
                sessionEpoch: sessionEpoch,
                forgottenTopics: forgottenTopics,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    8: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [], maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("7bO61"));
        const response = (parcelRequire("hGrD9"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                sessionId: sessionId,
                sessionEpoch: sessionEpoch,
                forgottenTopics: forgottenTopics,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    9: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [], maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("5HjYP"));
        const response = (parcelRequire("bHTD9"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                sessionId: sessionId,
                sessionEpoch: sessionEpoch,
                forgottenTopics: forgottenTopics,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    10: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [], maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>{
        const request = (parcelRequire("6mhOo"));
        const response = (parcelRequire("3LqLL"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                sessionId: sessionId,
                sessionEpoch: sessionEpoch,
                forgottenTopics: forgottenTopics,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    },
    11: ({ replicaId: replicaId = $b3c9368f7e7cefc1$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [], maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, rackId: rackId })=>{
        const request = (parcelRequire("5iiH9"));
        const response = (parcelRequire("5kNyr"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                sessionId: sessionId,
                sessionEpoch: sessionEpoch,
                forgottenTopics: forgottenTopics,
                maxWaitTime: maxWaitTime,
                minBytes: minBytes,
                maxBytes: maxBytes,
                topics: topics,
                rackId: rackId
            }),
            response: response,
            requestTimeout: $b3c9368f7e7cefc1$var$requestTimeout(maxWaitTime)
        };
    }
};
module.exports = {
    versions: Object.keys($b3c9368f7e7cefc1$var$versions),
    protocol: ({ version: version })=>$b3c9368f7e7cefc1$var$versions[version]
};

});
parcelRegister("hNBWH", function(module, exports) {
/**
 * Enum for isolation levels
 * @readonly
 * @enum {number}
 */ module.exports = {
    // Makes all records visible
    READ_UNCOMMITTED: 0,
    // non-transactional and COMMITTED transactional records are visible. It returns all data
    // from offsets smaller than the current LSO (last stable offset), and enables the inclusion of
    // the list of aborted transactions in the result, which allows consumers to discard ABORTED
    // transactional records
    READ_COMMITTED: 1
};

});

parcelRegister("kgJGr", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $ec18bd12fab7c1bf$require$apiKey = $9kH2s.Fetch;
/**
 * Fetch Request (Version: 0) => replica_id max_wait_time min_bytes [topics]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition fetch_offset max_bytes
 *       partition => INT32
 *       fetch_offset => INT64
 *       max_bytes => INT32
 */ /**
 * @param {number} replicaId Broker id of the follower
 * @param {number} maxWaitTime Maximum time in ms to wait for the response
 * @param {number} minBytes Minimum bytes to accumulate in the response.
 * @param {Array} topics Topics to fetch
 *                        [
 *                          {
 *                            topic: 'topic-name',
 *                            partitions: [
 *                              {
 *                                partition: 0,
 *                                fetchOffset: '4124',
 *                                maxBytes: 2048
 *                              }
 *                            ]
 *                          }
 *                        ]
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, topics: topics })=>({
        apiKey: $ec18bd12fab7c1bf$require$apiKey,
        apiVersion: 0,
        apiName: "Fetch",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeArray(topics.map($ec18bd12fab7c1bf$var$encodeTopic));
        }
    });
const $ec18bd12fab7c1bf$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($ec18bd12fab7c1bf$var$encodePartition));
};
const $ec18bd12fab7c1bf$var$encodePartition = ({ partition: partition, fetchOffset: fetchOffset, maxBytes: maxBytes })=>{
    return new $7jO81().writeInt32(partition).writeInt64(fetchOffset).writeInt32(maxBytes);
};

});

parcelRegister("8IboQ", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $8mQRr = parcelRequire("8mQRr");
var $657b4687add40d8e$require$KafkaJSOffsetOutOfRange = $8mQRr.KafkaJSOffsetOutOfRange;

var $iL9Wd = parcelRequire("iL9Wd");
var $657b4687add40d8e$require$failure = $iL9Wd.failure;
var $657b4687add40d8e$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $657b4687add40d8e$require$errorCodes = $iL9Wd.errorCodes;

var $kt3UB = parcelRequire("kt3UB");
/**
 * Fetch Response (Version: 0) => [responses]
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *       record_set => RECORDS
 */ const $657b4687add40d8e$var$decodePartition = async (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        highWatermark: decoder.readInt64().toString(),
        messages: await $kt3UB(decoder)
    });
const $657b4687add40d8e$var$decodeResponse = async (decoder)=>({
        topicName: decoder.readString(),
        partitions: await decoder.readArrayAsync($657b4687add40d8e$var$decodePartition)
    });
const $657b4687add40d8e$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const responses = await decoder.readArrayAsync($657b4687add40d8e$var$decodeResponse);
    return {
        responses: responses
    };
};
const { code: $657b4687add40d8e$var$OFFSET_OUT_OF_RANGE_ERROR_CODE } = $657b4687add40d8e$require$errorCodes.find((e)=>e.type === "OFFSET_OUT_OF_RANGE");
const $657b4687add40d8e$var$parse = async (data)=>{
    const errors = data.responses.flatMap(({ topicName: topicName, partitions: partitions })=>{
        return partitions.filter((partition)=>$657b4687add40d8e$require$failure(partition.errorCode)).map((partition)=>Object.assign({}, partition, {
                topic: topicName
            }));
    });
    if (errors.length > 0) {
        const { errorCode: errorCode, topic: topic, partition: partition } = errors[0];
        if (errorCode === $657b4687add40d8e$var$OFFSET_OUT_OF_RANGE_ERROR_CODE) throw new $657b4687add40d8e$require$KafkaJSOffsetOutOfRange($657b4687add40d8e$require$createErrorFromCode(errorCode), {
            topic: topic,
            partition: partition
        });
        throw $657b4687add40d8e$require$createErrorFromCode(errorCode);
    }
    return data;
};
module.exports = {
    decode: $657b4687add40d8e$var$decode,
    parse: $657b4687add40d8e$var$parse
};

});
parcelRegister("kt3UB", function(module, exports) {

var $dSqZK = parcelRequire("dSqZK");

var $eMnPM = parcelRequire("eMnPM");

var $6sbbn = parcelRequire("6sbbn");

var $2aK07 = parcelRequire("2aK07");
var $ee698cebc45ce5f0$require$lookupCodecByAttributes = $2aK07.lookupCodecByAttributes;

var $8mQRr = parcelRequire("8mQRr");
var $ee698cebc45ce5f0$require$KafkaJSPartialMessageError = $8mQRr.KafkaJSPartialMessageError;
/**
 * MessageSet => [Offset MessageSize Message]
 *  Offset => int64
 *  MessageSize => int32
 *  Message => Bytes
 */ module.exports = async (primaryDecoder, size = null)=>{
    const messages = [];
    const messageSetSize = size || primaryDecoder.readInt32();
    const messageSetDecoder = primaryDecoder.slice(messageSetSize);
    while(messageSetDecoder.offset < messageSetSize)try {
        const message = $ee698cebc45ce5f0$var$EntryDecoder(messageSetDecoder);
        const codec = $ee698cebc45ce5f0$require$lookupCodecByAttributes(message.attributes);
        if (codec) {
            const buffer = await codec.decompress(message.value);
            messages.push(...$ee698cebc45ce5f0$var$EntriesDecoder(new $eMnPM(buffer), message));
        } else messages.push(message);
    } catch (e) {
        if (e.name === "KafkaJSPartialMessageError") break;
        if (e.name === "KafkaJSUnsupportedMagicByteInMessageSet") break;
        throw e;
    }
    primaryDecoder.forward(messageSetSize);
    return messages;
};
const $ee698cebc45ce5f0$var$EntriesDecoder = (decoder, compressedMessage)=>{
    const messages = [];
    while(decoder.offset < decoder.buffer.length)messages.push($ee698cebc45ce5f0$var$EntryDecoder(decoder));
    if (compressedMessage.magicByte > 0 && compressedMessage.offset >= 0) {
        const compressedOffset = $dSqZK.fromValue(compressedMessage.offset);
        const lastMessageOffset = $dSqZK.fromValue(messages[messages.length - 1].offset);
        const baseOffset = compressedOffset - lastMessageOffset;
        for (const message of messages)message.offset = $dSqZK.fromValue(message.offset).add(baseOffset).toString();
    }
    return messages;
};
const $ee698cebc45ce5f0$var$EntryDecoder = (decoder)=>{
    if (!decoder.canReadInt64()) throw new $ee698cebc45ce5f0$require$KafkaJSPartialMessageError(`Tried to decode a partial message: There isn't enough bytes to read the offset`);
    const offset = decoder.readInt64().toString();
    if (!decoder.canReadInt32()) throw new $ee698cebc45ce5f0$require$KafkaJSPartialMessageError(`Tried to decode a partial message: There isn't enough bytes to read the message size`);
    const size = decoder.readInt32();
    return $6sbbn(offset, size, decoder);
};

});
parcelRegister("6sbbn", function(module, exports) {

var $4b2e0831e13a8ce0$require$Buffer = $4UN2M$buffer.Buffer;

var $8mQRr = parcelRequire("8mQRr");
var $4b2e0831e13a8ce0$require$KafkaJSPartialMessageError = $8mQRr.KafkaJSPartialMessageError;
var $4b2e0831e13a8ce0$require$KafkaJSUnsupportedMagicByteInMessageSet = $8mQRr.KafkaJSUnsupportedMagicByteInMessageSet;

var $jQT9v = parcelRequire("jQT9v");

var $afFRp = parcelRequire("afFRp");
const $4b2e0831e13a8ce0$var$decodeMessage = (decoder, magicByte)=>{
    switch(magicByte){
        case 0:
            return $jQT9v(decoder);
        case 1:
            return $afFRp(decoder);
        default:
            throw new $4b2e0831e13a8ce0$require$KafkaJSUnsupportedMagicByteInMessageSet(`Unsupported MessageSet message version, magic byte: ${magicByte}`);
    }
};
module.exports = (offset, size, decoder)=>{
    // Don't decrement decoder.offset because slice is already considering the current
    // offset of the decoder
    const remainingBytes = $4b2e0831e13a8ce0$require$Buffer.byteLength(decoder.slice(size).buffer);
    if (remainingBytes < size) throw new $4b2e0831e13a8ce0$require$KafkaJSPartialMessageError(`Tried to decode a partial message: remainingBytes(${remainingBytes}) < messageSize(${size})`);
    const crc = decoder.readInt32();
    const magicByte = decoder.readInt8();
    const message = $4b2e0831e13a8ce0$var$decodeMessage(decoder, magicByte);
    return Object.assign({
        offset: offset,
        size: size,
        crc: crc,
        magicByte: magicByte
    }, message);
};

});
parcelRegister("jQT9v", function(module, exports) {
module.exports = (decoder)=>({
        attributes: decoder.readInt8(),
        key: decoder.readBytes(),
        value: decoder.readBytes()
    });

});

parcelRegister("afFRp", function(module, exports) {
module.exports = (decoder)=>({
        attributes: decoder.readInt8(),
        timestamp: decoder.readInt64().toString(),
        key: decoder.readBytes(),
        value: decoder.readBytes()
    });

});




parcelRegister("7rP0A", function(module, exports) {

var $kgJGr = parcelRequire("kgJGr");
module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, topics: topics })=>{
    return Object.assign($kgJGr({
        replicaId: replicaId,
        maxWaitTime: maxWaitTime,
        minBytes: minBytes,
        topics: topics
    }), {
        apiVersion: 1
    });
};

});

parcelRegister("g9mOF", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $8IboQ = parcelRequire("8IboQ");
var $bc1f2f6b3ced1ded$require$parseV0 = $8IboQ.parse;

var $kt3UB = parcelRequire("kt3UB");
/**
 * Fetch Response (Version: 1) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *       record_set => RECORDS
 */ const $bc1f2f6b3ced1ded$var$decodePartition = async (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        highWatermark: decoder.readInt64().toString(),
        messages: await $kt3UB(decoder)
    });
const $bc1f2f6b3ced1ded$var$decodeResponse = async (decoder)=>({
        topicName: decoder.readString(),
        partitions: await decoder.readArrayAsync($bc1f2f6b3ced1ded$var$decodePartition)
    });
const $bc1f2f6b3ced1ded$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const responses = await decoder.readArrayAsync($bc1f2f6b3ced1ded$var$decodeResponse);
    return {
        throttleTime: throttleTime,
        responses: responses
    };
};
module.exports = {
    decode: $bc1f2f6b3ced1ded$var$decode,
    parse: $bc1f2f6b3ced1ded$require$parseV0
};

});

parcelRegister("9Wo2Y", function(module, exports) {

var $kgJGr = parcelRequire("kgJGr");
module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, topics: topics })=>{
    return Object.assign($kgJGr({
        replicaId: replicaId,
        maxWaitTime: maxWaitTime,
        minBytes: minBytes,
        topics: topics
    }), {
        apiVersion: 2
    });
};

});

parcelRegister("bCPTJ", function(module, exports) {

var $g9mOF = parcelRequire("g9mOF");
var $876b80294ab28606$require$decode = $g9mOF.decode;
var $876b80294ab28606$require$parse = $g9mOF.parse;
/**
 * Fetch Response (Version: 2) => throttle_time_ms [responses]
 *  throttle_time_ms => INT32
 *  responses => topic [partition_responses]
 *    topic => STRING
 *    partition_responses => partition_header record_set
 *      partition_header => partition error_code high_watermark
 *        partition => INT32
 *        error_code => INT16
 *        high_watermark => INT64
 *      record_set => RECORDS
 */ module.exports = {
    decode: $876b80294ab28606$require$decode,
    parse: $876b80294ab28606$require$parse
};

});

parcelRegister("j3yzT", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $ddf91e98f623d324$require$apiKey = $9kH2s.Fetch;
/**
 * Fetch Request (Version: 3) => replica_id max_wait_time min_bytes max_bytes [topics]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition fetch_offset max_bytes
 *       partition => INT32
 *       fetch_offset => INT64
 *       max_bytes => INT32
 */ /**
 * @param {number} replicaId Broker id of the follower
 * @param {number} maxWaitTime Maximum time in ms to wait for the response
 * @param {number} minBytes Minimum bytes to accumulate in the response.
 * @param {number} maxBytes Maximum bytes to accumulate in the response. Note that this is not an absolute maximum,
 *                          if the first message in the first non-empty partition of the fetch is larger than this value,
 *                          the message will still be returned to ensure that progress can be made.
 * @param {Array} topics Topics to fetch
 *                        [
 *                          {
 *                            topic: 'topic-name',
 *                            partitions: [
 *                              {
 *                                partition: 0,
 *                                fetchOffset: '4124',
 *                                maxBytes: 2048
 *                              }
 *                            ]
 *                          }
 *                        ]
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics })=>({
        apiKey: $ddf91e98f623d324$require$apiKey,
        apiVersion: 3,
        apiName: "Fetch",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeArray(topics.map($ddf91e98f623d324$var$encodeTopic));
        }
    });
const $ddf91e98f623d324$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($ddf91e98f623d324$var$encodePartition));
};
const $ddf91e98f623d324$var$encodePartition = ({ partition: partition, fetchOffset: fetchOffset, maxBytes: maxBytes })=>{
    return new $7jO81().writeInt32(partition).writeInt64(fetchOffset).writeInt32(maxBytes);
};

});

parcelRegister("2LTo5", function(module, exports) {

var $g9mOF = parcelRequire("g9mOF");
var $204aef567d3ca4c9$require$decode = $g9mOF.decode;
var $204aef567d3ca4c9$require$parse = $g9mOF.parse;
/**
 * Fetch Response (Version: 3) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *       record_set => RECORDS
 */ module.exports = {
    decode: $204aef567d3ca4c9$require$decode,
    parse: $204aef567d3ca4c9$require$parse
};

});

parcelRegister("iPqEq", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $db51a9c351bad3e8$require$apiKey = $9kH2s.Fetch;

var $hNBWH = parcelRequire("hNBWH");
/**
 * Fetch Request (Version: 4) => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition fetch_offset max_bytes
 *       partition => INT32
 *       fetch_offset => INT64
 *       max_bytes => INT32
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED })=>({
        apiKey: $db51a9c351bad3e8$require$apiKey,
        apiVersion: 4,
        apiName: "Fetch",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeArray(topics.map($db51a9c351bad3e8$var$encodeTopic));
        }
    });
const $db51a9c351bad3e8$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($db51a9c351bad3e8$var$encodePartition));
};
const $db51a9c351bad3e8$var$encodePartition = ({ partition: partition, fetchOffset: fetchOffset, maxBytes: maxBytes })=>{
    return new $7jO81().writeInt32(partition).writeInt64(fetchOffset).writeInt32(maxBytes);
};

});

parcelRegister("c6uwH", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $g9mOF = parcelRequire("g9mOF");
var $8cfdb978e5f695c5$require$parseV1 = $g9mOF.parse;

var $bjeeU = parcelRequire("bjeeU");
/**
 * Fetch Response (Version: 4) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark last_stable_offset [aborted_transactions]
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *         last_stable_offset => INT64
 *         aborted_transactions => producer_id first_offset
 *           producer_id => INT64
 *           first_offset => INT64
 *       record_set => RECORDS
 */ const $8cfdb978e5f695c5$var$decodeAbortedTransactions = (decoder)=>({
        producerId: decoder.readInt64().toString(),
        firstOffset: decoder.readInt64().toString()
    });
const $8cfdb978e5f695c5$var$decodePartition = async (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        highWatermark: decoder.readInt64().toString(),
        lastStableOffset: decoder.readInt64().toString(),
        abortedTransactions: decoder.readArray($8cfdb978e5f695c5$var$decodeAbortedTransactions),
        messages: await $bjeeU(decoder)
    });
const $8cfdb978e5f695c5$var$decodeResponse = async (decoder)=>({
        topicName: decoder.readString(),
        partitions: await decoder.readArrayAsync($8cfdb978e5f695c5$var$decodePartition)
    });
const $8cfdb978e5f695c5$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const responses = await decoder.readArrayAsync($8cfdb978e5f695c5$var$decodeResponse);
    return {
        throttleTime: throttleTime,
        responses: responses
    };
};
module.exports = {
    decode: $8cfdb978e5f695c5$var$decode,
    parse: $8cfdb978e5f695c5$require$parseV1
};

});
parcelRegister("bjeeU", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $kt3UB = parcelRequire("kt3UB");

var $03C3m = parcelRequire("03C3m");

var $8Nq5m = parcelRequire("8Nq5m");
var $83bc83b6148fb69f$require$MAGIC_BYTE = $8Nq5m.MAGIC_BYTE;
// the magic offset is at the same offset for all current message formats, but the 4 bytes
// between the size and the magic is dependent on the version.
const $83bc83b6148fb69f$var$MAGIC_OFFSET = 16;
const $83bc83b6148fb69f$var$RECORD_BATCH_OVERHEAD = 49;
const $83bc83b6148fb69f$var$decodeMessages = async (decoder)=>{
    const messagesSize = decoder.readInt32();
    if (messagesSize <= 0 || !decoder.canReadBytes(messagesSize)) return [];
    const messagesBuffer = decoder.readBytes(messagesSize);
    const messagesDecoder = new $eMnPM(messagesBuffer);
    const magicByte = messagesBuffer.slice($83bc83b6148fb69f$var$MAGIC_OFFSET).readInt8(0);
    if (magicByte === $83bc83b6148fb69f$require$MAGIC_BYTE) {
        const records = [];
        while(messagesDecoder.canReadBytes($83bc83b6148fb69f$var$RECORD_BATCH_OVERHEAD))try {
            const recordBatch = await $03C3m(messagesDecoder);
            records.push(...recordBatch.records);
        } catch (e) {
            // The tail of the record batches can have incomplete records
            // due to how maxBytes works. See https://cwiki.apache.org/confluence/display/KAFKA/A+Guide+To+The+Kafka+Protocol#AGuideToTheKafkaProtocol-FetchAPI
            if (e.name === "KafkaJSPartialMessageError") break;
            throw e;
        }
        return records;
    }
    return $kt3UB(messagesDecoder, messagesSize);
};
module.exports = $83bc83b6148fb69f$var$decodeMessages;

});
parcelRegister("03C3m", function(module, exports) {

var $00adcc86e65ae2f3$require$Buffer = $4UN2M$buffer.Buffer;

var $eMnPM = parcelRequire("eMnPM");

var $8mQRr = parcelRequire("8mQRr");
var $00adcc86e65ae2f3$require$KafkaJSPartialMessageError = $8mQRr.KafkaJSPartialMessageError;

var $2aK07 = parcelRequire("2aK07");
var $00adcc86e65ae2f3$require$lookupCodecByAttributes = $2aK07.lookupCodecByAttributes;

var $3B9cH = parcelRequire("3B9cH");

var $2N0t9 = parcelRequire("2N0t9");
const $00adcc86e65ae2f3$var$TIMESTAMP_TYPE_FLAG_MASK = 0x8;
const $00adcc86e65ae2f3$var$TRANSACTIONAL_FLAG_MASK = 0x10;
const $00adcc86e65ae2f3$var$CONTROL_FLAG_MASK = 0x20;
/**
 * v0
 * RecordBatch =>
 *  FirstOffset => int64
 *  Length => int32
 *  PartitionLeaderEpoch => int32
 *  Magic => int8
 *  CRC => int32
 *  Attributes => int16
 *  LastOffsetDelta => int32
 *  FirstTimestamp => int64
 *  MaxTimestamp => int64
 *  ProducerId => int64
 *  ProducerEpoch => int16
 *  FirstSequence => int32
 *  Records => [Record]
 */ module.exports = async (fetchDecoder)=>{
    const firstOffset = fetchDecoder.readInt64().toString();
    const length = fetchDecoder.readInt32();
    const decoder = fetchDecoder.slice(length);
    fetchDecoder.forward(length);
    const remainingBytes = $00adcc86e65ae2f3$require$Buffer.byteLength(decoder.buffer);
    if (remainingBytes < length) throw new $00adcc86e65ae2f3$require$KafkaJSPartialMessageError(`Tried to decode a partial record batch: remainingBytes(${remainingBytes}) < recordBatchLength(${length})`);
    const partitionLeaderEpoch = decoder.readInt32();
    // The magic byte was read by the Fetch protocol to distinguish between
    // the record batch and the legacy message set. It's not used here but
    // it has to be read.
    const magicByte = decoder.readInt8() // eslint-disable-line no-unused-vars
    ;
    // The library is currently not performing CRC validations
    const crc = decoder.readInt32() // eslint-disable-line no-unused-vars
    ;
    const attributes = decoder.readInt16();
    const lastOffsetDelta = decoder.readInt32();
    const firstTimestamp = decoder.readInt64().toString();
    const maxTimestamp = decoder.readInt64().toString();
    const producerId = decoder.readInt64().toString();
    const producerEpoch = decoder.readInt16();
    const firstSequence = decoder.readInt32();
    const inTransaction = (attributes & $00adcc86e65ae2f3$var$TRANSACTIONAL_FLAG_MASK) > 0;
    const isControlBatch = (attributes & $00adcc86e65ae2f3$var$CONTROL_FLAG_MASK) > 0;
    const timestampType = (attributes & $00adcc86e65ae2f3$var$TIMESTAMP_TYPE_FLAG_MASK) > 0 ? $2N0t9.LOG_APPEND_TIME : $2N0t9.CREATE_TIME;
    const codec = $00adcc86e65ae2f3$require$lookupCodecByAttributes(attributes);
    const recordContext = {
        firstOffset: firstOffset,
        firstTimestamp: firstTimestamp,
        partitionLeaderEpoch: partitionLeaderEpoch,
        inTransaction: inTransaction,
        isControlBatch: isControlBatch,
        lastOffsetDelta: lastOffsetDelta,
        producerId: producerId,
        producerEpoch: producerEpoch,
        firstSequence: firstSequence,
        maxTimestamp: maxTimestamp,
        timestampType: timestampType
    };
    const records = await $00adcc86e65ae2f3$var$decodeRecords(codec, decoder, {
        ...recordContext,
        magicByte: magicByte
    });
    return {
        ...recordContext,
        records: records
    };
};
const $00adcc86e65ae2f3$var$decodeRecords = async (codec, recordsDecoder, recordContext)=>{
    if (!codec) return recordsDecoder.readArray((decoder)=>$00adcc86e65ae2f3$var$decodeRecord(decoder, recordContext));
    const length = recordsDecoder.readInt32();
    if (length <= 0) return [];
    const compressedRecordsBuffer = recordsDecoder.readAll();
    const decompressedRecordBuffer = await codec.decompress(compressedRecordsBuffer);
    const decompressedRecordDecoder = new $eMnPM(decompressedRecordBuffer);
    const records = new Array(length);
    for(let i = 0; i < length; i++)records[i] = $00adcc86e65ae2f3$var$decodeRecord(decompressedRecordDecoder, recordContext);
    return records;
};
const $00adcc86e65ae2f3$var$decodeRecord = (decoder, recordContext)=>{
    const recordBuffer = decoder.readVarIntBytes();
    return $3B9cH(new $eMnPM(recordBuffer), recordContext);
};

});
parcelRegister("3B9cH", function(module, exports) {

var $dSqZK = parcelRequire("dSqZK");

var $5jv8n = parcelRequire("5jv8n");

var $2N0t9 = parcelRequire("2N0t9");
/**
 * v0
 * Record =>
 *   Length => Varint
 *   Attributes => Int8
 *   TimestampDelta => Varlong
 *   OffsetDelta => Varint
 *   Key => varInt|Bytes
 *   Value => varInt|Bytes
 *   Headers => [HeaderKey HeaderValue]
 *     HeaderKey => VarInt|String
 *     HeaderValue => VarInt|Bytes
 */ module.exports = (decoder, batchContext = {})=>{
    const { firstOffset: firstOffset, firstTimestamp: firstTimestamp, magicByte: magicByte, isControlBatch: isControlBatch = false, timestampType: timestampType, maxTimestamp: maxTimestamp } = batchContext;
    const attributes = decoder.readInt8();
    const timestampDelta = decoder.readVarLong();
    const timestamp = timestampType === $2N0t9.LOG_APPEND_TIME && maxTimestamp ? maxTimestamp : $dSqZK.fromValue(firstTimestamp).add(timestampDelta).toString();
    const offsetDelta = decoder.readVarInt();
    const offset = $dSqZK.fromValue(firstOffset).add(offsetDelta).toString();
    const key = decoder.readVarIntBytes();
    const value = decoder.readVarIntBytes();
    const headers = decoder.readVarIntArray($5jv8n).reduce((obj, { key: key, value: value })=>({
            ...obj,
            [key]: obj[key] === undefined ? value : Array.isArray(obj[key]) ? obj[key].concat([
                value
            ]) : [
                obj[key],
                value
            ]
        }), {});
    return {
        magicByte: magicByte,
        attributes: attributes,
        timestamp: timestamp,
        offset: offset,
        key: key,
        value: value,
        headers: headers,
        isControlRecord: isControlBatch,
        batchContext: batchContext
    };
};

});
parcelRegister("5jv8n", function(module, exports) {
module.exports = (decoder)=>({
        key: decoder.readVarIntString(),
        value: decoder.readVarIntBytes()
    });

});

parcelRegister("2N0t9", function(module, exports) {
/**
 * Enum for timestamp types
 * @readonly
 * @enum {TimestampType}
 */ module.exports = {
    // Timestamp type is unknown
    NO_TIMESTAMP: -1,
    // Timestamp relates to message creation time as set by a Kafka client
    CREATE_TIME: 0,
    // Timestamp relates to the time a message was appended to a Kafka log
    LOG_APPEND_TIME: 1
};

});





parcelRegister("kGUcV", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $f1035487e278ab5e$require$apiKey = $9kH2s.Fetch;

var $hNBWH = parcelRequire("hNBWH");
/**
 * Fetch Request (Version: 5) => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition fetch_offset log_start_offset partition_max_bytes
 *       partition => INT32
 *       fetch_offset => INT64
 *       log_start_offset => INT64
 *       partition_max_bytes => INT32
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED })=>({
        apiKey: $f1035487e278ab5e$require$apiKey,
        apiVersion: 5,
        apiName: "Fetch",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeArray(topics.map($f1035487e278ab5e$var$encodeTopic));
        }
    });
const $f1035487e278ab5e$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($f1035487e278ab5e$var$encodePartition));
};
const $f1035487e278ab5e$var$encodePartition = ({ partition: partition, fetchOffset: fetchOffset, logStartOffset: logStartOffset = -1, maxBytes: maxBytes })=>{
    return new $7jO81().writeInt32(partition).writeInt64(fetchOffset).writeInt64(logStartOffset).writeInt32(maxBytes);
};

});

parcelRegister("k4aVp", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $g9mOF = parcelRequire("g9mOF");
var $e9bca7d4fc72e84d$require$parseV1 = $g9mOF.parse;

var $bjeeU = parcelRequire("bjeeU");
/**
 * Fetch Response (Version: 5) => throttle_time_ms [responses]
 *  throttle_time_ms => INT32
 *  responses => topic [partition_responses]
 *    topic => STRING
 *    partition_responses => partition_header record_set
 *      partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
 *        partition => INT32
 *        error_code => INT16
 *        high_watermark => INT64
 *        last_stable_offset => INT64
 *        log_start_offset => INT64
 *        aborted_transactions => producer_id first_offset
 *          producer_id => INT64
 *          first_offset => INT64
 *      record_set => RECORDS
 */ const $e9bca7d4fc72e84d$var$decodeAbortedTransactions = (decoder)=>({
        producerId: decoder.readInt64().toString(),
        firstOffset: decoder.readInt64().toString()
    });
const $e9bca7d4fc72e84d$var$decodePartition = async (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        highWatermark: decoder.readInt64().toString(),
        lastStableOffset: decoder.readInt64().toString(),
        lastStartOffset: decoder.readInt64().toString(),
        abortedTransactions: decoder.readArray($e9bca7d4fc72e84d$var$decodeAbortedTransactions),
        messages: await $bjeeU(decoder)
    });
const $e9bca7d4fc72e84d$var$decodeResponse = async (decoder)=>({
        topicName: decoder.readString(),
        partitions: await decoder.readArrayAsync($e9bca7d4fc72e84d$var$decodePartition)
    });
const $e9bca7d4fc72e84d$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const responses = await decoder.readArrayAsync($e9bca7d4fc72e84d$var$decodeResponse);
    return {
        throttleTime: throttleTime,
        responses: responses
    };
};
module.exports = {
    decode: $e9bca7d4fc72e84d$var$decode,
    parse: $e9bca7d4fc72e84d$require$parseV1
};

});

parcelRegister("5I0Lu", function(module, exports) {

var $hNBWH = parcelRequire("hNBWH");

var $kGUcV = parcelRequire("kGUcV");
/**
 * Fetch Request (Version: 6) => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition fetch_offset log_start_offset partition_max_bytes
 *       partition => INT32
 *       fetch_offset => INT64
 *       log_start_offset => INT64
 *       partition_max_bytes => INT32
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED })=>Object.assign($kGUcV({
        replicaId: replicaId,
        maxWaitTime: maxWaitTime,
        minBytes: minBytes,
        maxBytes: maxBytes,
        topics: topics,
        isolationLevel: isolationLevel
    }), {
        apiVersion: 6
    });

});

parcelRegister("1iF7H", function(module, exports) {

var $k4aVp = parcelRequire("k4aVp");
var $0f275f121d65b83a$require$decode = $k4aVp.decode;
var $0f275f121d65b83a$require$parse = $k4aVp.parse;
/**
 * Fetch Response (Version: 6) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *         last_stable_offset => INT64
 *         log_start_offset => INT64
 *         aborted_transactions => producer_id first_offset
 *           producer_id => INT64
 *           first_offset => INT64
 *       record_set => RECORDS
 */ module.exports = {
    decode: $0f275f121d65b83a$require$decode,
    parse: $0f275f121d65b83a$require$parse
};

});

parcelRegister("iqC0l", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $d6a822978c3cd07f$require$apiKey = $9kH2s.Fetch;

var $hNBWH = parcelRequire("hNBWH");
/**
 * Sessions are only used by followers
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-227%3A+Introduce+Incremental+FetchRequests+to+Increase+Partition+Scalability
 */ /**
 * Fetch Request (Version: 7) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   session_id => INT32
 *   session_epoch => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition fetch_offset log_start_offset partition_max_bytes
 *       partition => INT32
 *       fetch_offset => INT64
 *       log_start_offset => INT64
 *       partition_max_bytes => INT32
 *   forgotten_topics_data => topic [partitions]
 *     topic => STRING
 *     partitions => INT32
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [] })=>({
        apiKey: $d6a822978c3cd07f$require$apiKey,
        apiVersion: 7,
        apiName: "Fetch",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeInt32(sessionId).writeInt32(sessionEpoch).writeArray(topics.map($d6a822978c3cd07f$var$encodeTopic)).writeArray(forgottenTopics.map($d6a822978c3cd07f$var$encodeForgottenTopics));
        }
    });
const $d6a822978c3cd07f$var$encodeForgottenTopics = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions);
};
const $d6a822978c3cd07f$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($d6a822978c3cd07f$var$encodePartition));
};
const $d6a822978c3cd07f$var$encodePartition = ({ partition: partition, fetchOffset: fetchOffset, logStartOffset: logStartOffset = -1, maxBytes: maxBytes })=>{
    return new $7jO81().writeInt32(partition).writeInt64(fetchOffset).writeInt64(logStartOffset).writeInt32(maxBytes);
};

});

parcelRegister("bvBKX", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $g9mOF = parcelRequire("g9mOF");
var $860fe09bd2d740d0$require$parseV1 = $g9mOF.parse;

var $bjeeU = parcelRequire("bjeeU");
/**
 * Fetch Response (Version: 7) => throttle_time_ms error_code session_id [responses]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   session_id => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *         last_stable_offset => INT64
 *         log_start_offset => INT64
 *         aborted_transactions => producer_id first_offset
 *           producer_id => INT64
 *           first_offset => INT64
 *       record_set => RECORDS
 */ const $860fe09bd2d740d0$var$decodeAbortedTransactions = (decoder)=>({
        producerId: decoder.readInt64().toString(),
        firstOffset: decoder.readInt64().toString()
    });
const $860fe09bd2d740d0$var$decodePartition = async (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        highWatermark: decoder.readInt64().toString(),
        lastStableOffset: decoder.readInt64().toString(),
        lastStartOffset: decoder.readInt64().toString(),
        abortedTransactions: decoder.readArray($860fe09bd2d740d0$var$decodeAbortedTransactions),
        messages: await $bjeeU(decoder)
    });
const $860fe09bd2d740d0$var$decodeResponse = async (decoder)=>({
        topicName: decoder.readString(),
        partitions: await decoder.readArrayAsync($860fe09bd2d740d0$var$decodePartition)
    });
const $860fe09bd2d740d0$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    const sessionId = decoder.readInt32();
    const responses = await decoder.readArrayAsync($860fe09bd2d740d0$var$decodeResponse);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        sessionId: sessionId,
        responses: responses
    };
};
module.exports = {
    decode: $860fe09bd2d740d0$var$decode,
    parse: $860fe09bd2d740d0$require$parseV1
};

});

parcelRegister("7bO61", function(module, exports) {

var $hNBWH = parcelRequire("hNBWH");

var $iqC0l = parcelRequire("iqC0l");
/**
 * Quota violation brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 */ /**
 * Fetch Request (Version: 8) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   session_id => INT32
 *   session_epoch => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition fetch_offset log_start_offset partition_max_bytes
 *       partition => INT32
 *       fetch_offset => INT64
 *       log_start_offset => INT64
 *       partition_max_bytes => INT32
 *   forgotten_topics_data => topic [partitions]
 *     topic => STRING
 *     partitions => INT32
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [] })=>Object.assign($iqC0l({
        replicaId: replicaId,
        maxWaitTime: maxWaitTime,
        minBytes: minBytes,
        maxBytes: maxBytes,
        topics: topics,
        isolationLevel: isolationLevel,
        sessionId: sessionId,
        sessionEpoch: sessionEpoch,
        forgottenTopics: forgottenTopics
    }), {
        apiVersion: 8
    });

});

parcelRegister("hGrD9", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $g9mOF = parcelRequire("g9mOF");
var $cdfbcab9fc4f3c2f$require$parseV1 = $g9mOF.parse;

var $bjeeU = parcelRequire("bjeeU");
/**
 * Fetch Response (Version: 8) => throttle_time_ms error_code session_id [responses]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   session_id => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *         last_stable_offset => INT64
 *         log_start_offset => INT64
 *         aborted_transactions => producer_id first_offset
 *           producer_id => INT64
 *           first_offset => INT64
 *       record_set => RECORDS
 */ const $cdfbcab9fc4f3c2f$var$decodeAbortedTransactions = (decoder)=>({
        producerId: decoder.readInt64().toString(),
        firstOffset: decoder.readInt64().toString()
    });
const $cdfbcab9fc4f3c2f$var$decodePartition = async (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        highWatermark: decoder.readInt64().toString(),
        lastStableOffset: decoder.readInt64().toString(),
        lastStartOffset: decoder.readInt64().toString(),
        abortedTransactions: decoder.readArray($cdfbcab9fc4f3c2f$var$decodeAbortedTransactions),
        messages: await $bjeeU(decoder)
    });
const $cdfbcab9fc4f3c2f$var$decodeResponse = async (decoder)=>({
        topicName: decoder.readString(),
        partitions: await decoder.readArrayAsync($cdfbcab9fc4f3c2f$var$decodePartition)
    });
const $cdfbcab9fc4f3c2f$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const clientSideThrottleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    const sessionId = decoder.readInt32();
    const responses = await decoder.readArrayAsync($cdfbcab9fc4f3c2f$var$decodeResponse);
    // Report a `throttleTime` of 0: The broker will not have throttled
    // this request, but if the `clientSideThrottleTime` is >0 then it
    // expects us to do that -- and it will ignore requests.
    return {
        throttleTime: 0,
        clientSideThrottleTime: clientSideThrottleTime,
        errorCode: errorCode,
        sessionId: sessionId,
        responses: responses
    };
};
module.exports = {
    decode: $cdfbcab9fc4f3c2f$var$decode,
    parse: $cdfbcab9fc4f3c2f$require$parseV1
};

});

parcelRegister("5HjYP", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $4260778ea30ed3bc$require$apiKey = $9kH2s.Fetch;

var $hNBWH = parcelRequire("hNBWH");
/**
 * Allow fetchers to detect and handle log truncation
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-320%3A+Allow+fetchers+to+detect+and+handle+log+truncation
 */ /**
 * Fetch Request (Version: 9) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   session_id => INT32
 *   session_epoch => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
 *       partition => INT32
 *       current_leader_epoch => INT32
 *       fetch_offset => INT64
 *       log_start_offset => INT64
 *       partition_max_bytes => INT32
 *   forgotten_topics_data => topic [partitions]
 *     topic => STRING
 *     partitions => INT32
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [] })=>({
        apiKey: $4260778ea30ed3bc$require$apiKey,
        apiVersion: 9,
        apiName: "Fetch",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeInt32(sessionId).writeInt32(sessionEpoch).writeArray(topics.map($4260778ea30ed3bc$var$encodeTopic)).writeArray(forgottenTopics.map($4260778ea30ed3bc$var$encodeForgottenTopics));
        }
    });
const $4260778ea30ed3bc$var$encodeForgottenTopics = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions);
};
const $4260778ea30ed3bc$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($4260778ea30ed3bc$var$encodePartition));
};
const $4260778ea30ed3bc$var$encodePartition = ({ partition: partition, currentLeaderEpoch: currentLeaderEpoch = -1, fetchOffset: fetchOffset, logStartOffset: logStartOffset = -1, maxBytes: maxBytes })=>{
    return new $7jO81().writeInt32(partition).writeInt32(currentLeaderEpoch).writeInt64(fetchOffset).writeInt64(logStartOffset).writeInt32(maxBytes);
};

});

parcelRegister("bHTD9", function(module, exports) {

var $hGrD9 = parcelRequire("hGrD9");
var $885edcf0847a0fb8$require$decode = $hGrD9.decode;
var $885edcf0847a0fb8$require$parse = $hGrD9.parse;
/**
 * Fetch Response (Version: 9) => throttle_time_ms error_code session_id [responses]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   session_id => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *         last_stable_offset => INT64
 *         log_start_offset => INT64
 *         aborted_transactions => producer_id first_offset
 *           producer_id => INT64
 *           first_offset => INT64
 *       record_set => RECORDS
 */ module.exports = {
    decode: $885edcf0847a0fb8$require$decode,
    parse: $885edcf0847a0fb8$require$parse
};

});

parcelRegister("6mhOo", function(module, exports) {

var $hNBWH = parcelRequire("hNBWH");

var $5HjYP = parcelRequire("5HjYP");
/**
 * ZStd Compression
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-110%3A+Add+Codec+for+ZStandard+Compression
 */ /**
 * Fetch Request (Version: 10) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   session_id => INT32
 *   session_epoch => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
 *       partition => INT32
 *       current_leader_epoch => INT32
 *       fetch_offset => INT64
 *       log_start_offset => INT64
 *       partition_max_bytes => INT32
 *   forgotten_topics_data => topic [partitions]
 *     topic => STRING
 *     partitions => INT32
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [] })=>Object.assign($5HjYP({
        replicaId: replicaId,
        maxWaitTime: maxWaitTime,
        minBytes: minBytes,
        maxBytes: maxBytes,
        topics: topics,
        isolationLevel: isolationLevel,
        sessionId: sessionId,
        sessionEpoch: sessionEpoch,
        forgottenTopics: forgottenTopics
    }), {
        apiVersion: 10
    });

});

parcelRegister("3LqLL", function(module, exports) {

var $bHTD9 = parcelRequire("bHTD9");
var $2bda86b6f7cababb$require$decode = $bHTD9.decode;
var $2bda86b6f7cababb$require$parse = $bHTD9.parse;
/**
 * Fetch Response (Version: 10) => throttle_time_ms error_code session_id [responses]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   session_id => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *         last_stable_offset => INT64
 *         log_start_offset => INT64
 *         aborted_transactions => producer_id first_offset
 *           producer_id => INT64
 *           first_offset => INT64
 *       record_set => RECORDS
 */ module.exports = {
    decode: $2bda86b6f7cababb$require$decode,
    parse: $2bda86b6f7cababb$require$parse
};

});

parcelRegister("5iiH9", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $3dad229c0b5e5d8c$require$apiKey = $9kH2s.Fetch;

var $hNBWH = parcelRequire("hNBWH");
/**
 * Allow consumers to fetch from closest replica
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica
 */ /**
 * Fetch Request (Version: 11) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
 *   replica_id => INT32
 *   max_wait_time => INT32
 *   min_bytes => INT32
 *   max_bytes => INT32
 *   isolation_level => INT8
 *   session_id => INT32
 *   session_epoch => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
 *       partition => INT32
 *       current_leader_epoch => INT32
 *       fetch_offset => INT64
 *       log_start_offset => INT64
 *       partition_max_bytes => INT32
 *   forgotten_topics_data => topic [partitions]
 *     topic => STRING
 *     partitions => INT32
 *   rack_id => STRING
 */ module.exports = ({ replicaId: replicaId, maxWaitTime: maxWaitTime, minBytes: minBytes, maxBytes: maxBytes, topics: topics, rackId: rackId = "", isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, sessionId: sessionId = 0, sessionEpoch: sessionEpoch = -1, forgottenTopics: forgottenTopics = [] })=>({
        apiKey: $3dad229c0b5e5d8c$require$apiKey,
        apiVersion: 11,
        apiName: "Fetch",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeInt32(sessionId).writeInt32(sessionEpoch).writeArray(topics.map($3dad229c0b5e5d8c$var$encodeTopic)).writeArray(forgottenTopics.map($3dad229c0b5e5d8c$var$encodeForgottenTopics)).writeString(rackId);
        }
    });
const $3dad229c0b5e5d8c$var$encodeForgottenTopics = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions);
};
const $3dad229c0b5e5d8c$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($3dad229c0b5e5d8c$var$encodePartition));
};
const $3dad229c0b5e5d8c$var$encodePartition = ({ partition: partition, currentLeaderEpoch: currentLeaderEpoch = -1, fetchOffset: fetchOffset, logStartOffset: logStartOffset = -1, maxBytes: maxBytes })=>{
    return new $7jO81().writeInt32(partition).writeInt32(currentLeaderEpoch).writeInt64(fetchOffset).writeInt64(logStartOffset).writeInt32(maxBytes);
};

});

parcelRegister("5kNyr", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $g9mOF = parcelRequire("g9mOF");
var $3e25428065b21810$require$parseV1 = $g9mOF.parse;

var $bjeeU = parcelRequire("bjeeU");
/**
 * Fetch Response (Version: 11) => throttle_time_ms error_code session_id [responses]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   session_id => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition_header record_set
 *       partition_header => partition error_code high_watermark last_stable_offset log_start_offset [aborted_transactions]
 *         partition => INT32
 *         error_code => INT16
 *         high_watermark => INT64
 *         last_stable_offset => INT64
 *         log_start_offset => INT64
 *         aborted_transactions => producer_id first_offset
 *           producer_id => INT64
 *           first_offset => INT64
 *         preferred_read_replica => INT32
 *       record_set => RECORDS
 */ const $3e25428065b21810$var$decodeAbortedTransactions = (decoder)=>({
        producerId: decoder.readInt64().toString(),
        firstOffset: decoder.readInt64().toString()
    });
const $3e25428065b21810$var$decodePartition = async (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        highWatermark: decoder.readInt64().toString(),
        lastStableOffset: decoder.readInt64().toString(),
        lastStartOffset: decoder.readInt64().toString(),
        abortedTransactions: decoder.readArray($3e25428065b21810$var$decodeAbortedTransactions),
        preferredReadReplica: decoder.readInt32(),
        messages: await $bjeeU(decoder)
    });
const $3e25428065b21810$var$decodeResponse = async (decoder)=>({
        topicName: decoder.readString(),
        partitions: await decoder.readArrayAsync($3e25428065b21810$var$decodePartition)
    });
const $3e25428065b21810$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const clientSideThrottleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    const sessionId = decoder.readInt32();
    const responses = await decoder.readArrayAsync($3e25428065b21810$var$decodeResponse);
    // Report a `throttleTime` of 0: The broker will not have throttled
    // this request, but if the `clientSideThrottleTime` is >0 then it
    // expects us to do that -- and it will ignore requests.
    return {
        throttleTime: 0,
        clientSideThrottleTime: clientSideThrottleTime,
        errorCode: errorCode,
        sessionId: sessionId,
        responses: responses
    };
};
module.exports = {
    decode: $3e25428065b21810$var$decode,
    parse: $3e25428065b21810$require$parseV1
};

});


parcelRegister("1ZEfG", function(module, exports) {

var $hNBWH = parcelRequire("hNBWH");
// For normal consumers, use -1
const $173ab6219af40479$var$REPLICA_ID = -1;








const $173ab6219af40479$var$versions = {
    0: ({ replicaId: replicaId = $173ab6219af40479$var$REPLICA_ID, topics: topics })=>{
        const request = (parcelRequire("iovqY"));
        const response = (parcelRequire("4ty1h"));
        return {
            request: request({
                replicaId: replicaId,
                topics: topics
            }),
            response: response
        };
    },
    1: ({ replicaId: replicaId = $173ab6219af40479$var$REPLICA_ID, topics: topics })=>{
        const request = (parcelRequire("8VDi5"));
        const response = (parcelRequire("enKcU"));
        return {
            request: request({
                replicaId: replicaId,
                topics: topics
            }),
            response: response
        };
    },
    2: ({ replicaId: replicaId = $173ab6219af40479$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, topics: topics })=>{
        const request = (parcelRequire("5XUpo"));
        const response = (parcelRequire("l1KS8"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                topics: topics
            }),
            response: response
        };
    },
    3: ({ replicaId: replicaId = $173ab6219af40479$var$REPLICA_ID, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, topics: topics })=>{
        const request = (parcelRequire("dRwit"));
        const response = (parcelRequire("juSHq"));
        return {
            request: request({
                replicaId: replicaId,
                isolationLevel: isolationLevel,
                topics: topics
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($173ab6219af40479$var$versions),
    protocol: ({ version: version })=>$173ab6219af40479$var$versions[version]
};

});
parcelRegister("iovqY", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $d642da08351674d7$require$apiKey = $9kH2s.ListOffsets;
/**
 * ListOffsets Request (Version: 0) => replica_id [topics]
 *   replica_id => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition timestamp max_num_offsets
 *       partition => INT32
 *       timestamp => INT64
 *       max_num_offsets => INT32
 */ /**
 * @param {number} replicaId
 * @param {object} topics use timestamp=-1 for latest offsets and timestamp=-2 for earliest.
 *                        Default timestamp=-1. Example:
 *                          {
 *                            topics: [
 *                              {
 *                                topic: 'topic-name',
 *                                partitions: [{ partition: 0, timestamp: -1 }]
 *                              }
 *                            ]
 *                          }
 */ module.exports = ({ replicaId: replicaId, topics: topics })=>({
        apiKey: $d642da08351674d7$require$apiKey,
        apiVersion: 0,
        apiName: "ListOffsets",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeArray(topics.map($d642da08351674d7$var$encodeTopic));
        }
    });
const $d642da08351674d7$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($d642da08351674d7$var$encodePartition));
};
const $d642da08351674d7$var$encodePartition = ({ partition: partition, timestamp: timestamp = -1, maxNumOffsets: maxNumOffsets = 1 })=>{
    return new $7jO81().writeInt32(partition).writeInt64(timestamp).writeInt32(maxNumOffsets);
};

});

parcelRegister("4ty1h", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $34244271396247af$require$failure = $iL9Wd.failure;
var $34244271396247af$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * Offsets Response (Version: 0) => [responses]
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code [offsets]
 *       partition => INT32
 *       error_code => INT16
 *       offsets => INT64
 */ const $34244271396247af$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        responses: decoder.readArray($34244271396247af$var$decodeResponses)
    };
};
const $34244271396247af$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($34244271396247af$var$decodePartitions)
    });
const $34244271396247af$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        offsets: decoder.readArray($34244271396247af$var$decodeOffsets)
    });
const $34244271396247af$var$decodeOffsets = (decoder)=>decoder.readInt64().toString();
const $34244271396247af$var$parse = async (data)=>{
    const partitionsWithError = data.responses.flatMap((response)=>response.partitions.filter((partition)=>$34244271396247af$require$failure(partition.errorCode)));
    const partitionWithError = partitionsWithError[0];
    if (partitionWithError) throw $34244271396247af$require$createErrorFromCode(partitionWithError.errorCode);
    return data;
};
module.exports = {
    decode: $34244271396247af$var$decode,
    parse: $34244271396247af$var$parse
};

});

parcelRegister("8VDi5", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $68021feb8f802fe9$require$apiKey = $9kH2s.ListOffsets;
/**
 * ListOffsets Request (Version: 1) => replica_id [topics]
 *   replica_id => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition timestamp
 *       partition => INT32
 *       timestamp => INT64
 */ module.exports = ({ replicaId: replicaId, topics: topics })=>({
        apiKey: $68021feb8f802fe9$require$apiKey,
        apiVersion: 1,
        apiName: "ListOffsets",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeArray(topics.map($68021feb8f802fe9$var$encodeTopic));
        }
    });
const $68021feb8f802fe9$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($68021feb8f802fe9$var$encodePartition));
};
const $68021feb8f802fe9$var$encodePartition = ({ partition: partition, timestamp: timestamp = -1 })=>{
    return new $7jO81().writeInt32(partition).writeInt64(timestamp);
};

});

parcelRegister("enKcU", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $a7870e727a4c50cf$require$failure = $iL9Wd.failure;
var $a7870e727a4c50cf$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * ListOffsets Response (Version: 1) => [responses]
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code timestamp offset
 *       partition => INT32
 *       error_code => INT16
 *       timestamp => INT64
 *       offset => INT64
 */ const $a7870e727a4c50cf$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        responses: decoder.readArray($a7870e727a4c50cf$var$decodeResponses)
    };
};
const $a7870e727a4c50cf$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($a7870e727a4c50cf$var$decodePartitions)
    });
const $a7870e727a4c50cf$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        timestamp: decoder.readInt64().toString(),
        offset: decoder.readInt64().toString()
    });
const $a7870e727a4c50cf$var$parse = async (data)=>{
    const partitionsWithError = data.responses.flatMap((response)=>response.partitions.filter((partition)=>$a7870e727a4c50cf$require$failure(partition.errorCode)));
    const partitionWithError = partitionsWithError[0];
    if (partitionWithError) throw $a7870e727a4c50cf$require$createErrorFromCode(partitionWithError.errorCode);
    return data;
};
module.exports = {
    decode: $a7870e727a4c50cf$var$decode,
    parse: $a7870e727a4c50cf$var$parse
};

});

parcelRegister("5XUpo", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $457e3802b5acffda$require$apiKey = $9kH2s.ListOffsets;
/**
 * ListOffsets Request (Version: 2) => replica_id isolation_level [topics]
 *   replica_id => INT32
 *   isolation_level => INT8
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition timestamp
 *       partition => INT32
 *       timestamp => INT64
 */ module.exports = ({ replicaId: replicaId, isolationLevel: isolationLevel, topics: topics })=>({
        apiKey: $457e3802b5acffda$require$apiKey,
        apiVersion: 2,
        apiName: "ListOffsets",
        encode: async ()=>{
            return new $7jO81().writeInt32(replicaId).writeInt8(isolationLevel).writeArray(topics.map($457e3802b5acffda$var$encodeTopic));
        }
    });
const $457e3802b5acffda$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($457e3802b5acffda$var$encodePartition));
};
const $457e3802b5acffda$var$encodePartition = ({ partition: partition, timestamp: timestamp = -1 })=>{
    return new $7jO81().writeInt32(partition).writeInt64(timestamp);
};

});

parcelRegister("l1KS8", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $f4ee0cc7c3b8e3c0$require$failure = $iL9Wd.failure;
var $f4ee0cc7c3b8e3c0$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * ListOffsets Response (Version: 2) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code timestamp offset
 *       partition => INT32
 *       error_code => INT16
 *       timestamp => INT64
 *       offset => INT64
 */ const $f4ee0cc7c3b8e3c0$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        throttleTime: decoder.readInt32(),
        responses: decoder.readArray($f4ee0cc7c3b8e3c0$var$decodeResponses)
    };
};
const $f4ee0cc7c3b8e3c0$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($f4ee0cc7c3b8e3c0$var$decodePartitions)
    });
const $f4ee0cc7c3b8e3c0$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16(),
        timestamp: decoder.readInt64().toString(),
        offset: decoder.readInt64().toString()
    });
const $f4ee0cc7c3b8e3c0$var$parse = async (data)=>{
    const partitionsWithError = data.responses.flatMap((response)=>response.partitions.filter((partition)=>$f4ee0cc7c3b8e3c0$require$failure(partition.errorCode)));
    const partitionWithError = partitionsWithError[0];
    if (partitionWithError) throw $f4ee0cc7c3b8e3c0$require$createErrorFromCode(partitionWithError.errorCode);
    return data;
};
module.exports = {
    decode: $f4ee0cc7c3b8e3c0$var$decode,
    parse: $f4ee0cc7c3b8e3c0$var$parse
};

});

parcelRegister("dRwit", function(module, exports) {

var $5XUpo = parcelRequire("5XUpo");
/**
 * ListOffsets Request (Version: 3) => replica_id isolation_level [topics]
 *   replica_id => INT32
 *   isolation_level => INT8
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition timestamp
 *       partition => INT32
 *       timestamp => INT64
 */ module.exports = ({ replicaId: replicaId, isolationLevel: isolationLevel, topics: topics })=>Object.assign($5XUpo({
        replicaId: replicaId,
        isolationLevel: isolationLevel,
        topics: topics
    }), {
        apiVersion: 3
    });

});

parcelRegister("juSHq", function(module, exports) {

var $l1KS8 = parcelRequire("l1KS8");
var $e31b3fd74f8d6813$require$parse = $l1KS8.parse;
var $e31b3fd74f8d6813$require$decodeV2 = $l1KS8.decode;
/**
 * In version 3 on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * ListOffsets Response (Version: 3) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code timestamp offset
 *       partition => INT32
 *       error_code => INT16
 *       timestamp => INT64
 *       offset => INT64
 */ const $e31b3fd74f8d6813$var$decode = async (rawData)=>{
    const decoded = await $e31b3fd74f8d6813$require$decodeV2(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $e31b3fd74f8d6813$var$decode,
    parse: $e31b3fd74f8d6813$require$parse
};

});


parcelRegister("8PRZL", function(module, exports) {














const $66ecf87b231b16ae$var$versions = {
    0: ({ topics: topics })=>{
        const request = (parcelRequire("eY4JZ"));
        const response = (parcelRequire("kc7DV"));
        return {
            request: request({
                topics: topics
            }),
            response: response
        };
    },
    1: ({ topics: topics })=>{
        const request = (parcelRequire("7BEpF"));
        const response = (parcelRequire("boJa5"));
        return {
            request: request({
                topics: topics
            }),
            response: response
        };
    },
    2: ({ topics: topics })=>{
        const request = (parcelRequire("5Oevn"));
        const response = (parcelRequire("eIO5t"));
        return {
            request: request({
                topics: topics
            }),
            response: response
        };
    },
    3: ({ topics: topics })=>{
        const request = (parcelRequire("kocKI"));
        const response = (parcelRequire("kRj1b"));
        return {
            request: request({
                topics: topics
            }),
            response: response
        };
    },
    4: ({ topics: topics, allowAutoTopicCreation: allowAutoTopicCreation })=>{
        const request = (parcelRequire("1u36J"));
        const response = (parcelRequire("5IJIK"));
        return {
            request: request({
                topics: topics,
                allowAutoTopicCreation: allowAutoTopicCreation
            }),
            response: response
        };
    },
    5: ({ topics: topics, allowAutoTopicCreation: allowAutoTopicCreation })=>{
        const request = (parcelRequire("cjayq"));
        const response = (parcelRequire("1Apsj"));
        return {
            request: request({
                topics: topics,
                allowAutoTopicCreation: allowAutoTopicCreation
            }),
            response: response
        };
    },
    6: ({ topics: topics, allowAutoTopicCreation: allowAutoTopicCreation })=>{
        const request = (parcelRequire("km1qB"));
        const response = (parcelRequire("6s3vP"));
        return {
            request: request({
                topics: topics,
                allowAutoTopicCreation: allowAutoTopicCreation
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($66ecf87b231b16ae$var$versions),
    protocol: ({ version: version })=>$66ecf87b231b16ae$var$versions[version]
};

});
parcelRegister("eY4JZ", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $ae5a58b1fd14cc81$require$apiKey = $9kH2s.Metadata;
/**
 * Metadata Request (Version: 0) => [topics]
 *   topics => STRING
 */ module.exports = ({ topics: topics })=>({
        apiKey: $ae5a58b1fd14cc81$require$apiKey,
        apiVersion: 0,
        apiName: "Metadata",
        encode: async ()=>{
            return new $7jO81().writeArray(topics);
        }
    });

});

parcelRegister("kc7DV", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $eb3adb606b8e34c4$require$failure = $iL9Wd.failure;
var $eb3adb606b8e34c4$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * Metadata Response (Version: 0) => [brokers] [topic_metadata]
 *   brokers => node_id host port
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 *   topic_metadata => topic_error_code topic [partition_metadata]
 *     topic_error_code => INT16
 *     topic => STRING
 *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]
 *       partition_error_code => INT16
 *       partition_id => INT32
 *       leader => INT32
 *       replicas => INT32
 *       isr => INT32
 */ const $eb3adb606b8e34c4$var$broker = (decoder)=>({
        nodeId: decoder.readInt32(),
        host: decoder.readString(),
        port: decoder.readInt32()
    });
const $eb3adb606b8e34c4$var$topicMetadata = (decoder)=>({
        topicErrorCode: decoder.readInt16(),
        topic: decoder.readString(),
        partitionMetadata: decoder.readArray($eb3adb606b8e34c4$var$partitionMetadata)
    });
const $eb3adb606b8e34c4$var$partitionMetadata = (decoder)=>({
        partitionErrorCode: decoder.readInt16(),
        partitionId: decoder.readInt32(),
        // leader: The node id for the kafka broker currently acting as leader
        // for this partition
        leader: decoder.readInt32(),
        replicas: decoder.readArray((d)=>d.readInt32()),
        isr: decoder.readArray((d)=>d.readInt32())
    });
const $eb3adb606b8e34c4$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        brokers: decoder.readArray($eb3adb606b8e34c4$var$broker),
        topicMetadata: decoder.readArray($eb3adb606b8e34c4$var$topicMetadata)
    };
};
const $eb3adb606b8e34c4$var$parse = async (data)=>{
    const topicsWithErrors = data.topicMetadata.filter((topic)=>$eb3adb606b8e34c4$require$failure(topic.topicErrorCode));
    if (topicsWithErrors.length > 0) {
        const { topicErrorCode: topicErrorCode } = topicsWithErrors[0];
        throw $eb3adb606b8e34c4$require$createErrorFromCode(topicErrorCode);
    }
    const errors = data.topicMetadata.flatMap((topic)=>{
        return topic.partitionMetadata.filter((partition)=>$eb3adb606b8e34c4$require$failure(partition.partitionErrorCode));
    });
    if (errors.length > 0) {
        const { partitionErrorCode: partitionErrorCode } = errors[0];
        throw $eb3adb606b8e34c4$require$createErrorFromCode(partitionErrorCode);
    }
    return data;
};
module.exports = {
    decode: $eb3adb606b8e34c4$var$decode,
    parse: $eb3adb606b8e34c4$var$parse
};

});

parcelRegister("7BEpF", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $589b5649f20cbac7$require$apiKey = $9kH2s.Metadata;
/**
 * Metadata Request (Version: 1) => [topics]
 *   topics => STRING
 */ module.exports = ({ topics: topics })=>({
        apiKey: $589b5649f20cbac7$require$apiKey,
        apiVersion: 1,
        apiName: "Metadata",
        encode: async ()=>{
            return new $7jO81().writeNullableArray(topics);
        }
    });

});

parcelRegister("boJa5", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $kc7DV = parcelRequire("kc7DV");
var $84c4f7c492f17706$require$parseV0 = $kc7DV.parse;
/**
 * Metadata Response (Version: 1) => [brokers] controller_id [topic_metadata]
 *   brokers => node_id host port rack
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 *     rack => NULLABLE_STRING
 *   controller_id => INT32
 *   topic_metadata => topic_error_code topic is_internal [partition_metadata]
 *     topic_error_code => INT16
 *     topic => STRING
 *     is_internal => BOOLEAN
 *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]
 *       partition_error_code => INT16
 *       partition_id => INT32
 *       leader => INT32
 *       replicas => INT32
 *       isr => INT32
 */ const $84c4f7c492f17706$var$broker = (decoder)=>({
        nodeId: decoder.readInt32(),
        host: decoder.readString(),
        port: decoder.readInt32(),
        rack: decoder.readString()
    });
const $84c4f7c492f17706$var$topicMetadata = (decoder)=>({
        topicErrorCode: decoder.readInt16(),
        topic: decoder.readString(),
        isInternal: decoder.readBoolean(),
        partitionMetadata: decoder.readArray($84c4f7c492f17706$var$partitionMetadata)
    });
const $84c4f7c492f17706$var$partitionMetadata = (decoder)=>({
        partitionErrorCode: decoder.readInt16(),
        partitionId: decoder.readInt32(),
        leader: decoder.readInt32(),
        replicas: decoder.readArray((d)=>d.readInt32()),
        isr: decoder.readArray((d)=>d.readInt32())
    });
const $84c4f7c492f17706$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        brokers: decoder.readArray($84c4f7c492f17706$var$broker),
        controllerId: decoder.readInt32(),
        topicMetadata: decoder.readArray($84c4f7c492f17706$var$topicMetadata)
    };
};
module.exports = {
    decode: $84c4f7c492f17706$var$decode,
    parse: $84c4f7c492f17706$require$parseV0
};

});

parcelRegister("5Oevn", function(module, exports) {

var $7BEpF = parcelRequire("7BEpF");
/**
 * Metadata Request (Version: 2) => [topics]
 *   topics => STRING
 */ module.exports = ({ topics: topics })=>Object.assign($7BEpF({
        topics: topics
    }), {
        apiVersion: 2
    });

});

parcelRegister("eIO5t", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $kc7DV = parcelRequire("kc7DV");
var $ab7c07107cf6f6b4$require$parseV0 = $kc7DV.parse;
/**
 * Metadata Response (Version: 2) => [brokers] cluster_id controller_id [topic_metadata]
 *   brokers => node_id host port rack
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 *     rack => NULLABLE_STRING
 *   cluster_id => NULLABLE_STRING
 *   controller_id => INT32
 *   topic_metadata => topic_error_code topic is_internal [partition_metadata]
 *     topic_error_code => INT16
 *     topic => STRING
 *     is_internal => BOOLEAN
 *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]
 *       partition_error_code => INT16
 *       partition_id => INT32
 *       leader => INT32
 *       replicas => INT32
 *       isr => INT32
 */ const $ab7c07107cf6f6b4$var$broker = (decoder)=>({
        nodeId: decoder.readInt32(),
        host: decoder.readString(),
        port: decoder.readInt32(),
        rack: decoder.readString()
    });
const $ab7c07107cf6f6b4$var$topicMetadata = (decoder)=>({
        topicErrorCode: decoder.readInt16(),
        topic: decoder.readString(),
        isInternal: decoder.readBoolean(),
        partitionMetadata: decoder.readArray($ab7c07107cf6f6b4$var$partitionMetadata)
    });
const $ab7c07107cf6f6b4$var$partitionMetadata = (decoder)=>({
        partitionErrorCode: decoder.readInt16(),
        partitionId: decoder.readInt32(),
        leader: decoder.readInt32(),
        replicas: decoder.readArray((d)=>d.readInt32()),
        isr: decoder.readArray((d)=>d.readInt32())
    });
const $ab7c07107cf6f6b4$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        brokers: decoder.readArray($ab7c07107cf6f6b4$var$broker),
        clusterId: decoder.readString(),
        controllerId: decoder.readInt32(),
        topicMetadata: decoder.readArray($ab7c07107cf6f6b4$var$topicMetadata)
    };
};
module.exports = {
    decode: $ab7c07107cf6f6b4$var$decode,
    parse: $ab7c07107cf6f6b4$require$parseV0
};

});

parcelRegister("kocKI", function(module, exports) {

var $7BEpF = parcelRequire("7BEpF");
/**
 * Metadata Request (Version: 3) => [topics]
 *   topics => STRING
 */ module.exports = ({ topics: topics })=>Object.assign($7BEpF({
        topics: topics
    }), {
        apiVersion: 3
    });

});

parcelRegister("kRj1b", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $kc7DV = parcelRequire("kc7DV");
var $f2f782749c4f258a$require$parseV0 = $kc7DV.parse;
/**
 * Metadata Response (Version: 3) => throttle_time_ms [brokers] cluster_id controller_id [topic_metadata]
 *   throttle_time_ms => INT32
 *   brokers => node_id host port rack
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 *     rack => NULLABLE_STRING
 *   cluster_id => NULLABLE_STRING
 *   controller_id => INT32
 *   topic_metadata => error_code topic is_internal [partition_metadata]
 *     error_code => INT16
 *     topic => STRING
 *     is_internal => BOOLEAN
 *     partition_metadata => error_code partition leader [replicas] [isr]
 *       error_code => INT16
 *       partition => INT32
 *       leader => INT32
 *       replicas => INT32
 *       isr => INT32
 */ const $f2f782749c4f258a$var$broker = (decoder)=>({
        nodeId: decoder.readInt32(),
        host: decoder.readString(),
        port: decoder.readInt32(),
        rack: decoder.readString()
    });
const $f2f782749c4f258a$var$topicMetadata = (decoder)=>({
        topicErrorCode: decoder.readInt16(),
        topic: decoder.readString(),
        isInternal: decoder.readBoolean(),
        partitionMetadata: decoder.readArray($f2f782749c4f258a$var$partitionMetadata)
    });
const $f2f782749c4f258a$var$partitionMetadata = (decoder)=>({
        partitionErrorCode: decoder.readInt16(),
        partitionId: decoder.readInt32(),
        leader: decoder.readInt32(),
        replicas: decoder.readArray((d)=>d.readInt32()),
        isr: decoder.readArray((d)=>d.readInt32())
    });
const $f2f782749c4f258a$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        throttleTime: decoder.readInt32(),
        brokers: decoder.readArray($f2f782749c4f258a$var$broker),
        clusterId: decoder.readString(),
        controllerId: decoder.readInt32(),
        topicMetadata: decoder.readArray($f2f782749c4f258a$var$topicMetadata)
    };
};
module.exports = {
    decode: $f2f782749c4f258a$var$decode,
    parse: $f2f782749c4f258a$require$parseV0
};

});

parcelRegister("1u36J", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $114b00e335691607$require$apiKey = $9kH2s.Metadata;
/**
 * Metadata Request (Version: 4) => [topics] allow_auto_topic_creation
 *   topics => STRING
 *   allow_auto_topic_creation => BOOLEAN
 */ module.exports = ({ topics: topics, allowAutoTopicCreation: allowAutoTopicCreation = true })=>({
        apiKey: $114b00e335691607$require$apiKey,
        apiVersion: 4,
        apiName: "Metadata",
        encode: async ()=>{
            return new $7jO81().writeNullableArray(topics).writeBoolean(allowAutoTopicCreation);
        }
    });

});

parcelRegister("5IJIK", function(module, exports) {

var $kRj1b = parcelRequire("kRj1b");
var $42a486fd2a65cf79$require$parseV3 = $kRj1b.parse;
var $42a486fd2a65cf79$require$decodeV3 = $kRj1b.decode;
/**
 * Metadata Response (Version: 4) => throttle_time_ms [brokers] cluster_id controller_id [topic_metadata]
 *   throttle_time_ms => INT32
 *   brokers => node_id host port rack
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 *     rack => NULLABLE_STRING
 *   cluster_id => NULLABLE_STRING
 *   controller_id => INT32
 *   topic_metadata => error_code topic is_internal [partition_metadata]
 *     error_code => INT16
 *     topic => STRING
 *     is_internal => BOOLEAN
 *     partition_metadata => error_code partition leader [replicas] [isr]
 *       error_code => INT16
 *       partition => INT32
 *       leader => INT32
 *       replicas => INT32
 *       isr => INT32
 */ module.exports = {
    parse: $42a486fd2a65cf79$require$parseV3,
    decode: $42a486fd2a65cf79$require$decodeV3
};

});

parcelRegister("cjayq", function(module, exports) {

var $1u36J = parcelRequire("1u36J");
/**
 * Metadata Request (Version: 5) => [topics] allow_auto_topic_creation
 *   topics => STRING
 *   allow_auto_topic_creation => BOOLEAN
 */ module.exports = ({ topics: topics, allowAutoTopicCreation: allowAutoTopicCreation = true })=>Object.assign($1u36J({
        topics: topics,
        allowAutoTopicCreation: allowAutoTopicCreation
    }), {
        apiVersion: 5
    });

});

parcelRegister("1Apsj", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $kc7DV = parcelRequire("kc7DV");
var $127ce63515f921ee$require$parseV0 = $kc7DV.parse;
/**
 * Metadata Response (Version: 5) => throttle_time_ms [brokers] cluster_id controller_id [topic_metadata]
 *   throttle_time_ms => INT32
 *   brokers => node_id host port rack
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 *     rack => NULLABLE_STRING
 *   cluster_id => NULLABLE_STRING
 *   controller_id => INT32
 *   topic_metadata => error_code topic is_internal [partition_metadata]
 *     error_code => INT16
 *     topic => STRING
 *     is_internal => BOOLEAN
 *     partition_metadata => error_code partition leader [replicas] [isr] [offline_replicas]
 *       error_code => INT16
 *       partition => INT32
 *       leader => INT32
 *       replicas => INT32
 *       isr => INT32
 *       offline_replicas => INT32
 */ const $127ce63515f921ee$var$broker = (decoder)=>({
        nodeId: decoder.readInt32(),
        host: decoder.readString(),
        port: decoder.readInt32(),
        rack: decoder.readString()
    });
const $127ce63515f921ee$var$topicMetadata = (decoder)=>({
        topicErrorCode: decoder.readInt16(),
        topic: decoder.readString(),
        isInternal: decoder.readBoolean(),
        partitionMetadata: decoder.readArray($127ce63515f921ee$var$partitionMetadata)
    });
const $127ce63515f921ee$var$partitionMetadata = (decoder)=>({
        partitionErrorCode: decoder.readInt16(),
        partitionId: decoder.readInt32(),
        leader: decoder.readInt32(),
        replicas: decoder.readArray((d)=>d.readInt32()),
        isr: decoder.readArray((d)=>d.readInt32()),
        offlineReplicas: decoder.readArray((d)=>d.readInt32())
    });
const $127ce63515f921ee$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        throttleTime: decoder.readInt32(),
        brokers: decoder.readArray($127ce63515f921ee$var$broker),
        clusterId: decoder.readString(),
        controllerId: decoder.readInt32(),
        topicMetadata: decoder.readArray($127ce63515f921ee$var$topicMetadata)
    };
};
module.exports = {
    decode: $127ce63515f921ee$var$decode,
    parse: $127ce63515f921ee$require$parseV0
};

});

parcelRegister("km1qB", function(module, exports) {

var $cjayq = parcelRequire("cjayq");
/**
 * Metadata Request (Version: 6) => [topics] allow_auto_topic_creation
 *   topics => STRING
 *   allow_auto_topic_creation => BOOLEAN
 */ module.exports = ({ topics: topics, allowAutoTopicCreation: allowAutoTopicCreation = true })=>Object.assign($cjayq({
        topics: topics,
        allowAutoTopicCreation: allowAutoTopicCreation
    }), {
        apiVersion: 6
    });

});

parcelRegister("6s3vP", function(module, exports) {

var $1Apsj = parcelRequire("1Apsj");
var $4b2815155dfbacda$require$parse = $1Apsj.parse;
var $4b2815155dfbacda$require$decodeV1 = $1Apsj.decode;
/**
 * In version 6 on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * Metadata Response (Version: 6) => throttle_time_ms [brokers] cluster_id controller_id [topic_metadata]
 *   throttle_time_ms => INT32
 *   brokers => node_id host port rack
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 *     rack => NULLABLE_STRING
 *   cluster_id => NULLABLE_STRING
 *   controller_id => INT32
 *   topic_metadata => error_code topic is_internal [partition_metadata]
 *     error_code => INT16
 *     topic => STRING
 *     is_internal => BOOLEAN
 *     partition_metadata => error_code partition leader [replicas] [isr] [offline_replicas]
 *       error_code => INT16
 *       partition => INT32
 *       leader => INT32
 *       replicas => INT32
 *       isr => INT32
 *       offline_replicas => INT32
 */ const $4b2815155dfbacda$var$decode = async (rawData)=>{
    const decoded = await $4b2815155dfbacda$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $4b2815155dfbacda$var$decode,
    parse: $4b2815155dfbacda$require$parse
};

});


parcelRegister("dM350", function(module, exports) {
// This value signals to the broker that its default configuration should be used.
const $a07225a17836dd24$var$RETENTION_TIME = -1;












const $a07225a17836dd24$var$versions = {
    0: ({ groupId: groupId, topics: topics })=>{
        const request = (parcelRequire("dfgjC"));
        const response = (parcelRequire("2Eyxo"));
        return {
            request: request({
                groupId: groupId,
                topics: topics
            }),
            response: response
        };
    },
    1: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, topics: topics })=>{
        const request = (parcelRequire("7zK8I"));
        const response = (parcelRequire("i72h4"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId,
                topics: topics
            }),
            response: response
        };
    },
    2: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, retentionTime: retentionTime = $a07225a17836dd24$var$RETENTION_TIME, topics: topics })=>{
        const request = (parcelRequire("e3jgM"));
        const response = (parcelRequire("3dLqY"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId,
                retentionTime: retentionTime,
                topics: topics
            }),
            response: response
        };
    },
    3: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, retentionTime: retentionTime = $a07225a17836dd24$var$RETENTION_TIME, topics: topics })=>{
        const request = (parcelRequire("fuPF1"));
        const response = (parcelRequire("9ycxr"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId,
                retentionTime: retentionTime,
                topics: topics
            }),
            response: response
        };
    },
    4: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, retentionTime: retentionTime = $a07225a17836dd24$var$RETENTION_TIME, topics: topics })=>{
        const request = (parcelRequire("hJu9A"));
        const response = (parcelRequire("fH9uy"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId,
                retentionTime: retentionTime,
                topics: topics
            }),
            response: response
        };
    },
    5: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, topics: topics })=>{
        const request = (parcelRequire("gV7HK"));
        const response = (parcelRequire("34BG0"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId,
                topics: topics
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($a07225a17836dd24$var$versions),
    protocol: ({ version: version })=>$a07225a17836dd24$var$versions[version]
};

});
parcelRegister("dfgjC", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $9a4954f4eb5eb158$require$apiKey = $9kH2s.OffsetCommit;
/**
 * OffsetCommit Request (Version: 0) => group_id [topics]
 *   group_id => STRING
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset metadata
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, topics: topics })=>({
        apiKey: $9a4954f4eb5eb158$require$apiKey,
        apiVersion: 0,
        apiName: "OffsetCommit",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeArray(topics.map($9a4954f4eb5eb158$var$encodeTopic));
        }
    });
const $9a4954f4eb5eb158$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($9a4954f4eb5eb158$var$encodePartition));
};
const $9a4954f4eb5eb158$var$encodePartition = ({ partition: partition, offset: offset, metadata: metadata = null })=>{
    return new $7jO81().writeInt32(partition).writeInt64(offset).writeString(metadata);
};

});

parcelRegister("2Eyxo", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $1eea1b9f9e731564$require$failure = $iL9Wd.failure;
var $1eea1b9f9e731564$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * OffsetCommit Response (Version: 0) => [responses]
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ const $1eea1b9f9e731564$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        responses: decoder.readArray($1eea1b9f9e731564$var$decodeResponses)
    };
};
const $1eea1b9f9e731564$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($1eea1b9f9e731564$var$decodePartitions)
    });
const $1eea1b9f9e731564$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16()
    });
const $1eea1b9f9e731564$var$parse = async (data)=>{
    const partitionsWithError = data.responses.flatMap((response)=>response.partitions.filter((partition)=>$1eea1b9f9e731564$require$failure(partition.errorCode)));
    const partitionWithError = partitionsWithError[0];
    if (partitionWithError) throw $1eea1b9f9e731564$require$createErrorFromCode(partitionWithError.errorCode);
    return data;
};
module.exports = {
    decode: $1eea1b9f9e731564$var$decode,
    parse: $1eea1b9f9e731564$var$parse
};

});

parcelRegister("7zK8I", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $583f97a72b5967b5$require$apiKey = $9kH2s.OffsetCommit;
/**
 * OffsetCommit Request (Version: 1) => group_id group_generation_id member_id [topics]
 *   group_id => STRING
 *   group_generation_id => INT32
 *   member_id => STRING
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset timestamp metadata
 *       partition => INT32
 *       offset => INT64
 *       timestamp => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, topics: topics })=>({
        apiKey: $583f97a72b5967b5$require$apiKey,
        apiVersion: 1,
        apiName: "OffsetCommit",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(groupGenerationId).writeString(memberId).writeArray(topics.map($583f97a72b5967b5$var$encodeTopic));
        }
    });
const $583f97a72b5967b5$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($583f97a72b5967b5$var$encodePartition));
};
const $583f97a72b5967b5$var$encodePartition = ({ partition: partition, offset: offset, timestamp: timestamp = Date.now(), metadata: metadata = null })=>{
    return new $7jO81().writeInt32(partition).writeInt64(offset).writeInt64(timestamp).writeString(metadata);
};

});

parcelRegister("i72h4", function(module, exports) {

var $2Eyxo = parcelRequire("2Eyxo");
var $d2faa50e37c46c62$require$parse = $2Eyxo.parse;
var $d2faa50e37c46c62$require$decode = $2Eyxo.decode;
/**
 * OffsetCommit Response (Version: 1) => [responses]
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ module.exports = {
    decode: $d2faa50e37c46c62$require$decode,
    parse: $d2faa50e37c46c62$require$parse
};

});

parcelRegister("e3jgM", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $a3b04b0cbb407e54$require$apiKey = $9kH2s.OffsetCommit;
/**
 * OffsetCommit Request (Version: 2) => group_id group_generation_id member_id retention_time [topics]
 *   group_id => STRING
 *   group_generation_id => INT32
 *   member_id => STRING
 *   retention_time => INT64
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset metadata
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, retentionTime: retentionTime, topics: topics })=>({
        apiKey: $a3b04b0cbb407e54$require$apiKey,
        apiVersion: 2,
        apiName: "OffsetCommit",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(groupGenerationId).writeString(memberId).writeInt64(retentionTime).writeArray(topics.map($a3b04b0cbb407e54$var$encodeTopic));
        }
    });
const $a3b04b0cbb407e54$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($a3b04b0cbb407e54$var$encodePartition));
};
const $a3b04b0cbb407e54$var$encodePartition = ({ partition: partition, offset: offset, metadata: metadata = null })=>{
    return new $7jO81().writeInt32(partition).writeInt64(offset).writeString(metadata);
};

});

parcelRegister("3dLqY", function(module, exports) {

var $2Eyxo = parcelRequire("2Eyxo");
var $2587616d1c025ecb$require$parse = $2Eyxo.parse;
var $2587616d1c025ecb$require$decode = $2Eyxo.decode;
/**
 * OffsetCommit Response (Version: 1) => [responses]
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ module.exports = {
    decode: $2587616d1c025ecb$require$decode,
    parse: $2587616d1c025ecb$require$parse
};

});

parcelRegister("fuPF1", function(module, exports) {

var $e3jgM = parcelRequire("e3jgM");
/**
 * OffsetCommit Request (Version: 3) => group_id generation_id member_id retention_time [topics]
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   retention_time => INT64
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset metadata
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, retentionTime: retentionTime, topics: topics })=>Object.assign($e3jgM({
        groupId: groupId,
        groupGenerationId: groupGenerationId,
        memberId: memberId,
        retentionTime: retentionTime,
        topics: topics
    }), {
        apiVersion: 3
    });

});

parcelRegister("9ycxr", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $2Eyxo = parcelRequire("2Eyxo");
var $6f4103e0bff468bb$require$parseV0 = $2Eyxo.parse;
/**
 * OffsetCommit Response (Version: 3) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ const $6f4103e0bff468bb$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        throttleTime: decoder.readInt32(),
        responses: decoder.readArray($6f4103e0bff468bb$var$decodeResponses)
    };
};
const $6f4103e0bff468bb$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($6f4103e0bff468bb$var$decodePartitions)
    });
const $6f4103e0bff468bb$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16()
    });
module.exports = {
    decode: $6f4103e0bff468bb$var$decode,
    parse: $6f4103e0bff468bb$require$parseV0
};

});

parcelRegister("hJu9A", function(module, exports) {

var $fuPF1 = parcelRequire("fuPF1");
/**
 * OffsetCommit Request (Version: 4) => group_id generation_id member_id retention_time [topics]
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   retention_time => INT64
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset metadata
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, retentionTime: retentionTime, topics: topics })=>Object.assign($fuPF1({
        groupId: groupId,
        groupGenerationId: groupGenerationId,
        memberId: memberId,
        retentionTime: retentionTime,
        topics: topics
    }), {
        apiVersion: 4
    });

});

parcelRegister("fH9uy", function(module, exports) {

var $9ycxr = parcelRequire("9ycxr");
var $b6d23c11b1382cc1$require$parse = $9ycxr.parse;
var $b6d23c11b1382cc1$require$decodeV3 = $9ycxr.decode;
/**
 * Starting in version 4, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * OffsetCommit Response (Version: 4) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ const $b6d23c11b1382cc1$var$decode = async (rawData)=>{
    const decoded = await $b6d23c11b1382cc1$require$decodeV3(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $b6d23c11b1382cc1$var$decode,
    parse: $b6d23c11b1382cc1$require$parse
};

});

parcelRegister("gV7HK", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $c517f22b7683b8c5$require$apiKey = $9kH2s.OffsetCommit;
/**
 * Version 5 removes retention_time, as this is controlled by a broker setting
 *
 * OffsetCommit Request (Version: 4) => group_id generation_id member_id [topics]
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset metadata
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, topics: topics })=>({
        apiKey: $c517f22b7683b8c5$require$apiKey,
        apiVersion: 5,
        apiName: "OffsetCommit",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(groupGenerationId).writeString(memberId).writeArray(topics.map($c517f22b7683b8c5$var$encodeTopic));
        }
    });
const $c517f22b7683b8c5$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($c517f22b7683b8c5$var$encodePartition));
};
const $c517f22b7683b8c5$var$encodePartition = ({ partition: partition, offset: offset, metadata: metadata = null })=>{
    return new $7jO81().writeInt32(partition).writeInt64(offset).writeString(metadata);
};

});

parcelRegister("34BG0", function(module, exports) {

var $fH9uy = parcelRequire("fH9uy");
var $23cef894c480a6d2$require$parse = $fH9uy.parse;
var $23cef894c480a6d2$require$decode = $fH9uy.decode;
/**
 * OffsetCommit Response (Version: 5) => throttle_time_ms [responses]
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ module.exports = {
    decode: $23cef894c480a6d2$require$decode,
    parse: $23cef894c480a6d2$require$parse
};

});


parcelRegister("iLEZR", function(module, exports) {








const $da9c6ae529d152f6$var$versions = {
    1: ({ groupId: groupId, topics: topics })=>{
        const request = (parcelRequire("5XPsy"));
        const response = (parcelRequire("8bkNR"));
        return {
            request: request({
                groupId: groupId,
                topics: topics
            }),
            response: response
        };
    },
    2: ({ groupId: groupId, topics: topics })=>{
        const request = (parcelRequire("7Bzun"));
        const response = (parcelRequire("ktcsV"));
        return {
            request: request({
                groupId: groupId,
                topics: topics
            }),
            response: response
        };
    },
    3: ({ groupId: groupId, topics: topics })=>{
        const request = (parcelRequire("cpwn9"));
        const response = (parcelRequire("jwLut"));
        return {
            request: request({
                groupId: groupId,
                topics: topics
            }),
            response: response
        };
    },
    4: ({ groupId: groupId, topics: topics })=>{
        const request = (parcelRequire("iS7m5"));
        const response = (parcelRequire("k8PVO"));
        return {
            request: request({
                groupId: groupId,
                topics: topics
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($da9c6ae529d152f6$var$versions),
    protocol: ({ version: version })=>$da9c6ae529d152f6$var$versions[version]
};

});
parcelRegister("5XPsy", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $457a6137cb8b6749$require$apiKey = $9kH2s.OffsetFetch;
/**
 * OffsetFetch Request (Version: 1) => group_id [topics]
 *   group_id => STRING
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition
 *       partition => INT32
 */ module.exports = ({ groupId: groupId, topics: topics })=>({
        apiKey: $457a6137cb8b6749$require$apiKey,
        apiVersion: 1,
        apiName: "OffsetFetch",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeArray(topics.map($457a6137cb8b6749$var$encodeTopic));
        }
    });
const $457a6137cb8b6749$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($457a6137cb8b6749$var$encodePartition));
};
const $457a6137cb8b6749$var$encodePartition = ({ partition: partition })=>{
    return new $7jO81().writeInt32(partition);
};

});

parcelRegister("8bkNR", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $5f4f7ce60769784b$require$failure = $iL9Wd.failure;
var $5f4f7ce60769784b$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * OffsetFetch Response (Version: 1) => [responses]
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition offset metadata error_code
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 *       error_code => INT16
 */ const $5f4f7ce60769784b$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        responses: decoder.readArray($5f4f7ce60769784b$var$decodeResponses)
    };
};
const $5f4f7ce60769784b$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($5f4f7ce60769784b$var$decodePartitions)
    });
const $5f4f7ce60769784b$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        offset: decoder.readInt64().toString(),
        metadata: decoder.readString(),
        errorCode: decoder.readInt16()
    });
const $5f4f7ce60769784b$var$parse = async (data)=>{
    const partitionsWithError = data.responses.flatMap((response)=>response.partitions.filter((partition)=>$5f4f7ce60769784b$require$failure(partition.errorCode)));
    const partitionWithError = partitionsWithError[0];
    if (partitionWithError) throw $5f4f7ce60769784b$require$createErrorFromCode(partitionWithError.errorCode);
    return data;
};
module.exports = {
    decode: $5f4f7ce60769784b$var$decode,
    parse: $5f4f7ce60769784b$var$parse
};

});

parcelRegister("7Bzun", function(module, exports) {

var $5XPsy = parcelRequire("5XPsy");
/**
 * OffsetFetch Request (Version: 2) => group_id [topics]
 *   group_id => STRING
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition
 *       partition => INT32
 */ module.exports = ({ groupId: groupId, topics: topics })=>Object.assign($5XPsy({
        groupId: groupId,
        topics: topics
    }), {
        apiVersion: 2
    });

});

parcelRegister("ktcsV", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $ee702f7708b75523$require$failure = $iL9Wd.failure;
var $ee702f7708b75523$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * OffsetFetch Response (Version: 2) => [responses] error_code
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition offset metadata error_code
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 *       error_code => INT16
 *   error_code => INT16
 */ const $ee702f7708b75523$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        responses: decoder.readArray($ee702f7708b75523$var$decodeResponses),
        errorCode: decoder.readInt16()
    };
};
const $ee702f7708b75523$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($ee702f7708b75523$var$decodePartitions)
    });
const $ee702f7708b75523$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        offset: decoder.readInt64().toString(),
        metadata: decoder.readString(),
        errorCode: decoder.readInt16()
    });
const $ee702f7708b75523$var$parse = async (data)=>{
    if ($ee702f7708b75523$require$failure(data.errorCode)) throw $ee702f7708b75523$require$createErrorFromCode(data.errorCode);
    const partitionsWithError = data.responses.flatMap((response)=>response.partitions.filter((partition)=>$ee702f7708b75523$require$failure(partition.errorCode)));
    const partitionWithError = partitionsWithError[0];
    if (partitionWithError) throw $ee702f7708b75523$require$createErrorFromCode(partitionWithError.errorCode);
    return data;
};
module.exports = {
    decode: $ee702f7708b75523$var$decode,
    parse: $ee702f7708b75523$var$parse
};

});

parcelRegister("cpwn9", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $9090ee50fc67940c$require$apiKey = $9kH2s.OffsetFetch;
/**
 * OffsetFetch Request (Version: 3) => group_id [topics]
 *   group_id => STRING
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition
 *       partition => INT32
 */ module.exports = ({ groupId: groupId, topics: topics })=>({
        apiKey: $9090ee50fc67940c$require$apiKey,
        apiVersion: 3,
        apiName: "OffsetFetch",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeNullableArray(topics.map($9090ee50fc67940c$var$encodeTopic));
        }
    });
const $9090ee50fc67940c$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($9090ee50fc67940c$var$encodePartition));
};
const $9090ee50fc67940c$var$encodePartition = ({ partition: partition })=>{
    return new $7jO81().writeInt32(partition);
};

});

parcelRegister("jwLut", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $ktcsV = parcelRequire("ktcsV");
var $e375d816683584c9$require$parseV2 = $ktcsV.parse;
/**
 * OffsetFetch Response (Version: 3) => throttle_time_ms [responses] error_code
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition offset metadata error_code
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 *       error_code => INT16
 *   error_code => INT16
 */ const $e375d816683584c9$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        throttleTime: decoder.readInt32(),
        responses: decoder.readArray($e375d816683584c9$var$decodeResponses),
        errorCode: decoder.readInt16()
    };
};
const $e375d816683584c9$var$decodeResponses = (decoder)=>({
        topic: decoder.readString(),
        partitions: decoder.readArray($e375d816683584c9$var$decodePartitions)
    });
const $e375d816683584c9$var$decodePartitions = (decoder)=>({
        partition: decoder.readInt32(),
        offset: decoder.readInt64().toString(),
        metadata: decoder.readString(),
        errorCode: decoder.readInt16()
    });
module.exports = {
    decode: $e375d816683584c9$var$decode,
    parse: $e375d816683584c9$require$parseV2
};

});

parcelRegister("iS7m5", function(module, exports) {

var $cpwn9 = parcelRequire("cpwn9");
/**
 * OffsetFetch Request (Version: 4) => group_id [topics]
 *   group_id => STRING
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition
 *       partition => INT32
 */ module.exports = ({ groupId: groupId, topics: topics })=>Object.assign($cpwn9({
        groupId: groupId,
        topics: topics
    }), {
        apiVersion: 4
    });

});

parcelRegister("k8PVO", function(module, exports) {

var $jwLut = parcelRequire("jwLut");
var $ea9cd6806219054e$require$parse = $jwLut.parse;
var $ea9cd6806219054e$require$decodeV3 = $jwLut.decode;
/**
 * Starting in version 4, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * OffsetFetch Response (Version: 4) => throttle_time_ms [responses] error_code
 *   throttle_time_ms => INT32
 *   responses => topic [partition_responses]
 *     topic => STRING
 *     partition_responses => partition offset metadata error_code
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 *       error_code => INT16
 *   error_code => INT16
 */ const $ea9cd6806219054e$var$decode = async (rawData)=>{
    const decoded = await $ea9cd6806219054e$require$decodeV3(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $ea9cd6806219054e$var$decode,
    parse: $ea9cd6806219054e$require$parse
};

});


parcelRegister("2cj0G", function(module, exports) {

var $iExfi = parcelRequire("iExfi");






const $199b72c5169283c6$var$versions = {
    0: ({ groupId: groupId })=>{
        const request = (parcelRequire("jvJUe"));
        const response = (parcelRequire("2MJd3"));
        return {
            request: request({
                groupId: groupId
            }),
            response: response
        };
    },
    1: ({ groupId: groupId, coordinatorType: coordinatorType = $iExfi.GROUP })=>{
        const request = (parcelRequire("dOfY3"));
        const response = (parcelRequire("gI9lX"));
        return {
            request: request({
                coordinatorKey: groupId,
                coordinatorType: coordinatorType
            }),
            response: response
        };
    },
    2: ({ groupId: groupId, coordinatorType: coordinatorType = $iExfi.GROUP })=>{
        const request = (parcelRequire("8mCay"));
        const response = (parcelRequire("iex9q"));
        return {
            request: request({
                coordinatorKey: groupId,
                coordinatorType: coordinatorType
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($199b72c5169283c6$var$versions),
    protocol: ({ version: version })=>$199b72c5169283c6$var$versions[version]
};

});
parcelRegister("iExfi", function(module, exports) {
// From: https://kafka.apache.org/protocol.html#The_Messages_FindCoordinator
/**
 * @typedef {number} CoordinatorType
 *
 * Enum for the types of coordinator to find.
 * @enum {CoordinatorType}
 */ module.exports = {
    GROUP: 0,
    TRANSACTION: 1
};

});

parcelRegister("jvJUe", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $e3448583ed54949b$require$apiKey = $9kH2s.GroupCoordinator;
/**
 * FindCoordinator Request (Version: 0) => group_id
 *   group_id => STRING
 */ module.exports = ({ groupId: groupId })=>({
        apiKey: $e3448583ed54949b$require$apiKey,
        apiVersion: 0,
        apiName: "GroupCoordinator",
        encode: async ()=>{
            return new $7jO81().writeString(groupId);
        }
    });

});

parcelRegister("2MJd3", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $20732227071b9388$require$failure = $iL9Wd.failure;
var $20732227071b9388$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $20732227071b9388$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * FindCoordinator Response (Version: 0) => error_code coordinator
 *  error_code => INT16
 *  coordinator => node_id host port
 *    node_id => INT32
 *    host => STRING
 *    port => INT32
 */ const $20732227071b9388$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $20732227071b9388$require$failIfVersionNotSupported(errorCode);
    const coordinator = {
        nodeId: decoder.readInt32(),
        host: decoder.readString(),
        port: decoder.readInt32()
    };
    return {
        errorCode: errorCode,
        coordinator: coordinator
    };
};
const $20732227071b9388$var$parse = async (data)=>{
    if ($20732227071b9388$require$failure(data.errorCode)) throw $20732227071b9388$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $20732227071b9388$var$decode,
    parse: $20732227071b9388$var$parse
};

});

parcelRegister("dOfY3", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $a0dc54bad1b4a79c$require$apiKey = $9kH2s.GroupCoordinator;
/**
 * FindCoordinator Request (Version: 1) => coordinator_key coordinator_type
 *   coordinator_key => STRING
 *   coordinator_type => INT8
 */ module.exports = ({ coordinatorKey: coordinatorKey, coordinatorType: coordinatorType })=>({
        apiKey: $a0dc54bad1b4a79c$require$apiKey,
        apiVersion: 1,
        apiName: "GroupCoordinator",
        encode: async ()=>{
            return new $7jO81().writeString(coordinatorKey).writeInt8(coordinatorType);
        }
    });

});

parcelRegister("gI9lX", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $c2a802b7e7825324$require$failure = $iL9Wd.failure;
var $c2a802b7e7825324$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $c2a802b7e7825324$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * FindCoordinator Response (Version: 1) => throttle_time_ms error_code error_message coordinator
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   error_message => NULLABLE_STRING
 *   coordinator => node_id host port
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 */ const $c2a802b7e7825324$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $c2a802b7e7825324$require$failIfVersionNotSupported(errorCode);
    const errorMessage = decoder.readString();
    const coordinator = {
        nodeId: decoder.readInt32(),
        host: decoder.readString(),
        port: decoder.readInt32()
    };
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        errorMessage: errorMessage,
        coordinator: coordinator
    };
};
const $c2a802b7e7825324$var$parse = async (data)=>{
    if ($c2a802b7e7825324$require$failure(data.errorCode)) throw $c2a802b7e7825324$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $c2a802b7e7825324$var$decode,
    parse: $c2a802b7e7825324$var$parse
};

});

parcelRegister("8mCay", function(module, exports) {

var $dOfY3 = parcelRequire("dOfY3");
/**
 * FindCoordinator Request (Version: 2) => coordinator_key coordinator_type
 *   coordinator_key => STRING
 *   coordinator_type => INT8
 */ module.exports = ({ coordinatorKey: coordinatorKey, coordinatorType: coordinatorType })=>Object.assign($dOfY3({
        coordinatorKey: coordinatorKey,
        coordinatorType: coordinatorType
    }), {
        apiVersion: 2
    });

});

parcelRegister("iex9q", function(module, exports) {

var $gI9lX = parcelRequire("gI9lX");
var $d4633fe130e29ae6$require$parse = $gI9lX.parse;
var $d4633fe130e29ae6$require$decodeV1 = $gI9lX.decode;
/**
 * Starting in version 2, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * FindCoordinator Response (Version: 1) => throttle_time_ms error_code error_message coordinator
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   error_message => NULLABLE_STRING
 *   coordinator => node_id host port
 *     node_id => INT32
 *     host => STRING
 *     port => INT32
 */ const $d4633fe130e29ae6$var$decode = async (rawData)=>{
    const decoded = await $d4633fe130e29ae6$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $d4633fe130e29ae6$var$decode,
    parse: $d4633fe130e29ae6$require$parse
};

});


parcelRegister("6zxgY", function(module, exports) {
const $4c8fd24069eea738$var$NETWORK_DELAY = 5000;
/**
 * @see https://github.com/apache/kafka/pull/5203
 * The JOIN_GROUP request may block up to sessionTimeout (or rebalanceTimeout in JoinGroupV1),
 * so we should override the requestTimeout to be a bit more than the sessionTimeout
 * NOTE: the sessionTimeout can be configured as Number.MAX_SAFE_INTEGER and overflow when
 * increased, so we have to check for potential overflows
 **/ const $4c8fd24069eea738$var$requestTimeout = ({ rebalanceTimeout: rebalanceTimeout, sessionTimeout: sessionTimeout })=>{
    const timeout = rebalanceTimeout || sessionTimeout;
    return Number.isSafeInteger(timeout + $4c8fd24069eea738$var$NETWORK_DELAY) ? timeout + $4c8fd24069eea738$var$NETWORK_DELAY : timeout;
};
const $4c8fd24069eea738$var$logResponseError = (memberId)=>memberId != null && memberId !== "";












const $4c8fd24069eea738$var$versions = {
    0: ({ groupId: groupId, sessionTimeout: sessionTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>{
        const request = (parcelRequire("kJAY9"));
        const response = (parcelRequire("lxz5j"));
        return {
            request: request({
                groupId: groupId,
                sessionTimeout: sessionTimeout,
                memberId: memberId,
                protocolType: protocolType,
                groupProtocols: groupProtocols
            }),
            response: response,
            requestTimeout: $4c8fd24069eea738$var$requestTimeout({
                rebalanceTimeout: null,
                sessionTimeout: sessionTimeout
            })
        };
    },
    1: ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>{
        const request = (parcelRequire("aZk54"));
        const response = (parcelRequire("l8RzG"));
        return {
            request: request({
                groupId: groupId,
                sessionTimeout: sessionTimeout,
                rebalanceTimeout: rebalanceTimeout,
                memberId: memberId,
                protocolType: protocolType,
                groupProtocols: groupProtocols
            }),
            response: response,
            requestTimeout: $4c8fd24069eea738$var$requestTimeout({
                rebalanceTimeout: rebalanceTimeout,
                sessionTimeout: sessionTimeout
            })
        };
    },
    2: ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>{
        const request = (parcelRequire("k5YfP"));
        const response = (parcelRequire("4NgjD"));
        return {
            request: request({
                groupId: groupId,
                sessionTimeout: sessionTimeout,
                rebalanceTimeout: rebalanceTimeout,
                memberId: memberId,
                protocolType: protocolType,
                groupProtocols: groupProtocols
            }),
            response: response,
            requestTimeout: $4c8fd24069eea738$var$requestTimeout({
                rebalanceTimeout: rebalanceTimeout,
                sessionTimeout: sessionTimeout
            })
        };
    },
    3: ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>{
        const request = (parcelRequire("9UxS1"));
        const response = (parcelRequire("aRGMp"));
        return {
            request: request({
                groupId: groupId,
                sessionTimeout: sessionTimeout,
                rebalanceTimeout: rebalanceTimeout,
                memberId: memberId,
                protocolType: protocolType,
                groupProtocols: groupProtocols
            }),
            response: response,
            requestTimeout: $4c8fd24069eea738$var$requestTimeout({
                rebalanceTimeout: rebalanceTimeout,
                sessionTimeout: sessionTimeout
            })
        };
    },
    4: ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>{
        const request = (parcelRequire("eNW1P"));
        const response = (parcelRequire("lMZpw"));
        return {
            request: request({
                groupId: groupId,
                sessionTimeout: sessionTimeout,
                rebalanceTimeout: rebalanceTimeout,
                memberId: memberId,
                protocolType: protocolType,
                groupProtocols: groupProtocols
            }),
            response: response,
            requestTimeout: $4c8fd24069eea738$var$requestTimeout({
                rebalanceTimeout: rebalanceTimeout,
                sessionTimeout: sessionTimeout
            }),
            logResponseError: $4c8fd24069eea738$var$logResponseError(memberId)
        };
    },
    5: ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, groupInstanceId: groupInstanceId, protocolType: protocolType, groupProtocols: groupProtocols })=>{
        const request = (parcelRequire("4QMGP"));
        const response = (parcelRequire("8rfuy"));
        return {
            request: request({
                groupId: groupId,
                sessionTimeout: sessionTimeout,
                rebalanceTimeout: rebalanceTimeout,
                memberId: memberId,
                groupInstanceId: groupInstanceId,
                protocolType: protocolType,
                groupProtocols: groupProtocols
            }),
            response: response,
            requestTimeout: $4c8fd24069eea738$var$requestTimeout({
                rebalanceTimeout: rebalanceTimeout,
                sessionTimeout: sessionTimeout
            }),
            logResponseError: $4c8fd24069eea738$var$logResponseError(memberId)
        };
    }
};
module.exports = {
    versions: Object.keys($4c8fd24069eea738$var$versions),
    protocol: ({ version: version })=>$4c8fd24069eea738$var$versions[version]
};

});
parcelRegister("kJAY9", function(module, exports) {

var $f184aff2f95a5df9$require$Buffer = $4UN2M$buffer.Buffer;

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $f184aff2f95a5df9$require$apiKey = $9kH2s.JoinGroup;
/**
 * JoinGroup Request (Version: 0) => group_id session_timeout member_id protocol_type [group_protocols]
 *   group_id => STRING
 *   session_timeout => INT32
 *   member_id => STRING
 *   protocol_type => STRING
 *   group_protocols => protocol_name protocol_metadata
 *     protocol_name => STRING
 *     protocol_metadata => BYTES
 */ module.exports = ({ groupId: groupId, sessionTimeout: sessionTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>({
        apiKey: $f184aff2f95a5df9$require$apiKey,
        apiVersion: 0,
        apiName: "JoinGroup",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(sessionTimeout).writeString(memberId).writeString(protocolType).writeArray(groupProtocols.map($f184aff2f95a5df9$var$encodeGroupProtocols));
        }
    });
const $f184aff2f95a5df9$var$encodeGroupProtocols = ({ name: name, metadata: metadata = $f184aff2f95a5df9$require$Buffer.alloc(0) })=>{
    return new $7jO81().writeString(name).writeBytes(metadata);
};

});

parcelRegister("lxz5j", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $fae7e527260ed05e$require$failure = $iL9Wd.failure;
var $fae7e527260ed05e$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $fae7e527260ed05e$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * JoinGroup Response (Version: 0) => error_code generation_id group_protocol leader_id member_id [members]
 *   error_code => INT16
 *   generation_id => INT32
 *   group_protocol => STRING
 *   leader_id => STRING
 *   member_id => STRING
 *   members => member_id member_metadata
 *     member_id => STRING
 *     member_metadata => BYTES
 */ const $fae7e527260ed05e$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $fae7e527260ed05e$require$failIfVersionNotSupported(errorCode);
    return {
        errorCode: errorCode,
        generationId: decoder.readInt32(),
        groupProtocol: decoder.readString(),
        leaderId: decoder.readString(),
        memberId: decoder.readString(),
        members: decoder.readArray((decoder)=>({
                memberId: decoder.readString(),
                memberMetadata: decoder.readBytes()
            }))
    };
};
const $fae7e527260ed05e$var$parse = async (data)=>{
    if ($fae7e527260ed05e$require$failure(data.errorCode)) throw $fae7e527260ed05e$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $fae7e527260ed05e$var$decode,
    parse: $fae7e527260ed05e$var$parse
};

});

parcelRegister("aZk54", function(module, exports) {

var $7fff2d7f316018b0$require$Buffer = $4UN2M$buffer.Buffer;

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $7fff2d7f316018b0$require$apiKey = $9kH2s.JoinGroup;
/**
 * JoinGroup Request (Version: 1) => group_id session_timeout rebalance_timeout member_id protocol_type [group_protocols]
 *   group_id => STRING
 *   session_timeout => INT32
 *   rebalance_timeout => INT32
 *   member_id => STRING
 *   protocol_type => STRING
 *   group_protocols => protocol_name protocol_metadata
 *     protocol_name => STRING
 *     protocol_metadata => BYTES
 */ module.exports = ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>({
        apiKey: $7fff2d7f316018b0$require$apiKey,
        apiVersion: 1,
        apiName: "JoinGroup",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(sessionTimeout).writeInt32(rebalanceTimeout).writeString(memberId).writeString(protocolType).writeArray(groupProtocols.map($7fff2d7f316018b0$var$encodeGroupProtocols));
        }
    });
const $7fff2d7f316018b0$var$encodeGroupProtocols = ({ name: name, metadata: metadata = $7fff2d7f316018b0$require$Buffer.alloc(0) })=>{
    return new $7jO81().writeString(name).writeBytes(metadata);
};

});

parcelRegister("l8RzG", function(module, exports) {

var $lxz5j = parcelRequire("lxz5j");
var $f643e717e0f1db95$require$parse = $lxz5j.parse;
var $f643e717e0f1db95$require$decode = $lxz5j.decode;
/**
 * JoinGroup Response (Version: 1) => error_code generation_id group_protocol leader_id member_id [members]
 *   error_code => INT16
 *   generation_id => INT32
 *   group_protocol => STRING
 *   leader_id => STRING
 *   member_id => STRING
 *   members => member_id member_metadata
 *     member_id => STRING
 *     member_metadata => BYTES
 */ module.exports = {
    decode: $f643e717e0f1db95$require$decode,
    parse: $f643e717e0f1db95$require$parse
};

});

parcelRegister("k5YfP", function(module, exports) {

var $aZk54 = parcelRequire("aZk54");
/**
 * JoinGroup Request (Version: 2) => group_id session_timeout rebalance_timeout member_id protocol_type [group_protocols]
 *   group_id => STRING
 *   session_timeout => INT32
 *   rebalance_timeout => INT32
 *   member_id => STRING
 *   protocol_type => STRING
 *   group_protocols => protocol_name protocol_metadata
 *     protocol_name => STRING
 *     protocol_metadata => BYTES
 */ module.exports = ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>Object.assign($aZk54({
        groupId: groupId,
        sessionTimeout: sessionTimeout,
        rebalanceTimeout: rebalanceTimeout,
        memberId: memberId,
        protocolType: protocolType,
        groupProtocols: groupProtocols
    }), {
        apiVersion: 2
    });

});

parcelRegister("4NgjD", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $37d864f86ef9807f$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;

var $lxz5j = parcelRequire("lxz5j");
var $37d864f86ef9807f$require$parseV0 = $lxz5j.parse;
/**
 * JoinGroup Response (Version: 2) => throttle_time_ms error_code generation_id group_protocol leader_id member_id [members]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   generation_id => INT32
 *   group_protocol => STRING
 *   leader_id => STRING
 *   member_id => STRING
 *   members => member_id member_metadata
 *     member_id => STRING
 *     member_metadata => BYTES
 */ const $37d864f86ef9807f$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $37d864f86ef9807f$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        generationId: decoder.readInt32(),
        groupProtocol: decoder.readString(),
        leaderId: decoder.readString(),
        memberId: decoder.readString(),
        members: decoder.readArray((decoder)=>({
                memberId: decoder.readString(),
                memberMetadata: decoder.readBytes()
            }))
    };
};
module.exports = {
    decode: $37d864f86ef9807f$var$decode,
    parse: $37d864f86ef9807f$require$parseV0
};

});

parcelRegister("9UxS1", function(module, exports) {

var $k5YfP = parcelRequire("k5YfP");
/**
 * JoinGroup Request (Version: 3) => group_id session_timeout rebalance_timeout member_id protocol_type [group_protocols]
 *   group_id => STRING
 *   session_timeout => INT32
 *   rebalance_timeout => INT32
 *   member_id => STRING
 *   protocol_type => STRING
 *   group_protocols => protocol_name protocol_metadata
 *     protocol_name => STRING
 *     protocol_metadata => BYTES
 */ module.exports = ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>Object.assign($k5YfP({
        groupId: groupId,
        sessionTimeout: sessionTimeout,
        rebalanceTimeout: rebalanceTimeout,
        memberId: memberId,
        protocolType: protocolType,
        groupProtocols: groupProtocols
    }), {
        apiVersion: 3
    });

});

parcelRegister("aRGMp", function(module, exports) {

var $4NgjD = parcelRequire("4NgjD");
var $7e9009cc4a489f64$require$parse = $4NgjD.parse;
var $7e9009cc4a489f64$require$decodeV2 = $4NgjD.decode;
/**
 * Starting in version 3, on quota violation, brokers send out responses
 * before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * JoinGroup Response (Version: 3) => throttle_time_ms error_code generation_id group_protocol leader_id member_id [members]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   generation_id => INT32
 *   group_protocol => STRING
 *   leader_id => STRING
 *   member_id => STRING
 *   members => member_id member_metadata
 *     member_id => STRING
 *     member_metadata => BYTES
 */ const $7e9009cc4a489f64$var$decode = async (rawData)=>{
    const decoded = await $7e9009cc4a489f64$require$decodeV2(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $7e9009cc4a489f64$var$decode,
    parse: $7e9009cc4a489f64$require$parse
};

});

parcelRegister("eNW1P", function(module, exports) {

var $9UxS1 = parcelRequire("9UxS1");
/**
 * Starting in version 4, the client needs to issue a second request to join group
 * with assigned id.
 *
 * JoinGroup Request (Version: 4) => group_id session_timeout rebalance_timeout member_id protocol_type [group_protocols]
 *   group_id => STRING
 *   session_timeout => INT32
 *   rebalance_timeout => INT32
 *   member_id => STRING
 *   protocol_type => STRING
 *   group_protocols => protocol_name protocol_metadata
 *     protocol_name => STRING
 *     protocol_metadata => BYTES
 */ module.exports = ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, protocolType: protocolType, groupProtocols: groupProtocols })=>Object.assign($9UxS1({
        groupId: groupId,
        sessionTimeout: sessionTimeout,
        rebalanceTimeout: rebalanceTimeout,
        memberId: memberId,
        protocolType: protocolType,
        groupProtocols: groupProtocols
    }), {
        apiVersion: 4
    });

});

parcelRegister("lMZpw", function(module, exports) {

var $aRGMp = parcelRequire("aRGMp");
var $fdcdb786b411a3eb$require$decode = $aRGMp.decode;

var $8mQRr = parcelRequire("8mQRr");
var $fdcdb786b411a3eb$require$KafkaJSMemberIdRequired = $8mQRr.KafkaJSMemberIdRequired;

var $iL9Wd = parcelRequire("iL9Wd");
var $fdcdb786b411a3eb$require$failure = $iL9Wd.failure;
var $fdcdb786b411a3eb$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $fdcdb786b411a3eb$require$errorCodes = $iL9Wd.errorCodes;
/**
 * JoinGroup Response (Version: 4) => throttle_time_ms error_code generation_id group_protocol leader_id member_id [members]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   generation_id => INT32
 *   group_protocol => STRING
 *   leader_id => STRING
 *   member_id => STRING
 *   members => member_id member_metadata
 *     member_id => STRING
 *     member_metadata => BYTES
 */ const { code: $fdcdb786b411a3eb$var$MEMBER_ID_REQUIRED_ERROR_CODE } = $fdcdb786b411a3eb$require$errorCodes.find((e)=>e.type === "MEMBER_ID_REQUIRED");
const $fdcdb786b411a3eb$var$parse = async (data)=>{
    if ($fdcdb786b411a3eb$require$failure(data.errorCode)) {
        if (data.errorCode === $fdcdb786b411a3eb$var$MEMBER_ID_REQUIRED_ERROR_CODE) throw new $fdcdb786b411a3eb$require$KafkaJSMemberIdRequired($fdcdb786b411a3eb$require$createErrorFromCode(data.errorCode), {
            memberId: data.memberId
        });
        throw $fdcdb786b411a3eb$require$createErrorFromCode(data.errorCode);
    }
    return data;
};
module.exports = {
    decode: $fdcdb786b411a3eb$require$decode,
    parse: $fdcdb786b411a3eb$var$parse
};

});

parcelRegister("4QMGP", function(module, exports) {

var $3881c982cf3e24e1$require$Buffer = $4UN2M$buffer.Buffer;

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $3881c982cf3e24e1$require$apiKey = $9kH2s.JoinGroup;
/**
 * Version 5 adds group_instance_id to identify members across restarts.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-345%3A+Introduce+static+membership+protocol+to+reduce+consumer+rebalances
 *
 * JoinGroup Request (Version: 5) => group_id session_timeout rebalance_timeout member_id group_instance_id protocol_type [group_protocols]
 *   group_id => STRING
 *   session_timeout => INT32
 *   rebalance_timeout => INT32
 *   member_id => STRING
 *   group_instance_id => NULLABLE_STRING
 *   protocol_type => STRING
 *   group_protocols => protocol_name protocol_metadata
 *     protocol_name => STRING
 *     protocol_metadata => BYTES
 */ module.exports = ({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId, groupInstanceId: groupInstanceId = null, protocolType: protocolType, groupProtocols: groupProtocols })=>({
        apiKey: $3881c982cf3e24e1$require$apiKey,
        apiVersion: 5,
        apiName: "JoinGroup",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(sessionTimeout).writeInt32(rebalanceTimeout).writeString(memberId).writeString(groupInstanceId).writeString(protocolType).writeArray(groupProtocols.map($3881c982cf3e24e1$var$encodeGroupProtocols));
        }
    });
const $3881c982cf3e24e1$var$encodeGroupProtocols = ({ name: name, metadata: metadata = $3881c982cf3e24e1$require$Buffer.alloc(0) })=>{
    return new $7jO81().writeString(name).writeBytes(metadata);
};

});

parcelRegister("8rfuy", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $8mQRr = parcelRequire("8mQRr");
var $624cdcac1e87b0fa$require$KafkaJSMemberIdRequired = $8mQRr.KafkaJSMemberIdRequired;

var $iL9Wd = parcelRequire("iL9Wd");
var $624cdcac1e87b0fa$require$failure = $iL9Wd.failure;
var $624cdcac1e87b0fa$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $624cdcac1e87b0fa$require$errorCodes = $iL9Wd.errorCodes;
var $624cdcac1e87b0fa$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * JoinGroup Response (Version: 5) => throttle_time_ms error_code generation_id group_protocol leader_id member_id [members]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   generation_id => INT32
 *   group_protocol => STRING
 *   leader_id => STRING
 *   member_id => STRING
 *   members => member_id group_instance_id metadata
 *     member_id => STRING
 *     group_instance_id => NULLABLE_STRING
 *     member_metadata => BYTES
 */ const { code: $624cdcac1e87b0fa$var$MEMBER_ID_REQUIRED_ERROR_CODE } = $624cdcac1e87b0fa$require$errorCodes.find((e)=>e.type === "MEMBER_ID_REQUIRED");
const $624cdcac1e87b0fa$var$parse = async (data)=>{
    if ($624cdcac1e87b0fa$require$failure(data.errorCode)) {
        if (data.errorCode === $624cdcac1e87b0fa$var$MEMBER_ID_REQUIRED_ERROR_CODE) throw new $624cdcac1e87b0fa$require$KafkaJSMemberIdRequired($624cdcac1e87b0fa$require$createErrorFromCode(data.errorCode), {
            memberId: data.memberId
        });
        throw $624cdcac1e87b0fa$require$createErrorFromCode(data.errorCode);
    }
    return data;
};
const $624cdcac1e87b0fa$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $624cdcac1e87b0fa$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: 0,
        clientSideThrottleTime: throttleTime,
        errorCode: errorCode,
        generationId: decoder.readInt32(),
        groupProtocol: decoder.readString(),
        leaderId: decoder.readString(),
        memberId: decoder.readString(),
        members: decoder.readArray((decoder)=>({
                memberId: decoder.readString(),
                groupInstanceId: decoder.readString(),
                memberMetadata: decoder.readBytes()
            }))
    };
};
module.exports = {
    decode: $624cdcac1e87b0fa$var$decode,
    parse: $624cdcac1e87b0fa$var$parse
};

});


parcelRegister("1pRmM", function(module, exports) {








const $108185b0ea368de5$var$versions = {
    0: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId })=>{
        const request = (parcelRequire("kDFUZ"));
        const response = (parcelRequire("jw7NH"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId
            }),
            response: response
        };
    },
    1: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId })=>{
        const request = (parcelRequire("aaJ2p"));
        const response = (parcelRequire("hxRMn"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId
            }),
            response: response
        };
    },
    2: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId })=>{
        const request = (parcelRequire("4zN8I"));
        const response = (parcelRequire("11ySm"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId
            }),
            response: response
        };
    },
    3: ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, groupInstanceId: groupInstanceId })=>{
        const request = (parcelRequire("aeMrp"));
        const response = (parcelRequire("kwbVi"));
        return {
            request: request({
                groupId: groupId,
                groupGenerationId: groupGenerationId,
                memberId: memberId,
                groupInstanceId: groupInstanceId
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($108185b0ea368de5$var$versions),
    protocol: ({ version: version })=>$108185b0ea368de5$var$versions[version]
};

});
parcelRegister("kDFUZ", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $f067f74066c5729b$require$apiKey = $9kH2s.Heartbeat;
/**
 * Heartbeat Request (Version: 0) => group_id group_generation_id member_id
 *   group_id => STRING
 *   group_generation_id => INT32
 *   member_id => STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId })=>({
        apiKey: $f067f74066c5729b$require$apiKey,
        apiVersion: 0,
        apiName: "Heartbeat",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(groupGenerationId).writeString(memberId);
        }
    });

});

parcelRegister("jw7NH", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $e3570e881e2a3e7a$require$failure = $iL9Wd.failure;
var $e3570e881e2a3e7a$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $e3570e881e2a3e7a$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * Heartbeat Response (Version: 0) => error_code
 *   error_code => INT16
 */ const $e3570e881e2a3e7a$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $e3570e881e2a3e7a$require$failIfVersionNotSupported(errorCode);
    return {
        errorCode: errorCode
    };
};
const $e3570e881e2a3e7a$var$parse = async (data)=>{
    if ($e3570e881e2a3e7a$require$failure(data.errorCode)) throw $e3570e881e2a3e7a$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $e3570e881e2a3e7a$var$decode,
    parse: $e3570e881e2a3e7a$var$parse
};

});

parcelRegister("aaJ2p", function(module, exports) {

var $kDFUZ = parcelRequire("kDFUZ");
/**
 * Heartbeat Request (Version: 1) => group_id generation_id member_id
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId })=>Object.assign($kDFUZ({
        groupId: groupId,
        groupGenerationId: groupGenerationId,
        memberId: memberId
    }), {
        apiVersion: 1
    });

});

parcelRegister("hxRMn", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $cc5f3c2f51a74894$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;

var $jw7NH = parcelRequire("jw7NH");
var $cc5f3c2f51a74894$require$parseV0 = $jw7NH.parse;
/**
 * Heartbeat Response (Version: 1) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $cc5f3c2f51a74894$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $cc5f3c2f51a74894$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode
    };
};
module.exports = {
    decode: $cc5f3c2f51a74894$var$decode,
    parse: $cc5f3c2f51a74894$require$parseV0
};

});

parcelRegister("4zN8I", function(module, exports) {

var $aaJ2p = parcelRequire("aaJ2p");
/**
 * Heartbeat Request (Version: 2) => group_id generation_id member_id
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId })=>Object.assign($aaJ2p({
        groupId: groupId,
        groupGenerationId: groupGenerationId,
        memberId: memberId
    }), {
        apiVersion: 2
    });

});

parcelRegister("11ySm", function(module, exports) {

var $hxRMn = parcelRequire("hxRMn");
var $0bf0f00631386b31$require$parse = $hxRMn.parse;
var $0bf0f00631386b31$require$decodeV1 = $hxRMn.decode;
/**
 * In version 2 on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * Heartbeat Response (Version: 2) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $0bf0f00631386b31$var$decode = async (rawData)=>{
    const decoded = await $0bf0f00631386b31$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $0bf0f00631386b31$var$decode,
    parse: $0bf0f00631386b31$require$parse
};

});

parcelRegister("aeMrp", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $7740c98f293a3166$require$apiKey = $9kH2s.Heartbeat;
/**
 * Version 3 adds group_instance_id to indicate member identity across restarts.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-345%3A+Introduce+static+membership+protocol+to+reduce+consumer+rebalances
 *
 * Heartbeat Request (Version: 3) => group_id generation_id member_id group_instance_id
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   group_instance_id => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, groupInstanceId: groupInstanceId })=>({
        apiKey: $7740c98f293a3166$require$apiKey,
        apiVersion: 3,
        apiName: "Heartbeat",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(groupGenerationId).writeString(memberId).writeString(groupInstanceId);
        }
    });

});

parcelRegister("kwbVi", function(module, exports) {

var $11ySm = parcelRequire("11ySm");
var $ef000b8023f6ca44$require$parse = $11ySm.parse;
var $ef000b8023f6ca44$require$decode = $11ySm.decode;
/**
 * Heartbeat Response (Version: 3) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ module.exports = {
    decode: $ef000b8023f6ca44$require$decode,
    parse: $ef000b8023f6ca44$require$parse
};

});


parcelRegister("5B5Nk", function(module, exports) {








const $4134e7201f0b2d09$var$versions = {
    0: ({ groupId: groupId, memberId: memberId })=>{
        const request = (parcelRequire("6UXzF"));
        const response = (parcelRequire("iEmvb"));
        return {
            request: request({
                groupId: groupId,
                memberId: memberId
            }),
            response: response
        };
    },
    1: ({ groupId: groupId, memberId: memberId })=>{
        const request = (parcelRequire("930Ba"));
        const response = (parcelRequire("g4X0c"));
        return {
            request: request({
                groupId: groupId,
                memberId: memberId
            }),
            response: response
        };
    },
    2: ({ groupId: groupId, memberId: memberId })=>{
        const request = (parcelRequire("8bfPe"));
        const response = (parcelRequire("96GRZ"));
        return {
            request: request({
                groupId: groupId,
                memberId: memberId
            }),
            response: response
        };
    },
    3: ({ groupId: groupId, memberId: memberId, groupInstanceId: groupInstanceId })=>{
        const request = (parcelRequire("2aJO8"));
        const response = (parcelRequire("3CQdN"));
        return {
            request: request({
                groupId: groupId,
                members: [
                    {
                        memberId: memberId,
                        groupInstanceId: groupInstanceId
                    }
                ]
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($4134e7201f0b2d09$var$versions),
    protocol: ({ version: version })=>$4134e7201f0b2d09$var$versions[version]
};

});
parcelRegister("6UXzF", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $50962f4013c52dc2$require$apiKey = $9kH2s.LeaveGroup;
/**
 * LeaveGroup Request (Version: 0) => group_id member_id
 *   group_id => STRING
 *   member_id => STRING
 */ module.exports = ({ groupId: groupId, memberId: memberId })=>({
        apiKey: $50962f4013c52dc2$require$apiKey,
        apiVersion: 0,
        apiName: "LeaveGroup",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeString(memberId);
        }
    });

});

parcelRegister("iEmvb", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $d93d6ad599bee7ee$require$failure = $iL9Wd.failure;
var $d93d6ad599bee7ee$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $d93d6ad599bee7ee$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * LeaveGroup Response (Version: 0) => error_code
 *   error_code => INT16
 */ const $d93d6ad599bee7ee$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $d93d6ad599bee7ee$require$failIfVersionNotSupported(errorCode);
    return {
        errorCode: errorCode
    };
};
const $d93d6ad599bee7ee$var$parse = async (data)=>{
    if ($d93d6ad599bee7ee$require$failure(data.errorCode)) throw $d93d6ad599bee7ee$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $d93d6ad599bee7ee$var$decode,
    parse: $d93d6ad599bee7ee$var$parse
};

});

parcelRegister("930Ba", function(module, exports) {

var $6UXzF = parcelRequire("6UXzF");
/**
 * LeaveGroup Request (Version: 1) => group_id member_id
 *   group_id => STRING
 *   member_id => STRING
 */ module.exports = ({ groupId: groupId, memberId: memberId })=>Object.assign($6UXzF({
        groupId: groupId,
        memberId: memberId
    }), {
        apiVersion: 1
    });

});

parcelRegister("g4X0c", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $bb4ac9adb882cb79$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;

var $iEmvb = parcelRequire("iEmvb");
var $bb4ac9adb882cb79$require$parseV0 = $iEmvb.parse;
/**
 * LeaveGroup Response (Version: 1) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $bb4ac9adb882cb79$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $bb4ac9adb882cb79$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode
    };
};
module.exports = {
    decode: $bb4ac9adb882cb79$var$decode,
    parse: $bb4ac9adb882cb79$require$parseV0
};

});

parcelRegister("8bfPe", function(module, exports) {

var $930Ba = parcelRequire("930Ba");
/**
 * LeaveGroup Request (Version: 2) => group_id member_id
 *   group_id => STRING
 *   member_id => STRING
 */ module.exports = ({ groupId: groupId, memberId: memberId })=>Object.assign($930Ba({
        groupId: groupId,
        memberId: memberId
    }), {
        apiVersion: 2
    });

});

parcelRegister("96GRZ", function(module, exports) {

var $g4X0c = parcelRequire("g4X0c");
var $6a15ed9ff30ff6a3$require$parse = $g4X0c.parse;
var $6a15ed9ff30ff6a3$require$decodeV1 = $g4X0c.decode;
/**
 * In version 2 on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * LeaveGroup Response (Version: 2) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $6a15ed9ff30ff6a3$var$decode = async (rawData)=>{
    const decoded = await $6a15ed9ff30ff6a3$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $6a15ed9ff30ff6a3$var$decode,
    parse: $6a15ed9ff30ff6a3$require$parse
};

});

parcelRegister("2aJO8", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $19500c5bedf11424$require$apiKey = $9kH2s.LeaveGroup;
/**
 * Version 3 changes leavegroup to operate on a batch of members
 * and adds group_instance_id to identify members across restarts.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-345%3A+Introduce+static+membership+protocol+to+reduce+consumer+rebalances
 *
 * LeaveGroup Request (Version: 3) => group_id [members]
 *   group_id => STRING
 *   members => member_id group_instance_id
 *     member_id => STRING
 *     group_instance_id => NULLABLE_STRING
 */ module.exports = ({ groupId: groupId, members: members })=>({
        apiKey: $19500c5bedf11424$require$apiKey,
        apiVersion: 3,
        apiName: "LeaveGroup",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeArray(members.map((member)=>$19500c5bedf11424$var$encodeMember(member)));
        }
    });
const $19500c5bedf11424$var$encodeMember = ({ memberId: memberId, groupInstanceId: groupInstanceId = null })=>{
    return new $7jO81().writeString(memberId).writeString(groupInstanceId);
};

});

parcelRegister("3CQdN", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $2a3d6dcb653010dc$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
var $2a3d6dcb653010dc$require$failure = $iL9Wd.failure;
var $2a3d6dcb653010dc$require$createErrorFromCode = $iL9Wd.createErrorFromCode;

var $96GRZ = parcelRequire("96GRZ");
var $2a3d6dcb653010dc$require$parseV2 = $96GRZ.parse;
/**
 * LeaveGroup Response (Version: 3) => throttle_time_ms error_code [members]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   members => member_id group_instance_id error_code
 *     member_id => STRING
 *     group_instance_id => NULLABLE_STRING
 *     error_code => INT16
 */ const $2a3d6dcb653010dc$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    const members = decoder.readArray($2a3d6dcb653010dc$var$decodeMembers);
    $2a3d6dcb653010dc$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: 0,
        clientSideThrottleTime: throttleTime,
        errorCode: errorCode,
        members: members
    };
};
const $2a3d6dcb653010dc$var$decodeMembers = (decoder)=>({
        memberId: decoder.readString(),
        groupInstanceId: decoder.readString(),
        errorCode: decoder.readInt16()
    });
const $2a3d6dcb653010dc$var$parse = async (data)=>{
    const parsed = $2a3d6dcb653010dc$require$parseV2(data);
    const memberWithError = data.members.find((member)=>$2a3d6dcb653010dc$require$failure(member.errorCode));
    if (memberWithError) throw $2a3d6dcb653010dc$require$createErrorFromCode(memberWithError.errorCode);
    return parsed;
};
module.exports = {
    decode: $2a3d6dcb653010dc$var$decode,
    parse: $2a3d6dcb653010dc$var$parse
};

});


parcelRegister("cYLQe", function(module, exports) {








const $973032f3c6ad175b$var$versions = {
    0: ({ groupId: groupId, generationId: generationId, memberId: memberId, groupAssignment: groupAssignment })=>{
        const request = (parcelRequire("lRRwW"));
        const response = (parcelRequire("fUzqw"));
        return {
            request: request({
                groupId: groupId,
                generationId: generationId,
                memberId: memberId,
                groupAssignment: groupAssignment
            }),
            response: response
        };
    },
    1: ({ groupId: groupId, generationId: generationId, memberId: memberId, groupAssignment: groupAssignment })=>{
        const request = (parcelRequire("flZGG"));
        const response = (parcelRequire("dMxLK"));
        return {
            request: request({
                groupId: groupId,
                generationId: generationId,
                memberId: memberId,
                groupAssignment: groupAssignment
            }),
            response: response
        };
    },
    2: ({ groupId: groupId, generationId: generationId, memberId: memberId, groupAssignment: groupAssignment })=>{
        const request = (parcelRequire("lcH5t"));
        const response = (parcelRequire("1kxCo"));
        return {
            request: request({
                groupId: groupId,
                generationId: generationId,
                memberId: memberId,
                groupAssignment: groupAssignment
            }),
            response: response
        };
    },
    3: ({ groupId: groupId, generationId: generationId, memberId: memberId, groupInstanceId: groupInstanceId, groupAssignment: groupAssignment })=>{
        const request = (parcelRequire("f7pHj"));
        const response = (parcelRequire("8ibh4"));
        return {
            request: request({
                groupId: groupId,
                generationId: generationId,
                memberId: memberId,
                groupInstanceId: groupInstanceId,
                groupAssignment: groupAssignment
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($973032f3c6ad175b$var$versions),
    protocol: ({ version: version })=>$973032f3c6ad175b$var$versions[version]
};

});
parcelRegister("lRRwW", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $feb81232c2792eac$require$apiKey = $9kH2s.SyncGroup;
/**
 * SyncGroup Request (Version: 0) => group_id generation_id member_id [group_assignment]
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   group_assignment => member_id member_assignment
 *     member_id => STRING
 *     member_assignment => BYTES
 */ module.exports = ({ groupId: groupId, generationId: generationId, memberId: memberId, groupAssignment: groupAssignment })=>({
        apiKey: $feb81232c2792eac$require$apiKey,
        apiVersion: 0,
        apiName: "SyncGroup",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(generationId).writeString(memberId).writeArray(groupAssignment.map($feb81232c2792eac$var$encodeGroupAssignment));
        }
    });
const $feb81232c2792eac$var$encodeGroupAssignment = ({ memberId: memberId, memberAssignment: memberAssignment })=>{
    return new $7jO81().writeString(memberId).writeBytes(memberAssignment);
};

});

parcelRegister("fUzqw", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $b95790fbd85d2d4e$require$failure = $iL9Wd.failure;
var $b95790fbd85d2d4e$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $b95790fbd85d2d4e$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * SyncGroup Response (Version: 0) => error_code member_assignment
 *   error_code => INT16
 *   member_assignment => BYTES
 */ const $b95790fbd85d2d4e$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $b95790fbd85d2d4e$require$failIfVersionNotSupported(errorCode);
    return {
        errorCode: errorCode,
        memberAssignment: decoder.readBytes()
    };
};
const $b95790fbd85d2d4e$var$parse = async (data)=>{
    if ($b95790fbd85d2d4e$require$failure(data.errorCode)) throw $b95790fbd85d2d4e$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $b95790fbd85d2d4e$var$decode,
    parse: $b95790fbd85d2d4e$var$parse
};

});

parcelRegister("flZGG", function(module, exports) {

var $lRRwW = parcelRequire("lRRwW");
/**
 * SyncGroup Request (Version: 1) => group_id generation_id member_id [group_assignment]
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   group_assignment => member_id member_assignment
 *     member_id => STRING
 *     member_assignment => BYTES
 */ module.exports = ({ groupId: groupId, generationId: generationId, memberId: memberId, groupAssignment: groupAssignment })=>Object.assign($lRRwW({
        groupId: groupId,
        generationId: generationId,
        memberId: memberId,
        groupAssignment: groupAssignment
    }), {
        apiVersion: 1
    });

});

parcelRegister("dMxLK", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $a089f3e78a681539$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;

var $fUzqw = parcelRequire("fUzqw");
var $a089f3e78a681539$require$parseV0 = $fUzqw.parse;
/**
 * SyncGroup Response (Version: 1) => throttle_time_ms error_code member_assignment
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   member_assignment => BYTES
 */ const $a089f3e78a681539$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $a089f3e78a681539$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        memberAssignment: decoder.readBytes()
    };
};
module.exports = {
    decode: $a089f3e78a681539$var$decode,
    parse: $a089f3e78a681539$require$parseV0
};

});

parcelRegister("lcH5t", function(module, exports) {

var $flZGG = parcelRequire("flZGG");
/**
 * SyncGroup Request (Version: 2) => group_id generation_id member_id [group_assignment]
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   group_assignment => member_id member_assignment
 *     member_id => STRING
 *     member_assignment => BYTES
 */ module.exports = ({ groupId: groupId, generationId: generationId, memberId: memberId, groupAssignment: groupAssignment })=>Object.assign($flZGG({
        groupId: groupId,
        generationId: generationId,
        memberId: memberId,
        groupAssignment: groupAssignment
    }), {
        apiVersion: 2
    });

});

parcelRegister("1kxCo", function(module, exports) {

var $dMxLK = parcelRequire("dMxLK");
var $0f81bc9257afdb2f$require$parse = $dMxLK.parse;
var $0f81bc9257afdb2f$require$decodeV1 = $dMxLK.decode;
/**
 * In version 2, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * SyncGroup Response (Version: 2) => throttle_time_ms error_code member_assignment
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   member_assignment => BYTES
 */ const $0f81bc9257afdb2f$var$decode = async (rawData)=>{
    const decoded = await $0f81bc9257afdb2f$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $0f81bc9257afdb2f$var$decode,
    parse: $0f81bc9257afdb2f$require$parse
};

});

parcelRegister("f7pHj", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $b01b71745c807f39$require$apiKey = $9kH2s.SyncGroup;
/**
 * Version 3 adds group_instance_id to indicate member identity across restarts.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-345%3A+Introduce+static+membership+protocol+to+reduce+consumer+rebalances
 *
 * SyncGroup Request (Version: 3) => group_id generation_id member_id group_instance_id [group_assignment]
 *   group_id => STRING
 *   generation_id => INT32
 *   member_id => STRING
 *   group_instance_id => NULLABLE_STRING
 *   group_assignment => member_id member_assignment
 *     member_id => STRING
 *     member_assignment => BYTES
 */ module.exports = ({ groupId: groupId, generationId: generationId, memberId: memberId, groupInstanceId: groupInstanceId = null, groupAssignment: groupAssignment })=>({
        apiKey: $b01b71745c807f39$require$apiKey,
        apiVersion: 3,
        apiName: "SyncGroup",
        encode: async ()=>{
            return new $7jO81().writeString(groupId).writeInt32(generationId).writeString(memberId).writeString(groupInstanceId).writeArray(groupAssignment.map($b01b71745c807f39$var$encodeGroupAssignment));
        }
    });
const $b01b71745c807f39$var$encodeGroupAssignment = ({ memberId: memberId, memberAssignment: memberAssignment })=>{
    return new $7jO81().writeString(memberId).writeBytes(memberAssignment);
};

});

parcelRegister("8ibh4", function(module, exports) {

var $1kxCo = parcelRequire("1kxCo");
var $6098c002dec1b284$require$decode = $1kxCo.decode;
var $6098c002dec1b284$require$parse = $1kxCo.parse;
/**
 * SyncGroup Response (Version: 2) => throttle_time_ms error_code member_assignment
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   member_assignment => BYTES
 */ module.exports = {
    decode: $6098c002dec1b284$require$decode,
    parse: $6098c002dec1b284$require$parse
};

});


parcelRegister("88zqj", function(module, exports) {






const $5eca8c73a1898553$var$versions = {
    0: ({ groupIds: groupIds })=>{
        const request = (parcelRequire("8kjF8"));
        const response = (parcelRequire("gL7pa"));
        return {
            request: request({
                groupIds: groupIds
            }),
            response: response
        };
    },
    1: ({ groupIds: groupIds })=>{
        const request = (parcelRequire("e3VOH"));
        const response = (parcelRequire("hvk8X"));
        return {
            request: request({
                groupIds: groupIds
            }),
            response: response
        };
    },
    2: ({ groupIds: groupIds })=>{
        const request = (parcelRequire("lPNpJ"));
        const response = (parcelRequire("je7tA"));
        return {
            request: request({
                groupIds: groupIds
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($5eca8c73a1898553$var$versions),
    protocol: ({ version: version })=>$5eca8c73a1898553$var$versions[version]
};

});
parcelRegister("8kjF8", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $60ff718dd435c9ce$require$apiKey = $9kH2s.DescribeGroups;
/**
 * DescribeGroups Request (Version: 0) => [group_ids]
 *   group_ids => STRING
 */ /**
 * @param {Array} groupIds List of groupIds to request metadata for (an empty groupId array will return empty group metadata)
 */ module.exports = ({ groupIds: groupIds })=>({
        apiKey: $60ff718dd435c9ce$require$apiKey,
        apiVersion: 0,
        apiName: "DescribeGroups",
        encode: async ()=>{
            return new $7jO81().writeArray(groupIds);
        }
    });

});

parcelRegister("gL7pa", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $c336c798385e1c82$require$failure = $iL9Wd.failure;
var $c336c798385e1c82$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * DescribeGroups Response (Version: 0) => [groups]
 *   groups => error_code group_id state protocol_type protocol [members]
 *     error_code => INT16
 *     group_id => STRING
 *     state => STRING
 *     protocol_type => STRING
 *     protocol => STRING
 *     members => member_id client_id client_host member_metadata member_assignment
 *       member_id => STRING
 *       client_id => STRING
 *       client_host => STRING
 *       member_metadata => BYTES
 *       member_assignment => BYTES
 */ const $c336c798385e1c82$var$decoderMember = (decoder)=>({
        memberId: decoder.readString(),
        clientId: decoder.readString(),
        clientHost: decoder.readString(),
        memberMetadata: decoder.readBytes(),
        memberAssignment: decoder.readBytes()
    });
const $c336c798385e1c82$var$decodeGroup = (decoder)=>({
        errorCode: decoder.readInt16(),
        groupId: decoder.readString(),
        state: decoder.readString(),
        protocolType: decoder.readString(),
        protocol: decoder.readString(),
        members: decoder.readArray($c336c798385e1c82$var$decoderMember)
    });
const $c336c798385e1c82$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const groups = decoder.readArray($c336c798385e1c82$var$decodeGroup);
    return {
        groups: groups
    };
};
const $c336c798385e1c82$var$parse = async (data)=>{
    const groupsWithError = data.groups.filter(({ errorCode: errorCode })=>$c336c798385e1c82$require$failure(errorCode));
    if (groupsWithError.length > 0) throw $c336c798385e1c82$require$createErrorFromCode(groupsWithError[0].errorCode);
    return data;
};
module.exports = {
    decode: $c336c798385e1c82$var$decode,
    parse: $c336c798385e1c82$var$parse
};

});

parcelRegister("e3VOH", function(module, exports) {

var $8kjF8 = parcelRequire("8kjF8");
/**
 * DescribeGroups Request (Version: 1) => [group_ids]
 *   group_ids => STRING
 */ module.exports = ({ groupIds: groupIds })=>Object.assign($8kjF8({
        groupIds: groupIds
    }), {
        apiVersion: 1
    });

});

parcelRegister("hvk8X", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $gL7pa = parcelRequire("gL7pa");
var $cbe4f4fb3fb7bd71$require$parseV0 = $gL7pa.parse;
/**
 * DescribeGroups Response (Version: 1) => throttle_time_ms [groups]
 *   throttle_time_ms => INT32
 *   groups => error_code group_id state protocol_type protocol [members]
 *     error_code => INT16
 *     group_id => STRING
 *     state => STRING
 *     protocol_type => STRING
 *     protocol => STRING
 *     members => member_id client_id client_host member_metadata member_assignment
 *       member_id => STRING
 *       client_id => STRING
 *       client_host => STRING
 *       member_metadata => BYTES
 *       member_assignment => BYTES
 */ const $cbe4f4fb3fb7bd71$var$decoderMember = (decoder)=>({
        memberId: decoder.readString(),
        clientId: decoder.readString(),
        clientHost: decoder.readString(),
        memberMetadata: decoder.readBytes(),
        memberAssignment: decoder.readBytes()
    });
const $cbe4f4fb3fb7bd71$var$decodeGroup = (decoder)=>({
        errorCode: decoder.readInt16(),
        groupId: decoder.readString(),
        state: decoder.readString(),
        protocolType: decoder.readString(),
        protocol: decoder.readString(),
        members: decoder.readArray($cbe4f4fb3fb7bd71$var$decoderMember)
    });
const $cbe4f4fb3fb7bd71$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const groups = decoder.readArray($cbe4f4fb3fb7bd71$var$decodeGroup);
    return {
        throttleTime: throttleTime,
        groups: groups
    };
};
module.exports = {
    decode: $cbe4f4fb3fb7bd71$var$decode,
    parse: $cbe4f4fb3fb7bd71$require$parseV0
};

});

parcelRegister("lPNpJ", function(module, exports) {

var $e3VOH = parcelRequire("e3VOH");
/**
 * DescribeGroups Request (Version: 2) => [group_ids]
 *   group_ids => STRING
 */ module.exports = ({ groupIds: groupIds })=>Object.assign($e3VOH({
        groupIds: groupIds
    }), {
        apiVersion: 2
    });

});

parcelRegister("je7tA", function(module, exports) {

var $hvk8X = parcelRequire("hvk8X");
var $dff51fbd3f49d568$require$parse = $hvk8X.parse;
var $dff51fbd3f49d568$require$decodeV1 = $hvk8X.decode;
/**
 * Starting in version 2, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * DescribeGroups Response (Version: 2) => throttle_time_ms [groups]
 *   throttle_time_ms => INT32
 *   groups => error_code group_id state protocol_type protocol [members]
 *     error_code => INT16
 *     group_id => STRING
 *     state => STRING
 *     protocol_type => STRING
 *     protocol => STRING
 *     members => member_id client_id client_host member_metadata member_assignment
 *       member_id => STRING
 *       client_id => STRING
 *       client_host => STRING
 *       member_metadata => BYTES
 *       member_assignment => BYTES
 */ const $dff51fbd3f49d568$var$decode = async (rawData)=>{
    const decoded = await $dff51fbd3f49d568$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $dff51fbd3f49d568$var$decode,
    parse: $dff51fbd3f49d568$require$parse
};

});


parcelRegister("aYo9d", function(module, exports) {






const $7fd23d3678273937$var$versions = {
    0: ()=>{
        const request = (parcelRequire("4atk6"));
        const response = (parcelRequire("2pfMX"));
        return {
            request: request(),
            response: response
        };
    },
    1: ()=>{
        const request = (parcelRequire("c2Vfy"));
        const response = (parcelRequire("1AMY5"));
        return {
            request: request(),
            response: response
        };
    },
    2: ()=>{
        const request = (parcelRequire("3geq8"));
        const response = (parcelRequire("cE499"));
        return {
            request: request(),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($7fd23d3678273937$var$versions),
    protocol: ({ version: version })=>$7fd23d3678273937$var$versions[version]
};

});
parcelRegister("4atk6", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $308ed7986ae5bf19$require$apiKey = $9kH2s.ListGroups;
/**
 * ListGroups Request (Version: 0)
 */ /**
 */ module.exports = ()=>({
        apiKey: $308ed7986ae5bf19$require$apiKey,
        apiVersion: 0,
        apiName: "ListGroups",
        encode: async ()=>{
            return new $7jO81();
        }
    });

});

parcelRegister("2pfMX", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $1c0a29dc3a7a04d1$require$failure = $iL9Wd.failure;
var $1c0a29dc3a7a04d1$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * ListGroups Response (Version: 0) => error_code [groups]
 *   error_code => INT16
 *   groups => group_id protocol_type
 *     group_id => STRING
 *     protocol_type => STRING
 */ const $1c0a29dc3a7a04d1$var$decodeGroup = (decoder)=>({
        groupId: decoder.readString(),
        protocolType: decoder.readString()
    });
const $1c0a29dc3a7a04d1$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    const groups = decoder.readArray($1c0a29dc3a7a04d1$var$decodeGroup);
    return {
        errorCode: errorCode,
        groups: groups
    };
};
const $1c0a29dc3a7a04d1$var$parse = async (data)=>{
    if ($1c0a29dc3a7a04d1$require$failure(data.errorCode)) throw $1c0a29dc3a7a04d1$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decodeGroup: $1c0a29dc3a7a04d1$var$decodeGroup,
    decode: $1c0a29dc3a7a04d1$var$decode,
    parse: $1c0a29dc3a7a04d1$var$parse
};

});

parcelRegister("c2Vfy", function(module, exports) {

var $4atk6 = parcelRequire("4atk6");
/**
 * ListGroups Request (Version: 1)
 */ module.exports = ()=>Object.assign($4atk6(), {
        apiVersion: 1
    });

});

parcelRegister("1AMY5", function(module, exports) {

var $2pfMX = parcelRequire("2pfMX");

var $eMnPM = parcelRequire("eMnPM");
/**
 * ListGroups Response (Version: 1) => error_code [groups]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   groups => group_id protocol_type
 *     group_id => STRING
 *     protocol_type => STRING
 */ const $128f234cc74a3ca6$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    const groups = decoder.readArray($2pfMX.decodeGroup);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        groups: groups
    };
};
module.exports = {
    decode: $128f234cc74a3ca6$var$decode,
    parse: $2pfMX.parse
};

});

parcelRegister("3geq8", function(module, exports) {

var $c2Vfy = parcelRequire("c2Vfy");
/**
 * ListGroups Request (Version: 2)
 */ module.exports = ()=>Object.assign($c2Vfy(), {
        apiVersion: 2
    });

});

parcelRegister("cE499", function(module, exports) {

var $1AMY5 = parcelRequire("1AMY5");
var $934c6fe845e61c5b$require$parse = $1AMY5.parse;
var $934c6fe845e61c5b$require$decodeV1 = $1AMY5.decode;
/**
 * In version 2 on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * ListGroups Response (Version: 2) => error_code [groups]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   groups => group_id protocol_type
 *     group_id => STRING
 *     protocol_type => STRING
 */ const $934c6fe845e61c5b$var$decode = async (rawData)=>{
    const decoded = await $934c6fe845e61c5b$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $934c6fe845e61c5b$var$decode,
    parse: $934c6fe845e61c5b$require$parse
};

});


parcelRegister("c2qJY", function(module, exports) {




const $8c3a6a118a43a80c$var$versions = {
    0: ({ mechanism: mechanism })=>{
        const request = (parcelRequire("6pSo5"));
        const response = (parcelRequire("eNQjn"));
        return {
            request: request({
                mechanism: mechanism
            }),
            response: response
        };
    },
    1: ({ mechanism: mechanism })=>{
        const request = (parcelRequire("d8tNB"));
        const response = (parcelRequire("1FgXZ"));
        return {
            request: request({
                mechanism: mechanism
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($8c3a6a118a43a80c$var$versions),
    protocol: ({ version: version })=>$8c3a6a118a43a80c$var$versions[version]
};

});
parcelRegister("6pSo5", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $4abf441c3a6fa205$require$apiKey = $9kH2s.SaslHandshake;
/**
 * SaslHandshake Request (Version: 0) => mechanism
 *    mechanism => STRING
 */ /**
 * @param {string} mechanism - SASL Mechanism chosen by the client
 */ module.exports = ({ mechanism: mechanism })=>({
        apiKey: $4abf441c3a6fa205$require$apiKey,
        apiVersion: 0,
        apiName: "SaslHandshake",
        encode: async ()=>new $7jO81().writeString(mechanism)
    });

});

parcelRegister("eNQjn", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $ac6e3841cda4ae4e$require$failure = $iL9Wd.failure;
var $ac6e3841cda4ae4e$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $ac6e3841cda4ae4e$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * SaslHandshake Response (Version: 0) => error_code [enabled_mechanisms]
 *    error_code => INT16
 *    enabled_mechanisms => STRING
 */ const $ac6e3841cda4ae4e$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $ac6e3841cda4ae4e$require$failIfVersionNotSupported(errorCode);
    return {
        errorCode: errorCode,
        enabledMechanisms: decoder.readArray((decoder)=>decoder.readString())
    };
};
const $ac6e3841cda4ae4e$var$parse = async (data)=>{
    if ($ac6e3841cda4ae4e$require$failure(data.errorCode)) throw $ac6e3841cda4ae4e$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $ac6e3841cda4ae4e$var$decode,
    parse: $ac6e3841cda4ae4e$var$parse
};

});

parcelRegister("d8tNB", function(module, exports) {

var $6pSo5 = parcelRequire("6pSo5");
module.exports = ({ mechanism: mechanism })=>({
        ...$6pSo5({
            mechanism: mechanism
        }),
        apiVersion: 1
    });

});

parcelRegister("1FgXZ", function(module, exports) {

var $eNQjn = parcelRequire("eNQjn");
var $1366c801387d9385$require$decodeV0 = $eNQjn.decode;
var $1366c801387d9385$require$parseV0 = $eNQjn.parse;
module.exports = {
    decode: $1366c801387d9385$require$decodeV0,
    parse: $1366c801387d9385$require$parseV0
};

});


parcelRegister("de3lM", function(module, exports) {
const $9a0f2e797b85969e$var$logResponseError = false;






const $9a0f2e797b85969e$var$versions = {
    0: ()=>{
        const request = (parcelRequire("c3K8B"));
        const response = (parcelRequire("hTCwR"));
        return {
            request: request(),
            response: response,
            logResponseError: true
        };
    },
    1: ()=>{
        const request = (parcelRequire("hXsBG"));
        const response = (parcelRequire("aKbzP"));
        return {
            request: request(),
            response: response,
            logResponseError: $9a0f2e797b85969e$var$logResponseError
        };
    },
    2: ()=>{
        const request = (parcelRequire("7hvLE"));
        const response = (parcelRequire("aYyNK"));
        return {
            request: request(),
            response: response,
            logResponseError: $9a0f2e797b85969e$var$logResponseError
        };
    }
};
module.exports = {
    versions: Object.keys($9a0f2e797b85969e$var$versions),
    protocol: ({ version: version })=>$9a0f2e797b85969e$var$versions[version]
};

});
parcelRegister("c3K8B", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $8c798dd1fa4230c9$require$apiKey = $9kH2s.ApiVersions;
/**
 * ApiVersionRequest => ApiKeys
 */ module.exports = ()=>({
        apiKey: $8c798dd1fa4230c9$require$apiKey,
        apiVersion: 0,
        apiName: "ApiVersions",
        encode: async ()=>new $7jO81()
    });

});

parcelRegister("hTCwR", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $d07575c4f391b692$require$failure = $iL9Wd.failure;
var $d07575c4f391b692$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $d07575c4f391b692$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * ApiVersionResponse => ApiVersions
 *   ErrorCode = INT16
 *   ApiVersions = [ApiVersion]
 *     ApiVersion = ApiKey MinVersion MaxVersion
 *       ApiKey = INT16
 *       MinVersion = INT16
 *       MaxVersion = INT16
 */ const $d07575c4f391b692$var$apiVersion = (decoder)=>({
        apiKey: decoder.readInt16(),
        minVersion: decoder.readInt16(),
        maxVersion: decoder.readInt16()
    });
const $d07575c4f391b692$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $d07575c4f391b692$require$failIfVersionNotSupported(errorCode);
    return {
        errorCode: errorCode,
        apiVersions: decoder.readArray($d07575c4f391b692$var$apiVersion)
    };
};
const $d07575c4f391b692$var$parse = async (data)=>{
    if ($d07575c4f391b692$require$failure(data.errorCode)) throw $d07575c4f391b692$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $d07575c4f391b692$var$decode,
    parse: $d07575c4f391b692$var$parse
};

});

parcelRegister("hXsBG", function(module, exports) {

var $c3K8B = parcelRequire("c3K8B");
// ApiVersions Request after v1 indicates the client can parse throttle_time_ms
module.exports = ()=>({
        ...$c3K8B(),
        apiVersion: 1
    });

});

parcelRegister("aKbzP", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $7d272e34b9f83cf0$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;

var $hTCwR = parcelRequire("hTCwR");
var $7d272e34b9f83cf0$require$parseV0 = $hTCwR.parse;
/**
 * ApiVersions Response (Version: 1) => error_code [api_versions] throttle_time_ms
 *   error_code => INT16
 *   api_versions => api_key min_version max_version
 *     api_key => INT16
 *     min_version => INT16
 *     max_version => INT16
 *   throttle_time_ms => INT32
 */ const $7d272e34b9f83cf0$var$apiVersion = (decoder)=>({
        apiKey: decoder.readInt16(),
        minVersion: decoder.readInt16(),
        maxVersion: decoder.readInt16()
    });
const $7d272e34b9f83cf0$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $7d272e34b9f83cf0$require$failIfVersionNotSupported(errorCode);
    const apiVersions = decoder.readArray($7d272e34b9f83cf0$var$apiVersion);
    /**
   * The Java client defaults this value to 0 if not present,
   * even though it is required in the protocol. This is to
   * work around https://github.com/tulios/kafkajs/issues/491
   *
   * See:
   * https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/protocol/CommonFields.java#L23-L25
   */ const throttleTime = decoder.canReadInt32() ? decoder.readInt32() : 0;
    return {
        errorCode: errorCode,
        apiVersions: apiVersions,
        throttleTime: throttleTime
    };
};
module.exports = {
    decode: $7d272e34b9f83cf0$var$decode,
    parse: $7d272e34b9f83cf0$require$parseV0
};

});

parcelRegister("7hvLE", function(module, exports) {

var $c3K8B = parcelRequire("c3K8B");
// ApiVersions Request after v1 indicates the client can parse throttle_time_ms
module.exports = ()=>({
        ...$c3K8B(),
        apiVersion: 2
    });

});

parcelRegister("aYyNK", function(module, exports) {

var $aKbzP = parcelRequire("aKbzP");
var $7fda80d540fb354f$require$parse = $aKbzP.parse;
var $7fda80d540fb354f$require$decodeV1 = $aKbzP.decode;
/**
 * Starting in version 2, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * ApiVersions Response (Version: 2) => error_code [api_versions] throttle_time_ms
 *   error_code => INT16
 *   api_versions => api_key min_version max_version
 *     api_key => INT16
 *     min_version => INT16
 *     max_version => INT16
 *   throttle_time_ms => INT32
 */ const $7fda80d540fb354f$var$decode = async (rawData)=>{
    const decoded = await $7fda80d540fb354f$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $7fda80d540fb354f$var$decode,
    parse: $7fda80d540fb354f$require$parse
};

});


parcelRegister("eIbaS", function(module, exports) {








const $ab5dd7c20c93073d$var$versions = {
    0: ({ topics: topics, timeout: timeout })=>{
        const request = (parcelRequire("jcEWn"));
        const response = (parcelRequire("kec9X"));
        return {
            request: request({
                topics: topics,
                timeout: timeout
            }),
            response: response
        };
    },
    1: ({ topics: topics, validateOnly: validateOnly, timeout: timeout })=>{
        const request = (parcelRequire("03ert"));
        const response = (parcelRequire("6esE2"));
        return {
            request: request({
                topics: topics,
                validateOnly: validateOnly,
                timeout: timeout
            }),
            response: response
        };
    },
    2: ({ topics: topics, validateOnly: validateOnly, timeout: timeout })=>{
        const request = (parcelRequire("6fP47"));
        const response = (parcelRequire("9McEM"));
        return {
            request: request({
                topics: topics,
                validateOnly: validateOnly,
                timeout: timeout
            }),
            response: response
        };
    },
    3: ({ topics: topics, validateOnly: validateOnly, timeout: timeout })=>{
        const request = (parcelRequire("gn1Ru"));
        const response = (parcelRequire("feDv6"));
        return {
            request: request({
                topics: topics,
                validateOnly: validateOnly,
                timeout: timeout
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($ab5dd7c20c93073d$var$versions),
    protocol: ({ version: version })=>$ab5dd7c20c93073d$var$versions[version]
};

});
parcelRegister("jcEWn", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $dfaee5456431edda$require$apiKey = $9kH2s.CreateTopics;
/**
 * CreateTopics Request (Version: 0) => [create_topic_requests] timeout
 *   create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]
 *     topic => STRING
 *     num_partitions => INT32
 *     replication_factor => INT16
 *     replica_assignment => partition [replicas]
 *       partition => INT32
 *       replicas => INT32
 *     config_entries => config_name config_value
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *   timeout => INT32
 */ module.exports = ({ topics: topics, timeout: timeout = 5000 })=>({
        apiKey: $dfaee5456431edda$require$apiKey,
        apiVersion: 0,
        apiName: "CreateTopics",
        encode: async ()=>{
            return new $7jO81().writeArray(topics.map($dfaee5456431edda$var$encodeTopics)).writeInt32(timeout);
        }
    });
const $dfaee5456431edda$var$encodeTopics = ({ topic: topic, numPartitions: numPartitions = -1, replicationFactor: replicationFactor = -1, replicaAssignment: replicaAssignment = [], configEntries: configEntries = [] })=>{
    return new $7jO81().writeString(topic).writeInt32(numPartitions).writeInt16(replicationFactor).writeArray(replicaAssignment.map($dfaee5456431edda$var$encodeReplicaAssignment)).writeArray(configEntries.map($dfaee5456431edda$var$encodeConfigEntries));
};
const $dfaee5456431edda$var$encodeReplicaAssignment = ({ partition: partition, replicas: replicas })=>{
    return new $7jO81().writeInt32(partition).writeArray(replicas);
};
const $dfaee5456431edda$var$encodeConfigEntries = ({ name: name, value: value })=>{
    return new $7jO81().writeString(name).writeString(value);
};

});

parcelRegister("kec9X", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $eb9e8c1ab226c39d$require$failure = $iL9Wd.failure;
var $eb9e8c1ab226c39d$require$createErrorFromCode = $iL9Wd.createErrorFromCode;

var $8mQRr = parcelRequire("8mQRr");
var $eb9e8c1ab226c39d$require$KafkaJSAggregateError = $8mQRr.KafkaJSAggregateError;
var $eb9e8c1ab226c39d$require$KafkaJSCreateTopicError = $8mQRr.KafkaJSCreateTopicError;
/**
 * CreateTopics Response (Version: 0) => [topic_errors]
 *   topic_errors => topic error_code
 *     topic => STRING
 *     error_code => INT16
 */ const $eb9e8c1ab226c39d$var$topicNameComparator = (a, b)=>a.topic.localeCompare(b.topic);
const $eb9e8c1ab226c39d$var$topicErrors = (decoder)=>({
        topic: decoder.readString(),
        errorCode: decoder.readInt16()
    });
const $eb9e8c1ab226c39d$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        topicErrors: decoder.readArray($eb9e8c1ab226c39d$var$topicErrors).sort($eb9e8c1ab226c39d$var$topicNameComparator)
    };
};
const $eb9e8c1ab226c39d$var$parse = async (data)=>{
    const topicsWithError = data.topicErrors.filter(({ errorCode: errorCode })=>$eb9e8c1ab226c39d$require$failure(errorCode));
    if (topicsWithError.length > 0) throw new $eb9e8c1ab226c39d$require$KafkaJSAggregateError("Topic creation errors", topicsWithError.map((error)=>new $eb9e8c1ab226c39d$require$KafkaJSCreateTopicError($eb9e8c1ab226c39d$require$createErrorFromCode(error.errorCode), error.topic)));
    return data;
};
module.exports = {
    decode: $eb9e8c1ab226c39d$var$decode,
    parse: $eb9e8c1ab226c39d$var$parse
};

});

parcelRegister("03ert", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $009b7bd18020270b$require$apiKey = $9kH2s.CreateTopics;
/**
 *CreateTopics Request (Version: 1) => [create_topic_requests] timeout validate_only
 *  create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]
 *    topic => STRING
 *    num_partitions => INT32
 *    replication_factor => INT16
 *    replica_assignment => partition [replicas]
 *      partition => INT32
 *      replicas => INT32
 *    config_entries => config_name config_value
 *      config_name => STRING
 *      config_value => NULLABLE_STRING
 *  timeout => INT32
 *  validate_only => BOOLEAN
 */ module.exports = ({ topics: topics, validateOnly: validateOnly = false, timeout: timeout = 5000 })=>({
        apiKey: $009b7bd18020270b$require$apiKey,
        apiVersion: 1,
        apiName: "CreateTopics",
        encode: async ()=>{
            return new $7jO81().writeArray(topics.map($009b7bd18020270b$var$encodeTopics)).writeInt32(timeout).writeBoolean(validateOnly);
        }
    });
const $009b7bd18020270b$var$encodeTopics = ({ topic: topic, numPartitions: numPartitions = -1, replicationFactor: replicationFactor = -1, replicaAssignment: replicaAssignment = [], configEntries: configEntries = [] })=>{
    return new $7jO81().writeString(topic).writeInt32(numPartitions).writeInt16(replicationFactor).writeArray(replicaAssignment.map($009b7bd18020270b$var$encodeReplicaAssignment)).writeArray(configEntries.map($009b7bd18020270b$var$encodeConfigEntries));
};
const $009b7bd18020270b$var$encodeReplicaAssignment = ({ partition: partition, replicas: replicas })=>{
    return new $7jO81().writeInt32(partition).writeArray(replicas);
};
const $009b7bd18020270b$var$encodeConfigEntries = ({ name: name, value: value })=>{
    return new $7jO81().writeString(name).writeString(value);
};

});

parcelRegister("6esE2", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $kec9X = parcelRequire("kec9X");
var $489a451e70cddc95$require$parseV0 = $kec9X.parse;
/**
 * CreateTopics Response (Version: 1) => [topic_errors]
 *   topic_errors => topic error_code error_message
 *     topic => STRING
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 */ const $489a451e70cddc95$var$topicNameComparator = (a, b)=>a.topic.localeCompare(b.topic);
const $489a451e70cddc95$var$topicErrors = (decoder)=>({
        topic: decoder.readString(),
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString()
    });
const $489a451e70cddc95$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        topicErrors: decoder.readArray($489a451e70cddc95$var$topicErrors).sort($489a451e70cddc95$var$topicNameComparator)
    };
};
module.exports = {
    decode: $489a451e70cddc95$var$decode,
    parse: $489a451e70cddc95$require$parseV0
};

});

parcelRegister("6fP47", function(module, exports) {

var $03ert = parcelRequire("03ert");
/**
 * CreateTopics Request (Version: 2) => [create_topic_requests] timeout validate_only
 *   create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]
 *     topic => STRING
 *     num_partitions => INT32
 *     replication_factor => INT16
 *     replica_assignment => partition [replicas]
 *       partition => INT32
 *       replicas => INT32
 *     config_entries => config_name config_value
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *   timeout => INT32
 *   validate_only => BOOLEAN
 */ module.exports = ({ topics: topics, validateOnly: validateOnly, timeout: timeout })=>Object.assign($03ert({
        topics: topics,
        validateOnly: validateOnly,
        timeout: timeout
    }), {
        apiVersion: 2
    });

});

parcelRegister("9McEM", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $6esE2 = parcelRequire("6esE2");
var $71e26a236ebb59a3$require$parseV1 = $6esE2.parse;
/**
 * CreateTopics Response (Version: 2) => throttle_time_ms [topic_errors]
 *   throttle_time_ms => INT32
 *   topic_errors => topic error_code error_message
 *     topic => STRING
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 */ const $71e26a236ebb59a3$var$topicNameComparator = (a, b)=>a.topic.localeCompare(b.topic);
const $71e26a236ebb59a3$var$topicErrors = (decoder)=>({
        topic: decoder.readString(),
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString()
    });
const $71e26a236ebb59a3$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        throttleTime: decoder.readInt32(),
        topicErrors: decoder.readArray($71e26a236ebb59a3$var$topicErrors).sort($71e26a236ebb59a3$var$topicNameComparator)
    };
};
module.exports = {
    decode: $71e26a236ebb59a3$var$decode,
    parse: $71e26a236ebb59a3$require$parseV1
};

});

parcelRegister("gn1Ru", function(module, exports) {

var $6fP47 = parcelRequire("6fP47");
/**
 * CreateTopics Request (Version: 3) => [create_topic_requests] timeout validate_only
 *   create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]
 *     topic => STRING
 *     num_partitions => INT32
 *     replication_factor => INT16
 *     replica_assignment => partition [replicas]
 *       partition => INT32
 *       replicas => INT32
 *     config_entries => config_name config_value
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *   timeout => INT32
 *   validate_only => BOOLEAN
 */ module.exports = ({ topics: topics, validateOnly: validateOnly, timeout: timeout })=>Object.assign($6fP47({
        topics: topics,
        validateOnly: validateOnly,
        timeout: timeout
    }), {
        apiVersion: 3
    });

});

parcelRegister("feDv6", function(module, exports) {

var $9McEM = parcelRequire("9McEM");
var $b176cdcde2b36c71$require$parse = $9McEM.parse;
var $b176cdcde2b36c71$require$decodeV2 = $9McEM.decode;
/**
 * Starting in version 3, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * CreateTopics Response (Version: 3) => throttle_time_ms [topic_errors]
 *   throttle_time_ms => INT32
 *   topic_errors => topic error_code error_message
 *     topic => STRING
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 */ const $b176cdcde2b36c71$var$decode = async (rawData)=>{
    const decoded = await $b176cdcde2b36c71$require$decodeV2(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $b176cdcde2b36c71$var$decode,
    parse: $b176cdcde2b36c71$require$parse
};

});


parcelRegister("hGq4P", function(module, exports) {




const $cdfa963cd44c68dc$var$versions = {
    0: ({ topics: topics, timeout: timeout })=>{
        const request = (parcelRequire("2xG65"));
        const response = (parcelRequire("cjjDM"));
        return {
            request: request({
                topics: topics,
                timeout: timeout
            }),
            response: response
        };
    },
    1: ({ topics: topics, timeout: timeout })=>{
        const request = (parcelRequire("hbXEh"));
        const response = (parcelRequire("h1Lpr"));
        return {
            request: request({
                topics: topics,
                timeout: timeout
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($cdfa963cd44c68dc$var$versions),
    protocol: ({ version: version })=>$cdfa963cd44c68dc$var$versions[version]
};

});
parcelRegister("2xG65", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $1d9f517c308562b8$require$apiKey = $9kH2s.DeleteTopics;
/**
 * DeleteTopics Request (Version: 0) => [topics] timeout
 *   topics => STRING
 *   timeout => INT32
 */ module.exports = ({ topics: topics, timeout: timeout = 5000 })=>({
        apiKey: $1d9f517c308562b8$require$apiKey,
        apiVersion: 0,
        apiName: "DeleteTopics",
        encode: async ()=>{
            return new $7jO81().writeArray(topics).writeInt32(timeout);
        }
    });

});

parcelRegister("cjjDM", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $8f667e9d2d24d625$require$failure = $iL9Wd.failure;
var $8f667e9d2d24d625$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * DeleteTopics Response (Version: 0) => [topic_error_codes]
 *   topic_error_codes => topic error_code
 *     topic => STRING
 *     error_code => INT16
 */ const $8f667e9d2d24d625$var$topicNameComparator = (a, b)=>a.topic.localeCompare(b.topic);
const $8f667e9d2d24d625$var$topicErrors = (decoder)=>({
        topic: decoder.readString(),
        errorCode: decoder.readInt16()
    });
const $8f667e9d2d24d625$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        topicErrors: decoder.readArray($8f667e9d2d24d625$var$topicErrors).sort($8f667e9d2d24d625$var$topicNameComparator)
    };
};
const $8f667e9d2d24d625$var$parse = async (data)=>{
    const topicsWithError = data.topicErrors.filter(({ errorCode: errorCode })=>$8f667e9d2d24d625$require$failure(errorCode));
    if (topicsWithError.length > 0) throw $8f667e9d2d24d625$require$createErrorFromCode(topicsWithError[0].errorCode);
    return data;
};
module.exports = {
    decode: $8f667e9d2d24d625$var$decode,
    parse: $8f667e9d2d24d625$var$parse
};

});

parcelRegister("hbXEh", function(module, exports) {

var $2xG65 = parcelRequire("2xG65");
/**
 * DeleteTopics Request (Version: 1) => [topics] timeout
 *   topics => STRING
 *   timeout => INT32
 */ module.exports = ({ topics: topics, timeout: timeout })=>Object.assign($2xG65({
        topics: topics,
        timeout: timeout
    }), {
        apiVersion: 1
    });

});

parcelRegister("h1Lpr", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $cjjDM = parcelRequire("cjjDM");
var $0332f4df9c7aa216$require$parseV0 = $cjjDM.parse;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * DeleteTopics Response (Version: 1) => throttle_time_ms [topic_error_codes]
 *   throttle_time_ms => INT32
 *   topic_error_codes => topic error_code
 *     topic => STRING
 *     error_code => INT16
 */ const $0332f4df9c7aa216$var$topicNameComparator = (a, b)=>a.topic.localeCompare(b.topic);
const $0332f4df9c7aa216$var$topicErrors = (decoder)=>({
        topic: decoder.readString(),
        errorCode: decoder.readInt16()
    });
const $0332f4df9c7aa216$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    return {
        throttleTime: 0,
        clientSideThrottleTime: throttleTime,
        topicErrors: decoder.readArray($0332f4df9c7aa216$var$topicErrors).sort($0332f4df9c7aa216$var$topicNameComparator)
    };
};
module.exports = {
    decode: $0332f4df9c7aa216$var$decode,
    parse: $0332f4df9c7aa216$require$parseV0
};

});


parcelRegister("3Pybn", function(module, exports) {




const $2ca0a674e69c4d24$var$versions = {
    0: ({ topics: topics, timeout: timeout })=>{
        const request = (parcelRequire("iCCUy"));
        const response = (parcelRequire("1UYLX"));
        return {
            request: request({
                topics: topics,
                timeout: timeout
            }),
            response: response({
                topics: topics
            })
        };
    },
    1: ({ topics: topics, timeout: timeout })=>{
        const request = (parcelRequire("aleoz"));
        const response = (parcelRequire("N2IO0"));
        return {
            request: request({
                topics: topics,
                timeout: timeout
            }),
            response: response({
                topics: topics
            })
        };
    }
};
module.exports = {
    versions: Object.keys($2ca0a674e69c4d24$var$versions),
    protocol: ({ version: version })=>$2ca0a674e69c4d24$var$versions[version]
};

});
parcelRegister("iCCUy", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $d8e9f58d722ab9cb$require$apiKey = $9kH2s.DeleteRecords;
/**
 * DeleteRecords Request (Version: 0) => [topics] timeout_ms
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset
 *       partition => INT32
 *       offset => INT64
 *   timeout => INT32
 */ module.exports = ({ topics: topics, timeout: timeout = 5000 })=>({
        apiKey: $d8e9f58d722ab9cb$require$apiKey,
        apiVersion: 0,
        apiName: "DeleteRecords",
        encode: async ()=>{
            return new $7jO81().writeArray(topics.map(({ topic: topic, partitions: partitions })=>{
                return new $7jO81().writeString(topic).writeArray(partitions.map(({ partition: partition, offset: offset })=>{
                    return new $7jO81().writeInt32(partition).writeInt64(offset);
                }));
            })).writeInt32(timeout);
        }
    });

});

parcelRegister("1UYLX", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $8mQRr = parcelRequire("8mQRr");
var $165a298eabbb21bc$require$KafkaJSDeleteTopicRecordsError = $8mQRr.KafkaJSDeleteTopicRecordsError;

var $iL9Wd = parcelRequire("iL9Wd");
var $165a298eabbb21bc$require$failure = $iL9Wd.failure;
var $165a298eabbb21bc$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * DeleteRecords Response (Version: 0) => throttle_time_ms [topics]
 *  throttle_time_ms => INT32
 *  topics => name [partitions]
 *    name => STRING
 *    partitions => partition low_watermark error_code
 *      partition => INT32
 *      low_watermark => INT64
 *      error_code => INT16
 */ const $165a298eabbb21bc$var$topicNameComparator = (a, b)=>a.topic.localeCompare(b.topic);
const $165a298eabbb21bc$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    return {
        throttleTime: decoder.readInt32(),
        topics: decoder.readArray((decoder)=>({
                topic: decoder.readString(),
                partitions: decoder.readArray((decoder)=>({
                        partition: decoder.readInt32(),
                        lowWatermark: decoder.readInt64(),
                        errorCode: decoder.readInt16()
                    }))
            })).sort($165a298eabbb21bc$var$topicNameComparator)
    };
};
const $165a298eabbb21bc$var$parse = (requestTopics)=>async (data)=>{
        const topicsWithErrors = data.topics.map(({ partitions: partitions })=>({
                partitionsWithErrors: partitions.filter(({ errorCode: errorCode })=>$165a298eabbb21bc$require$failure(errorCode))
            })).filter(({ partitionsWithErrors: partitionsWithErrors })=>partitionsWithErrors.length);
        if (topicsWithErrors.length > 0) {
            // at present we only ever request one topic at a time, so can destructure the arrays
            const [{ topic: topic }] = data.topics // topic name
            ;
            const [{ partitions: requestPartitions }] = requestTopics // requested offset(s)
            ;
            const [{ partitionsWithErrors: partitionsWithErrors }] = topicsWithErrors // partition(s) + error(s)
            ;
            throw new $165a298eabbb21bc$require$KafkaJSDeleteTopicRecordsError({
                topic: topic,
                partitions: partitionsWithErrors.map(({ partition: partition, errorCode: errorCode })=>({
                        partition: partition,
                        error: $165a298eabbb21bc$require$createErrorFromCode(errorCode),
                        // attach the original offset from the request, onto the error response
                        offset: requestPartitions.find((p)=>p.partition === partition).offset
                    }))
            });
        }
        return data;
    };
module.exports = ({ topics: topics })=>({
        decode: $165a298eabbb21bc$var$decode,
        parse: $165a298eabbb21bc$var$parse(topics)
    });

});

parcelRegister("aleoz", function(module, exports) {

var $iCCUy = parcelRequire("iCCUy");
/**
 * DeleteRecords Request (Version: 1) => [topics] timeout_ms
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset
 *       partition => INT32
 *       offset => INT64
 *   timeout => INT32
 */ module.exports = ({ topics: topics, timeout: timeout })=>Object.assign($iCCUy({
        topics: topics,
        timeout: timeout
    }), {
        apiVersion: 1
    });

});

parcelRegister("N2IO0", function(module, exports) {

var $1UYLX = parcelRequire("1UYLX");
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * DeleteRecords Response (Version: 1) => throttle_time_ms [topics]
 *  throttle_time_ms => INT32
 *  topics => name [partitions]
 *    name => STRING
 *    partitions => partition_index low_watermark error_code
 *      partition_index => INT32
 *      low_watermark => INT64
 *      error_code => INT16
 */ module.exports = ({ topics: topics })=>{
    const { parse: parse, decode: decodeV0 } = $1UYLX({
        topics: topics
    });
    const decode = async (rawData)=>{
        const decoded = await decodeV0(rawData);
        return {
            ...decoded,
            throttleTime: 0,
            clientSideThrottleTime: decoded.throttleTime
        };
    };
    return {
        decode: decode,
        parse: parse
    };
};

});


parcelRegister("aHL26", function(module, exports) {




const $7cb26745a766ff18$var$versions = {
    0: ({ transactionalId: transactionalId, transactionTimeout: transactionTimeout = 5000 })=>{
        const request = (parcelRequire("hSOKr"));
        const response = (parcelRequire("iny0y"));
        return {
            request: request({
                transactionalId: transactionalId,
                transactionTimeout: transactionTimeout
            }),
            response: response
        };
    },
    1: ({ transactionalId: transactionalId, transactionTimeout: transactionTimeout = 5000 })=>{
        const request = (parcelRequire("l65HJ"));
        const response = (parcelRequire("7EQUl"));
        return {
            request: request({
                transactionalId: transactionalId,
                transactionTimeout: transactionTimeout
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($7cb26745a766ff18$var$versions),
    protocol: ({ version: version })=>$7cb26745a766ff18$var$versions[version]
};

});
parcelRegister("hSOKr", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $d04ed8565e61932c$require$apiKey = $9kH2s.InitProducerId;
/**
 * InitProducerId Request (Version: 0) => transactional_id transaction_timeout_ms
 *   transactional_id => NULLABLE_STRING
 *   transaction_timeout_ms => INT32
 */ module.exports = ({ transactionalId: transactionalId, transactionTimeout: transactionTimeout })=>({
        apiKey: $d04ed8565e61932c$require$apiKey,
        apiVersion: 0,
        apiName: "InitProducerId",
        encode: async ()=>{
            return new $7jO81().writeString(transactionalId).writeInt32(transactionTimeout);
        }
    });

});

parcelRegister("iny0y", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $d614c139b72ebcf3$require$failure = $iL9Wd.failure;
var $d614c139b72ebcf3$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $d614c139b72ebcf3$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * InitProducerId Response (Version: 0) => throttle_time_ms error_code producer_id producer_epoch
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   producer_id => INT64
 *   producer_epoch => INT16
 */ const $d614c139b72ebcf3$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $d614c139b72ebcf3$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        producerId: decoder.readInt64().toString(),
        producerEpoch: decoder.readInt16()
    };
};
const $d614c139b72ebcf3$var$parse = async (data)=>{
    if ($d614c139b72ebcf3$require$failure(data.errorCode)) throw $d614c139b72ebcf3$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $d614c139b72ebcf3$var$decode,
    parse: $d614c139b72ebcf3$var$parse
};

});

parcelRegister("l65HJ", function(module, exports) {

var $hSOKr = parcelRequire("hSOKr");
/**
 * InitProducerId Request (Version: 1) => transactional_id transaction_timeout_ms
 *   transactional_id => NULLABLE_STRING
 *   transaction_timeout_ms => INT32
 */ module.exports = ({ transactionalId: transactionalId, transactionTimeout: transactionTimeout })=>Object.assign($hSOKr({
        transactionalId: transactionalId,
        transactionTimeout: transactionTimeout
    }), {
        apiVersion: 1
    });

});

parcelRegister("7EQUl", function(module, exports) {

var $iny0y = parcelRequire("iny0y");
var $59354f32881732f5$require$parse = $iny0y.parse;
var $59354f32881732f5$require$decodeV0 = $iny0y.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * InitProducerId Response (Version: 0) => throttle_time_ms error_code producer_id producer_epoch
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   producer_id => INT64
 *   producer_epoch => INT16
 */ const $59354f32881732f5$var$decode = async (rawData)=>{
    const decoded = await $59354f32881732f5$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $59354f32881732f5$var$decode,
    parse: $59354f32881732f5$require$parse
};

});


parcelRegister("2Bjov", function(module, exports) {




const $1e4e14c80de2e556$var$versions = {
    0: ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>{
        const request = (parcelRequire("2ds8R"));
        const response = (parcelRequire("5Nz9t"));
        return {
            request: request({
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                topics: topics
            }),
            response: response
        };
    },
    1: ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>{
        const request = (parcelRequire("9wTVn"));
        const response = (parcelRequire("lC9Pl"));
        return {
            request: request({
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                topics: topics
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($1e4e14c80de2e556$var$versions),
    protocol: ({ version: version })=>$1e4e14c80de2e556$var$versions[version]
};

});
parcelRegister("2ds8R", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $19d2a00e290c8e6e$require$apiKey = $9kH2s.AddPartitionsToTxn;
/**
 * AddPartitionsToTxn Request (Version: 0) => transactional_id producer_id producer_epoch [topics]
 *   transactional_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => INT32
 */ module.exports = ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>({
        apiKey: $19d2a00e290c8e6e$require$apiKey,
        apiVersion: 0,
        apiName: "AddPartitionsToTxn",
        encode: async ()=>{
            return new $7jO81().writeString(transactionalId).writeInt64(producerId).writeInt16(producerEpoch).writeArray(topics.map($19d2a00e290c8e6e$var$encodeTopic));
        }
    });
const $19d2a00e290c8e6e$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($19d2a00e290c8e6e$var$encodePartition));
};
const $19d2a00e290c8e6e$var$encodePartition = (partition)=>{
    return new $7jO81().writeInt32(partition);
};

});

parcelRegister("5Nz9t", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $438ccbc5c265507b$require$failure = $iL9Wd.failure;
var $438ccbc5c265507b$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * AddPartitionsToTxn Response (Version: 0) => throttle_time_ms [errors]
 *   throttle_time_ms => INT32
 *   errors => topic [partition_errors]
 *     topic => STRING
 *     partition_errors => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ const $438ccbc5c265507b$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errors = await decoder.readArrayAsync($438ccbc5c265507b$var$decodeError);
    return {
        throttleTime: throttleTime,
        errors: errors
    };
};
const $438ccbc5c265507b$var$decodeError = async (decoder)=>({
        topic: decoder.readString(),
        partitionErrors: await decoder.readArrayAsync($438ccbc5c265507b$var$decodePartitionError)
    });
const $438ccbc5c265507b$var$decodePartitionError = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16()
    });
const $438ccbc5c265507b$var$parse = async (data)=>{
    const topicsWithErrors = data.errors.map(({ partitionErrors: partitionErrors })=>({
            partitionsWithErrors: partitionErrors.filter(({ errorCode: errorCode })=>$438ccbc5c265507b$require$failure(errorCode))
        })).filter(({ partitionsWithErrors: partitionsWithErrors })=>partitionsWithErrors.length);
    if (topicsWithErrors.length > 0) throw $438ccbc5c265507b$require$createErrorFromCode(topicsWithErrors[0].partitionsWithErrors[0].errorCode);
    return data;
};
module.exports = {
    decode: $438ccbc5c265507b$var$decode,
    parse: $438ccbc5c265507b$var$parse
};

});

parcelRegister("9wTVn", function(module, exports) {

var $2ds8R = parcelRequire("2ds8R");
/**
 * AddPartitionsToTxn Request (Version: 1) => transactional_id producer_id producer_epoch [topics]
 *   transactional_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => INT32
 */ module.exports = ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>Object.assign($2ds8R({
        transactionalId: transactionalId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        topics: topics
    }), {
        apiVersion: 1
    });

});

parcelRegister("lC9Pl", function(module, exports) {

var $5Nz9t = parcelRequire("5Nz9t");
var $fbc4c509cf907e23$require$parse = $5Nz9t.parse;
var $fbc4c509cf907e23$require$decodeV0 = $5Nz9t.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * AddPartitionsToTxn Response (Version: 1) => throttle_time_ms [errors]
 *   throttle_time_ms => INT32
 *   errors => topic [partition_errors]
 *     topic => STRING
 *     partition_errors => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ const $fbc4c509cf907e23$var$decode = async (rawData)=>{
    const decoded = await $fbc4c509cf907e23$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $fbc4c509cf907e23$var$decode,
    parse: $fbc4c509cf907e23$require$parse
};

});


parcelRegister("i3TNs", function(module, exports) {




const $d263c9dfbf9bc506$var$versions = {
    0: ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, groupId: groupId })=>{
        const request = (parcelRequire("8pCnv"));
        const response = (parcelRequire("gQBPs"));
        return {
            request: request({
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                groupId: groupId
            }),
            response: response
        };
    },
    1: ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, groupId: groupId })=>{
        const request = (parcelRequire("4F3LT"));
        const response = (parcelRequire("7kNZx"));
        return {
            request: request({
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                groupId: groupId
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($d263c9dfbf9bc506$var$versions),
    protocol: ({ version: version })=>$d263c9dfbf9bc506$var$versions[version]
};

});
parcelRegister("8pCnv", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $61fe6d9b1f9b1d3c$require$apiKey = $9kH2s.AddOffsetsToTxn;
/**
 * AddOffsetsToTxn Request (Version: 0) => transactional_id producer_id producer_epoch group_id
 *   transactional_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   group_id => STRING
 */ module.exports = ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, groupId: groupId })=>({
        apiKey: $61fe6d9b1f9b1d3c$require$apiKey,
        apiVersion: 0,
        apiName: "AddOffsetsToTxn",
        encode: async ()=>{
            return new $7jO81().writeString(transactionalId).writeInt64(producerId).writeInt16(producerEpoch).writeString(groupId);
        }
    });

});

parcelRegister("gQBPs", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $c43ed8b2a5f14171$require$failure = $iL9Wd.failure;
var $c43ed8b2a5f14171$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $c43ed8b2a5f14171$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * AddOffsetsToTxn Response (Version: 0) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $c43ed8b2a5f14171$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $c43ed8b2a5f14171$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode
    };
};
const $c43ed8b2a5f14171$var$parse = async (data)=>{
    if ($c43ed8b2a5f14171$require$failure(data.errorCode)) throw $c43ed8b2a5f14171$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $c43ed8b2a5f14171$var$decode,
    parse: $c43ed8b2a5f14171$var$parse
};

});

parcelRegister("4F3LT", function(module, exports) {

var $8pCnv = parcelRequire("8pCnv");
/**
 * AddOffsetsToTxn Request (Version: 1) => transactional_id producer_id producer_epoch group_id
 *   transactional_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   group_id => STRING
 */ module.exports = ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, groupId: groupId })=>Object.assign($8pCnv({
        transactionalId: transactionalId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        groupId: groupId
    }), {
        apiVersion: 1
    });

});

parcelRegister("7kNZx", function(module, exports) {

var $gQBPs = parcelRequire("gQBPs");
var $55712df6a7b4c459$require$parse = $gQBPs.parse;
var $55712df6a7b4c459$require$decodeV0 = $gQBPs.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * AddOffsetsToTxn Response (Version: 1) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $55712df6a7b4c459$var$decode = async (rawData)=>{
    const decoded = await $55712df6a7b4c459$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $55712df6a7b4c459$var$decode,
    parse: $55712df6a7b4c459$require$parse
};

});


parcelRegister("doCaW", function(module, exports) {




const $9c0b211d5dd0ac84$var$versions = {
    0: ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, transactionResult: transactionResult })=>{
        const request = (parcelRequire("6Sd06"));
        const response = (parcelRequire("9b4cY"));
        return {
            request: request({
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                transactionResult: transactionResult
            }),
            response: response
        };
    },
    1: ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, transactionResult: transactionResult })=>{
        const request = (parcelRequire("gQpMY"));
        const response = (parcelRequire("qeevu"));
        return {
            request: request({
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                transactionResult: transactionResult
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($9c0b211d5dd0ac84$var$versions),
    protocol: ({ version: version })=>$9c0b211d5dd0ac84$var$versions[version]
};

});
parcelRegister("6Sd06", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $5011dee3f25f0d50$require$apiKey = $9kH2s.EndTxn;
/**
 * EndTxn Request (Version: 0) => transactional_id producer_id producer_epoch transaction_result
 *   transactional_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   transaction_result => BOOLEAN
 */ module.exports = ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, transactionResult: transactionResult })=>({
        apiKey: $5011dee3f25f0d50$require$apiKey,
        apiVersion: 0,
        apiName: "EndTxn",
        encode: async ()=>{
            return new $7jO81().writeString(transactionalId).writeInt64(producerId).writeInt16(producerEpoch).writeBoolean(transactionResult);
        }
    });

});

parcelRegister("9b4cY", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $6ae867d56cf6490d$require$failure = $iL9Wd.failure;
var $6ae867d56cf6490d$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $6ae867d56cf6490d$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * EndTxn Response (Version: 0) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $6ae867d56cf6490d$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    $6ae867d56cf6490d$require$failIfVersionNotSupported(errorCode);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode
    };
};
const $6ae867d56cf6490d$var$parse = async (data)=>{
    if ($6ae867d56cf6490d$require$failure(data.errorCode)) throw $6ae867d56cf6490d$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $6ae867d56cf6490d$var$decode,
    parse: $6ae867d56cf6490d$var$parse
};

});

parcelRegister("gQpMY", function(module, exports) {

var $6Sd06 = parcelRequire("6Sd06");
/**
 * EndTxn Request (Version: 1) => transactional_id producer_id producer_epoch transaction_result
 *   transactional_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   transaction_result => BOOLEAN
 */ module.exports = ({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, transactionResult: transactionResult })=>Object.assign($6Sd06({
        transactionalId: transactionalId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        transactionResult: transactionResult
    }), {
        apiVersion: 1
    });

});

parcelRegister("qeevu", function(module, exports) {

var $9b4cY = parcelRequire("9b4cY");
var $04ed78326274a81d$require$parse = $9b4cY.parse;
var $04ed78326274a81d$require$decodeV0 = $9b4cY.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * EndTxn Response (Version: 1) => throttle_time_ms error_code
 *   throttle_time_ms => INT32
 *   error_code => INT16
 */ const $04ed78326274a81d$var$decode = async (rawData)=>{
    const decoded = await $04ed78326274a81d$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $04ed78326274a81d$var$decode,
    parse: $04ed78326274a81d$require$parse
};

});


parcelRegister("cLk0f", function(module, exports) {




const $94a96405405dc05c$var$versions = {
    0: ({ transactionalId: transactionalId, groupId: groupId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>{
        const request = (parcelRequire("9JbVO"));
        const response = (parcelRequire("5DHKM"));
        return {
            request: request({
                transactionalId: transactionalId,
                groupId: groupId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                topics: topics
            }),
            response: response
        };
    },
    1: ({ transactionalId: transactionalId, groupId: groupId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>{
        const request = (parcelRequire("iZqTq"));
        const response = (parcelRequire("43y9v"));
        return {
            request: request({
                transactionalId: transactionalId,
                groupId: groupId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                topics: topics
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($94a96405405dc05c$var$versions),
    protocol: ({ version: version })=>$94a96405405dc05c$var$versions[version]
};

});
parcelRegister("9JbVO", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $715192633b390311$require$apiKey = $9kH2s.TxnOffsetCommit;
/**
 * TxnOffsetCommit Request (Version: 0) => transactional_id group_id producer_id producer_epoch [topics]
 *   transactional_id => STRING
 *   group_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset metadata
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ transactionalId: transactionalId, groupId: groupId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>({
        apiKey: $715192633b390311$require$apiKey,
        apiVersion: 0,
        apiName: "TxnOffsetCommit",
        encode: async ()=>{
            return new $7jO81().writeString(transactionalId).writeString(groupId).writeInt64(producerId).writeInt16(producerEpoch).writeArray(topics.map($715192633b390311$var$encodeTopic));
        }
    });
const $715192633b390311$var$encodeTopic = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeString(topic).writeArray(partitions.map($715192633b390311$var$encodePartition));
};
const $715192633b390311$var$encodePartition = ({ partition: partition, offset: offset, metadata: metadata })=>{
    return new $7jO81().writeInt32(partition).writeInt64(offset).writeString(metadata);
};

});

parcelRegister("5DHKM", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $41b288c8b69af56c$require$failure = $iL9Wd.failure;
var $41b288c8b69af56c$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * TxnOffsetCommit Response (Version: 0) => throttle_time_ms [topics]
 *   throttle_time_ms => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ const $41b288c8b69af56c$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const topics = await decoder.readArrayAsync($41b288c8b69af56c$var$decodeTopic);
    return {
        throttleTime: throttleTime,
        topics: topics
    };
};
const $41b288c8b69af56c$var$decodeTopic = async (decoder)=>({
        topic: decoder.readString(),
        partitions: await decoder.readArrayAsync($41b288c8b69af56c$var$decodePartition)
    });
const $41b288c8b69af56c$var$decodePartition = (decoder)=>({
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16()
    });
const $41b288c8b69af56c$var$parse = async (data)=>{
    const topicsWithErrors = data.topics.map(({ partitions: partitions })=>({
            partitionsWithErrors: partitions.filter(({ errorCode: errorCode })=>$41b288c8b69af56c$require$failure(errorCode))
        })).filter(({ partitionsWithErrors: partitionsWithErrors })=>partitionsWithErrors.length);
    if (topicsWithErrors.length > 0) throw $41b288c8b69af56c$require$createErrorFromCode(topicsWithErrors[0].partitionsWithErrors[0].errorCode);
    return data;
};
module.exports = {
    decode: $41b288c8b69af56c$var$decode,
    parse: $41b288c8b69af56c$var$parse
};

});

parcelRegister("iZqTq", function(module, exports) {

var $9JbVO = parcelRequire("9JbVO");
/**
 * TxnOffsetCommit Request (Version: 1) => transactional_id group_id producer_id producer_epoch [topics]
 *   transactional_id => STRING
 *   group_id => STRING
 *   producer_id => INT64
 *   producer_epoch => INT16
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition offset metadata
 *       partition => INT32
 *       offset => INT64
 *       metadata => NULLABLE_STRING
 */ module.exports = ({ transactionalId: transactionalId, groupId: groupId, producerId: producerId, producerEpoch: producerEpoch, topics: topics })=>Object.assign($9JbVO({
        transactionalId: transactionalId,
        groupId: groupId,
        producerId: producerId,
        producerEpoch: producerEpoch,
        topics: topics
    }), {
        apiVersion: 1
    });

});

parcelRegister("43y9v", function(module, exports) {

var $5DHKM = parcelRequire("5DHKM");
var $2f41ef313f76d3ae$require$parse = $5DHKM.parse;
var $2f41ef313f76d3ae$require$decodeV1 = $5DHKM.decode;
/**
 * In version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * TxnOffsetCommit Response (Version: 1) => throttle_time_ms [topics]
 *   throttle_time_ms => INT32
 *   topics => topic [partitions]
 *     topic => STRING
 *     partitions => partition error_code
 *       partition => INT32
 *       error_code => INT16
 */ const $2f41ef313f76d3ae$var$decode = async (rawData)=>{
    const decoded = await $2f41ef313f76d3ae$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $2f41ef313f76d3ae$var$decode,
    parse: $2f41ef313f76d3ae$require$parse
};

});


parcelRegister("jaivf", function(module, exports) {




const $df3d4dceb3988fe3$var$versions = {
    0: ({ resourceType: resourceType, resourceName: resourceName, principal: principal, host: host, operation: operation, permissionType: permissionType })=>{
        const request = (parcelRequire("4mf67"));
        const response = (parcelRequire("jSNC1"));
        return {
            request: request({
                resourceType: resourceType,
                resourceName: resourceName,
                principal: principal,
                host: host,
                operation: operation,
                permissionType: permissionType
            }),
            response: response
        };
    },
    1: ({ resourceType: resourceType, resourceName: resourceName, resourcePatternType: resourcePatternType, principal: principal, host: host, operation: operation, permissionType: permissionType })=>{
        const request = (parcelRequire("ifaLR"));
        const response = (parcelRequire("1cCdU"));
        return {
            request: request({
                resourceType: resourceType,
                resourceName: resourceName,
                resourcePatternType: resourcePatternType,
                principal: principal,
                host: host,
                operation: operation,
                permissionType: permissionType
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($df3d4dceb3988fe3$var$versions),
    protocol: ({ version: version })=>$df3d4dceb3988fe3$var$versions[version]
};

});
parcelRegister("4mf67", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $32c4ed949b0dd1f2$require$apiKey = $9kH2s.DescribeAcls;
/**
 * DescribeAcls Request (Version: 0) => resource_type resource_name principal host operation permission_type
 *   resource_type => INT8
 *   resource_name => NULLABLE_STRING
 *   principal => NULLABLE_STRING
 *   host => NULLABLE_STRING
 *   operation => INT8
 *   permission_type => INT8
 */ module.exports = ({ resourceType: resourceType, resourceName: resourceName, principal: principal, host: host, operation: operation, permissionType: permissionType })=>({
        apiKey: $32c4ed949b0dd1f2$require$apiKey,
        apiVersion: 0,
        apiName: "DescribeAcls",
        encode: async ()=>{
            return new $7jO81().writeInt8(resourceType).writeString(resourceName).writeString(principal).writeString(host).writeInt8(operation).writeInt8(permissionType);
        }
    });

});

parcelRegister("jSNC1", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $e7998b6a3b5a9609$require$failure = $iL9Wd.failure;
var $e7998b6a3b5a9609$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * DescribeAcls Response (Version: 0) => throttle_time_ms error_code error_message [resources]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   error_message => NULLABLE_STRING
 *   resources => resource_type resource_name [acls]
 *     resource_type => INT8
 *     resource_name => STRING
 *     acls => principal host operation permission_type
 *       principal => STRING
 *       host => STRING
 *       operation => INT8
 *       permission_type => INT8
 */ const $e7998b6a3b5a9609$var$decodeAcls = (decoder)=>({
        principal: decoder.readString(),
        host: decoder.readString(),
        operation: decoder.readInt8(),
        permissionType: decoder.readInt8()
    });
const $e7998b6a3b5a9609$var$decodeResources = (decoder)=>({
        resourceType: decoder.readInt8(),
        resourceName: decoder.readString(),
        acls: decoder.readArray($e7998b6a3b5a9609$var$decodeAcls)
    });
const $e7998b6a3b5a9609$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    const errorMessage = decoder.readString();
    const resources = decoder.readArray($e7998b6a3b5a9609$var$decodeResources);
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        errorMessage: errorMessage,
        resources: resources
    };
};
const $e7998b6a3b5a9609$var$parse = async (data)=>{
    if ($e7998b6a3b5a9609$require$failure(data.errorCode)) throw $e7998b6a3b5a9609$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $e7998b6a3b5a9609$var$decode,
    parse: $e7998b6a3b5a9609$var$parse
};

});

parcelRegister("ifaLR", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $d481fb97be9314fa$require$apiKey = $9kH2s.DescribeAcls;
/**
 * DescribeAcls Request (Version: 1) => resource_type resource_name resource_pattern_type_filter principal host operation permission_type
 *   resource_type => INT8
 *   resource_name => NULLABLE_STRING
 *   resource_pattern_type_filter => INT8
 *   principal => NULLABLE_STRING
 *   host => NULLABLE_STRING
 *   operation => INT8
 *   permission_type => INT8
 */ module.exports = ({ resourceType: resourceType, resourceName: resourceName, resourcePatternType: resourcePatternType, principal: principal, host: host, operation: operation, permissionType: permissionType })=>({
        apiKey: $d481fb97be9314fa$require$apiKey,
        apiVersion: 1,
        apiName: "DescribeAcls",
        encode: async ()=>{
            return new $7jO81().writeInt8(resourceType).writeString(resourceName).writeInt8(resourcePatternType).writeString(principal).writeString(host).writeInt8(operation).writeInt8(permissionType);
        }
    });

});

parcelRegister("1cCdU", function(module, exports) {

var $jSNC1 = parcelRequire("jSNC1");
var $0e048fc510e00acf$require$parse = $jSNC1.parse;

var $eMnPM = parcelRequire("eMnPM");
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 * Version 1 also introduces a new resource pattern type field.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs
 *
 * DescribeAcls Response (Version: 1) => throttle_time_ms error_code error_message [resources]
 *   throttle_time_ms => INT32
 *   error_code => INT16
 *   error_message => NULLABLE_STRING
 *   resources => resource_type resource_name resource_pattern_type [acls]
 *     resource_type => INT8
 *     resource_name => STRING
 *     resource_pattern_type => INT8
 *     acls => principal host operation permission_type
 *       principal => STRING
 *       host => STRING
 *       operation => INT8
 *       permission_type => INT8
 */ const $0e048fc510e00acf$var$decodeAcls = (decoder)=>({
        principal: decoder.readString(),
        host: decoder.readString(),
        operation: decoder.readInt8(),
        permissionType: decoder.readInt8()
    });
const $0e048fc510e00acf$var$decodeResources = (decoder)=>({
        resourceType: decoder.readInt8(),
        resourceName: decoder.readString(),
        resourcePatternType: decoder.readInt8(),
        acls: decoder.readArray($0e048fc510e00acf$var$decodeAcls)
    });
const $0e048fc510e00acf$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    const errorMessage = decoder.readString();
    const resources = decoder.readArray($0e048fc510e00acf$var$decodeResources);
    return {
        throttleTime: 0,
        clientSideThrottleTime: throttleTime,
        errorCode: errorCode,
        errorMessage: errorMessage,
        resources: resources
    };
};
module.exports = {
    decode: $0e048fc510e00acf$var$decode,
    parse: $0e048fc510e00acf$require$parse
};

});


parcelRegister("aOhmt", function(module, exports) {




const $7dec0a8afd3f372a$var$versions = {
    0: ({ creations: creations })=>{
        const request = (parcelRequire("4LA4r"));
        const response = (parcelRequire("9PAOk"));
        return {
            request: request({
                creations: creations
            }),
            response: response
        };
    },
    1: ({ creations: creations })=>{
        const request = (parcelRequire("jSmPX"));
        const response = (parcelRequire("jroSi"));
        return {
            request: request({
                creations: creations
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($7dec0a8afd3f372a$var$versions),
    protocol: ({ version: version })=>$7dec0a8afd3f372a$var$versions[version]
};

});
parcelRegister("4LA4r", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $37878814f5a6eef6$require$apiKey = $9kH2s.CreateAcls;
/**
 * CreateAcls Request (Version: 0) => [creations]
 *   creations => resource_type resource_name principal host operation permission_type
 *     resource_type => INT8
 *     resource_name => STRING
 *     principal => STRING
 *     host => STRING
 *     operation => INT8
 *     permission_type => INT8
 */ const $37878814f5a6eef6$var$encodeCreations = ({ resourceType: resourceType, resourceName: resourceName, principal: principal, host: host, operation: operation, permissionType: permissionType })=>{
    return new $7jO81().writeInt8(resourceType).writeString(resourceName).writeString(principal).writeString(host).writeInt8(operation).writeInt8(permissionType);
};
module.exports = ({ creations: creations })=>({
        apiKey: $37878814f5a6eef6$require$apiKey,
        apiVersion: 0,
        apiName: "CreateAcls",
        encode: async ()=>{
            return new $7jO81().writeArray(creations.map($37878814f5a6eef6$var$encodeCreations));
        }
    });

});

parcelRegister("9PAOk", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $72856e52ca65edbe$require$failure = $iL9Wd.failure;
var $72856e52ca65edbe$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * CreateAcls Response (Version: 0) => throttle_time_ms [creation_responses]
 *   throttle_time_ms => INT32
 *   creation_responses => error_code error_message
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 */ const $72856e52ca65edbe$var$decodeCreationResponse = (decoder)=>({
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString()
    });
const $72856e52ca65edbe$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const creationResponses = decoder.readArray($72856e52ca65edbe$var$decodeCreationResponse);
    return {
        throttleTime: throttleTime,
        creationResponses: creationResponses
    };
};
const $72856e52ca65edbe$var$parse = async (data)=>{
    const creationResponsesWithError = data.creationResponses.filter(({ errorCode: errorCode })=>$72856e52ca65edbe$require$failure(errorCode));
    if (creationResponsesWithError.length > 0) throw $72856e52ca65edbe$require$createErrorFromCode(creationResponsesWithError[0].errorCode);
    return data;
};
module.exports = {
    decode: $72856e52ca65edbe$var$decode,
    parse: $72856e52ca65edbe$var$parse
};

});

parcelRegister("jSmPX", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $e784c66ded8545dd$require$apiKey = $9kH2s.CreateAcls;
/**
 * CreateAcls Request (Version: 1) => [creations]
 *   creations => resource_type resource_name resource_pattern_type principal host operation permission_type
 *     resource_type => INT8
 *     resource_name => STRING
 *     resource_pattern_type => INT8
 *     principal => STRING
 *     host => STRING
 *     operation => INT8
 *     permission_type => INT8
 */ const $e784c66ded8545dd$var$encodeCreations = ({ resourceType: resourceType, resourceName: resourceName, resourcePatternType: resourcePatternType, principal: principal, host: host, operation: operation, permissionType: permissionType })=>{
    return new $7jO81().writeInt8(resourceType).writeString(resourceName).writeInt8(resourcePatternType).writeString(principal).writeString(host).writeInt8(operation).writeInt8(permissionType);
};
module.exports = ({ creations: creations })=>({
        apiKey: $e784c66ded8545dd$require$apiKey,
        apiVersion: 1,
        apiName: "CreateAcls",
        encode: async ()=>{
            return new $7jO81().writeArray(creations.map($e784c66ded8545dd$var$encodeCreations));
        }
    });

});

parcelRegister("jroSi", function(module, exports) {

var $9PAOk = parcelRequire("9PAOk");
var $e273d58d7f6f496f$require$parse = $9PAOk.parse;
var $e273d58d7f6f496f$require$decodeV0 = $9PAOk.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * CreateAcls Response (Version: 1) => throttle_time_ms [creation_responses]
 *   throttle_time_ms => INT32
 *   creation_responses => error_code error_message
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 */ const $e273d58d7f6f496f$var$decode = async (rawData)=>{
    const decoded = await $e273d58d7f6f496f$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $e273d58d7f6f496f$var$decode,
    parse: $e273d58d7f6f496f$require$parse
};

});


parcelRegister("vOSIX", function(module, exports) {




const $05fa5d6689089735$var$versions = {
    0: ({ filters: filters })=>{
        const request = (parcelRequire("6gpJ2"));
        const response = (parcelRequire("je5AQ"));
        return {
            request: request({
                filters: filters
            }),
            response: response
        };
    },
    1: ({ filters: filters })=>{
        const request = (parcelRequire("esNNc"));
        const response = (parcelRequire("bkBJ6"));
        return {
            request: request({
                filters: filters
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($05fa5d6689089735$var$versions),
    protocol: ({ version: version })=>$05fa5d6689089735$var$versions[version]
};

});
parcelRegister("6gpJ2", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $48f8313cb976e1e7$require$apiKey = $9kH2s.DeleteAcls;
/**
 * DeleteAcls Request (Version: 0) => [filters]
 *   filters => resource_type resource_name principal host operation permission_type
 *     resource_type => INT8
 *     resource_name => NULLABLE_STRING
 *     principal => NULLABLE_STRING
 *     host => NULLABLE_STRING
 *     operation => INT8
 *     permission_type => INT8
 */ const $48f8313cb976e1e7$var$encodeFilters = ({ resourceType: resourceType, resourceName: resourceName, principal: principal, host: host, operation: operation, permissionType: permissionType })=>{
    return new $7jO81().writeInt8(resourceType).writeString(resourceName).writeString(principal).writeString(host).writeInt8(operation).writeInt8(permissionType);
};
module.exports = ({ filters: filters })=>({
        apiKey: $48f8313cb976e1e7$require$apiKey,
        apiVersion: 0,
        apiName: "DeleteAcls",
        encode: async ()=>{
            return new $7jO81().writeArray(filters.map($48f8313cb976e1e7$var$encodeFilters));
        }
    });

});

parcelRegister("je5AQ", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $dff3a9dad85493da$require$failure = $iL9Wd.failure;
var $dff3a9dad85493da$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * DeleteAcls Response (Version: 0) => throttle_time_ms [filter_responses]
 *   throttle_time_ms => INT32
 *   filter_responses => error_code error_message [matching_acls]
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 *     matching_acls => error_code error_message resource_type resource_name principal host operation permission_type
 *       error_code => INT16
 *       error_message => NULLABLE_STRING
 *       resource_type => INT8
 *       resource_name => STRING
 *       principal => STRING
 *       host => STRING
 *       operation => INT8
 *       permission_type => INT8
 */ const $dff3a9dad85493da$var$decodeMatchingAcls = (decoder)=>({
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString(),
        resourceType: decoder.readInt8(),
        resourceName: decoder.readString(),
        principal: decoder.readString(),
        host: decoder.readString(),
        operation: decoder.readInt8(),
        permissionType: decoder.readInt8()
    });
const $dff3a9dad85493da$var$decodeFilterResponse = (decoder)=>({
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString(),
        matchingAcls: decoder.readArray($dff3a9dad85493da$var$decodeMatchingAcls)
    });
const $dff3a9dad85493da$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const filterResponses = decoder.readArray($dff3a9dad85493da$var$decodeFilterResponse);
    return {
        throttleTime: throttleTime,
        filterResponses: filterResponses
    };
};
const $dff3a9dad85493da$var$parse = async (data)=>{
    const filterResponsesWithError = data.filterResponses.filter(({ errorCode: errorCode })=>$dff3a9dad85493da$require$failure(errorCode));
    if (filterResponsesWithError.length > 0) throw $dff3a9dad85493da$require$createErrorFromCode(filterResponsesWithError[0].errorCode);
    for (const filterResponse of data.filterResponses){
        const matchingAcls = filterResponse.matchingAcls;
        const matchingAclsWithError = matchingAcls.filter(({ errorCode: errorCode })=>$dff3a9dad85493da$require$failure(errorCode));
        if (matchingAclsWithError.length > 0) throw $dff3a9dad85493da$require$createErrorFromCode(matchingAclsWithError[0].errorCode);
    }
    return data;
};
module.exports = {
    decodeMatchingAcls: $dff3a9dad85493da$var$decodeMatchingAcls,
    decodeFilterResponse: $dff3a9dad85493da$var$decodeFilterResponse,
    decode: $dff3a9dad85493da$var$decode,
    parse: $dff3a9dad85493da$var$parse
};

});

parcelRegister("esNNc", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $a87a4dfd6b423082$require$apiKey = $9kH2s.DeleteAcls;
/**
 * DeleteAcls Request (Version: 1) => [filters]
 *   filters => resource_type resource_name resource_pattern_type_filter principal host operation permission_type
 *     resource_type => INT8
 *     resource_name => NULLABLE_STRING
 *     resource_pattern_type_filter => INT8
 *     principal => NULLABLE_STRING
 *     host => NULLABLE_STRING
 *     operation => INT8
 *     permission_type => INT8
 */ const $a87a4dfd6b423082$var$encodeFilters = ({ resourceType: resourceType, resourceName: resourceName, resourcePatternType: resourcePatternType, principal: principal, host: host, operation: operation, permissionType: permissionType })=>{
    return new $7jO81().writeInt8(resourceType).writeString(resourceName).writeInt8(resourcePatternType).writeString(principal).writeString(host).writeInt8(operation).writeInt8(permissionType);
};
module.exports = ({ filters: filters })=>({
        apiKey: $a87a4dfd6b423082$require$apiKey,
        apiVersion: 1,
        apiName: "DeleteAcls",
        encode: async ()=>{
            return new $7jO81().writeArray(filters.map($a87a4dfd6b423082$var$encodeFilters));
        }
    });

});

parcelRegister("bkBJ6", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $je5AQ = parcelRequire("je5AQ");
var $83fed3a19f4f42e9$require$parseV0 = $je5AQ.parse;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 * Version 1 also introduces a new resource pattern type field.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs
 *
 * DeleteAcls Response (Version: 1) => throttle_time_ms [filter_responses]
 *   throttle_time_ms => INT32
 *   filter_responses => error_code error_message [matching_acls]
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 *     matching_acls => error_code error_message resource_type resource_name resource_pattern_type principal host operation permission_type
 *       error_code => INT16
 *       error_message => NULLABLE_STRING
 *       resource_type => INT8
 *       resource_name => STRING
 *       resource_pattern_type => INT8
 *       principal => STRING
 *       host => STRING
 *       operation => INT8
 *       permission_type => INT8
 */ const $83fed3a19f4f42e9$var$decodeMatchingAcls = (decoder)=>({
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString(),
        resourceType: decoder.readInt8(),
        resourceName: decoder.readString(),
        resourcePatternType: decoder.readInt8(),
        principal: decoder.readString(),
        host: decoder.readString(),
        operation: decoder.readInt8(),
        permissionType: decoder.readInt8()
    });
const $83fed3a19f4f42e9$var$decodeFilterResponse = (decoder)=>({
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString(),
        matchingAcls: decoder.readArray($83fed3a19f4f42e9$var$decodeMatchingAcls)
    });
const $83fed3a19f4f42e9$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const filterResponses = decoder.readArray($83fed3a19f4f42e9$var$decodeFilterResponse);
    return {
        throttleTime: 0,
        clientSideThrottleTime: throttleTime,
        filterResponses: filterResponses
    };
};
module.exports = {
    decode: $83fed3a19f4f42e9$var$decode,
    parse: $83fed3a19f4f42e9$require$parseV0
};

});


parcelRegister("kkpnN", function(module, exports) {






const $ecc95d620b1406fd$var$versions = {
    0: ({ resources: resources })=>{
        const request = (parcelRequire("7vfXC"));
        const response = (parcelRequire("c0t9f"));
        return {
            request: request({
                resources: resources
            }),
            response: response
        };
    },
    1: ({ resources: resources, includeSynonyms: includeSynonyms })=>{
        const request = (parcelRequire("38llw"));
        const response = (parcelRequire("dlwzc"));
        return {
            request: request({
                resources: resources,
                includeSynonyms: includeSynonyms
            }),
            response: response
        };
    },
    2: ({ resources: resources, includeSynonyms: includeSynonyms })=>{
        const request = (parcelRequire("1k1zR"));
        const response = (parcelRequire("lQADR"));
        return {
            request: request({
                resources: resources,
                includeSynonyms: includeSynonyms
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($ecc95d620b1406fd$var$versions),
    protocol: ({ version: version })=>$ecc95d620b1406fd$var$versions[version]
};

});
parcelRegister("7vfXC", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $5767cf164b3f07d0$require$apiKey = $9kH2s.DescribeConfigs;
/**
 * DescribeConfigs Request (Version: 0) => [resources]
 *   resources => resource_type resource_name [config_names]
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_names => STRING
 */ /**
 * @param {Array} resources An array of config resources to be returned
 */ module.exports = ({ resources: resources })=>({
        apiKey: $5767cf164b3f07d0$require$apiKey,
        apiVersion: 0,
        apiName: "DescribeConfigs",
        encode: async ()=>{
            return new $7jO81().writeArray(resources.map($5767cf164b3f07d0$var$encodeResource));
        }
    });
const $5767cf164b3f07d0$var$encodeResource = ({ type: type, name: name, configNames: configNames = [] })=>{
    return new $7jO81().writeInt8(type).writeString(name).writeNullableArray(configNames);
};

});

parcelRegister("c0t9f", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $8bdc185c1dad7b0c$require$failure = $iL9Wd.failure;
var $8bdc185c1dad7b0c$require$createErrorFromCode = $iL9Wd.createErrorFromCode;

var $hNLcg = parcelRequire("hNLcg");

var $f3rUS = parcelRequire("f3rUS");
/**
 * DescribeConfigs Response (Version: 0) => throttle_time_ms [resources]
 *   throttle_time_ms => INT32
 *   resources => error_code error_message resource_type resource_name [config_entries]
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_entries => config_name config_value read_only is_default is_sensitive
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *       read_only => BOOLEAN
 *       is_default => BOOLEAN
 *       is_sensitive => BOOLEAN
 */ const $8bdc185c1dad7b0c$var$decodeConfigEntries = (decoder, resourceType)=>{
    const configName = decoder.readString();
    const configValue = decoder.readString();
    const readOnly = decoder.readBoolean();
    const isDefault = decoder.readBoolean();
    const isSensitive = decoder.readBoolean();
    /**
   * Backporting ConfigSource value to v0
   * @see https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/requests/DescribeConfigsResponse.java#L232-L242
   */ let configSource;
    if (isDefault) configSource = $hNLcg.DEFAULT_CONFIG;
    else switch(resourceType){
        case $f3rUS.BROKER:
            configSource = $hNLcg.STATIC_BROKER_CONFIG;
            break;
        case $f3rUS.TOPIC:
            configSource = $hNLcg.TOPIC_CONFIG;
            break;
        default:
            configSource = $hNLcg.UNKNOWN;
    }
    return {
        configName: configName,
        configValue: configValue,
        readOnly: readOnly,
        isDefault: isDefault,
        configSource: configSource,
        isSensitive: isSensitive
    };
};
const $8bdc185c1dad7b0c$var$decodeResources = (decoder)=>{
    const errorCode = decoder.readInt16();
    const errorMessage = decoder.readString();
    const resourceType = decoder.readInt8();
    const resourceName = decoder.readString();
    const configEntries = decoder.readArray((decoder)=>$8bdc185c1dad7b0c$var$decodeConfigEntries(decoder, resourceType));
    return {
        errorCode: errorCode,
        errorMessage: errorMessage,
        resourceType: resourceType,
        resourceName: resourceName,
        configEntries: configEntries
    };
};
const $8bdc185c1dad7b0c$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const resources = decoder.readArray($8bdc185c1dad7b0c$var$decodeResources);
    return {
        throttleTime: throttleTime,
        resources: resources
    };
};
const $8bdc185c1dad7b0c$var$parse = async (data)=>{
    const resourcesWithError = data.resources.filter(({ errorCode: errorCode })=>$8bdc185c1dad7b0c$require$failure(errorCode));
    if (resourcesWithError.length > 0) throw $8bdc185c1dad7b0c$require$createErrorFromCode(resourcesWithError[0].errorCode);
    return data;
};
module.exports = {
    decode: $8bdc185c1dad7b0c$var$decode,
    parse: $8bdc185c1dad7b0c$var$parse
};

});
parcelRegister("hNLcg", function(module, exports) {
/**
 * @see https://github.com/apache/kafka/blob/1f240ce1793cab09e1c4823e17436d2b030df2bc/clients/src/main/java/org/apache/kafka/common/requests/DescribeConfigsResponse.java#L115-L122
 */ module.exports = {
    UNKNOWN: 0,
    TOPIC_CONFIG: 1,
    DYNAMIC_BROKER_CONFIG: 2,
    DYNAMIC_DEFAULT_BROKER_CONFIG: 3,
    STATIC_BROKER_CONFIG: 4,
    DEFAULT_CONFIG: 5,
    DYNAMIC_BROKER_LOGGER_CONFIG: 6
};

});

parcelRegister("f3rUS", function(module, exports) {
/**
 * @see https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/config/ConfigResource.java
 */ module.exports = {
    UNKNOWN: 0,
    TOPIC: 2,
    BROKER: 4,
    BROKER_LOGGER: 8
};

});


parcelRegister("38llw", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $2482ad5731bd3d43$require$apiKey = $9kH2s.DescribeConfigs;
/**
 * DescribeConfigs Request (Version: 1) => [resources] include_synonyms
 *   resources => resource_type resource_name [config_names]
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_names => STRING
 *   include_synonyms => BOOLEAN
 */ /**
 * @param {Array} resources An array of config resources to be returned
 * @param [includeSynonyms=false]
 */ module.exports = ({ resources: resources, includeSynonyms: includeSynonyms = false })=>({
        apiKey: $2482ad5731bd3d43$require$apiKey,
        apiVersion: 1,
        apiName: "DescribeConfigs",
        encode: async ()=>{
            return new $7jO81().writeArray(resources.map($2482ad5731bd3d43$var$encodeResource)).writeBoolean(includeSynonyms);
        }
    });
const $2482ad5731bd3d43$var$encodeResource = ({ type: type, name: name, configNames: configNames = [] })=>{
    return new $7jO81().writeInt8(type).writeString(name).writeNullableArray(configNames);
};

});

parcelRegister("dlwzc", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $c0t9f = parcelRequire("c0t9f");
var $9b767f9abac5f5c9$require$parseV0 = $c0t9f.parse;

var $hNLcg = parcelRequire("hNLcg");
var $9b767f9abac5f5c9$require$DEFAULT_CONFIG = $hNLcg.DEFAULT_CONFIG;
/**
 * DescribeConfigs Response (Version: 1) => throttle_time_ms [resources]
 *   throttle_time_ms => INT32
 *   resources => error_code error_message resource_type resource_name [config_entries]
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_entries => config_name config_value read_only config_source is_sensitive [config_synonyms]
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *       read_only => BOOLEAN
 *       config_source => INT8
 *       is_sensitive => BOOLEAN
 *       config_synonyms => config_name config_value config_source
 *         config_name => STRING
 *         config_value => NULLABLE_STRING
 *         config_source => INT8
 */ const $9b767f9abac5f5c9$var$decodeSynonyms = (decoder)=>({
        configName: decoder.readString(),
        configValue: decoder.readString(),
        configSource: decoder.readInt8()
    });
const $9b767f9abac5f5c9$var$decodeConfigEntries = (decoder)=>{
    const configName = decoder.readString();
    const configValue = decoder.readString();
    const readOnly = decoder.readBoolean();
    const configSource = decoder.readInt8();
    const isSensitive = decoder.readBoolean();
    const configSynonyms = decoder.readArray($9b767f9abac5f5c9$var$decodeSynonyms);
    return {
        configName: configName,
        configValue: configValue,
        readOnly: readOnly,
        isDefault: configSource === $9b767f9abac5f5c9$require$DEFAULT_CONFIG,
        configSource: configSource,
        isSensitive: isSensitive,
        configSynonyms: configSynonyms
    };
};
const $9b767f9abac5f5c9$var$decodeResources = (decoder)=>({
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString(),
        resourceType: decoder.readInt8(),
        resourceName: decoder.readString(),
        configEntries: decoder.readArray($9b767f9abac5f5c9$var$decodeConfigEntries)
    });
const $9b767f9abac5f5c9$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const resources = decoder.readArray($9b767f9abac5f5c9$var$decodeResources);
    return {
        throttleTime: throttleTime,
        resources: resources
    };
};
module.exports = {
    decode: $9b767f9abac5f5c9$var$decode,
    parse: $9b767f9abac5f5c9$require$parseV0
};

});

parcelRegister("1k1zR", function(module, exports) {

var $38llw = parcelRequire("38llw");
/**
 * DescribeConfigs Request (Version: 1) => [resources] include_synonyms
 *   resources => resource_type resource_name [config_names]
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_names => STRING
 *   include_synonyms => BOOLEAN
 */ /**
 * @param {Array} resources An array of config resources to be returned
 * @param [includeSynonyms=false]
 */ module.exports = ({ resources: resources, includeSynonyms: includeSynonyms })=>Object.assign($38llw({
        resources: resources,
        includeSynonyms: includeSynonyms
    }), {
        apiVersion: 2
    });

});

parcelRegister("lQADR", function(module, exports) {

var $dlwzc = parcelRequire("dlwzc");
var $fe7ae09bbd47475f$require$parse = $dlwzc.parse;
var $fe7ae09bbd47475f$require$decodeV1 = $dlwzc.decode;
/**
 * Starting in version 2, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * DescribeConfigs Response (Version: 2) => throttle_time_ms [resources]
 *   throttle_time_ms => INT32
 *   resources => error_code error_message resource_type resource_name [config_entries]
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_entries => config_name config_value read_only config_source is_sensitive [config_synonyms]
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *       read_only => BOOLEAN
 *       config_source => INT8
 *       is_sensitive => BOOLEAN
 *       config_synonyms => config_name config_value config_source
 *         config_name => STRING
 *         config_value => NULLABLE_STRING
 *         config_source => INT8
 */ const $fe7ae09bbd47475f$var$decode = async (rawData)=>{
    const decoded = await $fe7ae09bbd47475f$require$decodeV1(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $fe7ae09bbd47475f$var$decode,
    parse: $fe7ae09bbd47475f$require$parse
};

});


parcelRegister("2WjN6", function(module, exports) {




const $2240599b42a07979$var$versions = {
    0: ({ resources: resources, validateOnly: validateOnly })=>{
        const request = (parcelRequire("2kru1"));
        const response = (parcelRequire("KWRU1"));
        return {
            request: request({
                resources: resources,
                validateOnly: validateOnly
            }),
            response: response
        };
    },
    1: ({ resources: resources, validateOnly: validateOnly })=>{
        const request = (parcelRequire("76Jlm"));
        const response = (parcelRequire("eRxZZ"));
        return {
            request: request({
                resources: resources,
                validateOnly: validateOnly
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($2240599b42a07979$var$versions),
    protocol: ({ version: version })=>$2240599b42a07979$var$versions[version]
};

});
parcelRegister("2kru1", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $1b22c49aba26034e$require$apiKey = $9kH2s.AlterConfigs;
/**
 * AlterConfigs Request (Version: 0) => [resources] validate_only
 *   resources => resource_type resource_name [config_entries]
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_entries => config_name config_value
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *   validate_only => BOOLEAN
 */ /**
 * @param {Array} resources An array of resources to change
 * @param {boolean} [validateOnly=false]
 */ module.exports = ({ resources: resources, validateOnly: validateOnly = false })=>({
        apiKey: $1b22c49aba26034e$require$apiKey,
        apiVersion: 0,
        apiName: "AlterConfigs",
        encode: async ()=>{
            return new $7jO81().writeArray(resources.map($1b22c49aba26034e$var$encodeResource)).writeBoolean(validateOnly);
        }
    });
const $1b22c49aba26034e$var$encodeResource = ({ type: type, name: name, configEntries: configEntries })=>{
    return new $7jO81().writeInt8(type).writeString(name).writeArray(configEntries.map($1b22c49aba26034e$var$encodeConfigEntries));
};
const $1b22c49aba26034e$var$encodeConfigEntries = ({ name: name, value: value })=>{
    return new $7jO81().writeString(name).writeString(value);
};

});

parcelRegister("KWRU1", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $08d1f60799ded442$require$failure = $iL9Wd.failure;
var $08d1f60799ded442$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * AlterConfigs Response (Version: 0) => throttle_time_ms [resources]
 *   throttle_time_ms => INT32
 *   resources => error_code error_message resource_type resource_name
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 *     resource_type => INT8
 *     resource_name => STRING
 */ const $08d1f60799ded442$var$decodeResources = (decoder)=>({
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString(),
        resourceType: decoder.readInt8(),
        resourceName: decoder.readString()
    });
const $08d1f60799ded442$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    const resources = decoder.readArray($08d1f60799ded442$var$decodeResources);
    return {
        throttleTime: throttleTime,
        resources: resources
    };
};
const $08d1f60799ded442$var$parse = async (data)=>{
    const resourcesWithError = data.resources.filter(({ errorCode: errorCode })=>$08d1f60799ded442$require$failure(errorCode));
    if (resourcesWithError.length > 0) throw $08d1f60799ded442$require$createErrorFromCode(resourcesWithError[0].errorCode);
    return data;
};
module.exports = {
    decode: $08d1f60799ded442$var$decode,
    parse: $08d1f60799ded442$var$parse
};

});

parcelRegister("76Jlm", function(module, exports) {

var $2kru1 = parcelRequire("2kru1");
/**
 * AlterConfigs Request (Version: 1) => [resources] validate_only
 *   resources => resource_type resource_name [config_entries]
 *     resource_type => INT8
 *     resource_name => STRING
 *     config_entries => config_name config_value
 *       config_name => STRING
 *       config_value => NULLABLE_STRING
 *   validate_only => BOOLEAN
 */ /**
 * @param {Array} resources An array of resources to change
 * @param {boolean} [validateOnly=false]
 */ module.exports = ({ resources: resources, validateOnly: validateOnly })=>Object.assign($2kru1({
        resources: resources,
        validateOnly: validateOnly
    }), {
        apiVersion: 1
    });

});

parcelRegister("eRxZZ", function(module, exports) {

var $KWRU1 = parcelRequire("KWRU1");
var $ad206360987e19ac$require$parse = $KWRU1.parse;
var $ad206360987e19ac$require$decodeV0 = $KWRU1.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * AlterConfigs Response (Version: 1) => throttle_time_ms [resources]
 *   throttle_time_ms => INT32
 *   resources => error_code error_message resource_type resource_name
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 *     resource_type => INT8
 *     resource_name => STRING
 */ const $ad206360987e19ac$var$decode = async (rawData)=>{
    const decoded = await $ad206360987e19ac$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $ad206360987e19ac$var$decode,
    parse: $ad206360987e19ac$require$parse
};

});


parcelRegister("3k1ir", function(module, exports) {




const $26b43ecbb3ff8e02$var$versions = {
    0: ({ authBytes: authBytes })=>{
        const request = (parcelRequire("dvrpL"));
        const response = (parcelRequire("k4YWt"));
        return {
            request: request({
                authBytes: authBytes
            }),
            response: response
        };
    },
    1: ({ authBytes: authBytes })=>{
        const request = (parcelRequire("bhOKD"));
        const response = (parcelRequire("8Cnvo"));
        return {
            request: request({
                authBytes: authBytes
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($26b43ecbb3ff8e02$var$versions),
    protocol: ({ version: version })=>$26b43ecbb3ff8e02$var$versions[version]
};

});
parcelRegister("dvrpL", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $9d536f8c94535ce9$require$apiKey = $9kH2s.SaslAuthenticate;
/**
 * SaslAuthenticate Request (Version: 0) => sasl_auth_bytes
 *   sasl_auth_bytes => BYTES
 */ /**
 * @param {Buffer} authBytes - SASL authentication bytes from client as defined by the SASL mechanism
 */ module.exports = ({ authBytes: authBytes })=>({
        apiKey: $9d536f8c94535ce9$require$apiKey,
        apiVersion: 0,
        apiName: "SaslAuthenticate",
        encode: async ()=>{
            return new $7jO81().writeBuffer(authBytes);
        }
    });

});

parcelRegister("k4YWt", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $7jO81 = parcelRequire("7jO81");

var $iL9Wd = parcelRequire("iL9Wd");
var $e9e3742ec8a88906$require$failure = $iL9Wd.failure;
var $e9e3742ec8a88906$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
var $e9e3742ec8a88906$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
var $e9e3742ec8a88906$require$errorCodes = $iL9Wd.errorCodes;

var $8mQRr = parcelRequire("8mQRr");
var $e9e3742ec8a88906$require$KafkaJSProtocolError = $8mQRr.KafkaJSProtocolError;
const $e9e3742ec8a88906$var$SASL_AUTHENTICATION_FAILED = 58;
const $e9e3742ec8a88906$var$protocolAuthError = $e9e3742ec8a88906$require$errorCodes.find((e)=>e.code === $e9e3742ec8a88906$var$SASL_AUTHENTICATION_FAILED);
/**
 * SaslAuthenticate Response (Version: 0) => error_code error_message sasl_auth_bytes
 *   error_code => INT16
 *   error_message => NULLABLE_STRING
 *   sasl_auth_bytes => BYTES
 */ const $e9e3742ec8a88906$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $e9e3742ec8a88906$require$failIfVersionNotSupported(errorCode);
    const errorMessage = decoder.readString();
    // This is necessary to make the response compatible with the original
    // mechanism protocols. They expect a byte response, which starts with
    // the size
    const authBytesEncoder = new $7jO81().writeBytes(decoder.readBytes());
    const authBytes = authBytesEncoder.buffer;
    return {
        errorCode: errorCode,
        errorMessage: errorMessage,
        authBytes: authBytes
    };
};
const $e9e3742ec8a88906$var$parse = async (data)=>{
    if (data.errorCode === $e9e3742ec8a88906$var$SASL_AUTHENTICATION_FAILED && data.errorMessage) throw new $e9e3742ec8a88906$require$KafkaJSProtocolError({
        ...$e9e3742ec8a88906$var$protocolAuthError,
        message: data.errorMessage
    });
    if ($e9e3742ec8a88906$require$failure(data.errorCode)) throw $e9e3742ec8a88906$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $e9e3742ec8a88906$var$decode,
    parse: $e9e3742ec8a88906$var$parse
};

});

parcelRegister("bhOKD", function(module, exports) {

var $dvrpL = parcelRequire("dvrpL");
/**
 * SaslAuthenticate Request (Version: 1) => sasl_auth_bytes
 *   sasl_auth_bytes => BYTES
 */ /**
 * @param {Buffer} authBytes - SASL authentication bytes from client as defined by the SASL mechanism
 */ module.exports = ({ authBytes: authBytes })=>Object.assign($dvrpL({
        authBytes: authBytes
    }), {
        apiVersion: 1
    });

});

parcelRegister("8Cnvo", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $7jO81 = parcelRequire("7jO81");

var $k4YWt = parcelRequire("k4YWt");
var $64641b0053d07b95$require$parseV0 = $k4YWt.parse;

var $iL9Wd = parcelRequire("iL9Wd");
var $64641b0053d07b95$require$failIfVersionNotSupported = $iL9Wd.failIfVersionNotSupported;
/**
 * SaslAuthenticate Response (Version: 1) => error_code error_message sasl_auth_bytes
 *   error_code => INT16
 *   error_message => NULLABLE_STRING
 *   sasl_auth_bytes => BYTES
 *   session_lifetime_ms => INT64
 */ const $64641b0053d07b95$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const errorCode = decoder.readInt16();
    $64641b0053d07b95$require$failIfVersionNotSupported(errorCode);
    const errorMessage = decoder.readString();
    // This is necessary to make the response compatible with the original
    // mechanism protocols. They expect a byte response, which starts with
    // the size
    const authBytesEncoder = new $7jO81().writeBytes(decoder.readBytes());
    const authBytes = authBytesEncoder.buffer;
    const sessionLifetimeMs = decoder.readInt64().toString();
    return {
        errorCode: errorCode,
        errorMessage: errorMessage,
        authBytes: authBytes,
        sessionLifetimeMs: sessionLifetimeMs
    };
};
module.exports = {
    decode: $64641b0053d07b95$var$decode,
    parse: $64641b0053d07b95$require$parseV0
};

});


parcelRegister("lwEbi", function(module, exports) {




const $fabbc146c64255c1$var$versions = {
    0: ({ topicPartitions: topicPartitions, timeout: timeout, validateOnly: validateOnly })=>{
        const request = (parcelRequire("fFT9M"));
        const response = (parcelRequire("rNeTI"));
        return {
            request: request({
                topicPartitions: topicPartitions,
                timeout: timeout,
                validateOnly: validateOnly
            }),
            response: response
        };
    },
    1: ({ topicPartitions: topicPartitions, validateOnly: validateOnly, timeout: timeout })=>{
        const request = (parcelRequire("jhNCQ"));
        const response = (parcelRequire("fUFoN"));
        return {
            request: request({
                topicPartitions: topicPartitions,
                validateOnly: validateOnly,
                timeout: timeout
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($fabbc146c64255c1$var$versions),
    protocol: ({ version: version })=>$fabbc146c64255c1$var$versions[version]
};

});
parcelRegister("fFT9M", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $b695784f7d545686$require$apiKey = $9kH2s.CreatePartitions;
/**
 * CreatePartitions Request (Version: 0) => [topic_partitions] timeout validate_only
 *   topic_partitions => topic new_partitions
 *     topic => STRING
 *     new_partitions => count [assignment]
 *       count => INT32
 *       assignment => ARRAY(INT32)
 *   timeout => INT32
 *   validate_only => BOOLEAN
 */ module.exports = ({ topicPartitions: topicPartitions, validateOnly: validateOnly = false, timeout: timeout = 5000 })=>({
        apiKey: $b695784f7d545686$require$apiKey,
        apiVersion: 0,
        apiName: "CreatePartitions",
        encode: async ()=>{
            return new $7jO81().writeArray(topicPartitions.map($b695784f7d545686$var$encodeTopicPartitions)).writeInt32(timeout).writeBoolean(validateOnly);
        }
    });
const $b695784f7d545686$var$encodeTopicPartitions = ({ topic: topic, count: count, assignments: assignments = [] })=>{
    return new $7jO81().writeString(topic).writeInt32(count).writeNullableArray(assignments.map($b695784f7d545686$var$encodeAssignments));
};
const $b695784f7d545686$var$encodeAssignments = (brokerIds)=>{
    return new $7jO81().writeNullableArray(brokerIds);
};

});

parcelRegister("rNeTI", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $0538b7a0b4261a94$require$failure = $iL9Wd.failure;
var $0538b7a0b4261a94$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/*
 * CreatePartitions Response (Version: 0) => throttle_time_ms [topic_errors]
 *   throttle_time_ms => INT32
 *   topic_errors => topic error_code error_message
 *     topic => STRING
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 */ const $0538b7a0b4261a94$var$topicNameComparator = (a, b)=>a.topic.localeCompare(b.topic);
const $0538b7a0b4261a94$var$topicErrors = (decoder)=>({
        topic: decoder.readString(),
        errorCode: decoder.readInt16(),
        errorMessage: decoder.readString()
    });
const $0538b7a0b4261a94$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTime = decoder.readInt32();
    return {
        throttleTime: throttleTime,
        topicErrors: decoder.readArray($0538b7a0b4261a94$var$topicErrors).sort($0538b7a0b4261a94$var$topicNameComparator)
    };
};
const $0538b7a0b4261a94$var$parse = async (data)=>{
    const topicsWithError = data.topicErrors.filter(({ errorCode: errorCode })=>$0538b7a0b4261a94$require$failure(errorCode));
    if (topicsWithError.length > 0) throw $0538b7a0b4261a94$require$createErrorFromCode(topicsWithError[0].errorCode);
    return data;
};
module.exports = {
    decode: $0538b7a0b4261a94$var$decode,
    parse: $0538b7a0b4261a94$var$parse
};

});

parcelRegister("jhNCQ", function(module, exports) {

var $fFT9M = parcelRequire("fFT9M");
/**
 * CreatePartitions Request (Version: 1) => [topic_partitions] timeout validate_only
 *   topic_partitions => topic new_partitions
 *     topic => STRING
 *     new_partitions => count [assignment]
 *       count => INT32
 *       assignment => ARRAY(INT32)
 *   timeout => INT32
 *   validate_only => BOOLEAN
 */ module.exports = ({ topicPartitions: topicPartitions, validateOnly: validateOnly, timeout: timeout })=>Object.assign($fFT9M({
        topicPartitions: topicPartitions,
        validateOnly: validateOnly,
        timeout: timeout
    }), {
        apiVersion: 1
    });

});

parcelRegister("fUFoN", function(module, exports) {

var $rNeTI = parcelRequire("rNeTI");
var $b95c32f652b9fcc6$require$parse = $rNeTI.parse;
var $b95c32f652b9fcc6$require$decodeV0 = $rNeTI.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * CreatePartitions Response (Version: 0) => throttle_time_ms [topic_errors]
 *   throttle_time_ms => INT32
 *   topic_errors => topic error_code error_message
 *     topic => STRING
 *     error_code => INT16
 *     error_message => NULLABLE_STRING
 */ const $b95c32f652b9fcc6$var$decode = async (rawData)=>{
    const decoded = await $b95c32f652b9fcc6$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $b95c32f652b9fcc6$var$decode,
    parse: $b95c32f652b9fcc6$require$parse
};

});


parcelRegister("gmKiY", function(module, exports) {




const $bea29e9e5f5f5f8a$var$versions = {
    0: (groupIds)=>{
        const request = (parcelRequire("laB22"));
        const response = (parcelRequire("faK0o"));
        return {
            request: request(groupIds),
            response: response
        };
    },
    1: (groupIds)=>{
        const request = (parcelRequire("3k836"));
        const response = (parcelRequire("jvbdH"));
        return {
            request: request(groupIds),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($bea29e9e5f5f5f8a$var$versions),
    protocol: ({ version: version })=>$bea29e9e5f5f5f8a$var$versions[version]
};

});
parcelRegister("laB22", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $f69741e448b94301$require$apiKey = $9kH2s.DeleteGroups;
/**
 * DeleteGroups Request (Version: 0) => [groups_names]
 *   groups_names => STRING
 */ /**
 */ module.exports = (groupIds)=>({
        apiKey: $f69741e448b94301$require$apiKey,
        apiVersion: 0,
        apiName: "DeleteGroups",
        encode: async ()=>{
            return new $7jO81().writeArray(groupIds.map($f69741e448b94301$var$encodeGroups));
        }
    });
const $f69741e448b94301$var$encodeGroups = (group)=>{
    return new $7jO81().writeString(group);
};

});

parcelRegister("faK0o", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $b0bb79e4751fc38c$require$failure = $iL9Wd.failure;
var $b0bb79e4751fc38c$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * DeleteGroups Response (Version: 0) => throttle_time_ms [results]
 *  throttle_time_ms => INT32
 *  results => group_id error_code
 *    group_id => STRING
 *    error_code => INT16
 */ const $b0bb79e4751fc38c$var$decodeGroup = (decoder)=>({
        groupId: decoder.readString(),
        errorCode: decoder.readInt16()
    });
const $b0bb79e4751fc38c$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    const throttleTimeMs = decoder.readInt32();
    const results = decoder.readArray($b0bb79e4751fc38c$var$decodeGroup);
    for (const result of results)if ($b0bb79e4751fc38c$require$failure(result.errorCode)) result.error = $b0bb79e4751fc38c$require$createErrorFromCode(result.errorCode);
    return {
        throttleTimeMs: throttleTimeMs,
        results: results
    };
};
const $b0bb79e4751fc38c$var$parse = async (data)=>{
    return data;
};
module.exports = {
    decode: $b0bb79e4751fc38c$var$decode,
    parse: $b0bb79e4751fc38c$var$parse
};

});

parcelRegister("3k836", function(module, exports) {

var $laB22 = parcelRequire("laB22");
/**
 * DeleteGroups Request (Version: 1)
 */ module.exports = (groupIds)=>Object.assign($laB22(groupIds), {
        apiVersion: 1
    });

});

parcelRegister("jvbdH", function(module, exports) {

var $faK0o = parcelRequire("faK0o");
var $e3299d998b3aa585$require$parse = $faK0o.parse;
var $e3299d998b3aa585$require$decodeV0 = $faK0o.decode;
/**
 * Starting in version 1, on quota violation, brokers send out responses before throttling.
 * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication
 *
 * DeleteGroups Response (Version: 1) => throttle_time_ms [results]
 *  throttle_time_ms => INT32
 *  results => group_id error_code
 *    group_id => STRING
 *    error_code => INT16
 */ const $e3299d998b3aa585$var$decode = async (rawData)=>{
    const decoded = await $e3299d998b3aa585$require$decodeV0(rawData);
    return {
        ...decoded,
        throttleTime: 0,
        clientSideThrottleTime: decoded.throttleTime
    };
};
module.exports = {
    decode: $e3299d998b3aa585$var$decode,
    parse: $e3299d998b3aa585$require$parse
};

});


parcelRegister("bZ5nX", function(module, exports) {


const $8b9991a8d302fe91$var$versions = {
    0: ({ topics: topics, timeout: timeout })=>{
        const request = (parcelRequire("6bdPs"));
        const response = (parcelRequire("fSrcw"));
        return {
            request: request({
                topics: topics,
                timeout: timeout
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($8b9991a8d302fe91$var$versions),
    protocol: ({ version: version })=>$8b9991a8d302fe91$var$versions[version]
};

});
parcelRegister("6bdPs", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $47fe7f51e2b588c8$require$apiKey = $9kH2s.AlterPartitionReassignments;
/**
 * AlterPartitionReassignments Request (Version: 0) => timeout_ms [topics] TAG_BUFFER
 * timeout_ms => INT32
 * topics => name [partitions] TAG_BUFFER
 *  name => COMPACT_STRING
 *  partitions => partition_index [replicas] TAG_BUFFER
 *    partition_index => INT32
 *    replicas => INT32
 */ module.exports = ({ topics: topics, timeout: timeout = 5000 })=>({
        apiKey: $47fe7f51e2b588c8$require$apiKey,
        apiVersion: 0,
        apiName: "AlterPartitionReassignments",
        encode: async ()=>{
            return new $7jO81().writeUVarIntBytes().writeInt32(timeout).writeUVarIntArray(topics.map($47fe7f51e2b588c8$var$encodeTopics)).writeUVarIntBytes();
        }
    });
const $47fe7f51e2b588c8$var$encodeTopics = ({ topic: topic, partitionAssignment: partitionAssignment })=>{
    return new $7jO81().writeUVarIntString(topic).writeUVarIntArray(partitionAssignment.map($47fe7f51e2b588c8$var$encodePartitionAssignment)).writeUVarIntBytes();
};
const $47fe7f51e2b588c8$var$encodePartitionAssignment = ({ partition: partition, replicas: replicas })=>{
    return new $7jO81().writeInt32(partition).writeUVarIntArray(replicas.map($47fe7f51e2b588c8$var$encodeReplicas)).writeUVarIntBytes();
};
const $47fe7f51e2b588c8$var$encodeReplicas = (replica)=>{
    return new $7jO81().writeInt32(replica);
};

});

parcelRegister("fSrcw", function(module, exports) {

var $8mQRr = parcelRequire("8mQRr");
var $b8f0ffbaa4d2cc55$require$KafkaJSAggregateError = $8mQRr.KafkaJSAggregateError;
var $b8f0ffbaa4d2cc55$require$KafkaJSAlterPartitionReassignmentsError = $8mQRr.KafkaJSAlterPartitionReassignmentsError;

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $b8f0ffbaa4d2cc55$require$failure = $iL9Wd.failure;
var $b8f0ffbaa4d2cc55$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * AlterPartitionReassignments Response (Version: 0) => throttle_time_ms error_code error_message [responses] TAG_BUFFER
 * throttle_time_ms => INT32
 * error_code => INT16
 * error_message => COMPACT_NULLABLE_STRING
 * responses => name [partitions] TAG_BUFFER
 *  name => COMPACT_STRING
 *  partitions => partition_index error_code error_message TAG_BUFFER
 *    partition_index => INT32
 *    error_code => INT16
 *    error_message => COMPACT_NULLABLE_STRING
 */ const $b8f0ffbaa4d2cc55$var$decodeResponses = (decoder)=>{
    const response = {
        topic: decoder.readUVarIntString(),
        partitions: decoder.readUVarIntArray($b8f0ffbaa4d2cc55$var$decodePartitions)
    };
    decoder.readTaggedFields();
    return response;
};
const $b8f0ffbaa4d2cc55$var$decodePartitions = (decoder)=>{
    const partition = {
        partition: decoder.readInt32(),
        errorCode: decoder.readInt16()
    };
    decoder.readUVarIntString();
    decoder.readTaggedFields();
    return partition;
};
const $b8f0ffbaa4d2cc55$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    decoder.readTaggedFields();
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    decoder.readUVarIntString();
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        responses: decoder.readUVarIntArray($b8f0ffbaa4d2cc55$var$decodeResponses)
    };
};
const $b8f0ffbaa4d2cc55$var$parse = async (data)=>{
    if ($b8f0ffbaa4d2cc55$require$failure(data.errorCode)) throw new $b8f0ffbaa4d2cc55$require$KafkaJSAlterPartitionReassignmentsError($b8f0ffbaa4d2cc55$require$createErrorFromCode(data.errorCode));
    const topicPartitionsWithError = data.responses.flatMap(({ partitions: partitions, topic: topic })=>partitions.filter((partition)=>$b8f0ffbaa4d2cc55$require$failure(partition.errorCode)).map((partition)=>({
                ...partition,
                topic: topic
            })));
    if (topicPartitionsWithError.length > 0) throw new $b8f0ffbaa4d2cc55$require$KafkaJSAggregateError("Errors altering partition reassignments", topicPartitionsWithError.map(({ topic: topic, partition: partition, errorCode: errorCode })=>new $b8f0ffbaa4d2cc55$require$KafkaJSAlterPartitionReassignmentsError($b8f0ffbaa4d2cc55$require$createErrorFromCode(errorCode), topic, partition)));
    return data;
};
module.exports = {
    decode: $b8f0ffbaa4d2cc55$var$decode,
    parse: $b8f0ffbaa4d2cc55$var$parse
};

});


parcelRegister("VkGLI", function(module, exports) {


const $0ac55f5a7d6b3c1e$var$versions = {
    0: ({ topics: topics, timeout: timeout })=>{
        const request = (parcelRequire("8WMmP"));
        const response = (parcelRequire("ebnhr"));
        return {
            request: request({
                topics: topics,
                timeout: timeout
            }),
            response: response
        };
    }
};
module.exports = {
    versions: Object.keys($0ac55f5a7d6b3c1e$var$versions),
    protocol: ({ version: version })=>$0ac55f5a7d6b3c1e$var$versions[version]
};

});
parcelRegister("8WMmP", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");

var $9kH2s = parcelRequire("9kH2s");
var $6839423a0082fd90$require$apiKey = $9kH2s.ListPartitionReassignments;
/**
 * ListPartitionReassignments Request (Version: 0) => timeout_ms [topics] TAG_BUFFER
 *  timeout_ms => INT32
 *  topics => name [partition_indexes] TAG_BUFFER
 *    name => COMPACT_STRING
 *    partition_indexes => INT32
 */ module.exports = ({ topics: topics = null, timeout: timeout = 5000 })=>({
        apiKey: $6839423a0082fd90$require$apiKey,
        apiVersion: 0,
        apiName: "ListPartitionReassignments",
        encode: async ()=>{
            return new $7jO81().writeUVarIntBytes().writeInt32(timeout).writeUVarIntArray(topics === null ? topics : topics.map($6839423a0082fd90$var$encodeTopics)).writeUVarIntBytes();
        }
    });
const $6839423a0082fd90$var$encodeTopics = ({ topic: topic, partitions: partitions })=>{
    return new $7jO81().writeUVarIntString(topic).writeUVarIntArray(partitions.map($6839423a0082fd90$var$encodePartitions)).writeUVarIntBytes();
};
const $6839423a0082fd90$var$encodePartitions = (partition)=>{
    return new $7jO81().writeInt32(partition);
};

});

parcelRegister("ebnhr", function(module, exports) {

var $eMnPM = parcelRequire("eMnPM");

var $iL9Wd = parcelRequire("iL9Wd");
var $a53426bda1899543$require$failure = $iL9Wd.failure;
var $a53426bda1899543$require$createErrorFromCode = $iL9Wd.createErrorFromCode;
/**
 * ListPartitionReassignments Response (Version: 0) => throttle_time_ms error_code error_message [topics] TAG_BUFFER
 *  throttle_time_ms => INT32
 *  error_code => INT16
 *  error_message => COMPACT_NULLABLE_STRING
 *  topics => name [partitions] TAG_BUFFER
 *    name => COMPACT_STRING
 *    partitions => partition_index [replicas] [adding_replicas] [removing_replicas] TAG_BUFFER
 *      partition_index => INT32
 *       replicas => INT32
 *       adding_replicas => INT32
 *       removing_replicas => INT32
 */ const $a53426bda1899543$var$decodeReplicas = (decoder)=>{
    return decoder.readInt32();
};
const $a53426bda1899543$var$decodePartitions = (decoder)=>{
    const partition = {
        partition: decoder.readInt32(),
        replicas: decoder.readUVarIntArray($a53426bda1899543$var$decodeReplicas),
        addingReplicas: decoder.readUVarIntArray($a53426bda1899543$var$decodeReplicas),
        removingReplicas: decoder.readUVarIntArray($a53426bda1899543$var$decodeReplicas)
    };
    // Read tagged fields
    decoder.readTaggedFields();
    return partition;
};
const $a53426bda1899543$var$decodeTopics = (decoder)=>{
    const topic = {
        name: decoder.readUVarIntString(),
        partitions: decoder.readUVarIntArray($a53426bda1899543$var$decodePartitions)
    };
    // Read tagged fields
    decoder.readTaggedFields();
    return topic;
};
const $a53426bda1899543$var$decode = async (rawData)=>{
    const decoder = new $eMnPM(rawData);
    // Read tagged fields
    decoder.readTaggedFields();
    const throttleTime = decoder.readInt32();
    const errorCode = decoder.readInt16();
    // Read error message
    decoder.readUVarIntString();
    return {
        throttleTime: throttleTime,
        errorCode: errorCode,
        topics: decoder.readUVarIntArray($a53426bda1899543$var$decodeTopics)
    };
};
const $a53426bda1899543$var$parse = async (data)=>{
    if ($a53426bda1899543$require$failure(data.errorCode)) throw $a53426bda1899543$require$createErrorFromCode(data.errorCode);
    return data;
};
module.exports = {
    decode: $a53426bda1899543$var$decode,
    parse: $a53426bda1899543$var$parse
};

});


parcelRegister("dOl0h", function(module, exports) {
module.exports = {
    maxRetryTime: 1000,
    initialRetryTime: 50,
    factor: 0.02,
    multiplier: 1.5,
    retries: 15
};

});

parcelRegister("jzcUK", function(module, exports) {
module.exports = {
    maxRetryTime: 30000,
    initialRetryTime: 300,
    factor: 0.2,
    multiplier: 2,
    retries: 5
};

});

parcelRegister("lllq3", function(module, exports) {
/**
 * http://www.ietf.org/rfc/rfc2595.txt
 *
 * The mechanism consists of a single message from the client to the
 * server.  The client sends the authorization identity (identity to
 * login as), followed by a US-ASCII NUL character, followed by the
 * authentication identity (identity whose password will be used),
 * followed by a US-ASCII NUL character, followed by the clear-text
 * password.  The client may leave the authorization identity empty to
 * indicate that it is the same as the authentication identity.
 *
 * The server will verify the authentication identity and password with
 * the system authentication database and verify that the authentication
 * credentials permit the client to login as the authorization identity.
 * If both steps succeed, the user is logged in.
 */ 
var $7jO81 = parcelRequire("7jO81");
const $f89c2c90736c9ccd$var$US_ASCII_NULL_CHAR = "\0";
module.exports = ({ authorizationIdentity: authorizationIdentity = null, username: username, password: password })=>({
        encode: async ()=>{
            return new $7jO81().writeBytes([
                authorizationIdentity,
                username,
                password
            ].join($f89c2c90736c9ccd$var$US_ASCII_NULL_CHAR)).buffer;
        }
    });

});

parcelRegister("3acug", function(module, exports) {
module.exports = {
    decode: async ()=>true,
    parse: async ()=>true
};

});

parcelRegister("bgpfe", function(module, exports) {
/**
 * https://tools.ietf.org/html/rfc5802
 *
 * First, the client sends the "client-first-message" containing:
 *
 *  -> a GS2 header consisting of a flag indicating whether channel
 * binding is supported-but-not-used, not supported, or used, and an
 * optional SASL authorization identity;
 *
 *  -> SCRAM username and a random, unique nonce attributes.
 *
 * Note that the client's first message will always start with "n", "y",
 * or "p"; otherwise, the message is invalid and authentication MUST
 * fail.  This is important, as it allows for GS2 extensibility (e.g.,
 * to add support for security layers).
 */ 
var $7jO81 = parcelRequire("7jO81");
module.exports = ({ clientFirstMessage: clientFirstMessage })=>({
        encode: async ()=>new $7jO81().writeBytes(clientFirstMessage).buffer
    });

});

parcelRegister("2zteB", function(module, exports) {
/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "_" }] */ 
var $eMnPM = parcelRequire("eMnPM");
const $1df587099c72d641$var$ENTRY_REGEX = /^([rsiev])=(.*)$/;
module.exports = {
    decode: async (rawData)=>{
        return new $eMnPM(rawData).readBytes();
    },
    parse: async (data)=>{
        const processed = data.toString().split(",").map((str)=>{
            const [_, key, value] = str.match($1df587099c72d641$var$ENTRY_REGEX);
            return [
                key,
                value
            ];
        }).reduce((obj, entry)=>({
                ...obj,
                [entry[0]]: entry[1]
            }), {});
        return {
            original: data.toString(),
            ...processed
        };
    }
};

});

parcelRegister("7BNGP", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");
module.exports = ({ finalMessage: finalMessage })=>({
        encode: async ()=>new $7jO81().writeBytes(finalMessage).buffer
    });

});

parcelRegister("72x96", function(module, exports) {

module.exports = (parcelRequire("2zteB"));

});

parcelRegister("1nLjt", function(module, exports) {

var $7jO81 = parcelRequire("7jO81");
const $101ca3cced635c04$var$US_ASCII_NULL_CHAR = "\0";
module.exports = ({ authorizationIdentity: authorizationIdentity, accessKeyId: accessKeyId, secretAccessKey: secretAccessKey, sessionToken: sessionToken = "" })=>({
        encode: async ()=>{
            return new $7jO81().writeBytes([
                authorizationIdentity,
                accessKeyId,
                secretAccessKey,
                sessionToken
            ].join($101ca3cced635c04$var$US_ASCII_NULL_CHAR)).buffer;
        }
    });

});

parcelRegister("fO2bE", function(module, exports) {
module.exports = {
    decode: async ()=>true,
    parse: async ()=>true
};

});

parcelRegister("9lKs7", function(module, exports) {
/**
 * http://www.ietf.org/rfc/rfc5801.txt
 *
 * See org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponse
 * for official Java client implementation.
 *
 * The mechanism consists of a message from the client to the server.
 * The client sends the "n,"" GS header, followed by the authorizationIdentitty
 * prefixed by "a=" (if present), followed by ",", followed by a US-ASCII SOH
 * character, followed by "auth=Bearer ", followed by the token value, followed
 * by US-ASCII SOH character, followed by SASL extensions in OAuth "friendly"
 * format and then closed by two additionals US-ASCII SOH characters.
 *
 * SASL extensions are optional an must be expressed as key-value pairs in an
 * object. Each expression is converted as, the extension entry key, followed
 * by "=", followed by extension entry value. Each extension is separated by a
 * US-ASCII SOH character. If extensions are not present, their relative part
 * in the message, including the US-ASCII SOH character, is omitted.
 *
 * The client may leave the authorization identity empty to
 * indicate that it is the same as the authentication identity.
 *
 * The server will verify the authentication token and verify that the
 * authentication credentials permit the client to login as the authorization
 * identity. If both steps succeed, the user is logged in.
 */ 
var $6cea1bba996fb257$require$Buffer = $4UN2M$buffer.Buffer;

var $7jO81 = parcelRequire("7jO81");
const $6cea1bba996fb257$var$SEPARATOR = "\x01" // SOH - Start Of Header ASCII
;
function $6cea1bba996fb257$var$formatExtensions(extensions) {
    let msg = "";
    if (extensions == null) return msg;
    let prefix = "";
    for(const k in extensions){
        msg += `${prefix}${k}=${extensions[k]}`;
        prefix = $6cea1bba996fb257$var$SEPARATOR;
    }
    return msg;
}
module.exports = async ({ authorizationIdentity: authorizationIdentity = null }, oauthBearerToken)=>{
    const authzid = authorizationIdentity == null ? "" : `"a=${authorizationIdentity}`;
    let ext = $6cea1bba996fb257$var$formatExtensions(oauthBearerToken.extensions);
    if (ext.length > 0) ext = `${$6cea1bba996fb257$var$SEPARATOR}${ext}`;
    const oauthMsg = `n,${authzid},${$6cea1bba996fb257$var$SEPARATOR}auth=Bearer ${oauthBearerToken.value}${ext}${$6cea1bba996fb257$var$SEPARATOR}${$6cea1bba996fb257$var$SEPARATOR}`;
    return {
        encode: async ()=>{
            return new $7jO81().writeBytes($6cea1bba996fb257$require$Buffer.from(oauthMsg)).buffer;
        }
    };
};

});

parcelRegister("17UyB", function(module, exports) {
module.exports = {
    decode: async ()=>true,
    parse: async ()=>true
};

});

parcelRegister("e5tr3", function(module, exports) {


var $a4185d8ef4233c62$require$Buffer = $4UN2M$buffer.Buffer;

var $6mDsB = parcelRequire("6mDsB");




var $3xcmX = parcelRequire("3xcmX");
const $a4185d8ef4233c62$var$version = $3xcmX.version;
const $a4185d8ef4233c62$var$LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
// Parse src into an Object
function $a4185d8ef4233c62$var$parse(src) {
    const obj = {};
    // Convert buffer to string
    let lines = src.toString();
    // Convert line breaks to same format
    lines = lines.replace(/\r\n?/mg, "\n");
    let match;
    while((match = $a4185d8ef4233c62$var$LINE.exec(lines)) != null){
        const key = match[1];
        // Default undefined or null to empty string
        let value = match[2] || "";
        // Remove whitespace
        value = value.trim();
        // Check if double quoted
        const maybeQuote = value[0];
        // Remove surrounding quotes
        value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
        // Expand newlines if double quoted
        if (maybeQuote === '"') {
            value = value.replace(/\\n/g, "\n");
            value = value.replace(/\\r/g, "\r");
        }
        // Add to object
        obj[key] = value;
    }
    return obj;
}
function $a4185d8ef4233c62$var$_parseVault(options) {
    const vaultPath = $a4185d8ef4233c62$var$_vaultPath(options);
    // Parse .env.vault
    const result = $a4185d8ef4233c62$var$DotenvModule.configDotenv({
        path: vaultPath
    });
    if (!result.parsed) {
        const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
        err.code = "MISSING_DATA";
        throw err;
    }
    // handle scenario for comma separated keys - for use with key rotation
    // example: DOTENV_KEY="dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod"
    const keys = $a4185d8ef4233c62$var$_dotenvKey(options).split(",");
    const length = keys.length;
    let decrypted;
    for(let i = 0; i < length; i++)try {
        // Get full key
        const key = keys[i].trim();
        // Get instructions for decrypt
        const attrs = $a4185d8ef4233c62$var$_instructions(result, key);
        // Decrypt
        decrypted = $a4185d8ef4233c62$var$DotenvModule.decrypt(attrs.ciphertext, attrs.key);
        break;
    } catch (error) {
        // last key
        if (i + 1 >= length) throw error;
    // try next key
    }
    // Parse decrypted .env string
    return $a4185d8ef4233c62$var$DotenvModule.parse(decrypted);
}
function $a4185d8ef4233c62$var$_log(message) {
    console.log(`[dotenv@${$a4185d8ef4233c62$var$version}][INFO] ${message}`);
}
function $a4185d8ef4233c62$var$_warn(message) {
    console.log(`[dotenv@${$a4185d8ef4233c62$var$version}][WARN] ${message}`);
}
function $a4185d8ef4233c62$var$_debug(message) {
    console.log(`[dotenv@${$a4185d8ef4233c62$var$version}][DEBUG] ${message}`);
}
function $a4185d8ef4233c62$var$_dotenvKey(options) {
    // prioritize developer directly setting options.DOTENV_KEY
    if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) return options.DOTENV_KEY;
    // fallback to empty string
    return "";
}
function $a4185d8ef4233c62$var$_instructions(result, dotenvKey) {
    // Parse DOTENV_KEY. Format is a URI
    let uri;
    try {
        uri = new URL(dotenvKey);
    } catch (error) {
        if (error.code === "ERR_INVALID_URL") {
            const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
            err.code = "INVALID_DOTENV_KEY";
            throw err;
        }
        throw error;
    }
    // Get decrypt key
    const key = uri.password;
    if (!key) {
        const err = new Error("INVALID_DOTENV_KEY: Missing key part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
    }
    // Get environment
    const environment = uri.searchParams.get("environment");
    if (!environment) {
        const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
    }
    // Get ciphertext payload
    const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
    const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION
    ;
    if (!ciphertext) {
        const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
        err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
        throw err;
    }
    return {
        ciphertext: ciphertext,
        key: key
    };
}
function $a4185d8ef4233c62$var$_vaultPath(options) {
    let possibleVaultPath = null;
    if (options && options.path && options.path.length > 0) {
        if (Array.isArray(options.path)) {
            for (const filepath of options.path)if ($6mDsB.existsSync(filepath)) possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
        } else possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
    } else possibleVaultPath = $4UN2M$path.resolve($4UN2M$process.cwd(), ".env.vault");
    if ($6mDsB.existsSync(possibleVaultPath)) return possibleVaultPath;
    return null;
}
function $a4185d8ef4233c62$var$_resolveHome(envPath) {
    return envPath[0] === "~" ? $4UN2M$path.join($4UN2M$os.homedir(), envPath.slice(1)) : envPath;
}
function $a4185d8ef4233c62$var$_configVault(options) {
    $a4185d8ef4233c62$var$_log("Loading env from encrypted .env.vault");
    const parsed = $a4185d8ef4233c62$var$DotenvModule._parseVault(options);
    let processEnv = {};
    if (options && options.processEnv != null) processEnv = options.processEnv;
    $a4185d8ef4233c62$var$DotenvModule.populate(processEnv, parsed, options);
    return {
        parsed: parsed
    };
}
function $a4185d8ef4233c62$var$configDotenv(options) {
    const dotenvPath = $4UN2M$path.resolve($4UN2M$process.cwd(), ".env");
    let encoding = "utf8";
    const debug = Boolean(options && options.debug);
    if (options && options.encoding) encoding = options.encoding;
    else if (debug) $a4185d8ef4233c62$var$_debug("No encoding is specified. UTF-8 is used by default");
    let optionPaths = [
        dotenvPath
    ] // default, look for .env
    ;
    if (options && options.path) {
        if (!Array.isArray(options.path)) optionPaths = [
            $a4185d8ef4233c62$var$_resolveHome(options.path)
        ];
        else {
            optionPaths = [] // reset default
            ;
            for (const filepath of options.path)optionPaths.push($a4185d8ef4233c62$var$_resolveHome(filepath));
        }
    }
    // Build the parsed data in a temporary object (because we need to return it).  Once we have the final
    // parsed data, we will combine it with process.env (or options.processEnv if provided).
    let lastError;
    const parsedAll = {};
    for (const path of optionPaths)try {
        // Specifying an encoding returns a string instead of a buffer
        const parsed = $a4185d8ef4233c62$var$DotenvModule.parse($6mDsB.readFileSync(path, {
            encoding: encoding
        }));
        $a4185d8ef4233c62$var$DotenvModule.populate(parsedAll, parsed, options);
    } catch (e) {
        if (debug) $a4185d8ef4233c62$var$_debug(`Failed to load ${path} ${e.message}`);
        lastError = e;
    }
    let processEnv = {};
    if (options && options.processEnv != null) processEnv = options.processEnv;
    $a4185d8ef4233c62$var$DotenvModule.populate(processEnv, parsedAll, options);
    if (lastError) return {
        parsed: parsedAll,
        error: lastError
    };
    else return {
        parsed: parsedAll
    };
}
// Populates process.env from .env file
function $a4185d8ef4233c62$var$config(options) {
    // fallback to original dotenv if DOTENV_KEY is not set
    if ($a4185d8ef4233c62$var$_dotenvKey(options).length === 0) return $a4185d8ef4233c62$var$DotenvModule.configDotenv(options);
    const vaultPath = $a4185d8ef4233c62$var$_vaultPath(options);
    // dotenvKey exists but .env.vault file does not exist
    if (!vaultPath) {
        $a4185d8ef4233c62$var$_warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
        return $a4185d8ef4233c62$var$DotenvModule.configDotenv(options);
    }
    return $a4185d8ef4233c62$var$DotenvModule._configVault(options);
}
function $a4185d8ef4233c62$var$decrypt(encrypted, keyStr) {
    const key = $a4185d8ef4233c62$require$Buffer.from(keyStr.slice(-64), "hex");
    let ciphertext = $a4185d8ef4233c62$require$Buffer.from(encrypted, "base64");
    const nonce = ciphertext.subarray(0, 12);
    const authTag = ciphertext.subarray(-16);
    ciphertext = ciphertext.subarray(12, -16);
    try {
        const aesgcm = $4UN2M$crypto.createDecipheriv("aes-256-gcm", key, nonce);
        aesgcm.setAuthTag(authTag);
        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
    } catch (error) {
        const isRange = error instanceof RangeError;
        const invalidKeyLength = error.message === "Invalid key length";
        const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
        if (isRange || invalidKeyLength) {
            const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
            err.code = "INVALID_DOTENV_KEY";
            throw err;
        } else if (decryptionFailed) {
            const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
            err.code = "DECRYPTION_FAILED";
            throw err;
        } else throw error;
    }
}
// Populate process.env with parsed values
function $a4185d8ef4233c62$var$populate(processEnv, parsed, options = {}) {
    const debug = Boolean(options && options.debug);
    const override = Boolean(options && options.override);
    if (typeof parsed !== "object") {
        const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
        err.code = "OBJECT_REQUIRED";
        throw err;
    }
    // Set process.env
    for (const key of Object.keys(parsed))if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
        if (override === true) processEnv[key] = parsed[key];
        if (debug) {
            if (override === true) $a4185d8ef4233c62$var$_debug(`"${key}" is already defined and WAS overwritten`);
            else $a4185d8ef4233c62$var$_debug(`"${key}" is already defined and was NOT overwritten`);
        }
    } else processEnv[key] = parsed[key];
}
const $a4185d8ef4233c62$var$DotenvModule = {
    configDotenv: $a4185d8ef4233c62$var$configDotenv,
    _configVault: $a4185d8ef4233c62$var$_configVault,
    _parseVault: $a4185d8ef4233c62$var$_parseVault,
    config: $a4185d8ef4233c62$var$config,
    decrypt: $a4185d8ef4233c62$var$decrypt,
    parse: $a4185d8ef4233c62$var$parse,
    populate: $a4185d8ef4233c62$var$populate
};
module.exports.configDotenv = $a4185d8ef4233c62$var$DotenvModule.configDotenv;
module.exports._configVault = $a4185d8ef4233c62$var$DotenvModule._configVault;
module.exports._parseVault = $a4185d8ef4233c62$var$DotenvModule._parseVault;
module.exports.config = $a4185d8ef4233c62$var$DotenvModule.config;
module.exports.decrypt = $a4185d8ef4233c62$var$DotenvModule.decrypt;
module.exports.parse = $a4185d8ef4233c62$var$DotenvModule.parse;
module.exports.populate = $a4185d8ef4233c62$var$DotenvModule.populate;
module.exports = $a4185d8ef4233c62$var$DotenvModule;

});
parcelRegister("6mDsB", function(module, exports) {
"use strict";

});

parcelRegister("3xcmX", function(module, exports) {
module.exports = JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

});



var $9ccdc4e10588ec0a$exports = {};

"use strict";
var $9ccdc4e10588ec0a$var$__createBinding = $9ccdc4e10588ec0a$exports && $9ccdc4e10588ec0a$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $9ccdc4e10588ec0a$var$__setModuleDefault = $9ccdc4e10588ec0a$exports && $9ccdc4e10588ec0a$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $9ccdc4e10588ec0a$var$__importStar = $9ccdc4e10588ec0a$exports && $9ccdc4e10588ec0a$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $9ccdc4e10588ec0a$var$__createBinding(result, mod, k);
    }
    $9ccdc4e10588ec0a$var$__setModuleDefault(result, mod);
    return result;
};
var $9ccdc4e10588ec0a$var$__awaiter = $9ccdc4e10588ec0a$exports && $9ccdc4e10588ec0a$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($9ccdc4e10588ec0a$exports, "__esModule", {
    value: true
});
$9ccdc4e10588ec0a$exports.getIDToken = $9ccdc4e10588ec0a$exports.getState = $9ccdc4e10588ec0a$exports.saveState = $9ccdc4e10588ec0a$exports.group = $9ccdc4e10588ec0a$exports.endGroup = $9ccdc4e10588ec0a$exports.startGroup = $9ccdc4e10588ec0a$exports.info = $9ccdc4e10588ec0a$exports.notice = $9ccdc4e10588ec0a$exports.warning = $9ccdc4e10588ec0a$exports.error = $9ccdc4e10588ec0a$exports.debug = $9ccdc4e10588ec0a$exports.isDebug = $9ccdc4e10588ec0a$exports.setFailed = $9ccdc4e10588ec0a$exports.setCommandEcho = $9ccdc4e10588ec0a$exports.setOutput = $9ccdc4e10588ec0a$exports.getBooleanInput = $9ccdc4e10588ec0a$exports.getMultilineInput = $9ccdc4e10588ec0a$exports.getInput = $9ccdc4e10588ec0a$exports.addPath = $9ccdc4e10588ec0a$exports.setSecret = $9ccdc4e10588ec0a$exports.exportVariable = $9ccdc4e10588ec0a$exports.ExitCode = void 0;
var $3d4600e440aa6e6e$exports = {};

"use strict";
var $3d4600e440aa6e6e$var$__createBinding = $3d4600e440aa6e6e$exports && $3d4600e440aa6e6e$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $3d4600e440aa6e6e$var$__setModuleDefault = $3d4600e440aa6e6e$exports && $3d4600e440aa6e6e$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $3d4600e440aa6e6e$var$__importStar = $3d4600e440aa6e6e$exports && $3d4600e440aa6e6e$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $3d4600e440aa6e6e$var$__createBinding(result, mod, k);
    }
    $3d4600e440aa6e6e$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($3d4600e440aa6e6e$exports, "__esModule", {
    value: true
});
$3d4600e440aa6e6e$exports.issue = $3d4600e440aa6e6e$exports.issueCommand = void 0;

const $3d4600e440aa6e6e$var$os = $3d4600e440aa6e6e$var$__importStar($4UN2M$os);
var $9e102ad503f8a863$exports = {};
"use strict";
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */ Object.defineProperty($9e102ad503f8a863$exports, "__esModule", {
    value: true
});
$9e102ad503f8a863$exports.toCommandProperties = $9e102ad503f8a863$exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */ function $9e102ad503f8a863$var$toCommandValue(input) {
    if (input === null || input === undefined) return "";
    else if (typeof input === "string" || input instanceof String) return input;
    return JSON.stringify(input);
}
$9e102ad503f8a863$exports.toCommandValue = $9e102ad503f8a863$var$toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */ function $9e102ad503f8a863$var$toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) return {};
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
$9e102ad503f8a863$exports.toCommandProperties = $9e102ad503f8a863$var$toCommandProperties;


/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */ function $3d4600e440aa6e6e$var$issueCommand(command, properties, message) {
    const cmd = new $3d4600e440aa6e6e$var$Command(command, properties, message);
    $4UN2M$process.stdout.write(cmd.toString() + $3d4600e440aa6e6e$var$os.EOL);
}
$3d4600e440aa6e6e$exports.issueCommand = $3d4600e440aa6e6e$var$issueCommand;
function $3d4600e440aa6e6e$var$issue(name, message = "") {
    $3d4600e440aa6e6e$var$issueCommand(name, {}, message);
}
$3d4600e440aa6e6e$exports.issue = $3d4600e440aa6e6e$var$issue;
const $3d4600e440aa6e6e$var$CMD_STRING = "::";
class $3d4600e440aa6e6e$var$Command {
    constructor(command, properties, message){
        if (!command) command = "missing.command";
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = $3d4600e440aa6e6e$var$CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += " ";
            let first = true;
            for(const key in this.properties)if (this.properties.hasOwnProperty(key)) {
                const val = this.properties[key];
                if (val) {
                    if (first) first = false;
                    else cmdStr += ",";
                    cmdStr += `${key}=${$3d4600e440aa6e6e$var$escapeProperty(val)}`;
                }
            }
        }
        cmdStr += `${$3d4600e440aa6e6e$var$CMD_STRING}${$3d4600e440aa6e6e$var$escapeData(this.message)}`;
        return cmdStr;
    }
}
function $3d4600e440aa6e6e$var$escapeData(s) {
    return $9e102ad503f8a863$exports.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
}
function $3d4600e440aa6e6e$var$escapeProperty(s) {
    return $9e102ad503f8a863$exports.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
}


var $6edbfdbe09338225$exports = {};

"use strict";
// For internal use, subject to change.
var $6edbfdbe09338225$var$__createBinding = $6edbfdbe09338225$exports && $6edbfdbe09338225$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $6edbfdbe09338225$var$__setModuleDefault = $6edbfdbe09338225$exports && $6edbfdbe09338225$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $6edbfdbe09338225$var$__importStar = $6edbfdbe09338225$exports && $6edbfdbe09338225$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $6edbfdbe09338225$var$__createBinding(result, mod, k);
    }
    $6edbfdbe09338225$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($6edbfdbe09338225$exports, "__esModule", {
    value: true
});
$6edbfdbe09338225$exports.prepareKeyValueMessage = $6edbfdbe09338225$exports.issueFileCommand = void 0;

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */ const $6edbfdbe09338225$var$fs = $6edbfdbe09338225$var$__importStar($4UN2M$fs);

const $6edbfdbe09338225$var$os = $6edbfdbe09338225$var$__importStar($4UN2M$os);
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var $e427f1ca217ad237$var$getRandomValues;
var $e427f1ca217ad237$var$rnds8 = new Uint8Array(16);
function $e427f1ca217ad237$export$2e2bcd8739ae039() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!$e427f1ca217ad237$var$getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        $e427f1ca217ad237$var$getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
        if (!$e427f1ca217ad237$var$getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    return $e427f1ca217ad237$var$getRandomValues($e427f1ca217ad237$var$rnds8);
}


var $867594e4115d3e90$export$2e2bcd8739ae039 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;


function $71a9480910c8aa33$var$validate(uuid) {
    return typeof uuid === "string" && (0, $867594e4115d3e90$export$2e2bcd8739ae039).test(uuid);
}
var $71a9480910c8aa33$export$2e2bcd8739ae039 = $71a9480910c8aa33$var$validate;


/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var $70655e6014345f02$var$byteToHex = [];
for(var $70655e6014345f02$var$i = 0; $70655e6014345f02$var$i < 256; ++$70655e6014345f02$var$i)$70655e6014345f02$var$byteToHex.push(($70655e6014345f02$var$i + 0x100).toString(16).substr(1));
function $70655e6014345f02$var$stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = ($70655e6014345f02$var$byteToHex[arr[offset + 0]] + $70655e6014345f02$var$byteToHex[arr[offset + 1]] + $70655e6014345f02$var$byteToHex[arr[offset + 2]] + $70655e6014345f02$var$byteToHex[arr[offset + 3]] + "-" + $70655e6014345f02$var$byteToHex[arr[offset + 4]] + $70655e6014345f02$var$byteToHex[arr[offset + 5]] + "-" + $70655e6014345f02$var$byteToHex[arr[offset + 6]] + $70655e6014345f02$var$byteToHex[arr[offset + 7]] + "-" + $70655e6014345f02$var$byteToHex[arr[offset + 8]] + $70655e6014345f02$var$byteToHex[arr[offset + 9]] + "-" + $70655e6014345f02$var$byteToHex[arr[offset + 10]] + $70655e6014345f02$var$byteToHex[arr[offset + 11]] + $70655e6014345f02$var$byteToHex[arr[offset + 12]] + $70655e6014345f02$var$byteToHex[arr[offset + 13]] + $70655e6014345f02$var$byteToHex[arr[offset + 14]] + $70655e6014345f02$var$byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, $71a9480910c8aa33$export$2e2bcd8739ae039)(uuid)) throw TypeError("Stringified UUID is invalid");
    return uuid;
}
var $70655e6014345f02$export$2e2bcd8739ae039 = $70655e6014345f02$var$stringify;


function $7d0f3e4e4f5f7fbd$var$v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || (0, $e427f1ca217ad237$export$2e2bcd8739ae039))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, $70655e6014345f02$export$2e2bcd8739ae039)(rnds);
}
var $7d0f3e4e4f5f7fbd$export$2e2bcd8739ae039 = $7d0f3e4e4f5f7fbd$var$v4;



function $6edbfdbe09338225$var$issueFileCommand(command, message) {
    const filePath = $4UN2M$process.env[`GITHUB_${command}`];
    if (!filePath) throw new Error(`Unable to find environment variable for file command ${command}`);
    if (!$6edbfdbe09338225$var$fs.existsSync(filePath)) throw new Error(`Missing file at path: ${filePath}`);
    $6edbfdbe09338225$var$fs.appendFileSync(filePath, `${$9e102ad503f8a863$exports.toCommandValue(message)}${$6edbfdbe09338225$var$os.EOL}`, {
        encoding: "utf8"
    });
}
$6edbfdbe09338225$exports.issueFileCommand = $6edbfdbe09338225$var$issueFileCommand;
function $6edbfdbe09338225$var$prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${$7d0f3e4e4f5f7fbd$export$2e2bcd8739ae039()}`;
    const convertedValue = $9e102ad503f8a863$exports.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    if (convertedValue.includes(delimiter)) throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    return `${key}<<${delimiter}${$6edbfdbe09338225$var$os.EOL}${convertedValue}${$6edbfdbe09338225$var$os.EOL}${delimiter}`;
}
$6edbfdbe09338225$exports.prepareKeyValueMessage = $6edbfdbe09338225$var$prepareKeyValueMessage;




const $9ccdc4e10588ec0a$var$os = $9ccdc4e10588ec0a$var$__importStar($4UN2M$os);

const $9ccdc4e10588ec0a$var$path = $9ccdc4e10588ec0a$var$__importStar($4UN2M$path);
var $016735bcc071d86a$exports = {};
"use strict";
var $016735bcc071d86a$var$__awaiter = $016735bcc071d86a$exports && $016735bcc071d86a$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($016735bcc071d86a$exports, "__esModule", {
    value: true
});
$016735bcc071d86a$exports.OidcClient = void 0;
var $c0064b4bfe4e764a$exports = {};

var $c0064b4bfe4e764a$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */ var $c0064b4bfe4e764a$var$__createBinding = $c0064b4bfe4e764a$exports && $c0064b4bfe4e764a$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $c0064b4bfe4e764a$var$__setModuleDefault = $c0064b4bfe4e764a$exports && $c0064b4bfe4e764a$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $c0064b4bfe4e764a$var$__importStar = $c0064b4bfe4e764a$exports && $c0064b4bfe4e764a$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $c0064b4bfe4e764a$var$__createBinding(result, mod, k);
    }
    $c0064b4bfe4e764a$var$__setModuleDefault(result, mod);
    return result;
};
var $c0064b4bfe4e764a$var$__awaiter = $c0064b4bfe4e764a$exports && $c0064b4bfe4e764a$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($c0064b4bfe4e764a$exports, "__esModule", {
    value: true
});
$c0064b4bfe4e764a$exports.HttpClient = $c0064b4bfe4e764a$exports.isHttps = $c0064b4bfe4e764a$exports.HttpClientResponse = $c0064b4bfe4e764a$exports.HttpClientError = $c0064b4bfe4e764a$exports.getProxyUrl = $c0064b4bfe4e764a$exports.MediaTypes = $c0064b4bfe4e764a$exports.Headers = $c0064b4bfe4e764a$exports.HttpCodes = void 0;

const $c0064b4bfe4e764a$var$http = $c0064b4bfe4e764a$var$__importStar($4UN2M$http);

const $c0064b4bfe4e764a$var$https = $c0064b4bfe4e764a$var$__importStar($4UN2M$https);

const $c0064b4bfe4e764a$var$pm = $c0064b4bfe4e764a$var$__importStar((parcelRequire("geX44")));

const $c0064b4bfe4e764a$var$tunnel = $c0064b4bfe4e764a$var$__importStar((parcelRequire("igS5R")));
var $6c9ecd59b25fe043$export$ab054a1ef92eeb01;
var $6c9ecd59b25fe043$export$1f2bb630327ac4b6;
var $6c9ecd59b25fe043$export$14963ee5c8637e11;
var $6c9ecd59b25fe043$export$3ea9790e91014eeb;
var $6c9ecd59b25fe043$export$f05c48a4001d5356;
var $6c9ecd59b25fe043$export$6f9e642c23f9615d;
var $6c9ecd59b25fe043$export$cfbc337f7857f27a;
var $6c9ecd59b25fe043$export$c3def51f5c0b7771;
var $6c9ecd59b25fe043$export$9af91951fcedc08c;
var $6c9ecd59b25fe043$export$e56ca57b32a6e9c7;
var $6c9ecd59b25fe043$export$ebbe0f536b18196e;
var $6c9ecd59b25fe043$export$30f3b02011db23c0;
var $6c9ecd59b25fe043$export$ea76ac48857e9378;
var $6c9ecd59b25fe043$export$6f0c702cbe7d6ed8;
var $6c9ecd59b25fe043$export$e7aa7bc5c1b3cfb3;
var $6c9ecd59b25fe043$export$79b704688b15c0f4;
var $6c9ecd59b25fe043$export$9f633d56d7ec90d3;
var $6c9ecd59b25fe043$export$7fa6c5b6f8193917;
var $6c9ecd59b25fe043$export$3963aa24c930693c;
var $6c9ecd59b25fe043$export$b6afa8811b7e644e;
var $6c9ecd59b25fe043$export$3c8f13373e08d457;
var $6c9ecd59b25fe043$export$79f8e34925aa870f;
var $6c9ecd59b25fe043$export$4b73629724933f6e;
// Cache & CacheStorage are tightly coupled with fetch. Even if it may run
// in an older version of Node, it doesn't have any use without fetch.
var $6c9ecd59b25fe043$export$50ac77867c9f1e40;
var $6c9ecd59b25fe043$export$b43e45590305ffaa;
var $6c9ecd59b25fe043$export$f3eb5caaef7b2b34;
var $6c9ecd59b25fe043$export$14dd963aa71ac36d;
var $6c9ecd59b25fe043$export$110700823644f4a6;
var $6c9ecd59b25fe043$export$85e6adb445fa3ef0;
var $6c9ecd59b25fe043$export$b00e4516a48bbc61;
var $6c9ecd59b25fe043$export$3909fb301d3dc8c9;
var $6c9ecd59b25fe043$export$b5fe3f66a567bec0;
var $6c9ecd59b25fe043$export$4938110305e6185f;
var $6c9ecd59b25fe043$export$43f28b24e1eb8181;
var $6c9ecd59b25fe043$export$64605811ab45167f;
var $6c9ecd59b25fe043$export$ba387509dbaf942e;
var $6c9ecd59b25fe043$export$8ff68bc3613e0197;
var $6c9ecd59b25fe043$export$e3431e6e5e89c327;
var $6c9ecd59b25fe043$export$44e9728040f17046;
var $6c9ecd59b25fe043$export$7219863409fc71b7;
"use strict";

var $jOrdh = parcelRequire("jOrdh");

var $cxWIF = parcelRequire("cxWIF");

var $7bgOU = parcelRequire("7bgOU");

var $1HAzk = parcelRequire("1HAzk");
var $8da3692d6ead7a1e$exports = {};
"use strict";

var $7bgOU = parcelRequire("7bgOU");
var $8da3692d6ead7a1e$require$BalancedPoolMissingUpstreamError = $7bgOU.BalancedPoolMissingUpstreamError;
var $8da3692d6ead7a1e$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $iRrVO = parcelRequire("iRrVO");
var $8da3692d6ead7a1e$require$PoolBase = $iRrVO.PoolBase;
var $8da3692d6ead7a1e$require$kClients = $iRrVO.kClients;
var $8da3692d6ead7a1e$require$kNeedDrain = $iRrVO.kNeedDrain;
var $8da3692d6ead7a1e$require$kAddClient = $iRrVO.kAddClient;
var $8da3692d6ead7a1e$require$kRemoveClient = $iRrVO.kRemoveClient;
var $8da3692d6ead7a1e$require$kGetDispatcher = $iRrVO.kGetDispatcher;

var $1HAzk = parcelRequire("1HAzk");

var $9Yodq = parcelRequire("9Yodq");
var $8da3692d6ead7a1e$require$kUrl = $9Yodq.kUrl;
var $8da3692d6ead7a1e$require$kInterceptors = $9Yodq.kInterceptors;

var $dZB1o = parcelRequire("dZB1o");
var $8da3692d6ead7a1e$require$parseOrigin = $dZB1o.parseOrigin;
const $8da3692d6ead7a1e$var$kFactory = Symbol("factory");
const $8da3692d6ead7a1e$var$kOptions = Symbol("options");
const $8da3692d6ead7a1e$var$kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
const $8da3692d6ead7a1e$var$kCurrentWeight = Symbol("kCurrentWeight");
const $8da3692d6ead7a1e$var$kIndex = Symbol("kIndex");
const $8da3692d6ead7a1e$var$kWeight = Symbol("kWeight");
const $8da3692d6ead7a1e$var$kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
const $8da3692d6ead7a1e$var$kErrorPenalty = Symbol("kErrorPenalty");
function $8da3692d6ead7a1e$var$getGreatestCommonDivisor(a, b) {
    if (b === 0) return a;
    return $8da3692d6ead7a1e$var$getGreatestCommonDivisor(b, a % b);
}
function $8da3692d6ead7a1e$var$defaultFactory(origin, opts) {
    return new $1HAzk(origin, opts);
}
class $8da3692d6ead7a1e$var$BalancedPool extends $8da3692d6ead7a1e$require$PoolBase {
    constructor(upstreams = [], { factory: factory = $8da3692d6ead7a1e$var$defaultFactory, ...opts } = {}){
        super();
        this[$8da3692d6ead7a1e$var$kOptions] = opts;
        this[$8da3692d6ead7a1e$var$kIndex] = -1;
        this[$8da3692d6ead7a1e$var$kCurrentWeight] = 0;
        this[$8da3692d6ead7a1e$var$kMaxWeightPerServer] = this[$8da3692d6ead7a1e$var$kOptions].maxWeightPerServer || 100;
        this[$8da3692d6ead7a1e$var$kErrorPenalty] = this[$8da3692d6ead7a1e$var$kOptions].errorPenalty || 15;
        if (!Array.isArray(upstreams)) upstreams = [
            upstreams
        ];
        if (typeof factory !== "function") throw new $8da3692d6ead7a1e$require$InvalidArgumentError("factory must be a function.");
        this[$8da3692d6ead7a1e$require$kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
        this[$8da3692d6ead7a1e$var$kFactory] = factory;
        for (const upstream of upstreams)this.addUpstream(upstream);
        this._updateBalancedPoolStats();
    }
    addUpstream(upstream) {
        const upstreamOrigin = $8da3692d6ead7a1e$require$parseOrigin(upstream).origin;
        if (this[$8da3692d6ead7a1e$require$kClients].find((pool)=>pool[$8da3692d6ead7a1e$require$kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) return this;
        const pool = this[$8da3692d6ead7a1e$var$kFactory](upstreamOrigin, Object.assign({}, this[$8da3692d6ead7a1e$var$kOptions]));
        this[$8da3692d6ead7a1e$require$kAddClient](pool);
        pool.on("connect", ()=>{
            pool[$8da3692d6ead7a1e$var$kWeight] = Math.min(this[$8da3692d6ead7a1e$var$kMaxWeightPerServer], pool[$8da3692d6ead7a1e$var$kWeight] + this[$8da3692d6ead7a1e$var$kErrorPenalty]);
        });
        pool.on("connectionError", ()=>{
            pool[$8da3692d6ead7a1e$var$kWeight] = Math.max(1, pool[$8da3692d6ead7a1e$var$kWeight] - this[$8da3692d6ead7a1e$var$kErrorPenalty]);
            this._updateBalancedPoolStats();
        });
        pool.on("disconnect", (...args)=>{
            const err = args[2];
            if (err && err.code === "UND_ERR_SOCKET") {
                // decrease the weight of the pool.
                pool[$8da3692d6ead7a1e$var$kWeight] = Math.max(1, pool[$8da3692d6ead7a1e$var$kWeight] - this[$8da3692d6ead7a1e$var$kErrorPenalty]);
                this._updateBalancedPoolStats();
            }
        });
        for (const client of this[$8da3692d6ead7a1e$require$kClients])client[$8da3692d6ead7a1e$var$kWeight] = this[$8da3692d6ead7a1e$var$kMaxWeightPerServer];
        this._updateBalancedPoolStats();
        return this;
    }
    _updateBalancedPoolStats() {
        this[$8da3692d6ead7a1e$var$kGreatestCommonDivisor] = this[$8da3692d6ead7a1e$require$kClients].map((p)=>p[$8da3692d6ead7a1e$var$kWeight]).reduce($8da3692d6ead7a1e$var$getGreatestCommonDivisor, 0);
    }
    removeUpstream(upstream) {
        const upstreamOrigin = $8da3692d6ead7a1e$require$parseOrigin(upstream).origin;
        const pool = this[$8da3692d6ead7a1e$require$kClients].find((pool)=>pool[$8da3692d6ead7a1e$require$kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);
        if (pool) this[$8da3692d6ead7a1e$require$kRemoveClient](pool);
        return this;
    }
    get upstreams() {
        return this[$8da3692d6ead7a1e$require$kClients].filter((dispatcher)=>dispatcher.closed !== true && dispatcher.destroyed !== true).map((p)=>p[$8da3692d6ead7a1e$require$kUrl].origin);
    }
    [$8da3692d6ead7a1e$require$kGetDispatcher]() {
        // We validate that pools is greater than 0,
        // otherwise we would have to wait until an upstream
        // is added, which might never happen.
        if (this[$8da3692d6ead7a1e$require$kClients].length === 0) throw new $8da3692d6ead7a1e$require$BalancedPoolMissingUpstreamError();
        const dispatcher = this[$8da3692d6ead7a1e$require$kClients].find((dispatcher)=>!dispatcher[$8da3692d6ead7a1e$require$kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
        if (!dispatcher) return;
        const allClientsBusy = this[$8da3692d6ead7a1e$require$kClients].map((pool)=>pool[$8da3692d6ead7a1e$require$kNeedDrain]).reduce((a, b)=>a && b, true);
        if (allClientsBusy) return;
        let counter = 0;
        let maxWeightIndex = this[$8da3692d6ead7a1e$require$kClients].findIndex((pool)=>!pool[$8da3692d6ead7a1e$require$kNeedDrain]);
        while(counter++ < this[$8da3692d6ead7a1e$require$kClients].length){
            this[$8da3692d6ead7a1e$var$kIndex] = (this[$8da3692d6ead7a1e$var$kIndex] + 1) % this[$8da3692d6ead7a1e$require$kClients].length;
            const pool = this[$8da3692d6ead7a1e$require$kClients][this[$8da3692d6ead7a1e$var$kIndex]];
            // find pool index with the largest weight
            if (pool[$8da3692d6ead7a1e$var$kWeight] > this[$8da3692d6ead7a1e$require$kClients][maxWeightIndex][$8da3692d6ead7a1e$var$kWeight] && !pool[$8da3692d6ead7a1e$require$kNeedDrain]) maxWeightIndex = this[$8da3692d6ead7a1e$var$kIndex];
            // decrease the current weight every `this[kClients].length`.
            if (this[$8da3692d6ead7a1e$var$kIndex] === 0) {
                // Set the current weight to the next lower weight.
                this[$8da3692d6ead7a1e$var$kCurrentWeight] = this[$8da3692d6ead7a1e$var$kCurrentWeight] - this[$8da3692d6ead7a1e$var$kGreatestCommonDivisor];
                if (this[$8da3692d6ead7a1e$var$kCurrentWeight] <= 0) this[$8da3692d6ead7a1e$var$kCurrentWeight] = this[$8da3692d6ead7a1e$var$kMaxWeightPerServer];
            }
            if (pool[$8da3692d6ead7a1e$var$kWeight] >= this[$8da3692d6ead7a1e$var$kCurrentWeight] && !pool[$8da3692d6ead7a1e$require$kNeedDrain]) return pool;
        }
        this[$8da3692d6ead7a1e$var$kCurrentWeight] = this[$8da3692d6ead7a1e$require$kClients][maxWeightIndex][$8da3692d6ead7a1e$var$kWeight];
        this[$8da3692d6ead7a1e$var$kIndex] = maxWeightIndex;
        return this[$8da3692d6ead7a1e$require$kClients][maxWeightIndex];
    }
}
$8da3692d6ead7a1e$exports = $8da3692d6ead7a1e$var$BalancedPool;



var $j8Wyz = parcelRequire("j8Wyz");

var $dZB1o = parcelRequire("dZB1o");
const { InvalidArgumentError: $6c9ecd59b25fe043$var$InvalidArgumentError } = $7bgOU;
var $cbe5f4a3b24a1e2d$exports = {};

$parcel$export($cbe5f4a3b24a1e2d$exports, "request", () => $cbe5f4a3b24a1e2d$export$b5fe3f66a567bec0, (v) => $cbe5f4a3b24a1e2d$export$b5fe3f66a567bec0 = v);
$parcel$export($cbe5f4a3b24a1e2d$exports, "stream", () => $cbe5f4a3b24a1e2d$export$4938110305e6185f, (v) => $cbe5f4a3b24a1e2d$export$4938110305e6185f = v);
$parcel$export($cbe5f4a3b24a1e2d$exports, "pipeline", () => $cbe5f4a3b24a1e2d$export$43f28b24e1eb8181, (v) => $cbe5f4a3b24a1e2d$export$43f28b24e1eb8181 = v);
$parcel$export($cbe5f4a3b24a1e2d$exports, "upgrade", () => $cbe5f4a3b24a1e2d$export$ba387509dbaf942e, (v) => $cbe5f4a3b24a1e2d$export$ba387509dbaf942e = v);
$parcel$export($cbe5f4a3b24a1e2d$exports, "connect", () => $cbe5f4a3b24a1e2d$export$64605811ab45167f, (v) => $cbe5f4a3b24a1e2d$export$64605811ab45167f = v);
var $cbe5f4a3b24a1e2d$export$b5fe3f66a567bec0;
var $cbe5f4a3b24a1e2d$export$4938110305e6185f;
var $cbe5f4a3b24a1e2d$export$43f28b24e1eb8181;
var $cbe5f4a3b24a1e2d$export$ba387509dbaf942e;
var $cbe5f4a3b24a1e2d$export$64605811ab45167f;
"use strict";

$cbe5f4a3b24a1e2d$export$b5fe3f66a567bec0 = (parcelRequire("9NYzz"));

$cbe5f4a3b24a1e2d$export$4938110305e6185f = (parcelRequire("7itGs"));

$cbe5f4a3b24a1e2d$export$43f28b24e1eb8181 = (parcelRequire("l2DXA"));

$cbe5f4a3b24a1e2d$export$ba387509dbaf942e = (parcelRequire("cpmJw"));

$cbe5f4a3b24a1e2d$export$64605811ab45167f = (parcelRequire("asHB6"));



var $hb74B = parcelRequire("hb74B");
var $c50ebf6e3d98dd4f$exports = {};
"use strict";

var $c50ebf6e3d98dd4f$require$promisify = $4UN2M$util.promisify;

var $jOrdh = parcelRequire("jOrdh");
var $b4d84dd4bbf18d6d$exports = {};

var $b4d84dd4bbf18d6d$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";
var $649a10f913f6eb79$exports = {};
"use strict";

var $7bgOU = parcelRequire("7bgOU");
var $649a10f913f6eb79$require$UndiciError = $7bgOU.UndiciError;
class $649a10f913f6eb79$var$MockNotMatchedError extends $649a10f913f6eb79$require$UndiciError {
    constructor(message){
        super(message);
        Error.captureStackTrace(this, $649a10f913f6eb79$var$MockNotMatchedError);
        this.name = "MockNotMatchedError";
        this.message = message || "The request does not match any registered mock dispatches";
        this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
    }
}
$649a10f913f6eb79$exports = {
    MockNotMatchedError: $649a10f913f6eb79$var$MockNotMatchedError
};


var $b4d84dd4bbf18d6d$require$MockNotMatchedError = $649a10f913f6eb79$exports.MockNotMatchedError;
var $61c8d9a19a8cfa99$exports = {};
"use strict";
$61c8d9a19a8cfa99$exports = {
    kAgent: Symbol("agent"),
    kOptions: Symbol("options"),
    kFactory: Symbol("factory"),
    kDispatches: Symbol("dispatches"),
    kDispatchKey: Symbol("dispatch key"),
    kDefaultHeaders: Symbol("default headers"),
    kDefaultTrailers: Symbol("default trailers"),
    kContentLength: Symbol("content length"),
    kMockAgent: Symbol("mock agent"),
    kMockAgentSet: Symbol("mock agent set"),
    kMockAgentGet: Symbol("mock agent get"),
    kMockDispatch: Symbol("mock dispatch"),
    kClose: Symbol("close"),
    kOriginalClose: Symbol("original agent close"),
    kOrigin: Symbol("origin"),
    kIsMockActive: Symbol("is mock active"),
    kNetConnect: Symbol("net connect"),
    kGetNetConnect: Symbol("get net connect"),
    kConnected: Symbol("connected")
};


var $b4d84dd4bbf18d6d$require$kDispatches = $61c8d9a19a8cfa99$exports.kDispatches;
var $b4d84dd4bbf18d6d$require$kMockAgent = $61c8d9a19a8cfa99$exports.kMockAgent;
var $b4d84dd4bbf18d6d$require$kOriginalDispatch = $61c8d9a19a8cfa99$exports.kOriginalDispatch;
var $b4d84dd4bbf18d6d$require$kOrigin = $61c8d9a19a8cfa99$exports.kOrigin;
var $b4d84dd4bbf18d6d$require$kGetNetConnect = $61c8d9a19a8cfa99$exports.kGetNetConnect;

var $dZB1o = parcelRequire("dZB1o");
var $b4d84dd4bbf18d6d$require$buildURL = $dZB1o.buildURL;
var $b4d84dd4bbf18d6d$require$nop = $dZB1o.nop;

var $b4d84dd4bbf18d6d$require$STATUS_CODES = $4UN2M$http.STATUS_CODES;

const { types: { isPromise: $b4d84dd4bbf18d6d$var$isPromise } } = $4UN2M$util;
function $b4d84dd4bbf18d6d$var$matchValue(match, value) {
    if (typeof match === "string") return match === value;
    if (match instanceof RegExp) return match.test(value);
    if (typeof match === "function") return match(value) === true;
    return false;
}
function $b4d84dd4bbf18d6d$var$lowerCaseEntries(headers) {
    return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue])=>{
        return [
            headerName.toLocaleLowerCase(),
            headerValue
        ];
    }));
}
/**
 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
 * @param {string} key
 */ function $b4d84dd4bbf18d6d$var$getHeaderByName(headers, key) {
    if (Array.isArray(headers)) {
        for(let i = 0; i < headers.length; i += 2){
            if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) return headers[i + 1];
        }
        return undefined;
    } else if (typeof headers.get === "function") return headers.get(key);
    else return $b4d84dd4bbf18d6d$var$lowerCaseEntries(headers)[key.toLocaleLowerCase()];
}
/** @param {string[]} headers */ function $b4d84dd4bbf18d6d$var$buildHeadersFromArray(headers) {
    const clone = headers.slice();
    const entries = [];
    for(let index = 0; index < clone.length; index += 2)entries.push([
        clone[index],
        clone[index + 1]
    ]);
    return Object.fromEntries(entries);
}
function $b4d84dd4bbf18d6d$var$matchHeaders(mockDispatch, headers) {
    if (typeof mockDispatch.headers === "function") {
        if (Array.isArray(headers)) headers = $b4d84dd4bbf18d6d$var$buildHeadersFromArray(headers);
        return mockDispatch.headers(headers ? $b4d84dd4bbf18d6d$var$lowerCaseEntries(headers) : {});
    }
    if (typeof mockDispatch.headers === "undefined") return true;
    if (typeof headers !== "object" || typeof mockDispatch.headers !== "object") return false;
    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)){
        const headerValue = $b4d84dd4bbf18d6d$var$getHeaderByName(headers, matchHeaderName);
        if (!$b4d84dd4bbf18d6d$var$matchValue(matchHeaderValue, headerValue)) return false;
    }
    return true;
}
function $b4d84dd4bbf18d6d$var$safeUrl(path) {
    if (typeof path !== "string") return path;
    const pathSegments = path.split("?");
    if (pathSegments.length !== 2) return path;
    const qp = new URLSearchParams(pathSegments.pop());
    qp.sort();
    return [
        ...pathSegments,
        qp.toString()
    ].join("?");
}
function $b4d84dd4bbf18d6d$var$matchKey(mockDispatch, { path: path, method: method, body: body, headers: headers }) {
    const pathMatch = $b4d84dd4bbf18d6d$var$matchValue(mockDispatch.path, path);
    const methodMatch = $b4d84dd4bbf18d6d$var$matchValue(mockDispatch.method, method);
    const bodyMatch = typeof mockDispatch.body !== "undefined" ? $b4d84dd4bbf18d6d$var$matchValue(mockDispatch.body, body) : true;
    const headersMatch = $b4d84dd4bbf18d6d$var$matchHeaders(mockDispatch, headers);
    return pathMatch && methodMatch && bodyMatch && headersMatch;
}
function $b4d84dd4bbf18d6d$var$getResponseData(data) {
    if ($b4d84dd4bbf18d6d$require$Buffer.isBuffer(data)) return data;
    else if (typeof data === "object") return JSON.stringify(data);
    else return data.toString();
}
function $b4d84dd4bbf18d6d$var$getMockDispatch(mockDispatches, key) {
    const basePath = key.query ? $b4d84dd4bbf18d6d$require$buildURL(key.path, key.query) : key.path;
    const resolvedPath = typeof basePath === "string" ? $b4d84dd4bbf18d6d$var$safeUrl(basePath) : basePath;
    // Match path
    let matchedMockDispatches = mockDispatches.filter(({ consumed: consumed })=>!consumed).filter(({ path: path })=>$b4d84dd4bbf18d6d$var$matchValue($b4d84dd4bbf18d6d$var$safeUrl(path), resolvedPath));
    if (matchedMockDispatches.length === 0) throw new $b4d84dd4bbf18d6d$require$MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
    // Match method
    matchedMockDispatches = matchedMockDispatches.filter(({ method: method })=>$b4d84dd4bbf18d6d$var$matchValue(method, key.method));
    if (matchedMockDispatches.length === 0) throw new $b4d84dd4bbf18d6d$require$MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
    // Match body
    matchedMockDispatches = matchedMockDispatches.filter(({ body: body })=>typeof body !== "undefined" ? $b4d84dd4bbf18d6d$var$matchValue(body, key.body) : true);
    if (matchedMockDispatches.length === 0) throw new $b4d84dd4bbf18d6d$require$MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
    // Match headers
    matchedMockDispatches = matchedMockDispatches.filter((mockDispatch)=>$b4d84dd4bbf18d6d$var$matchHeaders(mockDispatch, key.headers));
    if (matchedMockDispatches.length === 0) throw new $b4d84dd4bbf18d6d$require$MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
    return matchedMockDispatches[0];
}
function $b4d84dd4bbf18d6d$var$addMockDispatch(mockDispatches, key, data) {
    const baseData = {
        timesInvoked: 0,
        times: 1,
        persist: false,
        consumed: false
    };
    const replyData = typeof data === "function" ? {
        callback: data
    } : {
        ...data
    };
    const newMockDispatch = {
        ...baseData,
        ...key,
        pending: true,
        data: {
            error: null,
            ...replyData
        }
    };
    mockDispatches.push(newMockDispatch);
    return newMockDispatch;
}
function $b4d84dd4bbf18d6d$var$deleteMockDispatch(mockDispatches, key) {
    const index = mockDispatches.findIndex((dispatch)=>{
        if (!dispatch.consumed) return false;
        return $b4d84dd4bbf18d6d$var$matchKey(dispatch, key);
    });
    if (index !== -1) mockDispatches.splice(index, 1);
}
function $b4d84dd4bbf18d6d$var$buildKey(opts) {
    const { path: path, method: method, body: body, headers: headers, query: query } = opts;
    return {
        path: path,
        method: method,
        body: body,
        headers: headers,
        query: query
    };
}
function $b4d84dd4bbf18d6d$var$generateKeyValues(data) {
    return Object.entries(data).reduce((keyValuePairs, [key, value])=>[
            ...keyValuePairs,
            $b4d84dd4bbf18d6d$require$Buffer.from(`${key}`),
            Array.isArray(value) ? value.map((x)=>$b4d84dd4bbf18d6d$require$Buffer.from(`${x}`)) : $b4d84dd4bbf18d6d$require$Buffer.from(`${value}`)
        ], []);
}
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
 * @param {number} statusCode
 */ function $b4d84dd4bbf18d6d$var$getStatusText(statusCode) {
    return $b4d84dd4bbf18d6d$require$STATUS_CODES[statusCode] || "unknown";
}
async function $b4d84dd4bbf18d6d$var$getResponse(body) {
    const buffers = [];
    for await (const data of body)buffers.push(data);
    return $b4d84dd4bbf18d6d$require$Buffer.concat(buffers).toString("utf8");
}
/**
 * Mock dispatch function used to simulate undici dispatches
 */ function $b4d84dd4bbf18d6d$var$mockDispatch(opts, handler) {
    // Get mock dispatch from built key
    const key = $b4d84dd4bbf18d6d$var$buildKey(opts);
    const mockDispatch = $b4d84dd4bbf18d6d$var$getMockDispatch(this[$b4d84dd4bbf18d6d$require$kDispatches], key);
    mockDispatch.timesInvoked++;
    // Here's where we resolve a callback if a callback is present for the dispatch data.
    if (mockDispatch.data.callback) mockDispatch.data = {
        ...mockDispatch.data,
        ...mockDispatch.data.callback(opts)
    };
    // Parse mockDispatch data
    const { data: { statusCode: statusCode, data: data, headers: headers, trailers: trailers, error: error }, delay: delay, persist: persist } = mockDispatch;
    const { timesInvoked: timesInvoked, times: times } = mockDispatch;
    // If it's used up and not persistent, mark as consumed
    mockDispatch.consumed = !persist && timesInvoked >= times;
    mockDispatch.pending = timesInvoked < times;
    // If specified, trigger dispatch error
    if (error !== null) {
        $b4d84dd4bbf18d6d$var$deleteMockDispatch(this[$b4d84dd4bbf18d6d$require$kDispatches], key);
        handler.onError(error);
        return true;
    }
    // Handle the request with a delay if necessary
    if (typeof delay === "number" && delay > 0) setTimeout(()=>{
        handleReply(this[$b4d84dd4bbf18d6d$require$kDispatches]);
    }, delay);
    else handleReply(this[$b4d84dd4bbf18d6d$require$kDispatches]);
    function handleReply(mockDispatches, _data = data) {
        // fetch's HeadersList is a 1D string array
        const optsHeaders = Array.isArray(opts.headers) ? $b4d84dd4bbf18d6d$var$buildHeadersFromArray(opts.headers) : opts.headers;
        const body = typeof _data === "function" ? _data({
            ...opts,
            headers: optsHeaders
        }) : _data;
        // util.types.isPromise is likely needed for jest.
        if ($b4d84dd4bbf18d6d$var$isPromise(body)) {
            // If handleReply is asynchronous, throwing an error
            // in the callback will reject the promise, rather than
            // synchronously throw the error, which breaks some tests.
            // Rather, we wait for the callback to resolve if it is a
            // promise, and then re-run handleReply with the new body.
            body.then((newData)=>handleReply(mockDispatches, newData));
            return;
        }
        const responseData = $b4d84dd4bbf18d6d$var$getResponseData(body);
        const responseHeaders = $b4d84dd4bbf18d6d$var$generateKeyValues(headers);
        const responseTrailers = $b4d84dd4bbf18d6d$var$generateKeyValues(trailers);
        handler.abort = $b4d84dd4bbf18d6d$require$nop;
        handler.onHeaders(statusCode, responseHeaders, resume, $b4d84dd4bbf18d6d$var$getStatusText(statusCode));
        handler.onData($b4d84dd4bbf18d6d$require$Buffer.from(responseData));
        handler.onComplete(responseTrailers);
        $b4d84dd4bbf18d6d$var$deleteMockDispatch(mockDispatches, key);
    }
    function resume() {}
    return true;
}
function $b4d84dd4bbf18d6d$var$buildMockDispatch() {
    const agent = this[$b4d84dd4bbf18d6d$require$kMockAgent];
    const origin = this[$b4d84dd4bbf18d6d$require$kOrigin];
    const originalDispatch = this[$b4d84dd4bbf18d6d$require$kOriginalDispatch];
    return function dispatch(opts, handler) {
        if (agent.isMockActive) try {
            $b4d84dd4bbf18d6d$var$mockDispatch.call(this, opts, handler);
        } catch (error) {
            if (error instanceof $b4d84dd4bbf18d6d$require$MockNotMatchedError) {
                const netConnect = agent[$b4d84dd4bbf18d6d$require$kGetNetConnect]();
                if (netConnect === false) throw new $b4d84dd4bbf18d6d$require$MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
                if ($b4d84dd4bbf18d6d$var$checkNetConnect(netConnect, origin)) originalDispatch.call(this, opts, handler);
                else throw new $b4d84dd4bbf18d6d$require$MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
            } else throw error;
        }
        else originalDispatch.call(this, opts, handler);
    };
}
function $b4d84dd4bbf18d6d$var$checkNetConnect(netConnect, origin) {
    const url = new URL(origin);
    if (netConnect === true) return true;
    else if (Array.isArray(netConnect) && netConnect.some((matcher)=>$b4d84dd4bbf18d6d$var$matchValue(matcher, url.host))) return true;
    return false;
}
function $b4d84dd4bbf18d6d$var$buildMockOptions(opts) {
    if (opts) {
        const { agent: agent, ...mockOptions } = opts;
        return mockOptions;
    }
}
$b4d84dd4bbf18d6d$exports = {
    getResponseData: $b4d84dd4bbf18d6d$var$getResponseData,
    getMockDispatch: $b4d84dd4bbf18d6d$var$getMockDispatch,
    addMockDispatch: $b4d84dd4bbf18d6d$var$addMockDispatch,
    deleteMockDispatch: $b4d84dd4bbf18d6d$var$deleteMockDispatch,
    buildKey: $b4d84dd4bbf18d6d$var$buildKey,
    generateKeyValues: $b4d84dd4bbf18d6d$var$generateKeyValues,
    matchValue: $b4d84dd4bbf18d6d$var$matchValue,
    getResponse: $b4d84dd4bbf18d6d$var$getResponse,
    getStatusText: $b4d84dd4bbf18d6d$var$getStatusText,
    mockDispatch: $b4d84dd4bbf18d6d$var$mockDispatch,
    buildMockDispatch: $b4d84dd4bbf18d6d$var$buildMockDispatch,
    checkNetConnect: $b4d84dd4bbf18d6d$var$checkNetConnect,
    buildMockOptions: $b4d84dd4bbf18d6d$var$buildMockOptions,
    getHeaderByName: $b4d84dd4bbf18d6d$var$getHeaderByName
};


var $c50ebf6e3d98dd4f$require$buildMockDispatch = $b4d84dd4bbf18d6d$exports.buildMockDispatch;

var $c50ebf6e3d98dd4f$require$kDispatches = $61c8d9a19a8cfa99$exports.kDispatches;
var $c50ebf6e3d98dd4f$require$kMockAgent = $61c8d9a19a8cfa99$exports.kMockAgent;
var $c50ebf6e3d98dd4f$require$kClose = $61c8d9a19a8cfa99$exports.kClose;
var $c50ebf6e3d98dd4f$require$kOriginalClose = $61c8d9a19a8cfa99$exports.kOriginalClose;
var $c50ebf6e3d98dd4f$require$kOrigin = $61c8d9a19a8cfa99$exports.kOrigin;
var $c50ebf6e3d98dd4f$require$kOriginalDispatch = $61c8d9a19a8cfa99$exports.kOriginalDispatch;
var $c50ebf6e3d98dd4f$require$kConnected = $61c8d9a19a8cfa99$exports.kConnected;
var $11e103e341c825f7$export$fb1b189d8a131a8b;
var $11e103e341c825f7$export$61f2724da7650995;
"use strict";

var $11e103e341c825f7$require$getResponseData = $b4d84dd4bbf18d6d$exports.getResponseData;
var $11e103e341c825f7$require$buildKey = $b4d84dd4bbf18d6d$exports.buildKey;
var $11e103e341c825f7$require$addMockDispatch = $b4d84dd4bbf18d6d$exports.addMockDispatch;

var $11e103e341c825f7$require$kDispatches = $61c8d9a19a8cfa99$exports.kDispatches;
var $11e103e341c825f7$require$kDispatchKey = $61c8d9a19a8cfa99$exports.kDispatchKey;
var $11e103e341c825f7$require$kDefaultHeaders = $61c8d9a19a8cfa99$exports.kDefaultHeaders;
var $11e103e341c825f7$require$kDefaultTrailers = $61c8d9a19a8cfa99$exports.kDefaultTrailers;
var $11e103e341c825f7$require$kContentLength = $61c8d9a19a8cfa99$exports.kContentLength;
var $11e103e341c825f7$require$kMockDispatch = $61c8d9a19a8cfa99$exports.kMockDispatch;

var $7bgOU = parcelRequire("7bgOU");
var $11e103e341c825f7$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;

var $dZB1o = parcelRequire("dZB1o");
var $11e103e341c825f7$require$buildURL = $dZB1o.buildURL;
/**
 * Defines the scope API for an interceptor reply
 */ class $11e103e341c825f7$var$MockScope {
    constructor(mockDispatch){
        this[$11e103e341c825f7$require$kMockDispatch] = mockDispatch;
    }
    /**
   * Delay a reply by a set amount in ms.
   */ delay(waitInMs) {
        if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new $11e103e341c825f7$require$InvalidArgumentError("waitInMs must be a valid integer > 0");
        this[$11e103e341c825f7$require$kMockDispatch].delay = waitInMs;
        return this;
    }
    /**
   * For a defined reply, never mark as consumed.
   */ persist() {
        this[$11e103e341c825f7$require$kMockDispatch].persist = true;
        return this;
    }
    /**
   * Allow one to define a reply for a set amount of matching requests.
   */ times(repeatTimes) {
        if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new $11e103e341c825f7$require$InvalidArgumentError("repeatTimes must be a valid integer > 0");
        this[$11e103e341c825f7$require$kMockDispatch].times = repeatTimes;
        return this;
    }
}
/**
 * Defines an interceptor for a Mock
 */ class $11e103e341c825f7$var$MockInterceptor {
    constructor(opts, mockDispatches){
        if (typeof opts !== "object") throw new $11e103e341c825f7$require$InvalidArgumentError("opts must be an object");
        if (typeof opts.path === "undefined") throw new $11e103e341c825f7$require$InvalidArgumentError("opts.path must be defined");
        if (typeof opts.method === "undefined") opts.method = "GET";
        // See https://github.com/nodejs/undici/issues/1245
        // As per RFC 3986, clients are not supposed to send URI
        // fragments to servers when they retrieve a document,
        if (typeof opts.path === "string") {
            if (opts.query) opts.path = $11e103e341c825f7$require$buildURL(opts.path, opts.query);
            else {
                // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
                const parsedURL = new URL(opts.path, "data://");
                opts.path = parsedURL.pathname + parsedURL.search;
            }
        }
        if (typeof opts.method === "string") opts.method = opts.method.toUpperCase();
        this[$11e103e341c825f7$require$kDispatchKey] = $11e103e341c825f7$require$buildKey(opts);
        this[$11e103e341c825f7$require$kDispatches] = mockDispatches;
        this[$11e103e341c825f7$require$kDefaultHeaders] = {};
        this[$11e103e341c825f7$require$kDefaultTrailers] = {};
        this[$11e103e341c825f7$require$kContentLength] = false;
    }
    createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = $11e103e341c825f7$require$getResponseData(data);
        const contentLength = this[$11e103e341c825f7$require$kContentLength] ? {
            "content-length": responseData.length
        } : {};
        const headers = {
            ...this[$11e103e341c825f7$require$kDefaultHeaders],
            ...contentLength,
            ...responseOptions.headers
        };
        const trailers = {
            ...this[$11e103e341c825f7$require$kDefaultTrailers],
            ...responseOptions.trailers
        };
        return {
            statusCode: statusCode,
            data: data,
            headers: headers,
            trailers: trailers
        };
    }
    validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === "undefined") throw new $11e103e341c825f7$require$InvalidArgumentError("statusCode must be defined");
        if (typeof data === "undefined") throw new $11e103e341c825f7$require$InvalidArgumentError("data must be defined");
        if (typeof responseOptions !== "object") throw new $11e103e341c825f7$require$InvalidArgumentError("responseOptions must be an object");
    }
    /**
   * Mock an undici request with a defined reply.
   */ reply(replyData) {
        // Values of reply aren't available right now as they
        // can only be available when the reply callback is invoked.
        if (typeof replyData === "function") {
            // We'll first wrap the provided callback in another function,
            // this function will properly resolve the data from the callback
            // when invoked.
            const wrappedDefaultsCallback = (opts)=>{
                // Our reply options callback contains the parameter for statusCode, data and options.
                const resolvedData = replyData(opts);
                // Check if it is in the right format
                if (typeof resolvedData !== "object") throw new $11e103e341c825f7$require$InvalidArgumentError("reply options callback must return an object");
                const { statusCode: statusCode, data: data = "", responseOptions: responseOptions = {} } = resolvedData;
                this.validateReplyParameters(statusCode, data, responseOptions);
                // Since the values can be obtained immediately we return them
                // from this higher order function that will be resolved later.
                return {
                    ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
                };
            };
            // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
            const newMockDispatch = $11e103e341c825f7$require$addMockDispatch(this[$11e103e341c825f7$require$kDispatches], this[$11e103e341c825f7$require$kDispatchKey], wrappedDefaultsCallback);
            return new $11e103e341c825f7$var$MockScope(newMockDispatch);
        }
        // We can have either one or three parameters, if we get here,
        // we should have 1-3 parameters. So we spread the arguments of
        // this function to obtain the parameters, since replyData will always
        // just be the statusCode.
        const [statusCode, data = "", responseOptions = {}] = [
            ...arguments
        ];
        this.validateReplyParameters(statusCode, data, responseOptions);
        // Send in-already provided data like usual
        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
        const newMockDispatch = $11e103e341c825f7$require$addMockDispatch(this[$11e103e341c825f7$require$kDispatches], this[$11e103e341c825f7$require$kDispatchKey], dispatchData);
        return new $11e103e341c825f7$var$MockScope(newMockDispatch);
    }
    /**
   * Mock an undici request with a defined error.
   */ replyWithError(error) {
        if (typeof error === "undefined") throw new $11e103e341c825f7$require$InvalidArgumentError("error must be defined");
        const newMockDispatch = $11e103e341c825f7$require$addMockDispatch(this[$11e103e341c825f7$require$kDispatches], this[$11e103e341c825f7$require$kDispatchKey], {
            error: error
        });
        return new $11e103e341c825f7$var$MockScope(newMockDispatch);
    }
    /**
   * Set default reply headers on the interceptor for subsequent replies
   */ defaultReplyHeaders(headers) {
        if (typeof headers === "undefined") throw new $11e103e341c825f7$require$InvalidArgumentError("headers must be defined");
        this[$11e103e341c825f7$require$kDefaultHeaders] = headers;
        return this;
    }
    /**
   * Set default reply trailers on the interceptor for subsequent replies
   */ defaultReplyTrailers(trailers) {
        if (typeof trailers === "undefined") throw new $11e103e341c825f7$require$InvalidArgumentError("trailers must be defined");
        this[$11e103e341c825f7$require$kDefaultTrailers] = trailers;
        return this;
    }
    /**
   * Set reply content length header for replies on the interceptor
   */ replyContentLength() {
        this[$11e103e341c825f7$require$kContentLength] = true;
        return this;
    }
}
$11e103e341c825f7$export$fb1b189d8a131a8b = $11e103e341c825f7$var$MockInterceptor;
$11e103e341c825f7$export$61f2724da7650995 = $11e103e341c825f7$var$MockScope;


var $c50ebf6e3d98dd4f$require$MockInterceptor = $11e103e341c825f7$export$fb1b189d8a131a8b;

var $9Yodq = parcelRequire("9Yodq");

var $7bgOU = parcelRequire("7bgOU");
var $c50ebf6e3d98dd4f$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
/**
 * MockClient provides an API that extends the Client to influence the mockDispatches.
 */ class $c50ebf6e3d98dd4f$var$MockClient extends $jOrdh {
    constructor(origin, opts){
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new $c50ebf6e3d98dd4f$require$InvalidArgumentError("Argument opts.agent must implement Agent");
        this[$c50ebf6e3d98dd4f$require$kMockAgent] = opts.agent;
        this[$c50ebf6e3d98dd4f$require$kOrigin] = origin;
        this[$c50ebf6e3d98dd4f$require$kDispatches] = [];
        this[$c50ebf6e3d98dd4f$require$kConnected] = 1;
        this[$c50ebf6e3d98dd4f$require$kOriginalDispatch] = this.dispatch;
        this[$c50ebf6e3d98dd4f$require$kOriginalClose] = this.close.bind(this);
        this.dispatch = $c50ebf6e3d98dd4f$require$buildMockDispatch.call(this);
        this.close = this[$c50ebf6e3d98dd4f$require$kClose];
    }
    get [$9Yodq.kConnected]() {
        return this[$c50ebf6e3d98dd4f$require$kConnected];
    }
    /**
   * Sets up the base interceptor for mocking replies from undici.
   */ intercept(opts) {
        return new $c50ebf6e3d98dd4f$require$MockInterceptor(opts, this[$c50ebf6e3d98dd4f$require$kDispatches]);
    }
    async [$c50ebf6e3d98dd4f$require$kClose]() {
        await $c50ebf6e3d98dd4f$require$promisify(this[$c50ebf6e3d98dd4f$require$kOriginalClose])();
        this[$c50ebf6e3d98dd4f$require$kConnected] = 0;
        this[$c50ebf6e3d98dd4f$require$kMockAgent][$9Yodq.kClients].delete(this[$c50ebf6e3d98dd4f$require$kOrigin]);
    }
}
$c50ebf6e3d98dd4f$exports = $c50ebf6e3d98dd4f$var$MockClient;


var $cffe840b579a1d0d$exports = {};
"use strict";

var $9Yodq = parcelRequire("9Yodq");
var $cffe840b579a1d0d$require$kClients = $9Yodq.kClients;

var $j8Wyz = parcelRequire("j8Wyz");

var $cffe840b579a1d0d$require$kAgent = $61c8d9a19a8cfa99$exports.kAgent;
var $cffe840b579a1d0d$require$kMockAgentSet = $61c8d9a19a8cfa99$exports.kMockAgentSet;
var $cffe840b579a1d0d$require$kMockAgentGet = $61c8d9a19a8cfa99$exports.kMockAgentGet;
var $cffe840b579a1d0d$require$kDispatches = $61c8d9a19a8cfa99$exports.kDispatches;
var $cffe840b579a1d0d$require$kIsMockActive = $61c8d9a19a8cfa99$exports.kIsMockActive;
var $cffe840b579a1d0d$require$kNetConnect = $61c8d9a19a8cfa99$exports.kNetConnect;
var $cffe840b579a1d0d$require$kGetNetConnect = $61c8d9a19a8cfa99$exports.kGetNetConnect;
var $cffe840b579a1d0d$require$kOptions = $61c8d9a19a8cfa99$exports.kOptions;
var $cffe840b579a1d0d$require$kFactory = $61c8d9a19a8cfa99$exports.kFactory;

var $b0dacdec2125f6bf$exports = {};
"use strict";

var $b0dacdec2125f6bf$require$promisify = $4UN2M$util.promisify;

var $1HAzk = parcelRequire("1HAzk");

var $b0dacdec2125f6bf$require$buildMockDispatch = $b4d84dd4bbf18d6d$exports.buildMockDispatch;

var $b0dacdec2125f6bf$require$kDispatches = $61c8d9a19a8cfa99$exports.kDispatches;
var $b0dacdec2125f6bf$require$kMockAgent = $61c8d9a19a8cfa99$exports.kMockAgent;
var $b0dacdec2125f6bf$require$kClose = $61c8d9a19a8cfa99$exports.kClose;
var $b0dacdec2125f6bf$require$kOriginalClose = $61c8d9a19a8cfa99$exports.kOriginalClose;
var $b0dacdec2125f6bf$require$kOrigin = $61c8d9a19a8cfa99$exports.kOrigin;
var $b0dacdec2125f6bf$require$kOriginalDispatch = $61c8d9a19a8cfa99$exports.kOriginalDispatch;
var $b0dacdec2125f6bf$require$kConnected = $61c8d9a19a8cfa99$exports.kConnected;

var $b0dacdec2125f6bf$require$MockInterceptor = $11e103e341c825f7$export$fb1b189d8a131a8b;

var $9Yodq = parcelRequire("9Yodq");

var $7bgOU = parcelRequire("7bgOU");
var $b0dacdec2125f6bf$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
/**
 * MockPool provides an API that extends the Pool to influence the mockDispatches.
 */ class $b0dacdec2125f6bf$var$MockPool extends $1HAzk {
    constructor(origin, opts){
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new $b0dacdec2125f6bf$require$InvalidArgumentError("Argument opts.agent must implement Agent");
        this[$b0dacdec2125f6bf$require$kMockAgent] = opts.agent;
        this[$b0dacdec2125f6bf$require$kOrigin] = origin;
        this[$b0dacdec2125f6bf$require$kDispatches] = [];
        this[$b0dacdec2125f6bf$require$kConnected] = 1;
        this[$b0dacdec2125f6bf$require$kOriginalDispatch] = this.dispatch;
        this[$b0dacdec2125f6bf$require$kOriginalClose] = this.close.bind(this);
        this.dispatch = $b0dacdec2125f6bf$require$buildMockDispatch.call(this);
        this.close = this[$b0dacdec2125f6bf$require$kClose];
    }
    get [$9Yodq.kConnected]() {
        return this[$b0dacdec2125f6bf$require$kConnected];
    }
    /**
   * Sets up the base interceptor for mocking replies from undici.
   */ intercept(opts) {
        return new $b0dacdec2125f6bf$require$MockInterceptor(opts, this[$b0dacdec2125f6bf$require$kDispatches]);
    }
    async [$b0dacdec2125f6bf$require$kClose]() {
        await $b0dacdec2125f6bf$require$promisify(this[$b0dacdec2125f6bf$require$kOriginalClose])();
        this[$b0dacdec2125f6bf$require$kConnected] = 0;
        this[$b0dacdec2125f6bf$require$kMockAgent][$9Yodq.kClients].delete(this[$b0dacdec2125f6bf$require$kOrigin]);
    }
}
$b0dacdec2125f6bf$exports = $b0dacdec2125f6bf$var$MockPool;



var $cffe840b579a1d0d$require$matchValue = $b4d84dd4bbf18d6d$exports.matchValue;
var $cffe840b579a1d0d$require$buildMockOptions = $b4d84dd4bbf18d6d$exports.buildMockOptions;

var $7bgOU = parcelRequire("7bgOU");
var $cffe840b579a1d0d$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $cffe840b579a1d0d$require$UndiciError = $7bgOU.UndiciError;

var $cxWIF = parcelRequire("cxWIF");
var $c036ea2bcdb4190a$exports = {};
"use strict";
const $c036ea2bcdb4190a$var$singulars = {
    pronoun: "it",
    is: "is",
    was: "was",
    this: "this"
};
const $c036ea2bcdb4190a$var$plurals = {
    pronoun: "they",
    is: "are",
    was: "were",
    this: "these"
};
$c036ea2bcdb4190a$exports = class Pluralizer {
    constructor(singular, plural){
        this.singular = singular;
        this.plural = plural;
    }
    pluralize(count) {
        const one = count === 1;
        const keys = one ? $c036ea2bcdb4190a$var$singulars : $c036ea2bcdb4190a$var$plurals;
        const noun = one ? this.singular : this.plural;
        return {
            ...keys,
            count: count,
            noun: noun
        };
    }
};


var $0b3176e59f3a794a$exports = {};
"use strict";

var $0b3176e59f3a794a$require$Transform = $4UN2M$stream.Transform;

var $0b3176e59f3a794a$require$Console = $4UN2M$console.Console;
/**
 * Gets the output of `console.table(…)` as a string.
 */ $0b3176e59f3a794a$exports = class PendingInterceptorsFormatter {
    constructor({ disableColors: disableColors } = {}){
        this.transform = new $0b3176e59f3a794a$require$Transform({
            transform (chunk, _enc, cb) {
                cb(null, chunk);
            }
        });
        this.logger = new $0b3176e59f3a794a$require$Console({
            stdout: this.transform,
            inspectOptions: {
                colors: !disableColors && true
            }
        });
    }
    format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(({ method: method, path: path, data: { statusCode: statusCode }, persist: persist, times: times, timesInvoked: timesInvoked, origin: origin })=>({
                Method: method,
                Origin: origin,
                Path: path,
                "Status code": statusCode,
                Persistent: persist ? "\u2705" : "\u274C",
                Invocations: timesInvoked,
                Remaining: persist ? Infinity : times - timesInvoked
            }));
        this.logger.table(withPrettyHeaders);
        return this.transform.read().toString();
    }
};


class $cffe840b579a1d0d$var$FakeWeakRef {
    constructor(value){
        this.value = value;
    }
    deref() {
        return this.value;
    }
}
class $cffe840b579a1d0d$var$MockAgent extends $cxWIF {
    constructor(opts){
        super(opts);
        this[$cffe840b579a1d0d$require$kNetConnect] = true;
        this[$cffe840b579a1d0d$require$kIsMockActive] = true;
        // Instantiate Agent and encapsulate
        if (opts && opts.agent && typeof opts.agent.dispatch !== "function") throw new $cffe840b579a1d0d$require$InvalidArgumentError("Argument opts.agent must implement Agent");
        const agent = opts && opts.agent ? opts.agent : new $j8Wyz(opts);
        this[$cffe840b579a1d0d$require$kAgent] = agent;
        this[$cffe840b579a1d0d$require$kClients] = agent[$cffe840b579a1d0d$require$kClients];
        this[$cffe840b579a1d0d$require$kOptions] = $cffe840b579a1d0d$require$buildMockOptions(opts);
    }
    get(origin) {
        let dispatcher = this[$cffe840b579a1d0d$require$kMockAgentGet](origin);
        if (!dispatcher) {
            dispatcher = this[$cffe840b579a1d0d$require$kFactory](origin);
            this[$cffe840b579a1d0d$require$kMockAgentSet](origin, dispatcher);
        }
        return dispatcher;
    }
    dispatch(opts, handler) {
        // Call MockAgent.get to perform additional setup before dispatching as normal
        this.get(opts.origin);
        return this[$cffe840b579a1d0d$require$kAgent].dispatch(opts, handler);
    }
    async close() {
        await this[$cffe840b579a1d0d$require$kAgent].close();
        this[$cffe840b579a1d0d$require$kClients].clear();
    }
    deactivate() {
        this[$cffe840b579a1d0d$require$kIsMockActive] = false;
    }
    activate() {
        this[$cffe840b579a1d0d$require$kIsMockActive] = true;
    }
    enableNetConnect(matcher) {
        if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
            if (Array.isArray(this[$cffe840b579a1d0d$require$kNetConnect])) this[$cffe840b579a1d0d$require$kNetConnect].push(matcher);
            else this[$cffe840b579a1d0d$require$kNetConnect] = [
                matcher
            ];
        } else if (typeof matcher === "undefined") this[$cffe840b579a1d0d$require$kNetConnect] = true;
        else throw new $cffe840b579a1d0d$require$InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
    }
    disableNetConnect() {
        this[$cffe840b579a1d0d$require$kNetConnect] = false;
    }
    // This is required to bypass issues caused by using global symbols - see:
    // https://github.com/nodejs/undici/issues/1447
    get isMockActive() {
        return this[$cffe840b579a1d0d$require$kIsMockActive];
    }
    [$cffe840b579a1d0d$require$kMockAgentSet](origin, dispatcher) {
        this[$cffe840b579a1d0d$require$kClients].set(origin, new $cffe840b579a1d0d$var$FakeWeakRef(dispatcher));
    }
    [$cffe840b579a1d0d$require$kFactory](origin) {
        const mockOptions = Object.assign({
            agent: this
        }, this[$cffe840b579a1d0d$require$kOptions]);
        return this[$cffe840b579a1d0d$require$kOptions] && this[$cffe840b579a1d0d$require$kOptions].connections === 1 ? new $c50ebf6e3d98dd4f$exports(origin, mockOptions) : new $b0dacdec2125f6bf$exports(origin, mockOptions);
    }
    [$cffe840b579a1d0d$require$kMockAgentGet](origin) {
        // First check if we can immediately find it
        const ref = this[$cffe840b579a1d0d$require$kClients].get(origin);
        if (ref) return ref.deref();
        // If the origin is not a string create a dummy parent pool and return to user
        if (typeof origin !== "string") {
            const dispatcher = this[$cffe840b579a1d0d$require$kFactory]("http://localhost:9999");
            this[$cffe840b579a1d0d$require$kMockAgentSet](origin, dispatcher);
            return dispatcher;
        }
        // If we match, create a pool and assign the same dispatches
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[$cffe840b579a1d0d$require$kClients])){
            const nonExplicitDispatcher = nonExplicitRef.deref();
            if (nonExplicitDispatcher && typeof keyMatcher !== "string" && $cffe840b579a1d0d$require$matchValue(keyMatcher, origin)) {
                const dispatcher = this[$cffe840b579a1d0d$require$kFactory](origin);
                this[$cffe840b579a1d0d$require$kMockAgentSet](origin, dispatcher);
                dispatcher[$cffe840b579a1d0d$require$kDispatches] = nonExplicitDispatcher[$cffe840b579a1d0d$require$kDispatches];
                return dispatcher;
            }
        }
    }
    [$cffe840b579a1d0d$require$kGetNetConnect]() {
        return this[$cffe840b579a1d0d$require$kNetConnect];
    }
    pendingInterceptors() {
        const mockAgentClients = this[$cffe840b579a1d0d$require$kClients];
        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope])=>scope.deref()[$cffe840b579a1d0d$require$kDispatches].map((dispatch)=>({
                    ...dispatch,
                    origin: origin
                }))).filter(({ pending: pending })=>pending);
    }
    assertNoPendingInterceptors({ pendingInterceptorsFormatter: pendingInterceptorsFormatter = new $0b3176e59f3a794a$exports() } = {}) {
        const pending = this.pendingInterceptors();
        if (pending.length === 0) return;
        const pluralizer = new $c036ea2bcdb4190a$exports("interceptor", "interceptors").pluralize(pending.length);
        throw new $cffe840b579a1d0d$require$UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
    }
}
$cffe840b579a1d0d$exports = $cffe840b579a1d0d$var$MockAgent;




var $9ef6b45c2861976e$exports = {};

var $9ef6b45c2861976e$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";

var $9Yodq = parcelRequire("9Yodq");
var $9ef6b45c2861976e$require$kProxy = $9Yodq.kProxy;
var $9ef6b45c2861976e$require$kClose = $9Yodq.kClose;
var $9ef6b45c2861976e$require$kDestroy = $9Yodq.kDestroy;
var $9ef6b45c2861976e$require$kInterceptors = $9Yodq.kInterceptors;

var $9ef6b45c2861976e$require$URL = $4UN2M$url.URL;

var $j8Wyz = parcelRequire("j8Wyz");

var $1HAzk = parcelRequire("1HAzk");

var $5nvUe = parcelRequire("5nvUe");

var $7bgOU = parcelRequire("7bgOU");
var $9ef6b45c2861976e$require$InvalidArgumentError = $7bgOU.InvalidArgumentError;
var $9ef6b45c2861976e$require$RequestAbortedError = $7bgOU.RequestAbortedError;

var $hb74B = parcelRequire("hb74B");
const $9ef6b45c2861976e$var$kAgent = Symbol("proxy agent");
const $9ef6b45c2861976e$var$kClient = Symbol("proxy client");
const $9ef6b45c2861976e$var$kProxyHeaders = Symbol("proxy headers");
const $9ef6b45c2861976e$var$kRequestTls = Symbol("request tls settings");
const $9ef6b45c2861976e$var$kProxyTls = Symbol("proxy tls settings");
const $9ef6b45c2861976e$var$kConnectEndpoint = Symbol("connect endpoint function");
function $9ef6b45c2861976e$var$defaultProtocolPort(protocol) {
    return protocol === "https:" ? 443 : 80;
}
function $9ef6b45c2861976e$var$buildProxyOptions(opts) {
    if (typeof opts === "string") opts = {
        uri: opts
    };
    if (!opts || !opts.uri) throw new $9ef6b45c2861976e$require$InvalidArgumentError("Proxy opts.uri is mandatory");
    return {
        uri: opts.uri,
        protocol: opts.protocol || "https"
    };
}
function $9ef6b45c2861976e$var$defaultFactory(origin, opts) {
    return new $1HAzk(origin, opts);
}
class $9ef6b45c2861976e$var$ProxyAgent extends $5nvUe {
    constructor(opts){
        super(opts);
        this[$9ef6b45c2861976e$require$kProxy] = $9ef6b45c2861976e$var$buildProxyOptions(opts);
        this[$9ef6b45c2861976e$var$kAgent] = new $j8Wyz(opts);
        this[$9ef6b45c2861976e$require$kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
        if (typeof opts === "string") opts = {
            uri: opts
        };
        if (!opts || !opts.uri) throw new $9ef6b45c2861976e$require$InvalidArgumentError("Proxy opts.uri is mandatory");
        const { clientFactory: clientFactory = $9ef6b45c2861976e$var$defaultFactory } = opts;
        if (typeof clientFactory !== "function") throw new $9ef6b45c2861976e$require$InvalidArgumentError("Proxy opts.clientFactory must be a function.");
        this[$9ef6b45c2861976e$var$kRequestTls] = opts.requestTls;
        this[$9ef6b45c2861976e$var$kProxyTls] = opts.proxyTls;
        this[$9ef6b45c2861976e$var$kProxyHeaders] = opts.headers || {};
        const resolvedUrl = new $9ef6b45c2861976e$require$URL(opts.uri);
        const { origin: origin, port: port, host: host, username: username, password: password } = resolvedUrl;
        if (opts.auth && opts.token) throw new $9ef6b45c2861976e$require$InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
        else if (opts.auth) /* @deprecated in favour of opts.token */ this[$9ef6b45c2861976e$var$kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
        else if (opts.token) this[$9ef6b45c2861976e$var$kProxyHeaders]["proxy-authorization"] = opts.token;
        else if (username && password) this[$9ef6b45c2861976e$var$kProxyHeaders]["proxy-authorization"] = `Basic ${$9ef6b45c2861976e$require$Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
        const connect = $hb74B({
            ...opts.proxyTls
        });
        this[$9ef6b45c2861976e$var$kConnectEndpoint] = $hb74B({
            ...opts.requestTls
        });
        this[$9ef6b45c2861976e$var$kClient] = clientFactory(resolvedUrl, {
            connect: connect
        });
        this[$9ef6b45c2861976e$var$kAgent] = new $j8Wyz({
            ...opts,
            connect: async (opts, callback)=>{
                let requestedHost = opts.host;
                if (!opts.port) requestedHost += `:${$9ef6b45c2861976e$var$defaultProtocolPort(opts.protocol)}`;
                try {
                    const { socket: socket, statusCode: statusCode } = await this[$9ef6b45c2861976e$var$kClient].connect({
                        origin: origin,
                        port: port,
                        path: requestedHost,
                        signal: opts.signal,
                        headers: {
                            ...this[$9ef6b45c2861976e$var$kProxyHeaders],
                            host: host
                        }
                    });
                    if (statusCode !== 200) {
                        socket.on("error", ()=>{}).destroy();
                        callback(new $9ef6b45c2861976e$require$RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
                    }
                    if (opts.protocol !== "https:") {
                        callback(null, socket);
                        return;
                    }
                    let servername;
                    if (this[$9ef6b45c2861976e$var$kRequestTls]) servername = this[$9ef6b45c2861976e$var$kRequestTls].servername;
                    else servername = opts.servername;
                    this[$9ef6b45c2861976e$var$kConnectEndpoint]({
                        ...opts,
                        servername: servername,
                        httpSocket: socket
                    }, callback);
                } catch (err) {
                    callback(err);
                }
            }
        });
    }
    dispatch(opts, handler) {
        const { host: host } = new $9ef6b45c2861976e$require$URL(opts.origin);
        const headers = $9ef6b45c2861976e$var$buildHeaders(opts.headers);
        $9ef6b45c2861976e$var$throwIfProxyAuthIsSent(headers);
        return this[$9ef6b45c2861976e$var$kAgent].dispatch({
            ...opts,
            headers: {
                ...headers,
                host: host
            }
        }, handler);
    }
    async [$9ef6b45c2861976e$require$kClose]() {
        await this[$9ef6b45c2861976e$var$kAgent].close();
        await this[$9ef6b45c2861976e$var$kClient].close();
    }
    async [$9ef6b45c2861976e$require$kDestroy]() {
        await this[$9ef6b45c2861976e$var$kAgent].destroy();
        await this[$9ef6b45c2861976e$var$kClient].destroy();
    }
}
/**
 * @param {string[] | Record<string, string>} headers
 * @returns {Record<string, string>}
 */ function $9ef6b45c2861976e$var$buildHeaders(headers) {
    // When using undici.fetch, the headers list is stored
    // as an array.
    if (Array.isArray(headers)) {
        /** @type {Record<string, string>} */ const headersPair = {};
        for(let i = 0; i < headers.length; i += 2)headersPair[headers[i]] = headers[i + 1];
        return headersPair;
    }
    return headers;
}
/**
 * @param {Record<string, string>} headers
 *
 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
 * Nevertheless, it was changed and to avoid a security vulnerability by end users
 * this check was created.
 * It should be removed in the next major version for performance reasons
 */ function $9ef6b45c2861976e$var$throwIfProxyAuthIsSent(headers) {
    const existProxyAuth = headers && Object.keys(headers).find((key)=>key.toLowerCase() === "proxy-authorization");
    if (existProxyAuth) throw new $9ef6b45c2861976e$require$InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
}
$9ef6b45c2861976e$exports = $9ef6b45c2861976e$var$ProxyAgent;


var $311e225ccbd72c3f$exports = {};


var $9Yodq = parcelRequire("9Yodq");
var $311e225ccbd72c3f$require$kRetryHandlerDefaultRetry = $9Yodq.kRetryHandlerDefaultRetry;

var $7bgOU = parcelRequire("7bgOU");
var $311e225ccbd72c3f$require$RequestRetryError = $7bgOU.RequestRetryError;

var $dZB1o = parcelRequire("dZB1o");
var $311e225ccbd72c3f$require$isDisturbed = $dZB1o.isDisturbed;
var $311e225ccbd72c3f$require$parseHeaders = $dZB1o.parseHeaders;
var $311e225ccbd72c3f$require$parseRangeHeader = $dZB1o.parseRangeHeader;
function $311e225ccbd72c3f$var$calculateRetryAfterHeader(retryAfter) {
    const current = Date.now();
    const diff = new Date(retryAfter).getTime() - current;
    return diff;
}
class $311e225ccbd72c3f$var$RetryHandler {
    constructor(opts, handlers){
        const { retryOptions: retryOptions, ...dispatchOpts } = opts;
        const { // Retry scoped
        retry: retryFn, maxRetries: maxRetries, maxTimeout: maxTimeout, minTimeout: minTimeout, timeoutFactor: timeoutFactor, methods: // Response scoped
        methods, errorCodes: errorCodes, retryAfter: retryAfter, statusCodes: statusCodes } = retryOptions ?? {};
        this.dispatch = handlers.dispatch;
        this.handler = handlers.handler;
        this.opts = dispatchOpts;
        this.abort = null;
        this.aborted = false;
        this.retryOpts = {
            retry: retryFn ?? $311e225ccbd72c3f$var$RetryHandler[$311e225ccbd72c3f$require$kRetryHandlerDefaultRetry],
            retryAfter: retryAfter ?? true,
            maxTimeout: maxTimeout ?? 30000,
            timeout: minTimeout ?? 500,
            timeoutFactor: timeoutFactor ?? 2,
            maxRetries: maxRetries ?? 5,
            // What errors we should retry
            methods: methods ?? [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "DELETE",
                "TRACE"
            ],
            // Indicates which errors to retry
            statusCodes: statusCodes ?? [
                500,
                502,
                503,
                504,
                429
            ],
            // List of errors to retry
            errorCodes: errorCodes ?? [
                "ECONNRESET",
                "ECONNREFUSED",
                "ENOTFOUND",
                "ENETDOWN",
                "ENETUNREACH",
                "EHOSTDOWN",
                "EHOSTUNREACH",
                "EPIPE"
            ]
        };
        this.retryCount = 0;
        this.start = 0;
        this.end = null;
        this.etag = null;
        this.resume = null;
        // Handle possible onConnect duplication
        this.handler.onConnect((reason)=>{
            this.aborted = true;
            if (this.abort) this.abort(reason);
            else this.reason = reason;
        });
    }
    onRequestSent() {
        if (this.handler.onRequestSent) this.handler.onRequestSent();
    }
    onUpgrade(statusCode, headers, socket) {
        if (this.handler.onUpgrade) this.handler.onUpgrade(statusCode, headers, socket);
    }
    onConnect(abort) {
        if (this.aborted) abort(this.reason);
        else this.abort = abort;
    }
    onBodySent(chunk) {
        if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
    }
    static [$311e225ccbd72c3f$require$kRetryHandlerDefaultRetry](err, { state: state, opts: opts }, cb) {
        const { statusCode: statusCode, code: code, headers: headers } = err;
        const { method: method, retryOptions: retryOptions } = opts;
        const { maxRetries: maxRetries, timeout: timeout, maxTimeout: maxTimeout, timeoutFactor: timeoutFactor, statusCodes: statusCodes, errorCodes: errorCodes, methods: methods } = retryOptions;
        let { counter: counter, currentTimeout: currentTimeout } = state;
        currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
        // Any code that is not a Undici's originated and allowed to retry
        if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
            cb(err);
            return;
        }
        // If a set of method are provided and the current method is not in the list
        if (Array.isArray(methods) && !methods.includes(method)) {
            cb(err);
            return;
        }
        // If a set of status code are provided and the current status code is not in the list
        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
            cb(err);
            return;
        }
        // If we reached the max number of retries
        if (counter > maxRetries) {
            cb(err);
            return;
        }
        let retryAfterHeader = headers != null && headers["retry-after"];
        if (retryAfterHeader) {
            retryAfterHeader = Number(retryAfterHeader);
            retryAfterHeader = isNaN(retryAfterHeader) ? $311e225ccbd72c3f$var$calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3 // Retry-After is in seconds
            ;
        }
        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
        state.currentTimeout = retryTimeout;
        setTimeout(()=>cb(null), retryTimeout);
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const headers = $311e225ccbd72c3f$require$parseHeaders(rawHeaders);
        this.retryCount += 1;
        if (statusCode >= 300) {
            this.abort(new $311e225ccbd72c3f$require$RequestRetryError("Request failed", statusCode, {
                headers: headers,
                count: this.retryCount
            }));
            return false;
        }
        // Checkpoint for resume from where we left it
        if (this.resume != null) {
            this.resume = null;
            if (statusCode !== 206) return true;
            const contentRange = $311e225ccbd72c3f$require$parseRangeHeader(headers["content-range"]);
            // If no content range
            if (!contentRange) {
                this.abort(new $311e225ccbd72c3f$require$RequestRetryError("Content-Range mismatch", statusCode, {
                    headers: headers,
                    count: this.retryCount
                }));
                return false;
            }
            // Let's start with a weak etag check
            if (this.etag != null && this.etag !== headers.etag) {
                this.abort(new $311e225ccbd72c3f$require$RequestRetryError("ETag mismatch", statusCode, {
                    headers: headers,
                    count: this.retryCount
                }));
                return false;
            }
            const { start: start, size: size, end: end = size } = contentRange;
            $4UN2M$assert(this.start === start, "content-range mismatch");
            $4UN2M$assert(this.end == null || this.end === end, "content-range mismatch");
            this.resume = resume;
            return true;
        }
        if (this.end == null) {
            if (statusCode === 206) {
                // First time we receive 206
                const range = $311e225ccbd72c3f$require$parseRangeHeader(headers["content-range"]);
                if (range == null) return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
                const { start: start, size: size, end: end = size } = range;
                $4UN2M$assert(start != null && Number.isFinite(start) && this.start !== start, "content-range mismatch");
                $4UN2M$assert(Number.isFinite(start));
                $4UN2M$assert(end != null && Number.isFinite(end) && this.end !== end, "invalid content-length");
                this.start = start;
                this.end = end;
            }
            // We make our best to checkpoint the body for further range headers
            if (this.end == null) {
                const contentLength = headers["content-length"];
                this.end = contentLength != null ? Number(contentLength) : null;
            }
            $4UN2M$assert(Number.isFinite(this.start));
            $4UN2M$assert(this.end == null || Number.isFinite(this.end), "invalid content-length");
            this.resume = resume;
            this.etag = headers.etag != null ? headers.etag : null;
            return this.handler.onHeaders(statusCode, rawHeaders, resume, statusMessage);
        }
        const err = new $311e225ccbd72c3f$require$RequestRetryError("Request failed", statusCode, {
            headers: headers,
            count: this.retryCount
        });
        this.abort(err);
        return false;
    }
    onData(chunk) {
        this.start += chunk.length;
        return this.handler.onData(chunk);
    }
    onComplete(rawTrailers) {
        this.retryCount = 0;
        return this.handler.onComplete(rawTrailers);
    }
    onError(err) {
        if (this.aborted || $311e225ccbd72c3f$require$isDisturbed(this.opts.body)) return this.handler.onError(err);
        this.retryOpts.retry(err, {
            state: {
                counter: this.retryCount++,
                currentTimeout: this.retryAfter
            },
            opts: {
                retryOptions: this.retryOpts,
                ...this.opts
            }
        }, onRetry.bind(this));
        function onRetry(err) {
            if (err != null || this.aborted || $311e225ccbd72c3f$require$isDisturbed(this.opts.body)) return this.handler.onError(err);
            if (this.start !== 0) this.opts = {
                ...this.opts,
                headers: {
                    ...this.opts.headers,
                    range: `bytes=${this.start}-${this.end ?? ""}`
                }
            };
            try {
                this.dispatch(this.opts, this);
            } catch (err) {
                this.handler.onError(err);
            }
        }
    }
}
$311e225ccbd72c3f$exports = $311e225ccbd72c3f$var$RetryHandler;



var $9L2fX = parcelRequire("9L2fX");
var $6c9ecd59b25fe043$require$getGlobalDispatcher = $9L2fX.getGlobalDispatcher;
var $6c9ecd59b25fe043$require$setGlobalDispatcher = $9L2fX.setGlobalDispatcher;
var $bebb94f7b437f2c2$exports = {};
"use strict";
$bebb94f7b437f2c2$exports = class DecoratorHandler {
    constructor(handler){
        this.handler = handler;
    }
    onConnect(...args) {
        return this.handler.onConnect(...args);
    }
    onError(...args) {
        return this.handler.onError(...args);
    }
    onUpgrade(...args) {
        return this.handler.onUpgrade(...args);
    }
    onHeaders(...args) {
        return this.handler.onHeaders(...args);
    }
    onData(...args) {
        return this.handler.onData(...args);
    }
    onComplete(...args) {
        return this.handler.onComplete(...args);
    }
    onBodySent(...args) {
        return this.handler.onBodySent(...args);
    }
};



var $4yvUc = parcelRequire("4yvUc");

var $hzQZh = parcelRequire("hzQZh");
let $6c9ecd59b25fe043$var$hasCrypto;

try {
    $6c9ecd59b25fe043$import$ddd3d8d4c32dbb7f;
    $6c9ecd59b25fe043$var$hasCrypto = true;
} catch  {
    $6c9ecd59b25fe043$var$hasCrypto = false;
}
Object.assign($cxWIF.prototype, $cbe5f4a3b24a1e2d$exports);
$6c9ecd59b25fe043$export$ab054a1ef92eeb01 = $cxWIF;
$6c9ecd59b25fe043$export$1f2bb630327ac4b6 = $jOrdh;
$6c9ecd59b25fe043$export$14963ee5c8637e11 = $1HAzk;
$6c9ecd59b25fe043$export$3ea9790e91014eeb = $8da3692d6ead7a1e$exports;
$6c9ecd59b25fe043$export$f05c48a4001d5356 = $j8Wyz;
$6c9ecd59b25fe043$export$6f9e642c23f9615d = $9ef6b45c2861976e$exports;
$6c9ecd59b25fe043$export$cfbc337f7857f27a = $311e225ccbd72c3f$exports;
$6c9ecd59b25fe043$export$c3def51f5c0b7771 = $bebb94f7b437f2c2$exports;
$6c9ecd59b25fe043$export$9af91951fcedc08c = $4yvUc;
$6c9ecd59b25fe043$export$e56ca57b32a6e9c7 = $hzQZh;
$6c9ecd59b25fe043$export$ebbe0f536b18196e = $hb74B;
$6c9ecd59b25fe043$export$30f3b02011db23c0 = $7bgOU;
function $6c9ecd59b25fe043$var$makeDispatcher(fn) {
    return (url, opts, handler)=>{
        if (typeof opts === "function") {
            handler = opts;
            opts = null;
        }
        if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) throw new $6c9ecd59b25fe043$var$InvalidArgumentError("invalid url");
        if (opts != null && typeof opts !== "object") throw new $6c9ecd59b25fe043$var$InvalidArgumentError("invalid opts");
        if (opts && opts.path != null) {
            if (typeof opts.path !== "string") throw new $6c9ecd59b25fe043$var$InvalidArgumentError("invalid opts.path");
            let path = opts.path;
            if (!opts.path.startsWith("/")) path = `/${path}`;
            url = new URL($dZB1o.parseOrigin(url).origin + path);
        } else {
            if (!opts) opts = typeof url === "object" ? url : {};
            url = $dZB1o.parseURL(url);
        }
        const { agent: agent, dispatcher: dispatcher = $6c9ecd59b25fe043$require$getGlobalDispatcher() } = opts;
        if (agent) throw new $6c9ecd59b25fe043$var$InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
        return fn.call(dispatcher, {
            ...opts,
            origin: url.origin,
            path: url.search ? `${url.pathname}${url.search}` : url.pathname,
            method: opts.method || (opts.body ? "PUT" : "GET")
        }, handler);
    };
}
$6c9ecd59b25fe043$export$ea76ac48857e9378 = $6c9ecd59b25fe043$require$setGlobalDispatcher;
$6c9ecd59b25fe043$export$6f0c702cbe7d6ed8 = $6c9ecd59b25fe043$require$getGlobalDispatcher;










if ($dZB1o.nodeMajor > 16 || $dZB1o.nodeMajor === 16 && $dZB1o.nodeMinor >= 8) {
    let fetchImpl = null;
    $6c9ecd59b25fe043$export$e7aa7bc5c1b3cfb3 = async function fetch(resource) {
        if (!fetchImpl) fetchImpl = (parcelRequire("9lkwe")).fetch;
        try {
            return await fetchImpl(...arguments);
        } catch (err) {
            if (typeof err === "object") Error.captureStackTrace(err, this);
            throw err;
        }
    };
    $6c9ecd59b25fe043$export$79b704688b15c0f4 = (parcelRequire("30zmV")).Headers;
    $6c9ecd59b25fe043$export$9f633d56d7ec90d3 = (parcelRequire("PC2zs")).Response;
    $6c9ecd59b25fe043$export$7fa6c5b6f8193917 = (parcelRequire("73TbT")).Request;
    $6c9ecd59b25fe043$export$3963aa24c930693c = (parcelRequire("haJy7")).FormData;
    $6c9ecd59b25fe043$export$b6afa8811b7e644e = (parcelRequire("16TRK")).File;
    $6c9ecd59b25fe043$export$3c8f13373e08d457 = (parcelRequire("4Vqdu")).FileReader;
    const { setGlobalOrigin: setGlobalOrigin, getGlobalOrigin: getGlobalOrigin } = (parcelRequire("lezha"));
    $6c9ecd59b25fe043$export$79f8e34925aa870f = setGlobalOrigin;
    $6c9ecd59b25fe043$export$4b73629724933f6e = getGlobalOrigin;
    const { CacheStorage: CacheStorage } = (parcelRequire("3blyY"));
    const { kConstruct: kConstruct } = (parcelRequire("hzb0i"));
    $6c9ecd59b25fe043$export$50ac77867c9f1e40 = new CacheStorage(kConstruct);
}


if ($dZB1o.nodeMajor >= 16) {
    const { deleteCookie: deleteCookie, getCookies: getCookies, getSetCookies: getSetCookies, setCookie: setCookie } = (parcelRequire("3M0tk"));
    $6c9ecd59b25fe043$export$b43e45590305ffaa = deleteCookie;
    $6c9ecd59b25fe043$export$f3eb5caaef7b2b34 = getCookies;
    $6c9ecd59b25fe043$export$14dd963aa71ac36d = getSetCookies;
    $6c9ecd59b25fe043$export$110700823644f4a6 = setCookie;
    const { parseMIMEType: parseMIMEType, serializeAMimeType: serializeAMimeType } = (parcelRequire("h1hYV"));
    $6c9ecd59b25fe043$export$85e6adb445fa3ef0 = parseMIMEType;
    $6c9ecd59b25fe043$export$b00e4516a48bbc61 = serializeAMimeType;
}

if ($dZB1o.nodeMajor >= 18 && $6c9ecd59b25fe043$var$hasCrypto) {
    const { WebSocket: WebSocket } = (parcelRequire("5hf7R"));
    $6c9ecd59b25fe043$export$3909fb301d3dc8c9 = WebSocket;
}
$6c9ecd59b25fe043$export$b5fe3f66a567bec0 = $6c9ecd59b25fe043$var$makeDispatcher($cbe5f4a3b24a1e2d$exports.request);
$6c9ecd59b25fe043$export$4938110305e6185f = $6c9ecd59b25fe043$var$makeDispatcher($cbe5f4a3b24a1e2d$exports.stream);
$6c9ecd59b25fe043$export$43f28b24e1eb8181 = $6c9ecd59b25fe043$var$makeDispatcher($cbe5f4a3b24a1e2d$exports.pipeline);
$6c9ecd59b25fe043$export$64605811ab45167f = $6c9ecd59b25fe043$var$makeDispatcher($cbe5f4a3b24a1e2d$exports.connect);
$6c9ecd59b25fe043$export$ba387509dbaf942e = $6c9ecd59b25fe043$var$makeDispatcher($cbe5f4a3b24a1e2d$exports.upgrade);
$6c9ecd59b25fe043$export$8ff68bc3613e0197 = $c50ebf6e3d98dd4f$exports;
$6c9ecd59b25fe043$export$e3431e6e5e89c327 = $b0dacdec2125f6bf$exports;
$6c9ecd59b25fe043$export$44e9728040f17046 = $cffe840b579a1d0d$exports;
$6c9ecd59b25fe043$export$7219863409fc71b7 = $649a10f913f6eb79$exports;


var $c0064b4bfe4e764a$var$HttpCodes;
(function(HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})($c0064b4bfe4e764a$var$HttpCodes || ($c0064b4bfe4e764a$exports.HttpCodes = $c0064b4bfe4e764a$var$HttpCodes = {}));
var $c0064b4bfe4e764a$var$Headers;
(function(Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})($c0064b4bfe4e764a$var$Headers || ($c0064b4bfe4e764a$exports.Headers = $c0064b4bfe4e764a$var$Headers = {}));
var $c0064b4bfe4e764a$var$MediaTypes;
(function(MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})($c0064b4bfe4e764a$var$MediaTypes || ($c0064b4bfe4e764a$exports.MediaTypes = $c0064b4bfe4e764a$var$MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */ function $c0064b4bfe4e764a$var$getProxyUrl(serverUrl) {
    const proxyUrl = $c0064b4bfe4e764a$var$pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : "";
}
$c0064b4bfe4e764a$exports.getProxyUrl = $c0064b4bfe4e764a$var$getProxyUrl;
const $c0064b4bfe4e764a$var$HttpRedirectCodes = [
    $c0064b4bfe4e764a$var$HttpCodes.MovedPermanently,
    $c0064b4bfe4e764a$var$HttpCodes.ResourceMoved,
    $c0064b4bfe4e764a$var$HttpCodes.SeeOther,
    $c0064b4bfe4e764a$var$HttpCodes.TemporaryRedirect,
    $c0064b4bfe4e764a$var$HttpCodes.PermanentRedirect
];
const $c0064b4bfe4e764a$var$HttpResponseRetryCodes = [
    $c0064b4bfe4e764a$var$HttpCodes.BadGateway,
    $c0064b4bfe4e764a$var$HttpCodes.ServiceUnavailable,
    $c0064b4bfe4e764a$var$HttpCodes.GatewayTimeout
];
const $c0064b4bfe4e764a$var$RetryableHttpVerbs = [
    "OPTIONS",
    "GET",
    "DELETE",
    "HEAD"
];
const $c0064b4bfe4e764a$var$ExponentialBackoffCeiling = 10;
const $c0064b4bfe4e764a$var$ExponentialBackoffTimeSlice = 5;
class $c0064b4bfe4e764a$var$HttpClientError extends Error {
    constructor(message, statusCode){
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, $c0064b4bfe4e764a$var$HttpClientError.prototype);
    }
}
$c0064b4bfe4e764a$exports.HttpClientError = $c0064b4bfe4e764a$var$HttpClientError;
class $c0064b4bfe4e764a$var$HttpClientResponse {
    constructor(message){
        this.message = message;
    }
    readBody() {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve)=>$c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
                    let output = $c0064b4bfe4e764a$require$Buffer.alloc(0);
                    this.message.on("data", (chunk)=>{
                        output = $c0064b4bfe4e764a$require$Buffer.concat([
                            output,
                            chunk
                        ]);
                    });
                    this.message.on("end", ()=>{
                        resolve(output.toString());
                    });
                }));
        });
    }
    readBodyBuffer() {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve)=>$c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
                    const chunks = [];
                    this.message.on("data", (chunk)=>{
                        chunks.push(chunk);
                    });
                    this.message.on("end", ()=>{
                        resolve($c0064b4bfe4e764a$require$Buffer.concat(chunks));
                    });
                }));
        });
    }
}
$c0064b4bfe4e764a$exports.HttpClientResponse = $c0064b4bfe4e764a$var$HttpClientResponse;
function $c0064b4bfe4e764a$var$isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === "https:";
}
$c0064b4bfe4e764a$exports.isHttps = $c0064b4bfe4e764a$var$isHttps;
class $c0064b4bfe4e764a$var$HttpClient {
    constructor(userAgent, handlers, requestOptions){
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) this._ignoreSslError = requestOptions.ignoreSslError;
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) this._allowRedirects = requestOptions.allowRedirects;
            if (requestOptions.allowRedirectDowngrade != null) this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            if (requestOptions.maxRedirects != null) this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            if (requestOptions.keepAlive != null) this._keepAlive = requestOptions.keepAlive;
            if (requestOptions.allowRetries != null) this._allowRetries = requestOptions.allowRetries;
            if (requestOptions.maxRetries != null) this._maxRetries = requestOptions.maxRetries;
        }
    }
    options(requestUrl, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */ getJson(requestUrl, additionalHeaders = {}) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            additionalHeaders[$c0064b4bfe4e764a$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $c0064b4bfe4e764a$var$Headers.Accept, $c0064b4bfe4e764a$var$MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[$c0064b4bfe4e764a$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $c0064b4bfe4e764a$var$Headers.Accept, $c0064b4bfe4e764a$var$MediaTypes.ApplicationJson);
            additionalHeaders[$c0064b4bfe4e764a$var$Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, $c0064b4bfe4e764a$var$Headers.ContentType, $c0064b4bfe4e764a$var$MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[$c0064b4bfe4e764a$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $c0064b4bfe4e764a$var$Headers.Accept, $c0064b4bfe4e764a$var$MediaTypes.ApplicationJson);
            additionalHeaders[$c0064b4bfe4e764a$var$Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, $c0064b4bfe4e764a$var$Headers.ContentType, $c0064b4bfe4e764a$var$MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[$c0064b4bfe4e764a$var$Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, $c0064b4bfe4e764a$var$Headers.Accept, $c0064b4bfe4e764a$var$MediaTypes.ApplicationJson);
            additionalHeaders[$c0064b4bfe4e764a$var$Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, $c0064b4bfe4e764a$var$Headers.ContentType, $c0064b4bfe4e764a$var$MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */ request(verb, requestUrl, data, headers) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            if (this._disposed) throw new Error("Client has already been disposed.");
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && $c0064b4bfe4e764a$var$RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response && response.message && response.message.statusCode === $c0064b4bfe4e764a$var$HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers)if (handler.canHandleAuthentication(response)) {
                        authenticationHandler = handler;
                        break;
                    }
                    if (authenticationHandler) return authenticationHandler.handleAuthentication(this, info, data);
                    else // We have received an unauthorized response but have no handlers to handle it.
                    // Let the response return to the caller.
                    return response;
                }
                let redirectsRemaining = this._maxRedirects;
                while(response.message.statusCode && $c0064b4bfe4e764a$var$HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0){
                    const redirectUrl = response.message.headers["location"];
                    if (!redirectUrl) break;
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for(const header in headers)// header names are case insensitive
                        if (header.toLowerCase() === "authorization") delete headers[header];
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode || !$c0064b4bfe4e764a$var$HttpResponseRetryCodes.includes(response.message.statusCode)) // If not a retry code, return immediately instead of retrying
                return response;
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            }while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */ dispose() {
        if (this._agent) this._agent.destroy();
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */ requestRaw(info, data) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve, reject)=>{
                function callbackForResult(err, res) {
                    if (err) reject(err);
                    else if (!res) // If `err` is not passed, then `res` must be passed.
                    reject(new Error("Unknown error"));
                    else resolve(res);
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */ requestRawWithCallback(info, data, onResult) {
        if (typeof data === "string") {
            if (!info.options.headers) info.options.headers = {};
            info.options.headers["Content-Length"] = $c0064b4bfe4e764a$require$Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg)=>{
            const res = new $c0064b4bfe4e764a$var$HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on("socket", (sock)=>{
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 180000, ()=>{
            if (socket) socket.end();
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on("error", function(err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === "string") req.write(data, "utf8");
        if (data && typeof data !== "string") {
            data.on("close", function() {
                req.end();
            });
            data.pipe(req);
        } else req.end();
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */ getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = $c0064b4bfe4e764a$var$pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) return;
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === "https:";
        info.httpModule = usingSsl ? $c0064b4bfe4e764a$var$https : $c0064b4bfe4e764a$var$http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) info.options.headers["user-agent"] = this.userAgent;
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) for (const handler of this.handlers)handler.prepareRequest(info.options);
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) return Object.assign({}, $c0064b4bfe4e764a$var$lowercaseKeys(this.requestOptions.headers), $c0064b4bfe4e764a$var$lowercaseKeys(headers || {}));
        return $c0064b4bfe4e764a$var$lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) clientHeader = $c0064b4bfe4e764a$var$lowercaseKeys(this.requestOptions.headers)[header];
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = $c0064b4bfe4e764a$var$pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) agent = this._proxyAgent;
        if (!useProxy) agent = this._agent;
        // if agent is already assigned use that agent.
        if (agent) return agent;
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) maxSockets = this.requestOptions.maxSockets || $c0064b4bfe4e764a$var$http.globalAgent.maxSockets;
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets: maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                }), {
                    host: proxyUrl.hostname,
                    port: proxyUrl.port
                })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === "https:";
            if (usingSsl) tunnelAgent = overHttps ? $c0064b4bfe4e764a$var$tunnel.httpsOverHttps : $c0064b4bfe4e764a$var$tunnel.httpsOverHttp;
            else tunnelAgent = overHttps ? $c0064b4bfe4e764a$var$tunnel.httpOverHttps : $c0064b4bfe4e764a$var$tunnel.httpOverHttp;
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if tunneling agent isn't assigned create a new agent
        if (!agent) {
            const options = {
                keepAlive: this._keepAlive,
                maxSockets: maxSockets
            };
            agent = usingSsl ? new $c0064b4bfe4e764a$var$https.Agent(options) : new $c0064b4bfe4e764a$var$http.Agent(options);
            this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
        // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
        // we have to cast it to any and change it directly
        agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
        });
        return agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) proxyAgent = this._proxyAgentDispatcher;
        // if agent is already assigned use that agent.
        if (proxyAgent) return proxyAgent;
        const usingSsl = parsedUrl.protocol === "https:";
        proxyAgent = new $6c9ecd59b25fe043$export$6f9e642c23f9615d(Object.assign({
            uri: proxyUrl.href,
            pipelining: !this._keepAlive ? 0 : 1
        }, (proxyUrl.username || proxyUrl.password) && {
            token: `${proxyUrl.username}:${proxyUrl.password}`
        }));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
        // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
        // we have to cast it to any and change it directly
        proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
            rejectUnauthorized: false
        });
        return proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            retryNumber = Math.min($c0064b4bfe4e764a$var$ExponentialBackoffCeiling, retryNumber);
            const ms = $c0064b4bfe4e764a$var$ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise((resolve)=>setTimeout(()=>resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return $c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
            return new Promise((resolve, reject)=>$c0064b4bfe4e764a$var$__awaiter(this, void 0, void 0, function*() {
                    const statusCode = res.message.statusCode || 0;
                    const response = {
                        statusCode: statusCode,
                        result: null,
                        headers: {}
                    };
                    // not found leads to null obj returned
                    if (statusCode === $c0064b4bfe4e764a$var$HttpCodes.NotFound) resolve(response);
                    // get the result from the body
                    function dateTimeDeserializer(key, value) {
                        if (typeof value === "string") {
                            const a = new Date(value);
                            if (!isNaN(a.valueOf())) return a;
                        }
                        return value;
                    }
                    let obj;
                    let contents;
                    try {
                        contents = yield res.readBody();
                        if (contents && contents.length > 0) {
                            if (options && options.deserializeDates) obj = JSON.parse(contents, dateTimeDeserializer);
                            else obj = JSON.parse(contents);
                            response.result = obj;
                        }
                        response.headers = res.message.headers;
                    } catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                    }
                    // note that 3xx redirects are handled by the http layer.
                    if (statusCode > 299) {
                        let msg;
                        // if exception/error in body, attempt to get better error
                        if (obj && obj.message) msg = obj.message;
                        else if (contents && contents.length > 0) // it may be the case that the exception is in the body message as string
                        msg = contents;
                        else msg = `Failed request: (${statusCode})`;
                        const err = new $c0064b4bfe4e764a$var$HttpClientError(msg, statusCode);
                        err.result = response.result;
                        reject(err);
                    } else resolve(response);
                }));
        });
    }
}
$c0064b4bfe4e764a$exports.HttpClient = $c0064b4bfe4e764a$var$HttpClient;
const $c0064b4bfe4e764a$var$lowercaseKeys = (obj)=>Object.keys(obj).reduce((c, k)=>(c[k.toLowerCase()] = obj[k], c), {});


var $2dc1b0e209ff8bce$exports = {};

var $2dc1b0e209ff8bce$require$Buffer = $4UN2M$buffer.Buffer;
"use strict";
var $2dc1b0e209ff8bce$var$__awaiter = $2dc1b0e209ff8bce$exports && $2dc1b0e209ff8bce$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($2dc1b0e209ff8bce$exports, "__esModule", {
    value: true
});
$2dc1b0e209ff8bce$exports.PersonalAccessTokenCredentialHandler = $2dc1b0e209ff8bce$exports.BearerCredentialHandler = $2dc1b0e209ff8bce$exports.BasicCredentialHandler = void 0;
class $2dc1b0e209ff8bce$var$BasicCredentialHandler {
    constructor(username, password){
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) throw Error("The request has no headers");
        options.headers["Authorization"] = `Basic ${$2dc1b0e209ff8bce$require$Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return $2dc1b0e209ff8bce$var$__awaiter(this, void 0, void 0, function*() {
            throw new Error("not implemented");
        });
    }
}
$2dc1b0e209ff8bce$exports.BasicCredentialHandler = $2dc1b0e209ff8bce$var$BasicCredentialHandler;
class $2dc1b0e209ff8bce$var$BearerCredentialHandler {
    constructor(token){
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) throw Error("The request has no headers");
        options.headers["Authorization"] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return $2dc1b0e209ff8bce$var$__awaiter(this, void 0, void 0, function*() {
            throw new Error("not implemented");
        });
    }
}
$2dc1b0e209ff8bce$exports.BearerCredentialHandler = $2dc1b0e209ff8bce$var$BearerCredentialHandler;
class $2dc1b0e209ff8bce$var$PersonalAccessTokenCredentialHandler {
    constructor(token){
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) throw Error("The request has no headers");
        options.headers["Authorization"] = `Basic ${$2dc1b0e209ff8bce$require$Buffer.from(`PAT:${this.token}`).toString("base64")}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return $2dc1b0e209ff8bce$var$__awaiter(this, void 0, void 0, function*() {
            throw new Error("not implemented");
        });
    }
}
$2dc1b0e209ff8bce$exports.PersonalAccessTokenCredentialHandler = $2dc1b0e209ff8bce$var$PersonalAccessTokenCredentialHandler;



class $016735bcc071d86a$var$OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new $c0064b4bfe4e764a$exports.HttpClient("actions/oidc-client", [
            new $2dc1b0e209ff8bce$exports.BearerCredentialHandler($016735bcc071d86a$var$OidcClient.getRequestToken())
        ], requestOptions);
    }
    static getRequestToken() {
        const token = undefined;
        if (!token) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = undefined;
        if (!runtimeUrl) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return $016735bcc071d86a$var$__awaiter(this, void 0, void 0, function*() {
            const httpclient = $016735bcc071d86a$var$OidcClient.createHttpClient();
            const res = yield httpclient.getJson(id_token_url).catch((error)=>{
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) throw new Error("Response json body do not have ID Token field");
            return id_token;
        });
    }
    static getIDToken(audience) {
        return $016735bcc071d86a$var$__awaiter(this, void 0, void 0, function*() {
            try {
                // New ID Token is requested from action service
                let id_token_url = $016735bcc071d86a$var$OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                $9ccdc4e10588ec0a$exports.debug(`ID token url is ${id_token_url}`);
                const id_token = yield $016735bcc071d86a$var$OidcClient.getCall(id_token_url);
                $9ccdc4e10588ec0a$exports.setSecret(id_token);
                return id_token;
            } catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
$016735bcc071d86a$exports.OidcClient = $016735bcc071d86a$var$OidcClient;


/**
 * The code to exit an action
 */ var $9ccdc4e10588ec0a$var$ExitCode;
(function(ExitCode) {
    /**
     * A code indicating that the action was successful
     */ ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */ ExitCode[ExitCode["Failure"] = 1] = "Failure";
})($9ccdc4e10588ec0a$var$ExitCode = $9ccdc4e10588ec0a$exports.ExitCode || ($9ccdc4e10588ec0a$exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function $9ccdc4e10588ec0a$var$exportVariable(name, val) {
    const convertedVal = $9e102ad503f8a863$exports.toCommandValue(val);
    convertedVal;
    const filePath = "";
    if (filePath) return $6edbfdbe09338225$exports.issueFileCommand("ENV", $6edbfdbe09338225$exports.prepareKeyValueMessage(name, val));
    $3d4600e440aa6e6e$exports.issueCommand("set-env", {
        name: name
    }, convertedVal);
}
$9ccdc4e10588ec0a$exports.exportVariable = $9ccdc4e10588ec0a$var$exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */ function $9ccdc4e10588ec0a$var$setSecret(secret) {
    $3d4600e440aa6e6e$exports.issueCommand("add-mask", {}, secret);
}
$9ccdc4e10588ec0a$exports.setSecret = $9ccdc4e10588ec0a$var$setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */ function $9ccdc4e10588ec0a$var$addPath(inputPath) {
    const filePath = "";
    if (filePath) $6edbfdbe09338225$exports.issueFileCommand("PATH", inputPath);
    else $3d4600e440aa6e6e$exports.issueCommand("add-path", {}, inputPath);
    $9ccdc4e10588ec0a$var$path.delimiter;
}
$9ccdc4e10588ec0a$exports.addPath = $9ccdc4e10588ec0a$var$addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */ function $9ccdc4e10588ec0a$var$getInput(name, options) {
    const val = $4UN2M$process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
    if (options && options.required && !val) throw new Error(`Input required and not supplied: ${name}`);
    if (options && options.trimWhitespace === false) return val;
    return val.trim();
}
$9ccdc4e10588ec0a$exports.getInput = $9ccdc4e10588ec0a$var$getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */ function $9ccdc4e10588ec0a$var$getMultilineInput(name, options) {
    const inputs = $9ccdc4e10588ec0a$var$getInput(name, options).split("\n").filter((x)=>x !== "");
    if (options && options.trimWhitespace === false) return inputs;
    return inputs.map((input)=>input.trim());
}
$9ccdc4e10588ec0a$exports.getMultilineInput = $9ccdc4e10588ec0a$var$getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */ function $9ccdc4e10588ec0a$var$getBooleanInput(name, options) {
    const trueValue = [
        "true",
        "True",
        "TRUE"
    ];
    const falseValue = [
        "false",
        "False",
        "FALSE"
    ];
    const val = $9ccdc4e10588ec0a$var$getInput(name, options);
    if (trueValue.includes(val)) return true;
    if (falseValue.includes(val)) return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` + `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
$9ccdc4e10588ec0a$exports.getBooleanInput = $9ccdc4e10588ec0a$var$getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function $9ccdc4e10588ec0a$var$setOutput(name, value) {
    const filePath = "";
    if (filePath) return $6edbfdbe09338225$exports.issueFileCommand("OUTPUT", $6edbfdbe09338225$exports.prepareKeyValueMessage(name, value));
    $4UN2M$process.stdout.write($9ccdc4e10588ec0a$var$os.EOL);
    $3d4600e440aa6e6e$exports.issueCommand("set-output", {
        name: name
    }, $9e102ad503f8a863$exports.toCommandValue(value));
}
$9ccdc4e10588ec0a$exports.setOutput = $9ccdc4e10588ec0a$var$setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */ function $9ccdc4e10588ec0a$var$setCommandEcho(enabled) {
    $3d4600e440aa6e6e$exports.issue("echo", enabled ? "on" : "off");
}
$9ccdc4e10588ec0a$exports.setCommandEcho = $9ccdc4e10588ec0a$var$setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */ function $9ccdc4e10588ec0a$var$setFailed(message) {
    $4UN2M$process.exitCode = $9ccdc4e10588ec0a$var$ExitCode.Failure;
    $9ccdc4e10588ec0a$var$error(message);
}
$9ccdc4e10588ec0a$exports.setFailed = $9ccdc4e10588ec0a$var$setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */ function $9ccdc4e10588ec0a$var$isDebug() {
    return false;
}
$9ccdc4e10588ec0a$exports.isDebug = $9ccdc4e10588ec0a$var$isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */ function $9ccdc4e10588ec0a$var$debug(message) {
    $3d4600e440aa6e6e$exports.issueCommand("debug", {}, message);
}
$9ccdc4e10588ec0a$exports.debug = $9ccdc4e10588ec0a$var$debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */ function $9ccdc4e10588ec0a$var$error(message, properties = {}) {
    $3d4600e440aa6e6e$exports.issueCommand("error", $9e102ad503f8a863$exports.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
$9ccdc4e10588ec0a$exports.error = $9ccdc4e10588ec0a$var$error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */ function $9ccdc4e10588ec0a$var$warning(message, properties = {}) {
    $3d4600e440aa6e6e$exports.issueCommand("warning", $9e102ad503f8a863$exports.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
$9ccdc4e10588ec0a$exports.warning = $9ccdc4e10588ec0a$var$warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */ function $9ccdc4e10588ec0a$var$notice(message, properties = {}) {
    $3d4600e440aa6e6e$exports.issueCommand("notice", $9e102ad503f8a863$exports.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
$9ccdc4e10588ec0a$exports.notice = $9ccdc4e10588ec0a$var$notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */ function $9ccdc4e10588ec0a$var$info(message) {
    $4UN2M$process.stdout.write(message + $9ccdc4e10588ec0a$var$os.EOL);
}
$9ccdc4e10588ec0a$exports.info = $9ccdc4e10588ec0a$var$info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */ function $9ccdc4e10588ec0a$var$startGroup(name) {
    $3d4600e440aa6e6e$exports.issue("group", name);
}
$9ccdc4e10588ec0a$exports.startGroup = $9ccdc4e10588ec0a$var$startGroup;
/**
 * End an output group.
 */ function $9ccdc4e10588ec0a$var$endGroup() {
    $3d4600e440aa6e6e$exports.issue("endgroup");
}
$9ccdc4e10588ec0a$exports.endGroup = $9ccdc4e10588ec0a$var$endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */ function $9ccdc4e10588ec0a$var$group(name, fn) {
    return $9ccdc4e10588ec0a$var$__awaiter(this, void 0, void 0, function*() {
        $9ccdc4e10588ec0a$var$startGroup(name);
        let result;
        try {
            result = yield fn();
        } finally{
            $9ccdc4e10588ec0a$var$endGroup();
        }
        return result;
    });
}
$9ccdc4e10588ec0a$exports.group = $9ccdc4e10588ec0a$var$group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function $9ccdc4e10588ec0a$var$saveState(name, value) {
    const filePath = "";
    if (filePath) return $6edbfdbe09338225$exports.issueFileCommand("STATE", $6edbfdbe09338225$exports.prepareKeyValueMessage(name, value));
    $3d4600e440aa6e6e$exports.issueCommand("save-state", {
        name: name
    }, $9e102ad503f8a863$exports.toCommandValue(value));
}
$9ccdc4e10588ec0a$exports.saveState = $9ccdc4e10588ec0a$var$saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */ function $9ccdc4e10588ec0a$var$getState(name) {
    return $4UN2M$process.env[`STATE_${name}`] || "";
}
$9ccdc4e10588ec0a$exports.getState = $9ccdc4e10588ec0a$var$getState;
function $9ccdc4e10588ec0a$var$getIDToken(aud) {
    return $9ccdc4e10588ec0a$var$__awaiter(this, void 0, void 0, function*() {
        return yield $016735bcc071d86a$exports.OidcClient.getIDToken(aud);
    });
}
$9ccdc4e10588ec0a$exports.getIDToken = $9ccdc4e10588ec0a$var$getIDToken;
var $45d05703a5c8185f$exports = {};

"use strict";
var $45d05703a5c8185f$var$__awaiter = $45d05703a5c8185f$exports && $45d05703a5c8185f$exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty($45d05703a5c8185f$exports, "__esModule", {
    value: true
});
$45d05703a5c8185f$exports.summary = $45d05703a5c8185f$exports.markdownSummary = $45d05703a5c8185f$exports.SUMMARY_DOCS_URL = $45d05703a5c8185f$exports.SUMMARY_ENV_VAR = void 0;


const { access: $45d05703a5c8185f$var$access, appendFile: $45d05703a5c8185f$var$appendFile, writeFile: $45d05703a5c8185f$var$writeFile } = $4UN2M$fs.promises;
$45d05703a5c8185f$exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
$45d05703a5c8185f$exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
class $45d05703a5c8185f$var$Summary {
    constructor(){
        this._buffer = "";
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */ filePath() {
        return $45d05703a5c8185f$var$__awaiter(this, void 0, void 0, function*() {
            if (this._filePath) return this._filePath;
            const pathFromEnv = $4UN2M$process.env[$45d05703a5c8185f$exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) throw new Error(`Unable to find environment variable for $${$45d05703a5c8185f$exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            try {
                yield $45d05703a5c8185f$var$access(pathFromEnv, $4UN2M$fs.constants.R_OK | $4UN2M$fs.constants.W_OK);
            } catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */ wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value])=>` ${key}="${value}"`).join("");
        if (!content) return `<${tag}${htmlAttrs}>`;
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */ write(options) {
        return $45d05703a5c8185f$var$__awaiter(this, void 0, void 0, function*() {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? $45d05703a5c8185f$var$writeFile : $45d05703a5c8185f$var$appendFile;
            yield writeFunc(filePath, this._buffer, {
                encoding: "utf8"
            });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */ clear() {
        return $45d05703a5c8185f$var$__awaiter(this, void 0, void 0, function*() {
            return this.emptyBuffer().write({
                overwrite: true
            });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */ stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */ isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */ emptyBuffer() {
        this._buffer = "";
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */ addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */ addEOL() {
        return this.addRaw($4UN2M$os.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */ addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && {
            lang: lang
        });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */ addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item)=>this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */ addTable(rows) {
        const tableBody = rows.map((row)=>{
            const cells = row.map((cell)=>{
                if (typeof cell === "string") return this.wrap("td", cell);
                const { header: header, data: data, colspan: colspan, rowspan: rowspan } = cell;
                const tag = header ? "th" : "td";
                const attrs = Object.assign(Object.assign({}, colspan && {
                    colspan: colspan
                }), rowspan && {
                    rowspan: rowspan
                });
                return this.wrap(tag, data, attrs);
            }).join("");
            return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */ addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */ addImage(src, alt, options) {
        const { width: width, height: height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && {
            width: width
        }), height && {
            height: height
        });
        const element = this.wrap("img", null, Object.assign({
            src: src,
            alt: alt
        }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */ addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = [
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6"
        ].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */ addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */ addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */ addQuote(text, cite) {
        const attrs = Object.assign({}, cite && {
            cite: cite
        });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */ addLink(text, href) {
        const element = this.wrap("a", text, {
            href: href
        });
        return this.addRaw(element).addEOL();
    }
}
const $45d05703a5c8185f$var$_summary = new $45d05703a5c8185f$var$Summary();
/**
 * @deprecated use `core.summary`
 */ $45d05703a5c8185f$exports.markdownSummary = $45d05703a5c8185f$var$_summary;
$45d05703a5c8185f$exports.summary = $45d05703a5c8185f$var$_summary;


Object.defineProperty($9ccdc4e10588ec0a$exports, "summary", {
    enumerable: true,
    get: function() {
        return $45d05703a5c8185f$exports.summary;
    }
});

Object.defineProperty($9ccdc4e10588ec0a$exports, "markdownSummary", {
    enumerable: true,
    get: function() {
        return $45d05703a5c8185f$exports.markdownSummary;
    }
});
var $6e572f2350e74f6c$exports = {};
"use strict";
var $6e572f2350e74f6c$var$__createBinding = $6e572f2350e74f6c$exports && $6e572f2350e74f6c$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $6e572f2350e74f6c$var$__setModuleDefault = $6e572f2350e74f6c$exports && $6e572f2350e74f6c$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $6e572f2350e74f6c$var$__importStar = $6e572f2350e74f6c$exports && $6e572f2350e74f6c$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.hasOwnProperty.call(mod, k)) $6e572f2350e74f6c$var$__createBinding(result, mod, k);
    }
    $6e572f2350e74f6c$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($6e572f2350e74f6c$exports, "__esModule", {
    value: true
});
$6e572f2350e74f6c$exports.toPlatformPath = $6e572f2350e74f6c$exports.toWin32Path = $6e572f2350e74f6c$exports.toPosixPath = void 0;

const $6e572f2350e74f6c$var$path = $6e572f2350e74f6c$var$__importStar($4UN2M$path);
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */ function $6e572f2350e74f6c$var$toPosixPath(pth) {
    return pth.replace(/[\\]/g, "/");
}
$6e572f2350e74f6c$exports.toPosixPath = $6e572f2350e74f6c$var$toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */ function $6e572f2350e74f6c$var$toWin32Path(pth) {
    return pth.replace(/[/]/g, "\\");
}
$6e572f2350e74f6c$exports.toWin32Path = $6e572f2350e74f6c$var$toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */ function $6e572f2350e74f6c$var$toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, $6e572f2350e74f6c$var$path.sep);
}
$6e572f2350e74f6c$exports.toPlatformPath = $6e572f2350e74f6c$var$toPlatformPath;


Object.defineProperty($9ccdc4e10588ec0a$exports, "toPosixPath", {
    enumerable: true,
    get: function() {
        return $6e572f2350e74f6c$exports.toPosixPath;
    }
});
Object.defineProperty($9ccdc4e10588ec0a$exports, "toWin32Path", {
    enumerable: true,
    get: function() {
        return $6e572f2350e74f6c$exports.toWin32Path;
    }
});
Object.defineProperty($9ccdc4e10588ec0a$exports, "toPlatformPath", {
    enumerable: true,
    get: function() {
        return $6e572f2350e74f6c$exports.toPlatformPath;
    }
});


var $62ee5ef26bce7619$exports = {};
var $d25eed3aacc5b2b2$exports = {};
var $0d5d3ffc5a7e9da7$exports = {};
const { assign: $0d5d3ffc5a7e9da7$var$assign } = Object;
const $0d5d3ffc5a7e9da7$var$LEVELS = {
    NOTHING: 0,
    ERROR: 1,
    WARN: 2,
    INFO: 4,
    DEBUG: 5
};
const $0d5d3ffc5a7e9da7$var$createLevel = (label, level, currentLevel, namespace, logFunction)=>(message, extra = {})=>{
        if (level > currentLevel()) return;
        logFunction({
            namespace: namespace,
            level: level,
            label: label,
            log: $0d5d3ffc5a7e9da7$var$assign({
                timestamp: new Date().toISOString(),
                logger: "kafkajs",
                message: message
            }, extra)
        });
    };
const $0d5d3ffc5a7e9da7$var$evaluateLogLevel = (logLevel)=>{
    const envLogLevel = "".toUpperCase();
    return $0d5d3ffc5a7e9da7$var$LEVELS[envLogLevel] == null ? logLevel : $0d5d3ffc5a7e9da7$var$LEVELS[envLogLevel];
};
const $0d5d3ffc5a7e9da7$var$createLogger = ({ level: level = $0d5d3ffc5a7e9da7$var$LEVELS.INFO, logCreator: logCreator } = {})=>{
    let logLevel = $0d5d3ffc5a7e9da7$var$evaluateLogLevel(level);
    const logFunction = logCreator(logLevel);
    const createNamespace = (namespace, logLevel = null)=>{
        const namespaceLogLevel = $0d5d3ffc5a7e9da7$var$evaluateLogLevel(logLevel);
        return createLogFunctions(namespace, namespaceLogLevel);
    };
    const createLogFunctions = (namespace, namespaceLogLevel = null)=>{
        const currentLogLevel = ()=>namespaceLogLevel == null ? logLevel : namespaceLogLevel;
        const logger = {
            info: $0d5d3ffc5a7e9da7$var$createLevel("INFO", $0d5d3ffc5a7e9da7$var$LEVELS.INFO, currentLogLevel, namespace, logFunction),
            error: $0d5d3ffc5a7e9da7$var$createLevel("ERROR", $0d5d3ffc5a7e9da7$var$LEVELS.ERROR, currentLogLevel, namespace, logFunction),
            warn: $0d5d3ffc5a7e9da7$var$createLevel("WARN", $0d5d3ffc5a7e9da7$var$LEVELS.WARN, currentLogLevel, namespace, logFunction),
            debug: $0d5d3ffc5a7e9da7$var$createLevel("DEBUG", $0d5d3ffc5a7e9da7$var$LEVELS.DEBUG, currentLogLevel, namespace, logFunction)
        };
        return $0d5d3ffc5a7e9da7$var$assign(logger, {
            namespace: createNamespace,
            setLogLevel: (newLevel)=>{
                logLevel = newLevel;
            }
        });
    };
    return createLogFunctions();
};
$0d5d3ffc5a7e9da7$exports = {
    LEVELS: $0d5d3ffc5a7e9da7$var$LEVELS,
    createLogger: $0d5d3ffc5a7e9da7$var$createLogger
};


const { createLogger: $d25eed3aacc5b2b2$var$createLogger, LEVELS: { INFO: $d25eed3aacc5b2b2$var$INFO } } = $0d5d3ffc5a7e9da7$exports;
var $b7828dca740d64c9$exports = {};

var $b7828dca740d64c9$require$EventEmitter = $4UN2M$events.EventEmitter;
var $626c0de22e2ed236$exports = {};
let $626c0de22e2ed236$var$id = 0;
const $626c0de22e2ed236$var$nextId = ()=>{
    if ($626c0de22e2ed236$var$id === Number.MAX_VALUE) $626c0de22e2ed236$var$id = 0;
    return $626c0de22e2ed236$var$id++;
};
class $626c0de22e2ed236$var$InstrumentationEvent {
    /**
   * @param {String} type
   * @param {Object} payload
   */ constructor(type, payload){
        this.id = $626c0de22e2ed236$var$nextId();
        this.type = type;
        this.timestamp = Date.now();
        this.payload = payload;
    }
}
$626c0de22e2ed236$exports = $626c0de22e2ed236$var$InstrumentationEvent;



var $8mQRr = parcelRequire("8mQRr");
var $b7828dca740d64c9$require$KafkaJSError = $8mQRr.KafkaJSError;
$b7828dca740d64c9$exports = class InstrumentationEventEmitter {
    constructor(){
        this.emitter = new $b7828dca740d64c9$require$EventEmitter();
    }
    /**
   * @param {string} eventName
   * @param {Object} payload
   */ emit(eventName, payload) {
        if (!eventName) throw new $b7828dca740d64c9$require$KafkaJSError("Invalid event name", {
            retriable: false
        });
        if (this.emitter.listenerCount(eventName) > 0) {
            const event = new $626c0de22e2ed236$exports(eventName, payload);
            this.emitter.emit(eventName, event);
        }
    }
    /**
   * @param {string} eventName
   * @param {(...args: any[]) => void} listener
   * @returns {import("../../types").RemoveInstrumentationEventListener<string>} removeListener
   */ addListener(eventName, listener) {
        this.emitter.addListener(eventName, listener);
        return ()=>this.emitter.removeListener(eventName, listener);
    }
};


var $6a8f52227ba48177$exports = {};

var $6a8f52227ba48177$require$logLevel = $0d5d3ffc5a7e9da7$exports.LEVELS;
$6a8f52227ba48177$exports = ()=>({ namespace: namespace, level: level, label: label, log: log })=>{
        const prefix = namespace ? `[${namespace}] ` : "";
        const message = JSON.stringify(Object.assign({
            level: label
        }, log, {
            message: `${prefix}${log.message}`
        }));
        switch(level){
            case $6a8f52227ba48177$require$logLevel.INFO:
                return console.info(message);
            case $6a8f52227ba48177$require$logLevel.ERROR:
                return console.error(message);
            case $6a8f52227ba48177$require$logLevel.WARN:
                return console.warn(message);
            case $6a8f52227ba48177$require$logLevel.DEBUG:
                return console.log(message);
        }
    };


var $dd751a346b077b84$exports = {};
var $99934a026b004b44$exports = {};
var $cd8985b50ee62e24$exports = {};
var $424a91e9c534a6e7$exports = {};

var $424a91e9c534a6e7$require$format = $4UN2M$util.format;

var $8mQRr = parcelRequire("8mQRr");
var $424a91e9c534a6e7$require$KafkaJSLockTimeout = $8mQRr.KafkaJSLockTimeout;
const $424a91e9c534a6e7$var$PRIVATE = {
    LOCKED: Symbol("private:Lock:locked"),
    TIMEOUT: Symbol("private:Lock:timeout"),
    WAITING: Symbol("private:Lock:waiting"),
    TIMEOUT_ERROR_MESSAGE: Symbol("private:Lock:timeoutErrorMessage")
};
const $424a91e9c534a6e7$var$TIMEOUT_MESSAGE = "Timeout while acquiring lock (%d waiting locks)";
$424a91e9c534a6e7$exports = class Lock {
    constructor({ timeout: timeout, description: description = null } = {}){
        if (typeof timeout !== "number") throw new TypeError(`'timeout' is not a number, received '${typeof timeout}'`);
        this[$424a91e9c534a6e7$var$PRIVATE.LOCKED] = false;
        this[$424a91e9c534a6e7$var$PRIVATE.TIMEOUT] = timeout;
        this[$424a91e9c534a6e7$var$PRIVATE.WAITING] = new Set();
        this[$424a91e9c534a6e7$var$PRIVATE.TIMEOUT_ERROR_MESSAGE] = ()=>{
            const timeoutMessage = $424a91e9c534a6e7$require$format($424a91e9c534a6e7$var$TIMEOUT_MESSAGE, this[$424a91e9c534a6e7$var$PRIVATE.WAITING].size);
            return description ? `${timeoutMessage}: "${description}"` : timeoutMessage;
        };
    }
    async acquire() {
        return new Promise((resolve, reject)=>{
            if (!this[$424a91e9c534a6e7$var$PRIVATE.LOCKED]) {
                this[$424a91e9c534a6e7$var$PRIVATE.LOCKED] = true;
                return resolve();
            }
            let timeoutId = null;
            const tryToAcquire = async ()=>{
                if (!this[$424a91e9c534a6e7$var$PRIVATE.LOCKED]) {
                    this[$424a91e9c534a6e7$var$PRIVATE.LOCKED] = true;
                    clearTimeout(timeoutId);
                    this[$424a91e9c534a6e7$var$PRIVATE.WAITING].delete(tryToAcquire);
                    return resolve();
                }
            };
            this[$424a91e9c534a6e7$var$PRIVATE.WAITING].add(tryToAcquire);
            timeoutId = setTimeout(()=>{
                // The message should contain the number of waiters _including_ this one
                const error = new $424a91e9c534a6e7$require$KafkaJSLockTimeout(this[$424a91e9c534a6e7$var$PRIVATE.TIMEOUT_ERROR_MESSAGE]());
                this[$424a91e9c534a6e7$var$PRIVATE.WAITING].delete(tryToAcquire);
                reject(error);
            }, this[$424a91e9c534a6e7$var$PRIVATE.TIMEOUT]);
        });
    }
    async release() {
        this[$424a91e9c534a6e7$var$PRIVATE.LOCKED] = false;
        const waitingLock = this[$424a91e9c534a6e7$var$PRIVATE.WAITING].values().next().value;
        if (waitingLock) return waitingLock();
    }
};



var $2aK07 = parcelRequire("2aK07");
var $cd8985b50ee62e24$require$Compression = $2aK07.Types;
var $f290d474eda1720c$exports = {};

var $9kH2s = parcelRequire("9kH2s");

var $8mQRr = parcelRequire("8mQRr");
var $f290d474eda1720c$require$KafkaJSServerDoesNotSupportApiKey = $8mQRr.KafkaJSServerDoesNotSupportApiKey;
var $f290d474eda1720c$require$KafkaJSNotImplemented = $8mQRr.KafkaJSNotImplemented;
/**
 * @typedef {(options?: Object) => { request: any, response: any, logResponseErrors?: boolean }} Request
 */ /**
 * @typedef {Object} RequestDefinitions
 * @property {string[]} versions
 * @property {({ version: number }) => Request} protocol
 */ /**
 * @typedef {(apiKey: number, definitions: RequestDefinitions) => Request} Lookup
 */ /** @type {RequestDefinitions} */ const $f290d474eda1720c$var$noImplementedRequestDefinitions = {
    versions: [],
    protocol: ()=>{
        throw new $f290d474eda1720c$require$KafkaJSNotImplemented();
    }
};

































/**
 * @type {{[apiName: string]: RequestDefinitions}}
 */ const $f290d474eda1720c$var$requests = {
    Produce: (parcelRequire("3SMyI")),
    Fetch: (parcelRequire("fqZMV")),
    ListOffsets: (parcelRequire("1ZEfG")),
    Metadata: (parcelRequire("8PRZL")),
    LeaderAndIsr: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    StopReplica: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    UpdateMetadata: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    ControlledShutdown: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    OffsetCommit: (parcelRequire("dM350")),
    OffsetFetch: (parcelRequire("iLEZR")),
    GroupCoordinator: (parcelRequire("2cj0G")),
    JoinGroup: (parcelRequire("6zxgY")),
    Heartbeat: (parcelRequire("1pRmM")),
    LeaveGroup: (parcelRequire("5B5Nk")),
    SyncGroup: (parcelRequire("cYLQe")),
    DescribeGroups: (parcelRequire("88zqj")),
    ListGroups: (parcelRequire("aYo9d")),
    SaslHandshake: (parcelRequire("c2qJY")),
    ApiVersions: (parcelRequire("de3lM")),
    CreateTopics: (parcelRequire("eIbaS")),
    DeleteTopics: (parcelRequire("hGq4P")),
    DeleteRecords: (parcelRequire("3Pybn")),
    InitProducerId: (parcelRequire("aHL26")),
    OffsetForLeaderEpoch: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    AddPartitionsToTxn: (parcelRequire("2Bjov")),
    AddOffsetsToTxn: (parcelRequire("i3TNs")),
    EndTxn: (parcelRequire("doCaW")),
    WriteTxnMarkers: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    TxnOffsetCommit: (parcelRequire("cLk0f")),
    DescribeAcls: (parcelRequire("jaivf")),
    CreateAcls: (parcelRequire("aOhmt")),
    DeleteAcls: (parcelRequire("vOSIX")),
    DescribeConfigs: (parcelRequire("kkpnN")),
    AlterConfigs: (parcelRequire("2WjN6")),
    AlterReplicaLogDirs: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    DescribeLogDirs: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    SaslAuthenticate: (parcelRequire("3k1ir")),
    CreatePartitions: (parcelRequire("lwEbi")),
    CreateDelegationToken: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    RenewDelegationToken: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    ExpireDelegationToken: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    DescribeDelegationToken: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    DeleteGroups: (parcelRequire("gmKiY")),
    ElectLeaders: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    IncrementalAlterConfigs: $f290d474eda1720c$var$noImplementedRequestDefinitions,
    AlterPartitionReassignments: (parcelRequire("bZ5nX")),
    ListPartitionReassignments: (parcelRequire("VkGLI"))
};
const $f290d474eda1720c$var$names = Object.keys($9kH2s);
const $f290d474eda1720c$var$keys = Object.values($9kH2s);
const $f290d474eda1720c$var$findApiName = (apiKey)=>$f290d474eda1720c$var$names[$f290d474eda1720c$var$keys.indexOf(apiKey)];
/**
 * @param {import("../../../types").ApiVersions} versions
 * @returns {Lookup}
 */ const $f290d474eda1720c$var$lookup = (versions)=>(apiKey, definition)=>{
        const version = versions[apiKey];
        const availableVersions = definition.versions.map(Number);
        const bestImplementedVersion = Math.max(...availableVersions);
        if (!version || version.maxVersion == null) throw new $f290d474eda1720c$require$KafkaJSServerDoesNotSupportApiKey(`The Kafka server does not support the requested API version`, {
            apiKey: apiKey,
            apiName: $f290d474eda1720c$var$findApiName(apiKey)
        });
        const bestSupportedVersion = Math.min(bestImplementedVersion, version.maxVersion);
        return definition.protocol({
            version: bestSupportedVersion
        });
    };
$f290d474eda1720c$exports = {
    requests: $f290d474eda1720c$var$requests,
    lookup: $f290d474eda1720c$var$lookup
};


var $cd8985b50ee62e24$require$requests = $f290d474eda1720c$exports.requests;
var $cd8985b50ee62e24$require$lookup = $f290d474eda1720c$exports.lookup;

var $8mQRr = parcelRequire("8mQRr");
var $cd8985b50ee62e24$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;

var $9kH2s = parcelRequire("9kH2s");
var $005211d4820145a8$exports = {};
/**
 * @param {T[]} array
 * @returns T[]
 * @template T
 */ $005211d4820145a8$exports = (array)=>{
    if (!Array.isArray(array)) throw new TypeError("'array' is not an array");
    if (array.length < 2) return array;
    const copy = array.slice();
    for(let i = copy.length - 1; i > 0; i--){
        const j = Math.floor(Math.random() * (i + 1));
        const temp = copy[i];
        copy[i] = copy[j];
        copy[j] = temp;
    }
    return copy;
};


const $cd8985b50ee62e24$var$PRIVATE = {
    SEND_REQUEST: Symbol("private:Broker:sendRequest")
};
/** @type {import("../protocol/requests").Lookup} */ const $cd8985b50ee62e24$var$notInitializedLookup = ()=>{
    throw new Error("Broker not connected");
};
/**
 * Each node in a Kafka cluster is called broker. This class contains
 * the high-level operations a node can perform.
 *
 * @type {import("../../types").Broker}
 */ $cd8985b50ee62e24$exports = class Broker {
    /**
   * @param {Object} options
   * @param {import("../network/connectionPool")} options.connectionPool
   * @param {import("../../types").Logger} options.logger
   * @param {number} [options.nodeId]
   * @param {import("../../types").ApiVersions} [options.versions=null] The object with all available versions and APIs
   *                                 supported by this cluster. The output of broker#apiVersions
   * @param {number} [options.authenticationTimeout=10000]
   * @param {boolean} [options.allowAutoTopicCreation=true] If this and the broker config 'auto.create.topics.enable'
   *                                                are true, topics that don't exist will be created when
   *                                                fetching metadata.
   */ constructor({ connectionPool: connectionPool, logger: logger, nodeId: nodeId = null, versions: versions = null, authenticationTimeout: authenticationTimeout = 10000, allowAutoTopicCreation: allowAutoTopicCreation = true }){
        this.connectionPool = connectionPool;
        this.nodeId = nodeId;
        this.rootLogger = logger;
        this.logger = logger.namespace("Broker");
        this.versions = versions;
        this.authenticationTimeout = authenticationTimeout;
        this.allowAutoTopicCreation = allowAutoTopicCreation;
        // The lock timeout has twice the connectionTimeout because the same timeout is used
        // for the first apiVersions call
        const lockTimeout = 2 * this.connectionPool.connectionTimeout + this.authenticationTimeout;
        this.brokerAddress = `${this.connectionPool.host}:${this.connectionPool.port}`;
        this.lock = new $424a91e9c534a6e7$exports({
            timeout: lockTimeout,
            description: `connect to broker ${this.brokerAddress}`
        });
        this.lookupRequest = $cd8985b50ee62e24$var$notInitializedLookup;
    }
    /**
   * @public
   * @returns {boolean}
   */ isConnected() {
        return this.connectionPool.sasl ? this.connectionPool.isConnected() && this.connectionPool.isAuthenticated() : this.connectionPool.isConnected();
    }
    /**
   * @public
   * @returns {Promise}
   */ async connect() {
        await this.lock.acquire();
        try {
            if (this.isConnected()) return;
            const connection = await this.connectionPool.getConnection();
            if (!this.versions) this.versions = await this.apiVersions();
            this.connectionPool.setVersions(this.versions);
            this.lookupRequest = $cd8985b50ee62e24$require$lookup(this.versions);
            if (connection.getSupportAuthenticationProtocol() === null) {
                let supportAuthenticationProtocol = false;
                try {
                    this.lookupRequest($9kH2s.SaslAuthenticate, $cd8985b50ee62e24$require$requests.SaslAuthenticate);
                    supportAuthenticationProtocol = true;
                } catch (_) {
                    supportAuthenticationProtocol = false;
                }
                this.connectionPool.setSupportAuthenticationProtocol(supportAuthenticationProtocol);
                this.logger.debug(`Verified support for SaslAuthenticate`, {
                    broker: this.brokerAddress,
                    supportAuthenticationProtocol: supportAuthenticationProtocol
                });
            }
            await connection.authenticate();
        } finally{
            await this.lock.release();
        }
    }
    /**
   * @public
   * @returns {Promise}
   */ async disconnect() {
        await this.connectionPool.destroy();
    }
    /**
   * @public
   * @returns {Promise<import("../../types").ApiVersions>}
   */ async apiVersions() {
        let response;
        const availableVersions = $cd8985b50ee62e24$require$requests.ApiVersions.versions.map(Number).sort().reverse();
        // Find the best version implemented by the server
        for (const candidateVersion of availableVersions)try {
            const apiVersions = $cd8985b50ee62e24$require$requests.ApiVersions.protocol({
                version: candidateVersion
            });
            response = await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST]({
                ...apiVersions(),
                requestTimeout: this.connectionPool.connectionTimeout
            });
            break;
        } catch (e) {
            if (e.type !== "UNSUPPORTED_VERSION") throw e;
        }
        if (!response) throw new $cd8985b50ee62e24$require$KafkaJSNonRetriableError("API Versions not supported");
        return response.apiVersions.reduce((obj, version)=>Object.assign(obj, {
                [version.apiKey]: {
                    minVersion: version.minVersion,
                    maxVersion: version.maxVersion
                }
            }), {});
    }
    /**
   * @public
   * @type {import("../../types").Broker['metadata']}
   * @param {string[]} [topics=[]] An array of topics to fetch metadata for.
   *                            If no topics are specified fetch metadata for all topics
   */ async metadata(topics = []) {
        const metadata = this.lookupRequest($9kH2s.Metadata, $cd8985b50ee62e24$require$requests.Metadata);
        const shuffledTopics = $005211d4820145a8$exports(topics);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](metadata({
            topics: shuffledTopics,
            allowAutoTopicCreation: this.allowAutoTopicCreation
        }));
    }
    /**
   * @public
   * @param {Object} request
   * @param {Array} request.topicData An array of messages per topic and per partition, example:
   *                          [
   *                            {
   *                              topic: 'test-topic-1',
   *                              partitions: [
   *                                {
   *                                  partition: 0,
   *                                  firstSequence: 0,
   *                                  messages: [
   *                                    { key: '1', value: 'A' },
   *                                    { key: '2', value: 'B' },
   *                                  ]
   *                                },
   *                                {
   *                                  partition: 1,
   *                                  firstSequence: 0,
   *                                  messages: [
   *                                    { key: '3', value: 'C' },
   *                                  ]
   *                                }
   *                              ]
   *                            },
   *                            {
   *                              topic: 'test-topic-2',
   *                              partitions: [
   *                                {
   *                                  partition: 4,
   *                                  firstSequence: 0,
   *                                  messages: [
   *                                    { key: '32', value: 'E' },
   *                                  ]
   *                                },
   *                              ]
   *                            },
   *                          ]
   * @param {number} [request.acks=-1] Control the number of required acks.
   *                           -1 = all replicas must acknowledge
   *                            0 = no acknowledgments
   *                            1 = only waits for the leader to acknowledge
   * @param {number} [request.timeout=30000] The time to await a response in ms
   * @param {string} [request.transactionalId=null]
   * @param {number} [request.producerId=-1] Broker assigned producerId
   * @param {number} [request.producerEpoch=0] Broker assigned producerEpoch
   * @param {import("../../types").CompressionTypes} [request.compression=CompressionTypes.None] Compression codec
   * @returns {Promise}
   */ async produce({ topicData: topicData, transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, acks: acks = -1, timeout: timeout = 30000, compression: compression = $cd8985b50ee62e24$require$Compression.None }) {
        const produce = this.lookupRequest($9kH2s.Produce, $cd8985b50ee62e24$require$requests.Produce);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](produce({
            acks: acks,
            timeout: timeout,
            compression: compression,
            topicData: topicData,
            transactionalId: transactionalId,
            producerId: producerId,
            producerEpoch: producerEpoch
        }));
    }
    /**
   * @public
   * @param {Object} request
   * @param {number} [request.replicaId=-1] Broker id of the follower. For normal consumers, use -1
   * @param {number} [request.isolationLevel=1] This setting controls the visibility of transactional records. Default READ_COMMITTED.
   * @param {number} [request.maxWaitTime=5000] Maximum time in ms to wait for the response
   * @param {number} [request.minBytes=1] Minimum bytes to accumulate in the response
   * @param {number} [request.maxBytes=10485760] Maximum bytes to accumulate in the response. Note that this is
   *                                   not an absolute maximum, if the first message in the first non-empty
   *                                   partition of the fetch is larger than this value, the message will still
   *                                   be returned to ensure that progress can be made. Default 10MB.
   * @param {Array} request.topics Topics to fetch
   *                        [
   *                          {
   *                            topic: 'topic-name',
   *                            partitions: [
   *                              {
   *                                partition: 0,
   *                                fetchOffset: '4124',
   *                                maxBytes: 2048
   *                              }
   *                            ]
   *                          }
   *                        ]
   * @param {string} [request.rackId=''] A rack identifier for this client. This can be any string value which indicates where this
   *                           client is physically located. It corresponds with the broker config `broker.rack`.
   * @returns {Promise}
   */ async fetch({ replicaId: replicaId, isolationLevel: isolationLevel, maxWaitTime: maxWaitTime = 5000, minBytes: minBytes = 1, maxBytes: maxBytes = 10485760, topics: topics, rackId: rackId = "" }) {
        // TODO: validate topics not null/empty
        const fetch = this.lookupRequest($9kH2s.Fetch, $cd8985b50ee62e24$require$requests.Fetch);
        // Shuffle topic-partitions to ensure fair response allocation across partitions (KIP-74)
        const flattenedTopicPartitions = topics.reduce((topicPartitions, { topic: topic, partitions: partitions })=>{
            partitions.forEach((partition)=>{
                topicPartitions.push({
                    topic: topic,
                    partition: partition
                });
            });
            return topicPartitions;
        }, []);
        const shuffledTopicPartitions = $005211d4820145a8$exports(flattenedTopicPartitions);
        // Consecutive partitions for the same topic can be combined into a single `topic` entry
        const consolidatedTopicPartitions = shuffledTopicPartitions.reduce((topicPartitions, { topic: topic, partition: partition })=>{
            const last = topicPartitions[topicPartitions.length - 1];
            if (last != null && last.topic === topic) topicPartitions[topicPartitions.length - 1].partitions.push(partition);
            else topicPartitions.push({
                topic: topic,
                partitions: [
                    partition
                ]
            });
            return topicPartitions;
        }, []);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](fetch({
            replicaId: replicaId,
            isolationLevel: isolationLevel,
            maxWaitTime: maxWaitTime,
            minBytes: minBytes,
            maxBytes: maxBytes,
            topics: consolidatedTopicPartitions,
            rackId: rackId
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {string} request.groupId The group id
   * @param {number} request.groupGenerationId The generation of the group
   * @param {string} request.memberId The member id assigned by the group coordinator
   * @returns {Promise}
   */ async heartbeat({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId }) {
        const heartbeat = this.lookupRequest($9kH2s.Heartbeat, $cd8985b50ee62e24$require$requests.Heartbeat);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](heartbeat({
            groupId: groupId,
            groupGenerationId: groupGenerationId,
            memberId: memberId
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {string} request.groupId The unique group id
   * @param {import("../protocol/coordinatorTypes").CoordinatorType} request.coordinatorType The type of coordinator to find
   * @returns {Promise}
   */ async findGroupCoordinator({ groupId: groupId, coordinatorType: coordinatorType }) {
        // TODO: validate groupId, mandatory
        const findCoordinator = this.lookupRequest($9kH2s.GroupCoordinator, $cd8985b50ee62e24$require$requests.GroupCoordinator);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](findCoordinator({
            groupId: groupId,
            coordinatorType: coordinatorType
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {string} request.groupId The unique group id
   * @param {number} request.sessionTimeout The coordinator considers the consumer dead if it receives
   *                                no heartbeat after this timeout in ms
   * @param {number} request.rebalanceTimeout The maximum time that the coordinator will wait for each member
   *                                  to rejoin when rebalancing the group
   * @param {string} [request.memberId=""] The assigned consumer id or an empty string for a new consumer
   * @param {string} [request.protocolType="consumer"] Unique name for class of protocols implemented by group
   * @param {Array} request.groupProtocols List of protocols that the member supports (assignment strategy)
   *                                [{ name: 'AssignerName', metadata: '{"version": 1, "topics": []}' }]
   * @returns {Promise}
   */ async joinGroup({ groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, memberId: memberId = "", protocolType: protocolType = "consumer", groupProtocols: groupProtocols }) {
        const joinGroup = this.lookupRequest($9kH2s.JoinGroup, $cd8985b50ee62e24$require$requests.JoinGroup);
        const makeRequest = (assignedMemberId = memberId)=>this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](joinGroup({
                groupId: groupId,
                sessionTimeout: sessionTimeout,
                rebalanceTimeout: rebalanceTimeout,
                memberId: assignedMemberId,
                protocolType: protocolType,
                groupProtocols: groupProtocols
            }));
        try {
            return await makeRequest();
        } catch (error) {
            if (error.name === "KafkaJSMemberIdRequired") return makeRequest(error.memberId);
            throw error;
        }
    }
    /**
   * @public
   * @param {object} request
   * @param {string} request.groupId
   * @param {string} request.memberId
   * @returns {Promise}
   */ async leaveGroup({ groupId: groupId, memberId: memberId }) {
        const leaveGroup = this.lookupRequest($9kH2s.LeaveGroup, $cd8985b50ee62e24$require$requests.LeaveGroup);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](leaveGroup({
            groupId: groupId,
            memberId: memberId
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {string} request.groupId
   * @param {number} request.generationId
   * @param {string} request.memberId
   * @param {object} request.groupAssignment
   * @returns {Promise}
   */ async syncGroup({ groupId: groupId, generationId: generationId, memberId: memberId, groupAssignment: groupAssignment }) {
        const syncGroup = this.lookupRequest($9kH2s.SyncGroup, $cd8985b50ee62e24$require$requests.SyncGroup);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](syncGroup({
            groupId: groupId,
            generationId: generationId,
            memberId: memberId,
            groupAssignment: groupAssignment
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {number} request.replicaId=-1 Broker id of the follower. For normal consumers, use -1
   * @param {number} request.isolationLevel=1 This setting controls the visibility of transactional records (default READ_COMMITTED, Kafka >0.11 only)
   * @param {TopicPartitionOffset[]} request.topics e.g:
   *
   * @typedef {Object} TopicPartitionOffset
   * @property {string} topic
   * @property {PartitionOffset[]} partitions
   *
   * @typedef {Object} PartitionOffset
   * @property {number} partition
   * @property {number} [timestamp=-1]
   *
   *
   * @returns {Promise}
   */ async listOffsets({ replicaId: replicaId, isolationLevel: isolationLevel, topics: topics }) {
        const listOffsets = this.lookupRequest($9kH2s.ListOffsets, $cd8985b50ee62e24$require$requests.ListOffsets);
        const result = await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](listOffsets({
            replicaId: replicaId,
            isolationLevel: isolationLevel,
            topics: topics
        }));
        // ListOffsets >= v1 will return a single `offset` rather than an array of `offsets` (ListOffsets V0).
        // Normalize to just return `offset`.
        for (const response of result.responses)response.partitions = response.partitions.map(({ offsets: offsets, ...partitionData })=>{
            return offsets ? {
                ...partitionData,
                offset: offsets.pop()
            } : partitionData;
        });
        return result;
    }
    /**
   * @public
   * @param {object} request
   * @param {string} request.groupId
   * @param {number} request.groupGenerationId
   * @param {string} request.memberId
   * @param {number} [request.retentionTime=-1] -1 signals to the broker that its default configuration
   *                                    should be used.
   * @param {object} request.topics Topics to commit offsets, e.g:
   *                  [
   *                    {
   *                      topic: 'topic-name',
   *                      partitions: [
   *                        { partition: 0, offset: '11' }
   *                      ]
   *                    }
   *                  ]
   * @returns {Promise}
   */ async offsetCommit({ groupId: groupId, groupGenerationId: groupGenerationId, memberId: memberId, retentionTime: retentionTime, topics: topics }) {
        const offsetCommit = this.lookupRequest($9kH2s.OffsetCommit, $cd8985b50ee62e24$require$requests.OffsetCommit);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](offsetCommit({
            groupId: groupId,
            groupGenerationId: groupGenerationId,
            memberId: memberId,
            retentionTime: retentionTime,
            topics: topics
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {string} request.groupId
   * @param {object} request.topics - If the topic array is null fetch offsets for all topics. e.g:
   *                  [
   *                    {
   *                      topic: 'topic-name',
   *                      partitions: [
   *                        { partition: 0 }
   *                      ]
   *                    }
   *                  ]
   * @returns {Promise}
   */ async offsetFetch({ groupId: groupId, topics: topics }) {
        const offsetFetch = this.lookupRequest($9kH2s.OffsetFetch, $cd8985b50ee62e24$require$requests.OffsetFetch);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](offsetFetch({
            groupId: groupId,
            topics: topics
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {Array} request.groupIds
   * @returns {Promise}
   */ async describeGroups({ groupIds: groupIds }) {
        const describeGroups = this.lookupRequest($9kH2s.DescribeGroups, $cd8985b50ee62e24$require$requests.DescribeGroups);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](describeGroups({
            groupIds: groupIds
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {Array} request.topics e.g:
   *                 [
   *                   {
   *                     topic: 'topic-name',
   *                     numPartitions: 1,
   *                     replicationFactor: 1
   *                   }
   *                 ]
   * @param {boolean} [request.validateOnly=false] If this is true, the request will be validated, but the topic
   *                                       won't be created
   * @param {number} [request.timeout=5000] The time in ms to wait for a topic to be completely created
   *                                on the controller node
   * @returns {Promise}
   */ async createTopics({ topics: topics, validateOnly: validateOnly = false, timeout: timeout = 5000 }) {
        const createTopics = this.lookupRequest($9kH2s.CreateTopics, $cd8985b50ee62e24$require$requests.CreateTopics);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](createTopics({
            topics: topics,
            validateOnly: validateOnly,
            timeout: timeout
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {Array} request.topicPartitions e.g:
   *                 [
   *                   {
   *                     topic: 'topic-name',
   *                     count: 3,
   *                     assignments: []
   *                   }
   *                 ]
   * @param {boolean} [request.validateOnly=false] If this is true, the request will be validated, but the topic
   *                                       won't be created
   * @param {number} [request.timeout=5000] The time in ms to wait for a topic to be completely created
   *                                on the controller node
   * @returns {Promise<void>}
   */ async createPartitions({ topicPartitions: topicPartitions, validateOnly: validateOnly = false, timeout: timeout = 5000 }) {
        const createPartitions = this.lookupRequest($9kH2s.CreatePartitions, $cd8985b50ee62e24$require$requests.CreatePartitions);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](createPartitions({
            topicPartitions: topicPartitions,
            validateOnly: validateOnly,
            timeout: timeout
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {string[]} request.topics An array of topics to be deleted
   * @param {number} [request.timeout=5000] The time in ms to wait for a topic to be completely deleted on the
   *                                controller node.
   * @returns {Promise}
   */ async deleteTopics({ topics: topics, timeout: timeout = 5000 }) {
        const deleteTopics = this.lookupRequest($9kH2s.DeleteTopics, $cd8985b50ee62e24$require$requests.DeleteTopics);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](deleteTopics({
            topics: topics,
            timeout: timeout
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {import("../../types").ResourceConfigQuery[]} request.resources
   *                                 [{
   *                                   type: RESOURCE_TYPES.TOPIC,
   *                                   name: 'topic-name',
   *                                   configNames: ['compression.type', 'retention.ms']
   *                                 }]
   * @param {boolean} [request.includeSynonyms=false]
   * @returns {Promise}
   */ async describeConfigs({ resources: resources, includeSynonyms: includeSynonyms = false }) {
        const describeConfigs = this.lookupRequest($9kH2s.DescribeConfigs, $cd8985b50ee62e24$require$requests.DescribeConfigs);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](describeConfigs({
            resources: resources,
            includeSynonyms: includeSynonyms
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {import("../../types").IResourceConfig[]} request.resources
   *                                 [{
   *                                  type: RESOURCE_TYPES.TOPIC,
   *                                  name: 'topic-name',
   *                                  configEntries: [
   *                                    {
   *                                      name: 'cleanup.policy',
   *                                      value: 'compact'
   *                                    }
   *                                  ]
   *                                 }]
   * @param {boolean} [request.validateOnly=false]
   * @returns {Promise}
   */ async alterConfigs({ resources: resources, validateOnly: validateOnly = false }) {
        const alterConfigs = this.lookupRequest($9kH2s.AlterConfigs, $cd8985b50ee62e24$require$requests.AlterConfigs);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](alterConfigs({
            resources: resources,
            validateOnly: validateOnly
        }));
    }
    /**
   * Send an `InitProducerId` request to fetch a PID and bump the producer epoch.
   *
   * Request should be made to the transaction coordinator.
   * @public
   * @param {object} request
   * @param {number} request.transactionTimeout The time in ms to wait for before aborting idle transactions
   * @param {number} [request.transactionalId] The transactional id or null if the producer is not transactional
   * @returns {Promise}
   */ async initProducerId({ transactionalId: transactionalId, transactionTimeout: transactionTimeout }) {
        const initProducerId = this.lookupRequest($9kH2s.InitProducerId, $cd8985b50ee62e24$require$requests.InitProducerId);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](initProducerId({
            transactionalId: transactionalId,
            transactionTimeout: transactionTimeout
        }));
    }
    /**
   * Send an `AddPartitionsToTxn` request to mark a TopicPartition as participating in the transaction.
   *
   * Request should be made to the transaction coordinator.
   * @public
   * @param {object} request
   * @param {string} request.transactionalId The transactional id corresponding to the transaction.
   * @param {number} request.producerId Current producer id in use by the transactional id.
   * @param {number} request.producerEpoch Current epoch associated with the producer id.
   * @param {object[]} request.topics e.g:
   *                  [
   *                    {
   *                      topic: 'topic-name',
   *                      partitions: [ 0, 1]
   *                    }
   *                  ]
   * @returns {Promise}
   */ async addPartitionsToTxn({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, topics: topics }) {
        const addPartitionsToTxn = this.lookupRequest($9kH2s.AddPartitionsToTxn, $cd8985b50ee62e24$require$requests.AddPartitionsToTxn);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](addPartitionsToTxn({
            transactionalId: transactionalId,
            producerId: producerId,
            producerEpoch: producerEpoch,
            topics: topics
        }));
    }
    /**
   * Send an `AddOffsetsToTxn` request.
   *
   * Request should be made to the transaction coordinator.
   * @public
   * @param {object} request
   * @param {string} request.transactionalId The transactional id corresponding to the transaction.
   * @param {number} request.producerId Current producer id in use by the transactional id.
   * @param {number} request.producerEpoch Current epoch associated with the producer id.
   * @param {string} request.groupId The unique group identifier (for the consumer group)
   * @returns {Promise}
   */ async addOffsetsToTxn({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, groupId: groupId }) {
        const addOffsetsToTxn = this.lookupRequest($9kH2s.AddOffsetsToTxn, $cd8985b50ee62e24$require$requests.AddOffsetsToTxn);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](addOffsetsToTxn({
            transactionalId: transactionalId,
            producerId: producerId,
            producerEpoch: producerEpoch,
            groupId: groupId
        }));
    }
    /**
   * Send a `TxnOffsetCommit` request to persist the offsets in the `__consumer_offsets` topics.
   *
   * Request should be made to the consumer coordinator.
   * @public
   * @param {object} request
   * @param {OffsetCommitTopic[]} request.topics
   * @param {string} request.transactionalId The transactional id corresponding to the transaction.
   * @param {string} request.groupId The unique group identifier (for the consumer group)
   * @param {number} request.producerId Current producer id in use by the transactional id.
   * @param {number} request.producerEpoch Current epoch associated with the producer id.
   * @param {OffsetCommitTopic[]} request.topics
   *
   * @typedef {Object} OffsetCommitTopic
   * @property {string} topic
   * @property {OffsetCommitTopicPartition[]} partitions
   *
   * @typedef {Object} OffsetCommitTopicPartition
   * @property {number} partition
   * @property {number} offset
   * @property {string} [metadata]
   *
   * @returns {Promise}
   */ async txnOffsetCommit({ transactionalId: transactionalId, groupId: groupId, producerId: producerId, producerEpoch: producerEpoch, topics: topics }) {
        const txnOffsetCommit = this.lookupRequest($9kH2s.TxnOffsetCommit, $cd8985b50ee62e24$require$requests.TxnOffsetCommit);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](txnOffsetCommit({
            transactionalId: transactionalId,
            groupId: groupId,
            producerId: producerId,
            producerEpoch: producerEpoch,
            topics: topics
        }));
    }
    /**
   * Send an `EndTxn` request to indicate transaction should be committed or aborted.
   *
   * Request should be made to the transaction coordinator.
   * @public
   * @param {object} request
   * @param {string} request.transactionalId The transactional id corresponding to the transaction.
   * @param {number} request.producerId Current producer id in use by the transactional id.
   * @param {number} request.producerEpoch Current epoch associated with the producer id.
   * @param {boolean} request.transactionResult The result of the transaction (false = ABORT, true = COMMIT)
   * @returns {Promise}
   */ async endTxn({ transactionalId: transactionalId, producerId: producerId, producerEpoch: producerEpoch, transactionResult: transactionResult }) {
        const endTxn = this.lookupRequest($9kH2s.EndTxn, $cd8985b50ee62e24$require$requests.EndTxn);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](endTxn({
            transactionalId: transactionalId,
            producerId: producerId,
            producerEpoch: producerEpoch,
            transactionResult: transactionResult
        }));
    }
    /**
   * Send request for list of groups
   * @public
   * @returns {Promise}
   */ async listGroups() {
        const listGroups = this.lookupRequest($9kH2s.ListGroups, $cd8985b50ee62e24$require$requests.ListGroups);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](listGroups());
    }
    /**
   * Send request to delete groups
   * @param {string[]} groupIds
   * @public
   * @returns {Promise}
   */ async deleteGroups(groupIds) {
        const deleteGroups = this.lookupRequest($9kH2s.DeleteGroups, $cd8985b50ee62e24$require$requests.DeleteGroups);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](deleteGroups(groupIds));
    }
    /**
   * Send request to delete records
   * @public
   * @param {object} request
   * @param {TopicPartitionRecords[]} request.topics
   *                          [
   *                            {
   *                              topic: 'my-topic-name',
   *                              partitions: [
   *                                { partition: 0, offset 2 },
   *                                { partition: 1, offset 4 },
   *                              ],
   *                            }
   *                          ]
   * @returns {Promise<Array>} example:
   *                          {
   *                            throttleTime: 0
   *                           [
   *                              {
   *                                topic: 'my-topic-name',
   *                                partitions: [
   *                                 { partition: 0, lowWatermark: '2n', errorCode: 0 },
   *                                 { partition: 1, lowWatermark: '4n', errorCode: 0 },
   *                               ],
   *                             },
   *                           ]
   *                          }
   *
   * @typedef {object} TopicPartitionRecords
   * @property {string} topic
   * @property {PartitionRecord[]} partitions
   *
   * @typedef {object} PartitionRecord
   * @property {number} partition
   * @property {number} offset
   */ async deleteRecords({ topics: topics }) {
        const deleteRecords = this.lookupRequest($9kH2s.DeleteRecords, $cd8985b50ee62e24$require$requests.DeleteRecords);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](deleteRecords({
            topics: topics
        }));
    }
    /**
   * @public
   * @param {object} request
   * @param {import("../../types").AclEntry[]} request.acl e.g:
   *                 [
   *                   {
   *                     resourceType: AclResourceTypes.TOPIC,
   *                     resourceName: 'topic-name',
   *                     resourcePatternType: ResourcePatternTypes.LITERAL,
   *                     principal: 'User:bob',
   *                     host: '*',
   *                     operation: AclOperationTypes.ALL,
   *                     permissionType: AclPermissionTypes.DENY,
   *                   }
   *                 ]
   * @returns {Promise<void>}
   */ async createAcls({ acl: acl }) {
        const createAcls = this.lookupRequest($9kH2s.CreateAcls, $cd8985b50ee62e24$require$requests.CreateAcls);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](createAcls({
            creations: acl
        }));
    }
    /**
   * @public
   * @param {import("../../types").AclEntry} aclEntry
   * @returns {Promise<void>}
   */ async describeAcls({ resourceType: resourceType, resourceName: resourceName, resourcePatternType: resourcePatternType, principal: principal, host: host, operation: operation, permissionType: permissionType }) {
        const describeAcls = this.lookupRequest($9kH2s.DescribeAcls, $cd8985b50ee62e24$require$requests.DescribeAcls);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](describeAcls({
            resourceType: resourceType,
            resourceName: resourceName,
            resourcePatternType: resourcePatternType,
            principal: principal,
            host: host,
            operation: operation,
            permissionType: permissionType
        }));
    }
    /**
   * @public
   * @param {Object} request
   * @param {import("../../types").AclEntry[]} request.filters
   * @returns {Promise<void>}
   */ async deleteAcls({ filters: filters }) {
        const deleteAcls = this.lookupRequest($9kH2s.DeleteAcls, $cd8985b50ee62e24$require$requests.DeleteAcls);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](deleteAcls({
            filters: filters
        }));
    }
    /**
   * @public
   * @param {Object} request
   * @param {import("../../types").PartitionReassignment[]} request.topics
   * @param {number} [request.timeout]
   * @returns {Promise}
   */ async alterPartitionReassignments({ topics: topics, timeout: timeout }) {
        const alterPartitionReassignments = this.lookupRequest($9kH2s.AlterPartitionReassignments, $cd8985b50ee62e24$require$requests.AlterPartitionReassignments);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](alterPartitionReassignments({
            topics: topics,
            timeout: timeout
        }));
    }
    /**
   * @public
   * @param {Object} request
   * @param {import("../../types").TopicPartitions[]} request.topics can be null
   * @param {number} [request.timeout]
   * @returns {Promise}
   */ async listPartitionReassignments({ topics: topics = null, timeout: timeout }) {
        const listPartitionReassignments = this.lookupRequest($9kH2s.ListPartitionReassignments, $cd8985b50ee62e24$require$requests.ListPartitionReassignments);
        return await this[$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](listPartitionReassignments({
            topics: topics,
            timeout: timeout
        }));
    }
    /**
   * @private
   */ async [$cd8985b50ee62e24$var$PRIVATE.SEND_REQUEST](protocolRequest) {
        try {
            return await this.connectionPool.send(protocolRequest);
        } catch (e) {
            if (e.name === "KafkaJSConnectionClosedError") await this.disconnect();
            throw e;
        }
    }
};


var $d1c48a936f24908d$exports = {};

var $8mQRr = parcelRequire("8mQRr");
var $d1c48a936f24908d$require$KafkaJSNumberOfRetriesExceeded = $8mQRr.KafkaJSNumberOfRetriesExceeded;
var $d1c48a936f24908d$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
const $d1c48a936f24908d$var$isTestMode = false;


const $d1c48a936f24908d$var$RETRY_DEFAULT = $d1c48a936f24908d$var$isTestMode ? (parcelRequire("dOl0h")) : (parcelRequire("jzcUK"));
const $d1c48a936f24908d$var$random = (min, max)=>{
    return Math.random() * (max - min) + min;
};
const $d1c48a936f24908d$var$randomFromRetryTime = (factor, retryTime)=>{
    const delta = factor * retryTime;
    return Math.ceil($d1c48a936f24908d$var$random(retryTime - delta, retryTime + delta));
};
const $d1c48a936f24908d$var$UNRECOVERABLE_ERRORS = [
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError"
];
const $d1c48a936f24908d$var$isErrorUnrecoverable = (e)=>$d1c48a936f24908d$var$UNRECOVERABLE_ERRORS.includes(e.name);
const $d1c48a936f24908d$var$isErrorRetriable = (error)=>(error.retriable || error.retriable !== false) && !$d1c48a936f24908d$var$isErrorUnrecoverable(error);
const $d1c48a936f24908d$var$createRetriable = (configs, resolve, reject, fn)=>{
    let aborted = false;
    const { factor: factor, multiplier: multiplier, maxRetryTime: maxRetryTime, retries: retries } = configs;
    const bail = (error)=>{
        aborted = true;
        reject(error || new Error("Aborted"));
    };
    const calculateExponentialRetryTime = (retryTime)=>{
        return Math.min($d1c48a936f24908d$var$randomFromRetryTime(factor, retryTime) * multiplier, maxRetryTime);
    };
    const retry = (retryTime, retryCount = 0)=>{
        if (aborted) return;
        const nextRetryTime = calculateExponentialRetryTime(retryTime);
        const shouldRetry = retryCount < retries;
        const scheduleRetry = ()=>{
            setTimeout(()=>retry(nextRetryTime, retryCount + 1), retryTime);
        };
        fn(bail, retryCount, retryTime).then(resolve).catch((e)=>{
            if ($d1c48a936f24908d$var$isErrorRetriable(e)) {
                if (shouldRetry) scheduleRetry();
                else reject(new $d1c48a936f24908d$require$KafkaJSNumberOfRetriesExceeded(e, {
                    retryCount: retryCount,
                    retryTime: retryTime,
                    cause: e.cause || e
                }));
            } else reject(new $d1c48a936f24908d$require$KafkaJSNonRetriableError(e, {
                cause: e.cause || e
            }));
        });
    };
    return retry;
};
/**
 * @typedef {(fn: (bail: (err: Error) => void, retryCount: number, retryTime: number) => any) => Promise<ReturnType<fn>>} Retrier
 */ /**
 * @param {import("../../types").RetryOptions} [opts]
 * @returns {Retrier}
 */ $d1c48a936f24908d$exports = (opts = {})=>(fn)=>{
        return new Promise((resolve, reject)=>{
            const configs = Object.assign({}, $d1c48a936f24908d$var$RETRY_DEFAULT, opts);
            const start = $d1c48a936f24908d$var$createRetriable(configs, resolve, reject, fn);
            start($d1c48a936f24908d$var$randomFromRetryTime(configs.factor, configs.initialRetryTime));
        });
    };



var $8b1e7982840fa5e9$exports = {};
$8b1e7982840fa5e9$exports = (a, b)=>{
    const result = [];
    const length = a.length;
    let i = 0;
    while(i < length){
        if (b.indexOf(a[i]) === -1) result.push(a[i]);
        i += 1;
    }
    return result;
};



var $8mQRr = parcelRequire("8mQRr");
var $99934a026b004b44$require$KafkaJSBrokerNotFound = $8mQRr.KafkaJSBrokerNotFound;
var $99934a026b004b44$require$KafkaJSProtocolError = $8mQRr.KafkaJSProtocolError;
const { keys: $99934a026b004b44$var$keys, assign: $99934a026b004b44$var$assign, values: $99934a026b004b44$var$values } = Object;
const $99934a026b004b44$var$hasBrokerBeenReplaced = (broker, { host: host, port: port, rack: rack })=>broker.connectionPool.host !== host || broker.connectionPool.port !== port || broker.connectionPool.rack !== rack;
$99934a026b004b44$exports = class BrokerPool {
    /**
   * @param {object} options
   * @param {import("./connectionPoolBuilder").ConnectionPoolBuilder} options.connectionPoolBuilder
   * @param {import("../../types").Logger} options.logger
   * @param {import("../../types").RetryOptions} [options.retry]
   * @param {boolean} [options.allowAutoTopicCreation]
   * @param {number} [options.authenticationTimeout]
   * @param {number} [options.metadataMaxAge]
   */ constructor({ connectionPoolBuilder: connectionPoolBuilder, logger: logger, retry: retry, allowAutoTopicCreation: allowAutoTopicCreation, authenticationTimeout: authenticationTimeout, metadataMaxAge: metadataMaxAge }){
        this.rootLogger = logger;
        this.connectionPoolBuilder = connectionPoolBuilder;
        this.metadataMaxAge = metadataMaxAge || 0;
        this.logger = logger.namespace("BrokerPool");
        this.retrier = $d1c48a936f24908d$exports($99934a026b004b44$var$assign({}, retry));
        this.createBroker = (options)=>new $cd8985b50ee62e24$exports({
                allowAutoTopicCreation: allowAutoTopicCreation,
                authenticationTimeout: authenticationTimeout,
                ...options
            });
        this.brokers = {};
        /** @type {Broker | undefined} */ this.seedBroker = undefined;
        /** @type {import("../../types").BrokerMetadata | null} */ this.metadata = null;
        this.metadataExpireAt = null;
        this.versions = null;
    }
    /**
   * @public
   * @returns {Boolean}
   */ hasConnectedBrokers() {
        const brokers = $99934a026b004b44$var$values(this.brokers);
        return !!brokers.find((broker)=>broker.isConnected()) || (this.seedBroker ? this.seedBroker.isConnected() : false);
    }
    async createSeedBroker() {
        if (this.seedBroker) await this.seedBroker.disconnect();
        const connectionPool = await this.connectionPoolBuilder.build();
        this.seedBroker = this.createBroker({
            connectionPool: connectionPool,
            logger: this.rootLogger
        });
    }
    /**
   * @public
   * @returns {Promise<void>}
   */ async connect() {
        if (this.hasConnectedBrokers()) return;
        if (!this.seedBroker) await this.createSeedBroker();
        return this.retrier(async (bail, retryCount, retryTime)=>{
            try {
                await this.seedBroker.connect();
                this.versions = this.seedBroker.versions;
            } catch (e) {
                if (e.name === "KafkaJSConnectionError" || e.type === "ILLEGAL_SASL_STATE") {
                    // Connection builder will always rotate the seed broker
                    await this.createSeedBroker();
                    this.logger.error(`Failed to connect to seed broker, trying another broker from the list: ${e.message}`, {
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                } else this.logger.error(e.message, {
                    retryCount: retryCount,
                    retryTime: retryTime
                });
                if (e.retriable) throw e;
                bail(e);
            }
        });
    }
    /**
   * @public
   * @returns {Promise}
   */ async disconnect() {
        this.seedBroker && await this.seedBroker.disconnect();
        await Promise.all($99934a026b004b44$var$values(this.brokers).map((broker)=>broker.disconnect()));
        this.brokers = {};
        this.metadata = null;
        this.versions = null;
    }
    /**
   * @public
   * @param {Object} destination
   * @param {string} destination.host
   * @param {number} destination.port
   */ removeBroker({ host: host, port: port }) {
        const removedBroker = $99934a026b004b44$var$values(this.brokers).find((broker)=>broker.connectionPool.host === host && broker.connectionPool.port === port);
        if (removedBroker) {
            delete this.brokers[removedBroker.nodeId];
            this.metadataExpireAt = null;
            if (this.seedBroker.nodeId === removedBroker.nodeId) this.seedBroker = $005211d4820145a8$exports($99934a026b004b44$var$values(this.brokers))[0];
        }
    }
    /**
   * @public
   * @param {Array<String>} topics
   * @returns {Promise<null>}
   */ async refreshMetadata(topics) {
        const broker = await this.findConnectedBroker();
        const { host: seedHost, port: seedPort } = this.seedBroker.connectionPool;
        return this.retrier(async (bail, retryCount, retryTime)=>{
            try {
                this.metadata = await broker.metadata(topics);
                this.metadataExpireAt = Date.now() + this.metadataMaxAge;
                const replacedBrokers = [];
                this.brokers = await this.metadata.brokers.reduce(async (resultPromise, { nodeId: nodeId, host: host, port: port, rack: rack })=>{
                    const result = await resultPromise;
                    if (result[nodeId]) {
                        if (!$99934a026b004b44$var$hasBrokerBeenReplaced(result[nodeId], {
                            host: host,
                            port: port,
                            rack: rack
                        })) return result;
                        replacedBrokers.push(result[nodeId]);
                    }
                    if (host === seedHost && port === seedPort) {
                        this.seedBroker.nodeId = nodeId;
                        this.seedBroker.connectionPool.rack = rack;
                        return $99934a026b004b44$var$assign(result, {
                            [nodeId]: this.seedBroker
                        });
                    }
                    return $99934a026b004b44$var$assign(result, {
                        [nodeId]: this.createBroker({
                            logger: this.rootLogger,
                            versions: this.versions,
                            connectionPool: await this.connectionPoolBuilder.build({
                                host: host,
                                port: port,
                                rack: rack
                            }),
                            nodeId: nodeId
                        })
                    });
                }, this.brokers);
                const freshBrokerIds = this.metadata.brokers.map(({ nodeId: nodeId })=>`${nodeId}`).sort();
                const currentBrokerIds = $99934a026b004b44$var$keys(this.brokers).sort();
                const unusedBrokerIds = $8b1e7982840fa5e9$exports(currentBrokerIds, freshBrokerIds);
                const brokerDisconnects = unusedBrokerIds.map((nodeId)=>{
                    const broker = this.brokers[nodeId];
                    return broker.disconnect().then(()=>{
                        delete this.brokers[nodeId];
                    });
                });
                const replacedBrokersDisconnects = replacedBrokers.map((broker)=>broker.disconnect());
                await Promise.all([
                    ...brokerDisconnects,
                    ...replacedBrokersDisconnects
                ]);
            } catch (e) {
                if (e.type === "LEADER_NOT_AVAILABLE") throw e;
                bail(e);
            }
        });
    }
    /**
   * Only refreshes metadata if the data is stale according to the `metadataMaxAge` param or does not contain information about the provided topics
   *
   * @public
   * @param {Array<String>} topics
   * @returns {Promise<null>}
   */ async refreshMetadataIfNecessary(topics) {
        const shouldRefresh = this.metadata == null || this.metadataExpireAt == null || Date.now() > this.metadataExpireAt || !topics.every((topic)=>this.metadata.topicMetadata.some((topicMetadata)=>topicMetadata.topic === topic));
        if (shouldRefresh) return this.refreshMetadata(topics);
    }
    /** @type {() => string[]} */ getNodeIds() {
        return $99934a026b004b44$var$keys(this.brokers);
    }
    /**
   * @public
   * @param {object} options
   * @param {string} options.nodeId
   * @returns {Promise<Broker>}
   */ async findBroker({ nodeId: nodeId }) {
        const broker = this.brokers[nodeId];
        if (!broker) throw new $99934a026b004b44$require$KafkaJSBrokerNotFound(`Broker ${nodeId} not found in the cached metadata`);
        await this.connectBroker(broker);
        return broker;
    }
    /**
   * @public
   * @param {(params: { nodeId: string, broker: Broker }) => Promise<T>} callback
   * @returns {Promise<T>}
   * @template T
   */ async withBroker(callback) {
        const brokers = $005211d4820145a8$exports($99934a026b004b44$var$keys(this.brokers));
        if (brokers.length === 0) throw new $99934a026b004b44$require$KafkaJSBrokerNotFound("No brokers in the broker pool");
        for (const nodeId of brokers){
            const broker = await this.findBroker({
                nodeId: nodeId
            });
            try {
                return await callback({
                    nodeId: nodeId,
                    broker: broker
                });
            } catch (e) {}
        }
        return null;
    }
    /**
   * @public
   * @returns {Promise<Broker>}
   */ async findConnectedBroker() {
        const nodeIds = $005211d4820145a8$exports($99934a026b004b44$var$keys(this.brokers));
        const connectedBrokerId = nodeIds.find((nodeId)=>this.brokers[nodeId].isConnected());
        if (connectedBrokerId) return await this.findBroker({
            nodeId: connectedBrokerId
        });
        // Cycle through the nodes until one connects
        for (const nodeId of nodeIds)try {
            return await this.findBroker({
                nodeId: nodeId
            });
        } catch (e) {}
        // Failed to connect to all known brokers, metadata might be old
        await this.connect();
        return this.seedBroker;
    }
    /**
   * @private
   * @param {Broker} broker
   * @returns {Promise<null>}
   */ async connectBroker(broker) {
        if (broker.isConnected()) return;
        return this.retrier(async (bail, retryCount, retryTime)=>{
            try {
                await broker.connect();
            } catch (e) {
                if (e.name === "KafkaJSConnectionError" || e.type === "ILLEGAL_SASL_STATE") await broker.disconnect();
                // To avoid reconnecting to an unavailable host, we bail on connection errors
                // and refresh metadata on a higher level before reconnecting
                if (e.name === "KafkaJSConnectionError") return bail(e);
                if (e.type === "ILLEGAL_SASL_STATE") {
                    // Rebuild the connection pool since it can't recover from illegal SASL state
                    broker.connectionPool = await this.connectionPoolBuilder.build({
                        host: broker.connectionPool.host,
                        port: broker.connectionPool.port,
                        rack: broker.connectionPool.rack
                    });
                    this.logger.error(`Failed to connect to broker, reconnecting`, {
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw new $99934a026b004b44$require$KafkaJSProtocolError(e, {
                        retriable: true
                    });
                }
                if (e.retriable) throw e;
                this.logger.error(e, {
                    retryCount: retryCount,
                    retryTime: retryTime,
                    stack: e.stack
                });
                bail(e);
            }
        });
    }
};



var $9c89082ee7ce8fe3$exports = {};
/**
 * @template T
 * @param { (...args: any) => Promise<T> } [asyncFunction]
 * Promise returning function that will only ever be invoked sequentially.
 * @returns { (...args: any) => Promise<T> }
 * Function that may invoke asyncFunction if there is not a currently executing invocation.
 * Returns promise from the currently executing invocation.
 */ $9c89082ee7ce8fe3$exports = (asyncFunction)=>{
    let promise = null;
    return (...args)=>{
        if (promise == null) promise = asyncFunction(...args).finally(()=>promise = null);
        return promise;
    };
};



var $4fc440e79dee3b30$exports = {};

var $8mQRr = parcelRequire("8mQRr");
var $4fc440e79dee3b30$require$KafkaJSConnectionError = $8mQRr.KafkaJSConnectionError;
var $4fc440e79dee3b30$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
var $f441aff4ed89627a$exports = {};

var $9kH2s = parcelRequire("9kH2s");
var $307d10c104ac50ee$exports = {};


var $307d10c104ac50ee$require$Buffer = $4UN2M$buffer.Buffer;
var $45d78345e761a7bd$exports = {};
/**
 * @param {Object} options
 * @param {import("../../types").ISocketFactory} options.socketFactory
 * @param {string} options.host
 * @param {number} options.port
 * @param {Object} options.ssl
 * @param {() => void} options.onConnect
 * @param {(data: Buffer) => void} options.onData
 * @param {() => void} options.onEnd
 * @param {(err: Error) => void} options.onError
 * @param {() => void} options.onTimeout
 */ $45d78345e761a7bd$exports = ({ socketFactory: socketFactory, host: host, port: port, ssl: ssl, onConnect: onConnect, onData: onData, onEnd: onEnd, onError: onError, onTimeout: onTimeout })=>{
    const socket = socketFactory({
        host: host,
        port: port,
        ssl: ssl,
        onConnect: onConnect
    });
    socket.on("data", onData);
    socket.on("end", onEnd);
    socket.on("error", onError);
    socket.on("timeout", onTimeout);
    return socket;
};


var $603ea6399a07fe6a$exports = {};

var $7jO81 = parcelRequire("7jO81");
$603ea6399a07fe6a$exports = async ({ correlationId: correlationId, clientId: clientId, request: { apiKey: apiKey, apiVersion: apiVersion, encode: encode } })=>{
    const payload = await encode();
    const requestPayload = new $7jO81().writeInt16(apiKey).writeInt16(apiVersion).writeInt32(correlationId).writeString(clientId).writeEncoder(payload);
    return new $7jO81().writeInt32(requestPayload.size()).writeEncoder(requestPayload);
};



var $eMnPM = parcelRequire("eMnPM");

var $8mQRr = parcelRequire("8mQRr");
var $307d10c104ac50ee$require$KafkaJSConnectionError = $8mQRr.KafkaJSConnectionError;
var $307d10c104ac50ee$require$KafkaJSConnectionClosedError = $8mQRr.KafkaJSConnectionClosedError;
var $b2095807cf05621c$exports = {};
const $b2095807cf05621c$var$EARLIEST_OFFSET = -2;
const $b2095807cf05621c$var$LATEST_OFFSET = -1;
const $b2095807cf05621c$var$INT_32_MAX_VALUE = Math.pow(2, 31) - 1;
$b2095807cf05621c$exports = {
    EARLIEST_OFFSET: $b2095807cf05621c$var$EARLIEST_OFFSET,
    LATEST_OFFSET: $b2095807cf05621c$var$LATEST_OFFSET,
    INT_32_MAX_VALUE: $b2095807cf05621c$var$INT_32_MAX_VALUE
};


var $307d10c104ac50ee$require$INT_32_MAX_VALUE = $b2095807cf05621c$exports.INT_32_MAX_VALUE;
var $3ad2ac6bcbc31dbe$exports = {};
$3ad2ac6bcbc31dbe$exports = ()=>({
        KAFKAJS_DEBUG_PROTOCOL_BUFFERS: undefined,
        KAFKAJS_DEBUG_EXTENDED_PROTOCOL_BUFFERS: undefined
    });


var $0421ea4eb7cf95ef$exports = {};

var $0421ea4eb7cf95ef$require$EventEmitter = $4UN2M$events.EventEmitter;
var $01e1b522459c941a$exports = {};

var $8mQRr = parcelRequire("8mQRr");
var $01e1b522459c941a$require$KafkaJSRequestTimeoutError = $8mQRr.KafkaJSRequestTimeoutError;
var $01e1b522459c941a$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
var $1da109fb7a6eab1e$exports = {};
var $96d0cdc4a08345b0$exports = {};
/** @type {<T1 extends string>(namespace: T1) => <T2 extends string>(type: T2) => `${T1}.${T2}`} */ $96d0cdc4a08345b0$exports = (namespace)=>(type)=>`${namespace}.${type}`;


const $1da109fb7a6eab1e$var$eventType = $96d0cdc4a08345b0$exports("network");
$1da109fb7a6eab1e$exports = {
    NETWORK_REQUEST: $1da109fb7a6eab1e$var$eventType("request"),
    NETWORK_REQUEST_TIMEOUT: $1da109fb7a6eab1e$var$eventType("request_timeout"),
    NETWORK_REQUEST_QUEUE_SIZE: $1da109fb7a6eab1e$var$eventType("request_queue_size")
};


const $01e1b522459c941a$var$PRIVATE = {
    STATE: Symbol("private:SocketRequest:state"),
    EMIT_EVENT: Symbol("private:SocketRequest:emitEvent")
};
const $01e1b522459c941a$var$REQUEST_STATE = {
    PENDING: Symbol("PENDING"),
    SENT: Symbol("SENT"),
    COMPLETED: Symbol("COMPLETED"),
    REJECTED: Symbol("REJECTED")
};
/**
 * SocketRequest abstracts the life cycle of a socket request, making it easier to track
 * request durations and to have individual timeouts per request.
 *
 * @typedef {Object} SocketRequest
 * @property {number} createdAt
 * @property {number} sentAt
 * @property {number} pendingDuration
 * @property {number} duration
 * @property {number} requestTimeout
 * @property {string} broker
 * @property {string} clientId
 * @property {RequestEntry} entry
 * @property {boolean} expectResponse
 * @property {Function} send
 * @property {Function} timeout
 *
 * @typedef {Object} RequestEntry
 * @property {string} apiKey
 * @property {string} apiName
 * @property {number} apiVersion
 * @property {number} correlationId
 * @property {Function} resolve
 * @property {Function} reject
 */ $01e1b522459c941a$exports = class SocketRequest {
    /**
   * @param {Object} options
   * @param {number} options.requestTimeout
   * @param {string} options.broker - e.g: 127.0.0.1:9092
   * @param {string} options.clientId
   * @param {RequestEntry} options.entry
   * @param {boolean} options.expectResponse
   * @param {Function} options.send
   * @param {() => void} options.timeout
   * @param {import("../../instrumentation/emitter")} [options.instrumentationEmitter=null]
   */ constructor({ requestTimeout: requestTimeout, broker: broker, clientId: clientId, entry: entry, expectResponse: expectResponse, send: send, timeout: timeout, instrumentationEmitter: instrumentationEmitter = null }){
        this.createdAt = Date.now();
        this.requestTimeout = requestTimeout;
        this.broker = broker;
        this.clientId = clientId;
        this.entry = entry;
        this.correlationId = entry.correlationId;
        this.expectResponse = expectResponse;
        this.sendRequest = send;
        this.timeoutHandler = timeout;
        this.sentAt = null;
        this.duration = null;
        this.pendingDuration = null;
        this[$01e1b522459c941a$var$PRIVATE.STATE] = $01e1b522459c941a$var$REQUEST_STATE.PENDING;
        this[$01e1b522459c941a$var$PRIVATE.EMIT_EVENT] = (eventName, payload)=>instrumentationEmitter && instrumentationEmitter.emit(eventName, payload);
    }
    send() {
        this.throwIfInvalidState({
            accepted: [
                $01e1b522459c941a$var$REQUEST_STATE.PENDING
            ],
            next: $01e1b522459c941a$var$REQUEST_STATE.SENT
        });
        this.sendRequest();
        this.sentAt = Date.now();
        this.pendingDuration = this.sentAt - this.createdAt;
        this[$01e1b522459c941a$var$PRIVATE.STATE] = $01e1b522459c941a$var$REQUEST_STATE.SENT;
    }
    timeoutRequest() {
        const { apiName: apiName, apiKey: apiKey, apiVersion: apiVersion } = this.entry;
        const requestInfo = `${apiName}(key: ${apiKey}, version: ${apiVersion})`;
        const eventData = {
            broker: this.broker,
            clientId: this.clientId,
            correlationId: this.correlationId,
            createdAt: this.createdAt,
            sentAt: this.sentAt,
            pendingDuration: this.pendingDuration
        };
        this.timeoutHandler();
        this.rejected(new $01e1b522459c941a$require$KafkaJSRequestTimeoutError(`Request ${requestInfo} timed out`, eventData));
        this[$01e1b522459c941a$var$PRIVATE.EMIT_EVENT]($1da109fb7a6eab1e$exports.NETWORK_REQUEST_TIMEOUT, {
            ...eventData,
            apiName: apiName,
            apiKey: apiKey,
            apiVersion: apiVersion
        });
    }
    completed({ size: size, payload: payload }) {
        this.throwIfInvalidState({
            accepted: [
                $01e1b522459c941a$var$REQUEST_STATE.SENT
            ],
            next: $01e1b522459c941a$var$REQUEST_STATE.COMPLETED
        });
        const { entry: entry, correlationId: correlationId, broker: broker, clientId: clientId, createdAt: createdAt, sentAt: sentAt, pendingDuration: pendingDuration } = this;
        this[$01e1b522459c941a$var$PRIVATE.STATE] = $01e1b522459c941a$var$REQUEST_STATE.COMPLETED;
        this.duration = Date.now() - this.sentAt;
        entry.resolve({
            correlationId: correlationId,
            entry: entry,
            size: size,
            payload: payload
        });
        this[$01e1b522459c941a$var$PRIVATE.EMIT_EVENT]($1da109fb7a6eab1e$exports.NETWORK_REQUEST, {
            broker: broker,
            clientId: clientId,
            correlationId: correlationId,
            size: size,
            createdAt: createdAt,
            sentAt: sentAt,
            pendingDuration: pendingDuration,
            duration: this.duration,
            apiName: entry.apiName,
            apiKey: entry.apiKey,
            apiVersion: entry.apiVersion
        });
    }
    rejected(error) {
        this.throwIfInvalidState({
            accepted: [
                $01e1b522459c941a$var$REQUEST_STATE.PENDING,
                $01e1b522459c941a$var$REQUEST_STATE.SENT
            ],
            next: $01e1b522459c941a$var$REQUEST_STATE.REJECTED
        });
        this[$01e1b522459c941a$var$PRIVATE.STATE] = $01e1b522459c941a$var$REQUEST_STATE.REJECTED;
        this.duration = Date.now() - this.sentAt;
        this.entry.reject(error);
    }
    /**
   * @private
   */ throwIfInvalidState({ accepted: accepted, next: next }) {
        if (accepted.includes(this[$01e1b522459c941a$var$PRIVATE.STATE])) return;
        const current = this[$01e1b522459c941a$var$PRIVATE.STATE].toString();
        throw new $01e1b522459c941a$require$KafkaJSNonRetriableError(`Invalid state, can't transition from ${current} to ${next.toString()}`);
    }
};




var $8mQRr = parcelRequire("8mQRr");
var $0421ea4eb7cf95ef$require$KafkaJSInvariantViolation = $8mQRr.KafkaJSInvariantViolation;
const $0421ea4eb7cf95ef$var$PRIVATE = {
    EMIT_QUEUE_SIZE_EVENT: Symbol("private:RequestQueue:emitQueueSizeEvent"),
    EMIT_REQUEST_QUEUE_EMPTY: Symbol("private:RequestQueue:emitQueueEmpty")
};
const $0421ea4eb7cf95ef$var$REQUEST_QUEUE_EMPTY = "requestQueueEmpty";
const $0421ea4eb7cf95ef$var$CHECK_PENDING_REQUESTS_INTERVAL = 10;
$0421ea4eb7cf95ef$exports = class RequestQueue extends $0421ea4eb7cf95ef$require$EventEmitter {
    /**
   * @param {Object} options
   * @param {number} options.maxInFlightRequests
   * @param {number} options.requestTimeout
   * @param {boolean} options.enforceRequestTimeout
   * @param {string} options.clientId
   * @param {string} options.broker
   * @param {import("../../../types").Logger} options.logger
   * @param {import("../../instrumentation/emitter")} [options.instrumentationEmitter=null]
   * @param {() => boolean} [options.isConnected]
   */ constructor({ instrumentationEmitter: instrumentationEmitter = null, maxInFlightRequests: maxInFlightRequests, requestTimeout: requestTimeout, enforceRequestTimeout: enforceRequestTimeout, clientId: clientId, broker: broker, logger: logger, isConnected: isConnected = ()=>true }){
        super();
        this.instrumentationEmitter = instrumentationEmitter;
        this.maxInFlightRequests = maxInFlightRequests;
        this.requestTimeout = requestTimeout;
        this.enforceRequestTimeout = enforceRequestTimeout;
        this.clientId = clientId;
        this.broker = broker;
        this.logger = logger;
        this.isConnected = isConnected;
        this.inflight = new Map();
        this.pending = [];
        /**
     * Until when this request queue is throttled and shouldn't send requests
     *
     * The value represents the timestamp of the end of the throttling in ms-since-epoch. If the value
     * is smaller than the current timestamp no throttling is active.
     *
     * @type {number}
     */ this.throttledUntil = -1;
        /**
     * Timeout id if we have scheduled a check for pending requests due to client-side throttling
     *
     * @type {null|NodeJS.Timeout}
     */ this.throttleCheckTimeoutId = null;
        this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_REQUEST_QUEUE_EMPTY] = ()=>{
            if (this.pending.length === 0 && this.inflight.size === 0) this.emit($0421ea4eb7cf95ef$var$REQUEST_QUEUE_EMPTY);
        };
        this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_QUEUE_SIZE_EVENT] = ()=>{
            instrumentationEmitter && instrumentationEmitter.emit($1da109fb7a6eab1e$exports.NETWORK_REQUEST_QUEUE_SIZE, {
                broker: this.broker,
                clientId: this.clientId,
                queueSize: this.pending.length
            });
            this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_REQUEST_QUEUE_EMPTY]();
        };
    }
    /**
   * @public
   */ scheduleRequestTimeoutCheck() {
        if (this.enforceRequestTimeout) {
            this.destroy();
            this.requestTimeoutIntervalId = setInterval(()=>{
                this.inflight.forEach((request)=>{
                    if (Date.now() - request.sentAt > request.requestTimeout) request.timeoutRequest();
                });
                if (!this.isConnected()) this.destroy();
            }, Math.min(this.requestTimeout, 100));
        }
    }
    maybeThrottle(clientSideThrottleTime) {
        if (clientSideThrottleTime !== null && clientSideThrottleTime > 0) {
            this.logger.debug(`Client side throttling in effect for ${clientSideThrottleTime}ms`);
            const minimumThrottledUntil = Date.now() + clientSideThrottleTime;
            this.throttledUntil = Math.max(minimumThrottledUntil, this.throttledUntil);
        }
    }
    createSocketRequest(pushedRequest) {
        const { correlationId: correlationId } = pushedRequest.entry;
        const defaultRequestTimeout = this.requestTimeout;
        const customRequestTimeout = pushedRequest.requestTimeout;
        // Some protocol requests have custom request timeouts (e.g JoinGroup, Fetch, etc). The custom
        // timeouts are influenced by user configurations, which can be lower than the default requestTimeout
        const requestTimeout = Math.max(defaultRequestTimeout, customRequestTimeout || 0);
        const socketRequest = new $01e1b522459c941a$exports({
            entry: pushedRequest.entry,
            expectResponse: pushedRequest.expectResponse,
            broker: this.broker,
            clientId: this.clientId,
            instrumentationEmitter: this.instrumentationEmitter,
            requestTimeout: requestTimeout,
            send: ()=>{
                if (this.inflight.has(correlationId)) throw new $0421ea4eb7cf95ef$require$KafkaJSInvariantViolation("Correlation id already exists");
                this.inflight.set(correlationId, socketRequest);
                pushedRequest.sendRequest();
            },
            timeout: ()=>{
                this.inflight.delete(correlationId);
                this.checkPendingRequests();
                // Try to emit REQUEST_QUEUE_EMPTY. Otherwise, waitForPendingRequests may stuck forever
                this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_REQUEST_QUEUE_EMPTY]();
            }
        });
        return socketRequest;
    }
    /**
   * @typedef {Object} PushedRequest
   * @property {import("./socketRequest").RequestEntry} entry
   * @property {boolean} expectResponse
   * @property {Function} sendRequest
   * @property {number} [requestTimeout]
   *
   * @public
   * @param {PushedRequest} pushedRequest
   */ push(pushedRequest) {
        const { correlationId: correlationId } = pushedRequest.entry;
        const socketRequest = this.createSocketRequest(pushedRequest);
        if (this.canSendSocketRequestImmediately()) {
            this.sendSocketRequest(socketRequest);
            return;
        }
        this.pending.push(socketRequest);
        this.scheduleCheckPendingRequests();
        this.logger.debug(`Request enqueued`, {
            clientId: this.clientId,
            broker: this.broker,
            correlationId: correlationId
        });
        this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_QUEUE_SIZE_EVENT]();
    }
    /**
   * @param {SocketRequest} socketRequest
   */ sendSocketRequest(socketRequest) {
        socketRequest.send();
        if (!socketRequest.expectResponse) {
            this.logger.debug(`Request does not expect a response, resolving immediately`, {
                clientId: this.clientId,
                broker: this.broker,
                correlationId: socketRequest.correlationId
            });
            this.inflight.delete(socketRequest.correlationId);
            socketRequest.completed({
                size: 0,
                payload: null
            });
        }
    }
    /**
   * @public
   * @param {object} response
   * @param {number} response.correlationId
   * @param {Buffer} response.payload
   * @param {number} response.size
   */ fulfillRequest({ correlationId: correlationId, payload: payload, size: size }) {
        const socketRequest = this.inflight.get(correlationId);
        this.inflight.delete(correlationId);
        this.checkPendingRequests();
        if (socketRequest) socketRequest.completed({
            size: size,
            payload: payload
        });
        else this.logger.warn(`Response without match`, {
            clientId: this.clientId,
            broker: this.broker,
            correlationId: correlationId
        });
        this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_REQUEST_QUEUE_EMPTY]();
    }
    /**
   * @public
   * @param {Error} error
   */ rejectAll(error) {
        const requests = [
            ...this.inflight.values(),
            ...this.pending
        ];
        for (const socketRequest of requests){
            socketRequest.rejected(error);
            this.inflight.delete(socketRequest.correlationId);
        }
        this.pending = [];
        this.inflight.clear();
        this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_QUEUE_SIZE_EVENT]();
    }
    /**
   * @public
   */ waitForPendingRequests() {
        return new Promise((resolve)=>{
            if (this.pending.length === 0 && this.inflight.size === 0) return resolve();
            this.logger.debug("Waiting for pending requests", {
                clientId: this.clientId,
                broker: this.broker,
                currentInflightRequests: this.inflight.size,
                currentPendingQueueSize: this.pending.length
            });
            this.once($0421ea4eb7cf95ef$var$REQUEST_QUEUE_EMPTY, ()=>resolve());
        });
    }
    /**
   * @public
   */ destroy() {
        clearInterval(this.requestTimeoutIntervalId);
        clearTimeout(this.throttleCheckTimeoutId);
        this.throttleCheckTimeoutId = null;
    }
    canSendSocketRequestImmediately() {
        const shouldEnqueue = this.maxInFlightRequests != null && this.inflight.size >= this.maxInFlightRequests || this.throttledUntil > Date.now();
        return !shouldEnqueue;
    }
    /**
   * Check and process pending requests either now or in the future
   *
   * This function will send out as many pending requests as possible taking throttling and
   * in-flight limits into account.
   */ checkPendingRequests() {
        while(this.pending.length > 0 && this.canSendSocketRequestImmediately()){
            const pendingRequest = this.pending.shift() // first in first out
            ;
            this.sendSocketRequest(pendingRequest);
            this.logger.debug(`Consumed pending request`, {
                clientId: this.clientId,
                broker: this.broker,
                correlationId: pendingRequest.correlationId,
                pendingDuration: pendingRequest.pendingDuration,
                currentPendingQueueSize: this.pending.length
            });
            this[$0421ea4eb7cf95ef$var$PRIVATE.EMIT_QUEUE_SIZE_EVENT]();
        }
        this.scheduleCheckPendingRequests();
    }
    /**
   * Ensure that pending requests will be checked in the future
   *
   * If there is a client-side throttling in place this will ensure that we will check
   * the pending request queue eventually.
   */ scheduleCheckPendingRequests() {
        // If we're throttled: Schedule checkPendingRequests when the throttle
        // should be resolved. If there is already something scheduled we assume that that
        // will be fine, and potentially fix up a new timeout if needed at that time.
        // Note that if we're merely "overloaded" by having too many inflight requests
        // we will anyways check the queue when one of them gets fulfilled.
        let scheduleAt = this.throttledUntil - Date.now();
        if (!this.throttleCheckTimeoutId) {
            if (this.pending.length > 0) scheduleAt = scheduleAt > 0 ? scheduleAt : $0421ea4eb7cf95ef$var$CHECK_PENDING_REQUESTS_INTERVAL;
            this.throttleCheckTimeoutId = setTimeout(()=>{
                this.throttleCheckTimeoutId = null;
                this.checkPendingRequests();
            }, scheduleAt);
        }
    }
};


var $f5edce9d80bea2fc$exports = {};
const $f5edce9d80bea2fc$var$CONNECTION_STATUS = {
    CONNECTED: "connected",
    DISCONNECTING: "disconnecting",
    DISCONNECTED: "disconnected"
};
const $f5edce9d80bea2fc$var$CONNECTED_STATUS = [
    $f5edce9d80bea2fc$var$CONNECTION_STATUS.CONNECTED,
    $f5edce9d80bea2fc$var$CONNECTION_STATUS.DISCONNECTING
];
$f5edce9d80bea2fc$exports = {
    CONNECTION_STATUS: $f5edce9d80bea2fc$var$CONNECTION_STATUS,
    CONNECTED_STATUS: $f5edce9d80bea2fc$var$CONNECTED_STATUS
};


var $307d10c104ac50ee$require$CONNECTION_STATUS = $f5edce9d80bea2fc$exports.CONNECTION_STATUS;
var $307d10c104ac50ee$require$CONNECTED_STATUS = $f5edce9d80bea2fc$exports.CONNECTED_STATUS;


var $dSqZK = parcelRequire("dSqZK");
var $a8d5d52d701f99af$exports = {};

var $a8d5d52d701f99af$require$requests = $f290d474eda1720c$exports.requests;
var $a8d5d52d701f99af$require$lookup = $f290d474eda1720c$exports.lookup;

var $9kH2s = parcelRequire("9kH2s");
var $587b1b13536090b9$exports = {};
var $bc8cced503e15429$exports = {};


$bc8cced503e15429$exports = {
    request: (parcelRequire("lllq3")),
    response: (parcelRequire("3acug"))
};


var $587b1b13536090b9$require$request = $bc8cced503e15429$exports.request;
var $587b1b13536090b9$require$response = $bc8cced503e15429$exports.response;

var $8mQRr = parcelRequire("8mQRr");
var $587b1b13536090b9$require$KafkaJSSASLAuthenticationError = $8mQRr.KafkaJSSASLAuthenticationError;
const $587b1b13536090b9$var$plainAuthenticatorProvider = (sasl)=>({ host: host, port: port, logger: logger, saslAuthenticate: saslAuthenticate })=>{
        return {
            authenticate: async ()=>{
                if (sasl.username == null || sasl.password == null) throw new $587b1b13536090b9$require$KafkaJSSASLAuthenticationError("SASL Plain: Invalid username or password");
                const broker = `${host}:${port}`;
                try {
                    logger.debug("Authenticate with SASL PLAIN", {
                        broker: broker
                    });
                    await saslAuthenticate({
                        request: $587b1b13536090b9$require$request(sasl),
                        response: $587b1b13536090b9$require$response
                    });
                    logger.debug("SASL PLAIN authentication successful", {
                        broker: broker
                    });
                } catch (e) {
                    const error = new $587b1b13536090b9$require$KafkaJSSASLAuthenticationError(`SASL PLAIN authentication failed: ${e.message}`);
                    logger.error(error.message, {
                        broker: broker
                    });
                    throw error;
                }
            }
        };
    };
$587b1b13536090b9$exports = $587b1b13536090b9$var$plainAuthenticatorProvider;


var $6cec6c56f61b0f0c$exports = {};
var $516e0c11afbe046e$exports = {};

var $516e0c11afbe046e$require$Buffer = $4UN2M$buffer.Buffer;

var $21dc70c5b1385750$exports = {};




$21dc70c5b1385750$exports = {
    firstMessage: {
        request: (parcelRequire("bgpfe")),
        response: (parcelRequire("2zteB"))
    },
    finalMessage: {
        request: (parcelRequire("7BNGP")),
        response: (parcelRequire("72x96"))
    }
};



var $8mQRr = parcelRequire("8mQRr");
var $516e0c11afbe046e$require$KafkaJSSASLAuthenticationError = $8mQRr.KafkaJSSASLAuthenticationError;
var $516e0c11afbe046e$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
const $516e0c11afbe046e$var$GS2_HEADER = "n,,";
const $516e0c11afbe046e$var$EQUAL_SIGN_REGEX = /=/g;
const $516e0c11afbe046e$var$COMMA_SIGN_REGEX = /,/g;
const $516e0c11afbe046e$var$URLSAFE_BASE64_PLUS_REGEX = /\+/g;
const $516e0c11afbe046e$var$URLSAFE_BASE64_SLASH_REGEX = /\//g;
const $516e0c11afbe046e$var$URLSAFE_BASE64_TRAILING_EQUAL_REGEX = /=+$/;
const $516e0c11afbe046e$var$HMAC_CLIENT_KEY = "Client Key";
const $516e0c11afbe046e$var$HMAC_SERVER_KEY = "Server Key";
const $516e0c11afbe046e$var$DIGESTS = {
    SHA256: {
        length: 32,
        type: "sha256",
        minIterations: 4096
    },
    SHA512: {
        length: 64,
        type: "sha512",
        minIterations: 4096
    }
};
const $516e0c11afbe046e$var$encode64 = (str)=>$516e0c11afbe046e$require$Buffer.from(str).toString("base64");
class $516e0c11afbe046e$var$SCRAM {
    /**
   * From https://tools.ietf.org/html/rfc5802#section-5.1
   *
   * The characters ',' or '=' in usernames are sent as '=2C' and
   * '=3D' respectively.  If the server receives a username that
   * contains '=' not followed by either '2C' or '3D', then the
   * server MUST fail the authentication.
   *
   * @returns {String}
   */ static sanitizeString(str) {
        return str.replace($516e0c11afbe046e$var$EQUAL_SIGN_REGEX, "=3D").replace($516e0c11afbe046e$var$COMMA_SIGN_REGEX, "=2C");
    }
    /**
   * In cryptography, a nonce is an arbitrary number that can be used just once.
   * It is similar in spirit to a nonce * word, hence the name. It is often a random or pseudo-random
   * number issued in an authentication protocol to * ensure that old communications cannot be reused
   * in replay attacks.
   *
   * @returns {String}
   */ static nonce() {
        return $4UN2M$crypto.randomBytes(16).toString("base64").replace($516e0c11afbe046e$var$URLSAFE_BASE64_PLUS_REGEX, "-") // make it url safe
        .replace($516e0c11afbe046e$var$URLSAFE_BASE64_SLASH_REGEX, "_").replace($516e0c11afbe046e$var$URLSAFE_BASE64_TRAILING_EQUAL_REGEX, "").toString("ascii");
    }
    /**
   * Hi() is, essentially, PBKDF2 [RFC2898] with HMAC() as the
   * pseudorandom function (PRF) and with dkLen == output length of
   * HMAC() == output length of H()
   *
   * @returns {Promise<Buffer>}
   */ static hi(password, salt, iterations, digestDefinition) {
        return new Promise((resolve, reject)=>{
            $4UN2M$crypto.pbkdf2(password, salt, iterations, digestDefinition.length, digestDefinition.type, (err, derivedKey)=>err ? reject(err) : resolve(derivedKey));
        });
    }
    /**
   * Apply the exclusive-or operation to combine the octet string
   * on the left of this operator with the octet string on the right of
   * this operator.  The length of the output and each of the two
   * inputs will be the same for this use
   *
   * @returns {Buffer}
   */ static xor(left, right) {
        const bufferA = $516e0c11afbe046e$require$Buffer.from(left);
        const bufferB = $516e0c11afbe046e$require$Buffer.from(right);
        const length = $516e0c11afbe046e$require$Buffer.byteLength(bufferA);
        if (length !== $516e0c11afbe046e$require$Buffer.byteLength(bufferB)) throw new $516e0c11afbe046e$require$KafkaJSNonRetriableError("Buffers must be of the same length");
        const result = [];
        for(let i = 0; i < length; i++)result.push(bufferA[i] ^ bufferB[i]);
        return $516e0c11afbe046e$require$Buffer.from(result);
    }
    /**
   * @param {SASLOptions} sasl
   * @param {Logger} logger
   * @param {Function} saslAuthenticate
   * @param {DigestDefinition} digestDefinition
   */ constructor(sasl, host, port, logger, saslAuthenticate, digestDefinition){
        this.sasl = sasl;
        this.host = host;
        this.port = port;
        this.logger = logger;
        this.saslAuthenticate = saslAuthenticate;
        this.digestDefinition = digestDefinition;
        const digestType = digestDefinition.type.toUpperCase();
        this.PREFIX = `SASL SCRAM ${digestType} authentication`;
        this.currentNonce = $516e0c11afbe046e$var$SCRAM.nonce();
    }
    async authenticate() {
        const { PREFIX: PREFIX } = this;
        const broker = `${this.host}:${this.port}`;
        if (this.sasl.username == null || this.sasl.password == null) throw new $516e0c11afbe046e$require$KafkaJSSASLAuthenticationError(`${this.PREFIX}: Invalid username or password`);
        try {
            this.logger.debug("Exchanging first client message", {
                broker: broker
            });
            const clientMessageResponse = await this.sendClientFirstMessage();
            this.logger.debug("Sending final message", {
                broker: broker
            });
            const finalResponse = await this.sendClientFinalMessage(clientMessageResponse);
            if (finalResponse.e) throw new Error(finalResponse.e);
            const serverKey = await this.serverKey(clientMessageResponse);
            const serverSignature = this.serverSignature(serverKey, clientMessageResponse);
            if (finalResponse.v !== serverSignature) throw new Error("Invalid server signature in server final message");
            this.logger.debug(`${PREFIX} successful`, {
                broker: broker
            });
        } catch (e) {
            const error = new $516e0c11afbe046e$require$KafkaJSSASLAuthenticationError(`${PREFIX} failed: ${e.message}`);
            this.logger.error(error.message, {
                broker: broker
            });
            throw error;
        }
    }
    /**
   * @private
   */ async sendClientFirstMessage() {
        const clientFirstMessage = `${$516e0c11afbe046e$var$GS2_HEADER}${this.firstMessageBare()}`;
        const request = $21dc70c5b1385750$exports.firstMessage.request({
            clientFirstMessage: clientFirstMessage
        });
        const response = $21dc70c5b1385750$exports.firstMessage.response;
        return this.saslAuthenticate({
            request: request,
            response: response
        });
    }
    /**
   * @private
   */ async sendClientFinalMessage(clientMessageResponse) {
        const { PREFIX: PREFIX } = this;
        const iterations = parseInt(clientMessageResponse.i, 10);
        const { minIterations: minIterations } = this.digestDefinition;
        if (!clientMessageResponse.r.startsWith(this.currentNonce)) throw new $516e0c11afbe046e$require$KafkaJSSASLAuthenticationError(`${PREFIX} failed: Invalid server nonce, it does not start with the client nonce`);
        if (iterations < minIterations) throw new $516e0c11afbe046e$require$KafkaJSSASLAuthenticationError(`${PREFIX} failed: Requested iterations ${iterations} is less than the minimum ${minIterations}`);
        const finalMessageWithoutProof = this.finalMessageWithoutProof(clientMessageResponse);
        const clientProof = await this.clientProof(clientMessageResponse);
        const finalMessage = `${finalMessageWithoutProof},p=${clientProof}`;
        const request = $21dc70c5b1385750$exports.finalMessage.request({
            finalMessage: finalMessage
        });
        const response = $21dc70c5b1385750$exports.finalMessage.response;
        return this.saslAuthenticate({
            request: request,
            response: response
        });
    }
    /**
   * @private
   */ async clientProof(clientMessageResponse) {
        const clientKey = await this.clientKey(clientMessageResponse);
        const storedKey = this.H(clientKey);
        const clientSignature = this.clientSignature(storedKey, clientMessageResponse);
        return $516e0c11afbe046e$var$encode64($516e0c11afbe046e$var$SCRAM.xor(clientKey, clientSignature));
    }
    /**
   * @private
   */ async clientKey(clientMessageResponse) {
        const saltedPassword = await this.saltPassword(clientMessageResponse);
        return this.HMAC(saltedPassword, $516e0c11afbe046e$var$HMAC_CLIENT_KEY);
    }
    /**
   * @private
   */ async serverKey(clientMessageResponse) {
        const saltedPassword = await this.saltPassword(clientMessageResponse);
        return this.HMAC(saltedPassword, $516e0c11afbe046e$var$HMAC_SERVER_KEY);
    }
    /**
   * @private
   */ clientSignature(storedKey, clientMessageResponse) {
        return this.HMAC(storedKey, this.authMessage(clientMessageResponse));
    }
    /**
   * @private
   */ serverSignature(serverKey, clientMessageResponse) {
        return $516e0c11afbe046e$var$encode64(this.HMAC(serverKey, this.authMessage(clientMessageResponse)));
    }
    /**
   * @private
   */ authMessage(clientMessageResponse) {
        return [
            this.firstMessageBare(),
            clientMessageResponse.original,
            this.finalMessageWithoutProof(clientMessageResponse)
        ].join(",");
    }
    /**
   * @private
   */ async saltPassword(clientMessageResponse) {
        const salt = $516e0c11afbe046e$require$Buffer.from(clientMessageResponse.s, "base64");
        const iterations = parseInt(clientMessageResponse.i, 10);
        return $516e0c11afbe046e$var$SCRAM.hi(this.encodedPassword(), salt, iterations, this.digestDefinition);
    }
    /**
   * @private
   */ firstMessageBare() {
        return `n=${this.encodedUsername()},r=${this.currentNonce}`;
    }
    /**
   * @private
   */ finalMessageWithoutProof(clientMessageResponse) {
        const rnonce = clientMessageResponse.r;
        return `c=${$516e0c11afbe046e$var$encode64($516e0c11afbe046e$var$GS2_HEADER)},r=${rnonce}`;
    }
    /**
   * @private
   */ encodedUsername() {
        const { username: username } = this.sasl;
        return $516e0c11afbe046e$var$SCRAM.sanitizeString(username).toString("utf-8");
    }
    /**
   * @private
   */ encodedPassword() {
        const { password: password } = this.sasl;
        return password.toString("utf-8");
    }
    /**
   * @private
   */ H(data) {
        return $4UN2M$crypto.createHash(this.digestDefinition.type).update(data).digest();
    }
    /**
   * @private
   */ HMAC(key, data) {
        return $4UN2M$crypto.createHmac(this.digestDefinition.type, key).update(data).digest();
    }
}
$516e0c11afbe046e$exports = {
    DIGESTS: $516e0c11afbe046e$var$DIGESTS,
    SCRAM: $516e0c11afbe046e$var$SCRAM
};


var $6cec6c56f61b0f0c$require$SCRAM = $516e0c11afbe046e$exports.SCRAM;
var $6cec6c56f61b0f0c$require$DIGESTS = $516e0c11afbe046e$exports.DIGESTS;
const $6cec6c56f61b0f0c$var$scram256AuthenticatorProvider = (sasl)=>({ host: host, port: port, logger: logger, saslAuthenticate: saslAuthenticate })=>{
        const scram = new $6cec6c56f61b0f0c$require$SCRAM(sasl, host, port, logger, saslAuthenticate, $6cec6c56f61b0f0c$require$DIGESTS.SHA256);
        return {
            authenticate: async ()=>await scram.authenticate()
        };
    };
$6cec6c56f61b0f0c$exports = $6cec6c56f61b0f0c$var$scram256AuthenticatorProvider;


var $b3fda519d2400f1d$exports = {};

var $b3fda519d2400f1d$require$SCRAM = $516e0c11afbe046e$exports.SCRAM;
var $b3fda519d2400f1d$require$DIGESTS = $516e0c11afbe046e$exports.DIGESTS;
const $b3fda519d2400f1d$var$scram512AuthenticatorProvider = (sasl)=>({ host: host, port: port, logger: logger, saslAuthenticate: saslAuthenticate })=>{
        const scram = new $b3fda519d2400f1d$require$SCRAM(sasl, host, port, logger, saslAuthenticate, $b3fda519d2400f1d$require$DIGESTS.SHA512);
        return {
            authenticate: async ()=>await scram.authenticate()
        };
    };
$b3fda519d2400f1d$exports = $b3fda519d2400f1d$var$scram512AuthenticatorProvider;


var $670865d7a30184c7$exports = {};
var $5fe69ddc26d38f85$exports = {};


$5fe69ddc26d38f85$exports = {
    request: (parcelRequire("1nLjt")),
    response: (parcelRequire("fO2bE"))
};


var $670865d7a30184c7$require$request = $5fe69ddc26d38f85$exports.request;
var $670865d7a30184c7$require$response = $5fe69ddc26d38f85$exports.response;

var $8mQRr = parcelRequire("8mQRr");
var $670865d7a30184c7$require$KafkaJSSASLAuthenticationError = $8mQRr.KafkaJSSASLAuthenticationError;
const $670865d7a30184c7$var$awsIAMAuthenticatorProvider = (sasl)=>({ host: host, port: port, logger: logger, saslAuthenticate: saslAuthenticate })=>{
        return {
            authenticate: async ()=>{
                if (!sasl.authorizationIdentity) throw new $670865d7a30184c7$require$KafkaJSSASLAuthenticationError("SASL AWS-IAM: Missing authorizationIdentity");
                if (!sasl.accessKeyId) throw new $670865d7a30184c7$require$KafkaJSSASLAuthenticationError("SASL AWS-IAM: Missing accessKeyId");
                if (!sasl.secretAccessKey) throw new $670865d7a30184c7$require$KafkaJSSASLAuthenticationError("SASL AWS-IAM: Missing secretAccessKey");
                if (!sasl.sessionToken) sasl.sessionToken = "";
                const broker = `${host}:${port}`;
                try {
                    logger.debug("Authenticate with SASL AWS-IAM", {
                        broker: broker
                    });
                    await saslAuthenticate({
                        request: $670865d7a30184c7$require$request(sasl),
                        response: $670865d7a30184c7$require$response
                    });
                    logger.debug("SASL AWS-IAM authentication successful", {
                        broker: broker
                    });
                } catch (e) {
                    const error = new $670865d7a30184c7$require$KafkaJSSASLAuthenticationError(`SASL AWS-IAM authentication failed: ${e.message}`);
                    logger.error(error.message, {
                        broker: broker
                    });
                    throw error;
                }
            }
        };
    };
$670865d7a30184c7$exports = $670865d7a30184c7$var$awsIAMAuthenticatorProvider;


var $bd047cc2e135f255$exports = {};
/**
 * The sasl object must include a property named oauthBearerProvider, an
 * async function that is used to return the OAuth bearer token.
 *
 * The OAuth bearer token must be an object with properties value and
 * (optionally) extensions, that will be sent during the SASL/OAUTHBEARER
 * request.
 *
 * The implementation of the oauthBearerProvider must take care that tokens are
 * reused and refreshed when appropriate.
 */ var $b288945f8db49eae$exports = {};


$b288945f8db49eae$exports = {
    request: (parcelRequire("9lKs7")),
    response: (parcelRequire("17UyB"))
};


var $bd047cc2e135f255$require$request = $b288945f8db49eae$exports.request;

var $8mQRr = parcelRequire("8mQRr");
var $bd047cc2e135f255$require$KafkaJSSASLAuthenticationError = $8mQRr.KafkaJSSASLAuthenticationError;
const $bd047cc2e135f255$var$oauthBearerAuthenticatorProvider = (sasl)=>({ host: host, port: port, logger: logger, saslAuthenticate: saslAuthenticate })=>{
        return {
            authenticate: async ()=>{
                const { oauthBearerProvider: oauthBearerProvider } = sasl;
                if (oauthBearerProvider == null) throw new $bd047cc2e135f255$require$KafkaJSSASLAuthenticationError("SASL OAUTHBEARER: Missing OAuth bearer token provider");
                const oauthBearerToken = await oauthBearerProvider();
                if (oauthBearerToken.value == null) throw new $bd047cc2e135f255$require$KafkaJSSASLAuthenticationError("SASL OAUTHBEARER: Invalid OAuth bearer token");
                const broker = `${host}:${port}`;
                try {
                    logger.debug("Authenticate with SASL OAUTHBEARER", {
                        broker: broker
                    });
                    await saslAuthenticate({
                        request: await $bd047cc2e135f255$require$request(sasl, oauthBearerToken)
                    });
                    logger.debug("SASL OAUTHBEARER authentication successful", {
                        broker: broker
                    });
                } catch (e) {
                    const error = new $bd047cc2e135f255$require$KafkaJSSASLAuthenticationError(`SASL OAUTHBEARER authentication failed: ${e.message}`);
                    logger.error(error.message, {
                        broker: broker
                    });
                    throw error;
                }
            }
        };
    };
$bd047cc2e135f255$exports = $bd047cc2e135f255$var$oauthBearerAuthenticatorProvider;



var $8mQRr = parcelRequire("8mQRr");
var $a8d5d52d701f99af$require$KafkaJSSASLAuthenticationError = $8mQRr.KafkaJSSASLAuthenticationError;
const $a8d5d52d701f99af$var$BUILT_IN_AUTHENTICATION_PROVIDERS = {
    AWS: $670865d7a30184c7$exports,
    PLAIN: $587b1b13536090b9$exports,
    OAUTHBEARER: $bd047cc2e135f255$exports,
    "SCRAM-SHA-256": $6cec6c56f61b0f0c$exports,
    "SCRAM-SHA-512": $b3fda519d2400f1d$exports
};
const $a8d5d52d701f99af$var$UNLIMITED_SESSION_LIFETIME = "0";
$a8d5d52d701f99af$exports = class SASLAuthenticator {
    constructor(connection, logger, versions, supportAuthenticationProtocol){
        this.connection = connection;
        this.logger = logger;
        this.sessionLifetime = $a8d5d52d701f99af$var$UNLIMITED_SESSION_LIFETIME;
        const lookupRequest = $a8d5d52d701f99af$require$lookup(versions);
        this.saslHandshake = lookupRequest($9kH2s.SaslHandshake, $a8d5d52d701f99af$require$requests.SaslHandshake);
        this.protocolAuthentication = supportAuthenticationProtocol ? lookupRequest($9kH2s.SaslAuthenticate, $a8d5d52d701f99af$require$requests.SaslAuthenticate) : null;
    }
    async authenticate() {
        const mechanism = this.connection.sasl.mechanism.toUpperCase();
        const handshake = await this.connection.send(this.saslHandshake({
            mechanism: mechanism
        }));
        if (!handshake.enabledMechanisms.includes(mechanism)) throw new $a8d5d52d701f99af$require$KafkaJSSASLAuthenticationError(`SASL ${mechanism} mechanism is not supported by the server`);
        const saslAuthenticate = async ({ request: request, response: response })=>{
            if (this.protocolAuthentication) {
                const requestAuthBytes = await request.encode();
                const authResponse = await this.connection.send(this.protocolAuthentication({
                    authBytes: requestAuthBytes
                }));
                // `0` is a string because `sessionLifetimeMs` is an int64 encoded as string.
                // This is not present in SaslAuthenticateV0, so we default to `"0"`
                this.sessionLifetime = authResponse.sessionLifetimeMs || $a8d5d52d701f99af$var$UNLIMITED_SESSION_LIFETIME;
                if (!response) return;
                const { authBytes: responseAuthBytes } = authResponse;
                const payloadDecoded = await response.decode(responseAuthBytes);
                return response.parse(payloadDecoded);
            }
            return this.connection.sendAuthRequest({
                request: request,
                response: response
            });
        };
        if (!this.connection.sasl.authenticationProvider && Object.keys($a8d5d52d701f99af$var$BUILT_IN_AUTHENTICATION_PROVIDERS).includes(mechanism)) this.connection.sasl.authenticationProvider = $a8d5d52d701f99af$var$BUILT_IN_AUTHENTICATION_PROVIDERS[mechanism](this.connection.sasl);
        await this.connection.sasl.authenticationProvider({
            host: this.connection.host,
            port: this.connection.port,
            logger: this.logger.namespace(`SaslAuthenticator-${mechanism}`),
            saslAuthenticate: saslAuthenticate
        }).authenticate();
    }
};



var $9kH2s = parcelRequire("9kH2s");
const $307d10c104ac50ee$var$requestInfo = ({ apiName: apiName, apiKey: apiKey, apiVersion: apiVersion })=>`${apiName}(key: ${apiKey}, version: ${apiVersion})`;
/**
 * @param request - request from protocol
 * @returns {boolean}
 */ const $307d10c104ac50ee$var$isAuthenticatedRequest = (request)=>{
    return ![
        $9kH2s.ApiVersions,
        $9kH2s.SaslHandshake,
        $9kH2s.SaslAuthenticate
    ].includes(request.apiKey);
};
const $307d10c104ac50ee$var$PRIVATE = {
    SHOULD_REAUTHENTICATE: Symbol("private:Connection:shouldReauthenticate"),
    AUTHENTICATE: Symbol("private:Connection:authenticate")
};
$307d10c104ac50ee$exports = class Connection {
    /**
   * @param {Object} options
   * @param {string} options.host
   * @param {number} options.port
   * @param {import("../../types").Logger} options.logger
   * @param {import("../../types").ISocketFactory} options.socketFactory
   * @param {string} [options.clientId='kafkajs']
   * @param {number} options.requestTimeout The maximum amount of time the client will wait for the response of a request,
   *                                in milliseconds
   * @param {string} [options.rack=null]
   * @param {Object} [options.ssl=null] Options for the TLS Secure Context. It accepts all options,
   *                            usually "cert", "key" and "ca". More information at
   *                            https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
   * @param {Object} [options.sasl=null] Attributes used for SASL authentication. Options based on the
   *                             key "mechanism". Connection is not actively using the SASL attributes
   *                             but acting as a data object for this information
   * @param {number} [options.reauthenticationThreshold=10000]
   * @param {number} options.connectionTimeout The connection timeout, in milliseconds
   * @param {boolean} [options.enforceRequestTimeout]
   * @param {number} [options.maxInFlightRequests=null] The maximum number of unacknowledged requests on a connection before
   *                                            enqueuing
   * @param {import("../instrumentation/emitter")} [options.instrumentationEmitter=null]
   */ constructor({ host: host, port: port, logger: logger, socketFactory: socketFactory, requestTimeout: requestTimeout, reauthenticationThreshold: reauthenticationThreshold = 10000, rack: rack = null, ssl: ssl = null, sasl: sasl = null, clientId: clientId = "kafkajs", connectionTimeout: connectionTimeout, enforceRequestTimeout: enforceRequestTimeout = true, maxInFlightRequests: maxInFlightRequests = null, instrumentationEmitter: instrumentationEmitter = null }){
        this.host = host;
        this.port = port;
        this.rack = rack;
        this.clientId = clientId;
        this.broker = `${this.host}:${this.port}`;
        this.logger = logger.namespace("Connection");
        this.socketFactory = socketFactory;
        this.ssl = ssl;
        this.sasl = sasl;
        this.requestTimeout = requestTimeout;
        this.connectionTimeout = connectionTimeout;
        this.reauthenticationThreshold = reauthenticationThreshold;
        this.bytesBuffered = 0;
        this.bytesNeeded = $eMnPM.int32Size();
        this.chunks = [];
        this.connectionStatus = $307d10c104ac50ee$require$CONNECTION_STATUS.DISCONNECTED;
        this.correlationId = 0;
        this.requestQueue = new $0421ea4eb7cf95ef$exports({
            instrumentationEmitter: instrumentationEmitter,
            maxInFlightRequests: maxInFlightRequests,
            requestTimeout: requestTimeout,
            enforceRequestTimeout: enforceRequestTimeout,
            clientId: clientId,
            broker: this.broker,
            logger: logger.namespace("RequestQueue"),
            isConnected: ()=>this.isConnected()
        });
        this.versions = null;
        this.authHandlers = null;
        this.authExpectResponse = false;
        const log = (level)=>(message, extra = {})=>{
                const logFn = this.logger[level];
                logFn(message, {
                    broker: this.broker,
                    clientId: clientId,
                    ...extra
                });
            };
        this.logDebug = log("debug");
        this.logError = log("error");
        const env = $3ad2ac6bcbc31dbe$exports();
        this.shouldLogBuffers = env.KAFKAJS_DEBUG_PROTOCOL_BUFFERS === "1";
        this.shouldLogFetchBuffer = this.shouldLogBuffers && env.KAFKAJS_DEBUG_EXTENDED_PROTOCOL_BUFFERS === "1";
        this.authenticatedAt = null;
        this.sessionLifetime = $dSqZK.ZERO;
        this.supportAuthenticationProtocol = null;
        /**
     * @private
     * @returns {Promise}
     */ this[$307d10c104ac50ee$var$PRIVATE.AUTHENTICATE] = $9c89082ee7ce8fe3$exports(async ()=>{
            if (this.sasl && !this.isAuthenticated()) {
                const authenticator = new $a8d5d52d701f99af$exports(this, this.logger, this.versions, this.supportAuthenticationProtocol);
                await authenticator.authenticate();
                this.authenticatedAt = $4UN2M$process.hrtime();
                this.sessionLifetime = $dSqZK.fromValue(authenticator.sessionLifetime);
            }
        });
    }
    getSupportAuthenticationProtocol() {
        return this.supportAuthenticationProtocol;
    }
    setSupportAuthenticationProtocol(isSupported) {
        this.supportAuthenticationProtocol = isSupported;
    }
    setVersions(versions) {
        this.versions = versions;
    }
    isConnected() {
        return $307d10c104ac50ee$require$CONNECTED_STATUS.includes(this.connectionStatus);
    }
    /**
   * @public
   * @returns {Promise}
   */ connect() {
        return new Promise((resolve, reject)=>{
            if (this.isConnected()) return resolve(true);
            this.authenticatedAt = null;
            let timeoutId;
            const onConnect = ()=>{
                clearTimeout(timeoutId);
                this.connectionStatus = $307d10c104ac50ee$require$CONNECTION_STATUS.CONNECTED;
                this.requestQueue.scheduleRequestTimeoutCheck();
                resolve(true);
            };
            const onData = (data)=>{
                this.processData(data);
            };
            const onEnd = async ()=>{
                clearTimeout(timeoutId);
                const wasConnected = this.isConnected();
                if (this.authHandlers) this.authHandlers.onError();
                else if (wasConnected) {
                    this.logDebug("Kafka server has closed connection");
                    this.rejectRequests(new $307d10c104ac50ee$require$KafkaJSConnectionClosedError("Closed connection", {
                        host: this.host,
                        port: this.port
                    }));
                }
                await this.disconnect();
            };
            const onError = async (e)=>{
                clearTimeout(timeoutId);
                const error = new $307d10c104ac50ee$require$KafkaJSConnectionError(`Connection error: ${e.message}`, {
                    broker: `${this.host}:${this.port}`,
                    code: e.code
                });
                this.logError(error.message, {
                    stack: e.stack
                });
                this.rejectRequests(error);
                await this.disconnect();
                reject(error);
            };
            const onTimeout = async ()=>{
                const error = new $307d10c104ac50ee$require$KafkaJSConnectionError("Connection timeout", {
                    broker: `${this.host}:${this.port}`
                });
                this.logError(error.message);
                this.rejectRequests(error);
                await this.disconnect();
                reject(error);
            };
            this.logDebug(`Connecting`, {
                ssl: !!this.ssl,
                sasl: !!this.sasl
            });
            try {
                timeoutId = setTimeout(onTimeout, this.connectionTimeout);
                this.socket = $45d78345e761a7bd$exports({
                    socketFactory: this.socketFactory,
                    host: this.host,
                    port: this.port,
                    ssl: this.ssl,
                    onConnect: onConnect,
                    onData: onData,
                    onEnd: onEnd,
                    onError: onError,
                    onTimeout: onTimeout
                });
            } catch (e) {
                clearTimeout(timeoutId);
                reject(new $307d10c104ac50ee$require$KafkaJSConnectionError(`Failed to connect: ${e.message}`, {
                    broker: `${this.host}:${this.port}`
                }));
            }
        });
    }
    /**
   * @public
   * @returns {Promise}
   */ async disconnect() {
        this.authenticatedAt = null;
        this.connectionStatus = $307d10c104ac50ee$require$CONNECTION_STATUS.DISCONNECTING;
        this.logDebug("disconnecting...");
        await this.requestQueue.waitForPendingRequests();
        this.requestQueue.destroy();
        if (this.socket) {
            this.socket.end();
            this.socket.unref();
        }
        this.connectionStatus = $307d10c104ac50ee$require$CONNECTION_STATUS.DISCONNECTED;
        this.logDebug("disconnected");
        return true;
    }
    /**
   * @public
   * @returns {boolean}
   */ isAuthenticated() {
        return this.authenticatedAt != null && !this[$307d10c104ac50ee$var$PRIVATE.SHOULD_REAUTHENTICATE]();
    }
    /***
   * @private
   */ [$307d10c104ac50ee$var$PRIVATE.SHOULD_REAUTHENTICATE]() {
        if (this.sessionLifetime.equals($dSqZK.ZERO)) return false;
        if (this.authenticatedAt == null) return true;
        const [secondsSince, remainingNanosSince] = $4UN2M$process.hrtime(this.authenticatedAt);
        const millisSince = $dSqZK.fromValue(secondsSince).multiply(1000).add($dSqZK.fromValue(remainingNanosSince).divide(1000000));
        const reauthenticateAt = millisSince.add(this.reauthenticationThreshold);
        return reauthenticateAt.greaterThanOrEqual(this.sessionLifetime);
    }
    /** @public */ async authenticate() {
        await this[$307d10c104ac50ee$var$PRIVATE.AUTHENTICATE]();
    }
    /**
   * @public
   * @returns {Promise}
   */ sendAuthRequest({ request: request, response: response }) {
        this.authExpectResponse = !!response;
        /**
     * TODO: rewrite removing the async promise executor
     */ /* eslint-disable no-async-promise-executor */ return new Promise(async (resolve, reject)=>{
            this.authHandlers = {
                onSuccess: (rawData)=>{
                    this.authHandlers = null;
                    this.authExpectResponse = false;
                    response.decode(rawData).then((data)=>response.parse(data)).then(resolve).catch(reject);
                },
                onError: ()=>{
                    this.authHandlers = null;
                    this.authExpectResponse = false;
                    reject(new $307d10c104ac50ee$require$KafkaJSConnectionError("Connection closed by the server", {
                        broker: `${this.host}:${this.port}`
                    }));
                }
            };
            try {
                const requestPayload = await request.encode();
                this.failIfNotConnected();
                this.socket.write(requestPayload, "binary");
            } catch (e) {
                reject(e);
            }
        });
    }
    /**
   * @public
   * @param {object} protocol
   * @param {object} protocol.request It is defined by the protocol and consists of an object with "apiKey",
   *                         "apiVersion", "apiName" and an "encode" function. The encode function
   *                         must return an instance of Encoder
   *
   * @param {object} protocol.response It is defined by the protocol and consists of an object with two functions:
   *                          "decode" and "parse"
   *
   * @param {number} [protocol.requestTimeout=null] Override for the default requestTimeout
   * @param {boolean} [protocol.logResponseError=true] Whether to log errors
   * @returns {Promise<data>} where data is the return of "response#parse"
   */ async send({ request: request, response: response, requestTimeout: requestTimeout = null, logResponseError: logResponseError = true }) {
        if (!this.isAuthenticated() && $307d10c104ac50ee$var$isAuthenticatedRequest(request)) await this[$307d10c104ac50ee$var$PRIVATE.AUTHENTICATE]();
        this.failIfNotConnected();
        const expectResponse = !request.expectResponse || request.expectResponse();
        const sendRequest = async ()=>{
            const { clientId: clientId } = this;
            const correlationId = this.nextCorrelationId();
            const requestPayload = await $603ea6399a07fe6a$exports({
                request: request,
                correlationId: correlationId,
                clientId: clientId
            });
            const { apiKey: apiKey, apiName: apiName, apiVersion: apiVersion } = request;
            this.logDebug(`Request ${$307d10c104ac50ee$var$requestInfo(request)}`, {
                correlationId: correlationId,
                expectResponse: expectResponse,
                size: $307d10c104ac50ee$require$Buffer.byteLength(requestPayload.buffer)
            });
            return new Promise((resolve, reject)=>{
                try {
                    this.failIfNotConnected();
                    const entry = {
                        apiKey: apiKey,
                        apiName: apiName,
                        apiVersion: apiVersion,
                        correlationId: correlationId,
                        resolve: resolve,
                        reject: reject
                    };
                    this.requestQueue.push({
                        entry: entry,
                        expectResponse: expectResponse,
                        requestTimeout: requestTimeout,
                        sendRequest: ()=>{
                            this.socket.write(requestPayload.buffer, "binary");
                        }
                    });
                } catch (e) {
                    reject(e);
                }
            });
        };
        const { correlationId: correlationId, size: size, entry: entry, payload: payload } = await sendRequest();
        if (!expectResponse) return;
        try {
            const payloadDecoded = await response.decode(payload);
            /**
       * @see KIP-219
       * If the response indicates that the client-side needs to throttle, do that.
       */ this.requestQueue.maybeThrottle(payloadDecoded.clientSideThrottleTime);
            const data = await response.parse(payloadDecoded);
            const isFetchApi = entry.apiName === "Fetch";
            this.logDebug(`Response ${$307d10c104ac50ee$var$requestInfo(entry)}`, {
                correlationId: correlationId,
                size: size,
                data: isFetchApi && !this.shouldLogFetchBuffer ? "[filtered]" : data
            });
            return data;
        } catch (e) {
            if (logResponseError) this.logError(`Response ${$307d10c104ac50ee$var$requestInfo(entry)}`, {
                error: e.message,
                correlationId: correlationId,
                size: size
            });
            const isBuffer = $307d10c104ac50ee$require$Buffer.isBuffer(payload);
            this.logDebug(`Response ${$307d10c104ac50ee$var$requestInfo(entry)}`, {
                error: e.message,
                correlationId: correlationId,
                payload: isBuffer && !this.shouldLogBuffers ? {
                    type: "Buffer",
                    data: "[filtered]"
                } : payload
            });
            throw e;
        }
    }
    /**
   * @private
   */ failIfNotConnected() {
        if (!this.isConnected()) throw new $307d10c104ac50ee$require$KafkaJSConnectionError("Not connected", {
            broker: `${this.host}:${this.port}`
        });
    }
    /**
   * @private
   */ nextCorrelationId() {
        if (this.correlationId >= $307d10c104ac50ee$require$INT_32_MAX_VALUE) this.correlationId = 0;
        return this.correlationId++;
    }
    /**
   * @private
   */ processData(rawData) {
        if (this.authHandlers && !this.authExpectResponse) return this.authHandlers.onSuccess(rawData);
        // Accumulate the new chunk
        this.chunks.push(rawData);
        this.bytesBuffered += $307d10c104ac50ee$require$Buffer.byteLength(rawData);
        // Process data if there are enough bytes to read the expected response size,
        // otherwise keep buffering
        while(this.bytesNeeded <= this.bytesBuffered){
            const buffer = this.chunks.length > 1 ? $307d10c104ac50ee$require$Buffer.concat(this.chunks) : this.chunks[0];
            const decoder = new $eMnPM(buffer);
            const expectedResponseSize = decoder.readInt32();
            // Return early if not enough bytes to read the full response
            if (!decoder.canReadBytes(expectedResponseSize)) {
                this.chunks = [
                    buffer
                ];
                this.bytesBuffered = $307d10c104ac50ee$require$Buffer.byteLength(buffer);
                this.bytesNeeded = $eMnPM.int32Size() + expectedResponseSize;
                return;
            }
            const response = new $eMnPM(decoder.readBytes(expectedResponseSize));
            // Reset the buffered chunks as the rest of the bytes
            const remainderBuffer = decoder.readAll();
            this.chunks = [
                remainderBuffer
            ];
            this.bytesBuffered = $307d10c104ac50ee$require$Buffer.byteLength(remainderBuffer);
            this.bytesNeeded = $eMnPM.int32Size();
            if (this.authHandlers) {
                const rawResponseSize = $eMnPM.int32Size() + expectedResponseSize;
                const rawResponseBuffer = buffer.slice(0, rawResponseSize);
                return this.authHandlers.onSuccess(rawResponseBuffer);
            }
            const correlationId = response.readInt32();
            const payload = response.readAll();
            this.requestQueue.fulfillRequest({
                size: expectedResponseSize,
                correlationId: correlationId,
                payload: payload
            });
        }
    }
    /**
   * @private
   */ rejectRequests(error) {
        this.requestQueue.rejectAll(error);
    }
};


$f441aff4ed89627a$exports = class ConnectionPool {
    /**
   * @param {ConstructorParameters<typeof Connection>[0]} options
   */ constructor(options){
        this.logger = options.logger.namespace("ConnectionPool");
        this.connectionTimeout = options.connectionTimeout;
        this.host = options.host;
        this.port = options.port;
        this.rack = options.rack;
        this.ssl = options.ssl;
        this.sasl = options.sasl;
        this.clientId = options.clientId;
        this.socketFactory = options.socketFactory;
        this.pool = new Array(2).fill().map(()=>new $307d10c104ac50ee$exports(options));
    }
    isConnected() {
        return this.pool.some((c)=>c.isConnected());
    }
    isAuthenticated() {
        return this.pool.some((c)=>c.isAuthenticated());
    }
    setSupportAuthenticationProtocol(isSupported) {
        this.map((c)=>c.setSupportAuthenticationProtocol(isSupported));
    }
    setVersions(versions) {
        this.map((c)=>c.setVersions(versions));
    }
    map(callback) {
        return this.pool.map((c)=>callback(c));
    }
    async send(protocolRequest) {
        const connection = await this.getConnectionByRequest(protocolRequest);
        return connection.send(protocolRequest);
    }
    getConnectionByRequest({ request: { apiKey: apiKey } }) {
        const index = {
            [$9kH2s.Fetch]: 1
        }[apiKey] || 0;
        return this.getConnection(index);
    }
    async getConnection(index = 0) {
        const connection = this.pool[index];
        if (!connection.isConnected()) await connection.connect();
        return connection;
    }
    async destroy() {
        await Promise.all(this.map((c)=>c.disconnect()));
    }
};


/**
 * @typedef {Object} ConnectionPoolBuilder
 * @property {(destination?: { host?: string, port?: number, rack?: string }) => Promise<ConnectionPool>} build
 */ /**
 * @param {Object} options
 * @param {import("../../types").ISocketFactory} [options.socketFactory]
 * @param {string[]|(() => string[])} options.brokers
 * @param {Object} [options.ssl]
 * @param {Object} [options.sasl]
 * @param {string} options.clientId
 * @param {number} options.requestTimeout
 * @param {boolean} [options.enforceRequestTimeout]
 * @param {number} [options.connectionTimeout]
 * @param {number} [options.maxInFlightRequests]
 * @param {import("../../types").RetryOptions} [options.retry]
 * @param {import("../../types").Logger} options.logger
 * @param {import("../instrumentation/emitter")} [options.instrumentationEmitter]
 * @param {number} [options.reauthenticationThreshold]
 * @returns {ConnectionPoolBuilder}
 */ $4fc440e79dee3b30$exports = ({ socketFactory: socketFactory, brokers: brokers, ssl: ssl, sasl: sasl, clientId: clientId, requestTimeout: requestTimeout, enforceRequestTimeout: enforceRequestTimeout, connectionTimeout: connectionTimeout, maxInFlightRequests: maxInFlightRequests, logger: logger, instrumentationEmitter: instrumentationEmitter = null, reauthenticationThreshold: reauthenticationThreshold })=>{
    let index = 0;
    const isValidBroker = (broker)=>{
        return broker && typeof broker === "string" && broker.length > 0;
    };
    const validateBrokers = (brokers)=>{
        if (!brokers) throw new $4fc440e79dee3b30$require$KafkaJSNonRetriableError(`Failed to connect: brokers should not be null`);
        if (Array.isArray(brokers)) {
            if (!brokers.length) throw new $4fc440e79dee3b30$require$KafkaJSNonRetriableError(`Failed to connect: brokers array is empty`);
            brokers.forEach((broker, index)=>{
                if (!isValidBroker(broker)) throw new $4fc440e79dee3b30$require$KafkaJSNonRetriableError(`Failed to connect: broker at index ${index} is invalid "${typeof broker}"`);
            });
        }
    };
    const getBrokers = async ()=>{
        let list;
        if (typeof brokers === "function") try {
            list = await brokers();
        } catch (e) {
            const wrappedError = new $4fc440e79dee3b30$require$KafkaJSConnectionError(`Failed to connect: "config.brokers" threw: ${e.message}`);
            wrappedError.stack = `${wrappedError.name}\n  Caused by: ${e.stack}`;
            throw wrappedError;
        }
        else list = brokers;
        validateBrokers(list);
        return list;
    };
    return {
        build: async ({ host: host, port: port, rack: rack } = {})=>{
            if (!host) {
                const list = await getBrokers();
                const randomBroker = list[index++ % list.length];
                host = randomBroker.split(":")[0];
                port = Number(randomBroker.split(":")[1]);
            }
            return new $f441aff4ed89627a$exports({
                host: host,
                port: port,
                rack: rack,
                sasl: sasl,
                ssl: ssl,
                clientId: clientId,
                socketFactory: socketFactory,
                connectionTimeout: connectionTimeout,
                requestTimeout: requestTimeout,
                enforceRequestTimeout: enforceRequestTimeout,
                maxInFlightRequests: maxInFlightRequests,
                instrumentationEmitter: instrumentationEmitter,
                logger: logger,
                reauthenticationThreshold: reauthenticationThreshold
            });
        }
    };
};



var $dd751a346b077b84$require$EARLIEST_OFFSET = $b2095807cf05621c$exports.EARLIEST_OFFSET;
var $dd751a346b077b84$require$LATEST_OFFSET = $b2095807cf05621c$exports.LATEST_OFFSET;

var $8mQRr = parcelRequire("8mQRr");
var $dd751a346b077b84$require$KafkaJSError = $8mQRr.KafkaJSError;
var $dd751a346b077b84$require$KafkaJSBrokerNotFound = $8mQRr.KafkaJSBrokerNotFound;
var $dd751a346b077b84$require$KafkaJSMetadataNotLoaded = $8mQRr.KafkaJSMetadataNotLoaded;
var $dd751a346b077b84$require$KafkaJSTopicMetadataNotLoaded = $8mQRr.KafkaJSTopicMetadataNotLoaded;
var $dd751a346b077b84$require$KafkaJSGroupCoordinatorNotFound = $8mQRr.KafkaJSGroupCoordinatorNotFound;

var $iExfi = parcelRequire("iExfi");
const { keys: $dd751a346b077b84$var$keys } = Object;
const $dd751a346b077b84$var$mergeTopics = (obj, { topic: topic, partitions: partitions })=>({
        ...obj,
        [topic]: [
            ...obj[topic] || [],
            ...partitions
        ]
    });
const $dd751a346b077b84$var$PRIVATE = {
    CONNECT: Symbol("private:Cluster:connect"),
    REFRESH_METADATA: Symbol("private:Cluster:refreshMetadata"),
    REFRESH_METADATA_IF_NECESSARY: Symbol("private:Cluster:refreshMetadataIfNecessary"),
    FIND_CONTROLLER_BROKER: Symbol("private:Cluster:findControllerBroker")
};
$dd751a346b077b84$exports = class Cluster {
    /**
   * @param {Object} options
   * @param {Array<string>} options.brokers example: ['127.0.0.1:9092', '127.0.0.1:9094']
   * @param {Object} options.ssl
   * @param {Object} options.sasl
   * @param {string} options.clientId
   * @param {number} options.connectionTimeout - in milliseconds
   * @param {number} options.authenticationTimeout - in milliseconds
   * @param {number} options.reauthenticationThreshold - in milliseconds
   * @param {number} [options.requestTimeout=30000] - in milliseconds
   * @param {boolean} [options.enforceRequestTimeout]
   * @param {number} options.metadataMaxAge - in milliseconds
   * @param {boolean} options.allowAutoTopicCreation
   * @param {number} options.maxInFlightRequests
   * @param {number} options.isolationLevel
   * @param {import("../../types").RetryOptions} options.retry
   * @param {import("../../types").Logger} options.logger
   * @param {import("../../types").ISocketFactory} options.socketFactory
   * @param {Map} [options.offsets]
   * @param {import("../instrumentation/emitter")} [options.instrumentationEmitter=null]
   */ constructor({ logger: rootLogger, socketFactory: socketFactory, brokers: brokers, ssl: ssl, sasl: sasl, clientId: clientId, connectionTimeout: connectionTimeout, authenticationTimeout: authenticationTimeout, reauthenticationThreshold: reauthenticationThreshold, requestTimeout: requestTimeout = 30000, enforceRequestTimeout: enforceRequestTimeout, metadataMaxAge: metadataMaxAge, retry: retry, allowAutoTopicCreation: allowAutoTopicCreation, maxInFlightRequests: maxInFlightRequests, isolationLevel: isolationLevel, instrumentationEmitter: instrumentationEmitter = null, offsets: offsets = new Map() }){
        this.rootLogger = rootLogger;
        this.logger = rootLogger.namespace("Cluster");
        this.retrier = $d1c48a936f24908d$exports(retry);
        this.connectionPoolBuilder = $4fc440e79dee3b30$exports({
            logger: rootLogger,
            instrumentationEmitter: instrumentationEmitter,
            socketFactory: socketFactory,
            brokers: brokers,
            ssl: ssl,
            sasl: sasl,
            clientId: clientId,
            connectionTimeout: connectionTimeout,
            requestTimeout: requestTimeout,
            enforceRequestTimeout: enforceRequestTimeout,
            maxInFlightRequests: maxInFlightRequests,
            reauthenticationThreshold: reauthenticationThreshold
        });
        this.targetTopics = new Set();
        this.mutatingTargetTopics = new $424a91e9c534a6e7$exports({
            description: `updating target topics`,
            timeout: requestTimeout
        });
        this.isolationLevel = isolationLevel;
        this.brokerPool = new $99934a026b004b44$exports({
            connectionPoolBuilder: this.connectionPoolBuilder,
            logger: this.rootLogger,
            retry: retry,
            allowAutoTopicCreation: allowAutoTopicCreation,
            authenticationTimeout: authenticationTimeout,
            metadataMaxAge: metadataMaxAge
        });
        this.committedOffsetsByGroup = offsets;
        this[$dd751a346b077b84$var$PRIVATE.CONNECT] = $9c89082ee7ce8fe3$exports(async ()=>{
            return await this.brokerPool.connect();
        });
        this[$dd751a346b077b84$var$PRIVATE.REFRESH_METADATA] = $9c89082ee7ce8fe3$exports(async ()=>{
            return await this.brokerPool.refreshMetadata(Array.from(this.targetTopics));
        });
        this[$dd751a346b077b84$var$PRIVATE.REFRESH_METADATA_IF_NECESSARY] = $9c89082ee7ce8fe3$exports(async ()=>{
            return await this.brokerPool.refreshMetadataIfNecessary(Array.from(this.targetTopics));
        });
        this[$dd751a346b077b84$var$PRIVATE.FIND_CONTROLLER_BROKER] = $9c89082ee7ce8fe3$exports(async ()=>{
            const { metadata: metadata } = this.brokerPool;
            if (!metadata || metadata.controllerId == null) throw new $dd751a346b077b84$require$KafkaJSMetadataNotLoaded("Topic metadata not loaded");
            const broker = await this.findBroker({
                nodeId: metadata.controllerId
            });
            if (!broker) throw new $dd751a346b077b84$require$KafkaJSBrokerNotFound(`Controller broker with id ${metadata.controllerId} not found in the cached metadata`);
            return broker;
        });
    }
    isConnected() {
        return this.brokerPool.hasConnectedBrokers();
    }
    /**
   * @public
   * @returns {Promise<void>}
   */ async connect() {
        await this[$dd751a346b077b84$var$PRIVATE.CONNECT]();
    }
    /**
   * @public
   * @returns {Promise<void>}
   */ async disconnect() {
        await this.brokerPool.disconnect();
    }
    /**
   * @public
   * @param {object} destination
   * @param {String} destination.host
   * @param {Number} destination.port
   */ removeBroker({ host: host, port: port }) {
        this.brokerPool.removeBroker({
            host: host,
            port: port
        });
    }
    /**
   * @public
   * @returns {Promise<void>}
   */ async refreshMetadata() {
        await this[$dd751a346b077b84$var$PRIVATE.REFRESH_METADATA]();
    }
    /**
   * @public
   * @returns {Promise<void>}
   */ async refreshMetadataIfNecessary() {
        await this[$dd751a346b077b84$var$PRIVATE.REFRESH_METADATA_IF_NECESSARY]();
    }
    /**
   * @public
   * @returns {Promise<import("../../types").BrokerMetadata>}
   */ async metadata({ topics: topics = [] } = {}) {
        return this.retrier(async (bail, retryCount, retryTime)=>{
            try {
                await this.brokerPool.refreshMetadataIfNecessary(topics);
                return this.brokerPool.withBroker(async ({ broker: broker })=>broker.metadata(topics));
            } catch (e) {
                if (e.type === "LEADER_NOT_AVAILABLE") throw e;
                bail(e);
            }
        });
    }
    /**
   * @public
   * @param {string} topic
   * @return {Promise}
   */ async addTargetTopic(topic) {
        return this.addMultipleTargetTopics([
            topic
        ]);
    }
    /**
   * @public
   * @param {string[]} topics
   * @return {Promise}
   */ async addMultipleTargetTopics(topics) {
        await this.mutatingTargetTopics.acquire();
        try {
            const previousSize = this.targetTopics.size;
            const previousTopics = new Set(this.targetTopics);
            for (const topic of topics)this.targetTopics.add(topic);
            const hasChanged = previousSize !== this.targetTopics.size || !this.brokerPool.metadata;
            if (hasChanged) try {
                await this.refreshMetadata();
            } catch (e) {
                if (e.type === "INVALID_TOPIC_EXCEPTION" || e.type === "UNKNOWN_TOPIC_OR_PARTITION" || e.type === "TOPIC_AUTHORIZATION_FAILED") this.targetTopics = previousTopics;
                throw e;
            }
        } finally{
            await this.mutatingTargetTopics.release();
        }
    }
    /** @type {() => string[]} */ getNodeIds() {
        return this.brokerPool.getNodeIds();
    }
    /**
   * @public
   * @param {object} options
   * @param {string} options.nodeId
   * @returns {Promise<import("../../types").Broker>}
   */ async findBroker({ nodeId: nodeId }) {
        try {
            return await this.brokerPool.findBroker({
                nodeId: nodeId
            });
        } catch (e) {
            // The client probably has stale metadata
            if (e.name === "KafkaJSBrokerNotFound" || e.name === "KafkaJSLockTimeout" || e.name === "KafkaJSConnectionError") await this.refreshMetadata();
            throw e;
        }
    }
    /**
   * @public
   * @returns {Promise<import("../../types").Broker>}
   */ async findControllerBroker() {
        return await this[$dd751a346b077b84$var$PRIVATE.FIND_CONTROLLER_BROKER]();
    }
    /**
   * @public
   * @param {string} topic
   * @returns {import("../../types").PartitionMetadata[]} Example:
   *                   [{
   *                     isr: [2],
   *                     leader: 2,
   *                     partitionErrorCode: 0,
   *                     partitionId: 0,
   *                     replicas: [2],
   *                   }]
   */ findTopicPartitionMetadata(topic) {
        const { metadata: metadata } = this.brokerPool;
        if (!metadata || !metadata.topicMetadata) throw new $dd751a346b077b84$require$KafkaJSTopicMetadataNotLoaded("Topic metadata not loaded", {
            topic: topic
        });
        const topicMetadata = metadata.topicMetadata.find((t)=>t.topic === topic);
        return topicMetadata ? topicMetadata.partitionMetadata : [];
    }
    /**
   * @public
   * @param {string} topic
   * @param {(number|string)[]} partitions
   * @returns {Object} Object with leader and partitions. For partitions 0 and 5
   *                   the result could be:
   *                     { '0': [0], '2': [5] }
   *
   *                   where the key is the nodeId.
   */ findLeaderForPartitions(topic, partitions) {
        const partitionMetadata = this.findTopicPartitionMetadata(topic);
        return partitions.reduce((result, id)=>{
            const partitionId = parseInt(id, 10);
            const metadata = partitionMetadata.find((p)=>p.partitionId === partitionId);
            if (!metadata) return result;
            if (metadata.leader === null || metadata.leader === undefined) throw new $dd751a346b077b84$require$KafkaJSError("Invalid partition metadata", {
                topic: topic,
                partitionId: partitionId,
                metadata: metadata
            });
            const { leader: leader } = metadata;
            const current = result[leader] || [];
            return {
                ...result,
                [leader]: [
                    ...current,
                    partitionId
                ]
            };
        }, {});
    }
    /**
   * @public
   * @param {object} params
   * @param {string} params.groupId
   * @param {import("../protocol/coordinatorTypes").CoordinatorType} [params.coordinatorType=0]
   * @returns {Promise<import("../../types").Broker>}
   */ async findGroupCoordinator({ groupId: groupId, coordinatorType: coordinatorType = $iExfi.GROUP }) {
        return this.retrier(async (bail, retryCount, retryTime)=>{
            try {
                const { coordinator: coordinator } = await this.findGroupCoordinatorMetadata({
                    groupId: groupId,
                    coordinatorType: coordinatorType
                });
                return await this.findBroker({
                    nodeId: coordinator.nodeId
                });
            } catch (e) {
                // A new broker can join the cluster before we have the chance
                // to refresh metadata
                if (e.name === "KafkaJSBrokerNotFound" || e.type === "GROUP_COORDINATOR_NOT_AVAILABLE") {
                    this.logger.debug(`${e.message}, refreshing metadata and trying again...`, {
                        groupId: groupId,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    await this.refreshMetadata();
                    throw e;
                }
                if (e.code === "ECONNREFUSED") // During maintenance the current coordinator can go down; findBroker will
                // refresh metadata and re-throw the error. findGroupCoordinator has to re-throw
                // the error to go through the retry cycle.
                throw e;
                bail(e);
            }
        });
    }
    /**
   * @public
   * @param {object} params
   * @param {string} params.groupId
   * @param {import("../protocol/coordinatorTypes").CoordinatorType} [params.coordinatorType=0]
   * @returns {Promise<Object>}
   */ async findGroupCoordinatorMetadata({ groupId: groupId, coordinatorType: coordinatorType }) {
        const brokerMetadata = await this.brokerPool.withBroker(async ({ nodeId: nodeId, broker: broker })=>{
            return await this.retrier(async (bail, retryCount, retryTime)=>{
                try {
                    const brokerMetadata = await broker.findGroupCoordinator({
                        groupId: groupId,
                        coordinatorType: coordinatorType
                    });
                    this.logger.debug("Found group coordinator", {
                        broker: brokerMetadata.host,
                        nodeId: brokerMetadata.coordinator.nodeId
                    });
                    return brokerMetadata;
                } catch (e) {
                    this.logger.debug("Tried to find group coordinator", {
                        nodeId: nodeId,
                        groupId: groupId,
                        error: e
                    });
                    if (e.type === "GROUP_COORDINATOR_NOT_AVAILABLE") {
                        this.logger.debug("Group coordinator not available, retrying...", {
                            nodeId: nodeId,
                            retryCount: retryCount,
                            retryTime: retryTime
                        });
                        throw e;
                    }
                    bail(e);
                }
            });
        });
        if (brokerMetadata) return brokerMetadata;
        throw new $dd751a346b077b84$require$KafkaJSGroupCoordinatorNotFound("Failed to find group coordinator");
    }
    /**
   * @param {object} topicConfiguration
   * @returns {number}
   */ defaultOffset({ fromBeginning: fromBeginning }) {
        return fromBeginning ? $dd751a346b077b84$require$EARLIEST_OFFSET : $dd751a346b077b84$require$LATEST_OFFSET;
    }
    /**
   * @public
   * @param {Array<Object>} topics
   *                          [
   *                            {
   *                              topic: 'my-topic-name',
   *                              partitions: [{ partition: 0 }],
   *                              fromBeginning: false
   *                            }
   *                          ]
   * @returns {Promise<import("../../types").TopicOffsets[]>} example:
   *                          [
   *                            {
   *                              topic: 'my-topic-name',
   *                              partitions: [
   *                                { partition: 0, offset: '1' },
   *                                { partition: 1, offset: '2' },
   *                                { partition: 2, offset: '1' },
   *                              ],
   *                            },
   *                          ]
   */ async fetchTopicsOffset(topics) {
        const partitionsPerBroker = {};
        const topicConfigurations = {};
        const addDefaultOffset = (topic)=>(partition)=>{
                const { timestamp: timestamp } = topicConfigurations[topic];
                return {
                    ...partition,
                    timestamp: timestamp
                };
            };
        // Index all topics and partitions per leader (nodeId)
        for (const topicData of topics){
            const { topic: topic, partitions: partitions, fromBeginning: fromBeginning, fromTimestamp: fromTimestamp } = topicData;
            const partitionsPerLeader = this.findLeaderForPartitions(topic, partitions.map((p)=>p.partition));
            const timestamp = fromTimestamp != null ? fromTimestamp : this.defaultOffset({
                fromBeginning: fromBeginning
            });
            topicConfigurations[topic] = {
                timestamp: timestamp
            };
            $dd751a346b077b84$var$keys(partitionsPerLeader).forEach((nodeId)=>{
                partitionsPerBroker[nodeId] = partitionsPerBroker[nodeId] || {};
                partitionsPerBroker[nodeId][topic] = partitions.filter((p)=>partitionsPerLeader[nodeId].includes(p.partition));
            });
        }
        // Create a list of requests to fetch the offset of all partitions
        const requests = $dd751a346b077b84$var$keys(partitionsPerBroker).map(async (nodeId)=>{
            const broker = await this.findBroker({
                nodeId: nodeId
            });
            const partitions = partitionsPerBroker[nodeId];
            const { responses: topicOffsets } = await broker.listOffsets({
                isolationLevel: this.isolationLevel,
                topics: $dd751a346b077b84$var$keys(partitions).map((topic)=>({
                        topic: topic,
                        partitions: partitions[topic].map(addDefaultOffset(topic))
                    }))
            });
            return topicOffsets;
        });
        // Execute all requests, merge and normalize the responses
        const responses = await Promise.all(requests);
        const partitionsPerTopic = responses.flat().reduce($dd751a346b077b84$var$mergeTopics, {});
        return $dd751a346b077b84$var$keys(partitionsPerTopic).map((topic)=>({
                topic: topic,
                partitions: partitionsPerTopic[topic].map(({ partition: partition, offset: offset })=>({
                        partition: partition,
                        offset: offset
                    }))
            }));
    }
    /**
   * Retrieve the object mapping for committed offsets for a single consumer group
   * @param {object} options
   * @param {string} options.groupId
   * @returns {Object}
   */ committedOffsets({ groupId: groupId }) {
        if (!this.committedOffsetsByGroup.has(groupId)) this.committedOffsetsByGroup.set(groupId, {});
        return this.committedOffsetsByGroup.get(groupId);
    }
    /**
   * Mark offset as committed for a single consumer group's topic-partition
   * @param {object} options
   * @param {string} options.groupId
   * @param {string} options.topic
   * @param {string|number} options.partition
   * @param {string} options.offset
   */ markOffsetAsCommitted({ groupId: groupId, topic: topic, partition: partition, offset: offset }) {
        const committedOffsets = this.committedOffsets({
            groupId: groupId
        });
        committedOffsets[topic] = committedOffsets[topic] || {};
        committedOffsets[topic][partition] = offset;
    }
};


var $2582da7c2beebc69$exports = {};


var $2582da7c2beebc69$require$CONNECTION_STATUS = $f5edce9d80bea2fc$exports.CONNECTION_STATUS;
var $40efbf9052fe03b5$exports = {};
var $6003c1cf9f7041c1$exports = {};
var $1204a5d8241460cc$exports = {};
/* eslint-disable */ 
var $1204a5d8241460cc$require$Buffer = $4UN2M$buffer.Buffer;

var $dSqZK = parcelRequire("dSqZK");
// Based on the kafka client 0.10.2 murmur2 implementation
// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364
const $1204a5d8241460cc$var$SEED = $dSqZK.fromValue(0x9747b28c);
// 'm' and 'r' are mixing constants generated offline.
// They're not really 'magic', they just happen to work well.
const $1204a5d8241460cc$var$M = $dSqZK.fromValue(0x5bd1e995);
const $1204a5d8241460cc$var$R = $dSqZK.fromValue(24);
$1204a5d8241460cc$exports = (key)=>{
    const data = $1204a5d8241460cc$require$Buffer.isBuffer(key) ? key : $1204a5d8241460cc$require$Buffer.from(String(key));
    const length = data.length;
    // Initialize the hash to a random value
    let h = $dSqZK.fromValue($1204a5d8241460cc$var$SEED.xor(length));
    let length4 = Math.floor(length / 4);
    for(let i = 0; i < length4; i++){
        const i4 = i * 4;
        let k = (data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16) + ((data[i4 + 3] & 0xff) << 24);
        k = $dSqZK.fromValue(k);
        k = k.multiply($1204a5d8241460cc$var$M);
        k = k.xor(k.toInt() >>> $1204a5d8241460cc$var$R);
        k = $dSqZK.fromValue(k).multiply($1204a5d8241460cc$var$M);
        h = h.multiply($1204a5d8241460cc$var$M);
        h = h.xor(k);
    }
    // Handle the last few bytes of the input array
    switch(length % 4){
        case 3:
            h = h.xor((data[(length & -4) + 2] & 0xff) << 16);
        case 2:
            h = h.xor((data[(length & -4) + 1] & 0xff) << 8);
        case 1:
            h = h.xor(data[length & -4] & 0xff);
            h = h.multiply($1204a5d8241460cc$var$M);
    }
    h = h.xor(h.toInt() >>> 13);
    h = h.multiply($1204a5d8241460cc$var$M);
    h = h.xor(h.toInt() >>> 15);
    return h.toInt();
};


var $62748b161e91ad11$exports = {};
var $83f367fc0b8a7b4b$exports = {};

var $83f367fc0b8a7b4b$require$Buffer = $4UN2M$buffer.Buffer;

var $8mQRr = parcelRequire("8mQRr");
var $83f367fc0b8a7b4b$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
const $83f367fc0b8a7b4b$var$toNodeCompatible = (crypto)=>({
        randomBytes: (size)=>crypto.getRandomValues($83f367fc0b8a7b4b$require$Buffer.allocUnsafe(size))
    });
let $83f367fc0b8a7b4b$var$cryptoImplementation = null;

if ($parcel$global && $parcel$global.crypto) $83f367fc0b8a7b4b$var$cryptoImplementation = $parcel$global.crypto.randomBytes === undefined ? $83f367fc0b8a7b4b$var$toNodeCompatible($parcel$global.crypto) : $parcel$global.crypto;
else if ($parcel$global && $parcel$global.msCrypto) $83f367fc0b8a7b4b$var$cryptoImplementation = $83f367fc0b8a7b4b$var$toNodeCompatible($parcel$global.msCrypto);
else if ($parcel$global && !$parcel$global.crypto) $83f367fc0b8a7b4b$var$cryptoImplementation = $4UN2M$crypto;
const $83f367fc0b8a7b4b$var$MAX_BYTES = 65536;
$83f367fc0b8a7b4b$exports = (size)=>{
    if (size > $83f367fc0b8a7b4b$var$MAX_BYTES) throw new $83f367fc0b8a7b4b$require$KafkaJSNonRetriableError(`Byte length (${size}) exceeds the max number of bytes of entropy available (${$83f367fc0b8a7b4b$var$MAX_BYTES})`);
    if (!$83f367fc0b8a7b4b$var$cryptoImplementation) throw new $83f367fc0b8a7b4b$require$KafkaJSNonRetriableError("No available crypto implementation");
    return $83f367fc0b8a7b4b$var$cryptoImplementation.randomBytes(size);
};


// Based on the java client 0.10.2
// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java
/**
 * A cheap way to deterministically convert a number to a positive value. When the input is
 * positive, the original value is returned. When the input number is negative, the returned
 * positive value is the original value bit AND against 0x7fffffff which is not its absolutely
 * value.
 */ const $62748b161e91ad11$var$toPositive = (x)=>x & 0x7fffffff;
/**
 * The default partitioning strategy:
 *  - If a partition is specified in the message, use it
 *  - If no partition is specified but a key is present choose a partition based on a hash of the key
 *  - If no partition or key is present choose a partition in a round-robin fashion
 */ $62748b161e91ad11$exports = (murmur2)=>()=>{
        const counters = {};
        return ({ topic: topic, partitionMetadata: partitionMetadata, message: message })=>{
            if (!(topic in counters)) counters[topic] = $83f367fc0b8a7b4b$exports(32).readUInt32BE(0);
            const numPartitions = partitionMetadata.length;
            const availablePartitions = partitionMetadata.filter((p)=>p.leader >= 0);
            const numAvailablePartitions = availablePartitions.length;
            if (message.partition !== null && message.partition !== undefined) return message.partition;
            if (message.key !== null && message.key !== undefined) return $62748b161e91ad11$var$toPositive(murmur2(message.key)) % numPartitions;
            if (numAvailablePartitions > 0) {
                const i = $62748b161e91ad11$var$toPositive(++counters[topic]) % numAvailablePartitions;
                return availablePartitions[i].partitionId;
            }
            // no partitions are available, give a non-available partition
            return $62748b161e91ad11$var$toPositive(++counters[topic]) % numPartitions;
        };
    };


$6003c1cf9f7041c1$exports = $62748b161e91ad11$exports($1204a5d8241460cc$exports);


var $264ad92c6451def1$exports = {};
var $aaa9bce0157d8b73$exports = {};
/* eslint-disable */ // Based on the kafka client 0.10.2 murmur2 implementation
// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364

var $aaa9bce0157d8b73$require$Buffer = $4UN2M$buffer.Buffer;
const $aaa9bce0157d8b73$var$SEED = 0x9747b28c;
// 'm' and 'r' are mixing constants generated offline.
// They're not really 'magic', they just happen to work well.
const $aaa9bce0157d8b73$var$M = 0x5bd1e995;
const $aaa9bce0157d8b73$var$R = 24;
$aaa9bce0157d8b73$exports = (key)=>{
    const data = $aaa9bce0157d8b73$require$Buffer.isBuffer(key) ? key : $aaa9bce0157d8b73$require$Buffer.from(String(key));
    const length = data.length;
    // Initialize the hash to a random value
    let h = $aaa9bce0157d8b73$var$SEED ^ length;
    let length4 = length / 4;
    for(let i = 0; i < length4; i++){
        const i4 = i * 4;
        let k = (data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16) + ((data[i4 + 3] & 0xff) << 24);
        k *= $aaa9bce0157d8b73$var$M;
        k ^= k >>> $aaa9bce0157d8b73$var$R;
        k *= $aaa9bce0157d8b73$var$M;
        h *= $aaa9bce0157d8b73$var$M;
        h ^= k;
    }
    // Handle the last few bytes of the input array
    switch(length % 4){
        case 3:
            h ^= (data[(length & -4) + 2] & 0xff) << 16;
        case 2:
            h ^= (data[(length & -4) + 1] & 0xff) << 8;
        case 1:
            h ^= data[length & -4] & 0xff;
            h *= $aaa9bce0157d8b73$var$M;
    }
    h ^= h >>> 13;
    h *= $aaa9bce0157d8b73$var$M;
    h ^= h >>> 15;
    return h;
};



$264ad92c6451def1$exports = $62748b161e91ad11$exports($aaa9bce0157d8b73$exports);


$40efbf9052fe03b5$exports = {
    DefaultPartitioner: $6003c1cf9f7041c1$exports,
    LegacyPartitioner: $264ad92c6451def1$exports,
    /**
   * @deprecated Use DefaultPartitioner instead
   *
   * The JavaCompatiblePartitioner was renamed DefaultPartitioner
   * and made to be the default in 2.0.0.
   */ JavaCompatiblePartitioner: $6003c1cf9f7041c1$exports
};


var $2582da7c2beebc69$require$DefaultPartitioner = $40efbf9052fe03b5$exports.DefaultPartitioner;

var $c807f4f80ba29c06$exports = {};



var $8mQRr = parcelRequire("8mQRr");
var $c807f4f80ba29c06$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;

var $iExfi = parcelRequire("iExfi");
var $154db04d3b126b98$exports = {};

var $154db04d3b126b98$require$EventEmitter = $4UN2M$events.EventEmitter;

var $8mQRr = parcelRequire("8mQRr");
var $154db04d3b126b98$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
var $367233a41a746c87$exports = {};
$367233a41a746c87$exports = {
    UNINITIALIZED: "UNINITIALIZED",
    READY: "READY",
    TRANSACTING: "TRANSACTING",
    COMMITTING: "COMMITTING",
    ABORTING: "ABORTING"
};


const $154db04d3b126b98$var$VALID_STATE_TRANSITIONS = {
    [$367233a41a746c87$exports.UNINITIALIZED]: [
        $367233a41a746c87$exports.READY
    ],
    [$367233a41a746c87$exports.READY]: [
        $367233a41a746c87$exports.READY,
        $367233a41a746c87$exports.TRANSACTING
    ],
    [$367233a41a746c87$exports.TRANSACTING]: [
        $367233a41a746c87$exports.COMMITTING,
        $367233a41a746c87$exports.ABORTING
    ],
    [$367233a41a746c87$exports.COMMITTING]: [
        $367233a41a746c87$exports.READY
    ],
    [$367233a41a746c87$exports.ABORTING]: [
        $367233a41a746c87$exports.READY
    ]
};
$154db04d3b126b98$exports = ({ logger: logger, initialState: initialState = $367233a41a746c87$exports.UNINITIALIZED })=>{
    let currentState = initialState;
    const guard = (object, method, { legalStates: legalStates, async: isAsync = true })=>{
        if (!object[method]) throw new $154db04d3b126b98$require$KafkaJSNonRetriableError(`Cannot add guard on missing method "${method}"`);
        return (...args)=>{
            const fn = object[method];
            if (!legalStates.includes(currentState)) {
                const error = new $154db04d3b126b98$require$KafkaJSNonRetriableError(`Transaction state exception: Cannot call "${method}" in state "${currentState}"`);
                if (isAsync) return Promise.reject(error);
                else throw error;
            }
            return fn.apply(object, args);
        };
    };
    const stateMachine = Object.assign(new $154db04d3b126b98$require$EventEmitter(), {
        /**
     * Create a clone of "object" where we ensure state machine is in correct state
     * prior to calling any of the configured methods
     * @param {Object} object The object whose methods we will guard
     * @param {Object} methodStateMapping Keys are method names on "object"
     * @param {string[]} methodStateMapping.legalStates Legal states for this method
     * @param {boolean=true} methodStateMapping.async Whether this method is async (throw vs reject)
     */ createGuarded (object, methodStateMapping) {
            const guardedMethods = Object.keys(methodStateMapping).reduce((guards, method)=>{
                guards[method] = guard(object, method, methodStateMapping[method]);
                return guards;
            }, {});
            return {
                ...object,
                ...guardedMethods
            };
        },
        /**
     * Transition safely to a new state
     */ transitionTo (state) {
            logger.debug(`Transaction state transition ${currentState} --> ${state}`);
            if (!$154db04d3b126b98$var$VALID_STATE_TRANSITIONS[currentState].includes(state)) throw new $154db04d3b126b98$require$KafkaJSNonRetriableError(`Transaction state exception: Invalid transition ${currentState} --> ${state}`);
            stateMachine.emit("transition", {
                to: state,
                from: currentState
            });
            currentState = state;
        },
        state () {
            return currentState;
        }
    });
    return stateMachine;
};



var $c807f4f80ba29c06$require$INT_32_MAX_VALUE = $b2095807cf05621c$exports.INT_32_MAX_VALUE;


const $c807f4f80ba29c06$var$NO_PRODUCER_ID = -1;
const $c807f4f80ba29c06$var$SEQUENCE_START = 0;
const $c807f4f80ba29c06$var$INIT_PRODUCER_RETRIABLE_PROTOCOL_ERRORS = [
    "NOT_COORDINATOR_FOR_GROUP",
    "GROUP_COORDINATOR_NOT_AVAILABLE",
    "GROUP_LOAD_IN_PROGRESS",
    /**
   * The producer might have crashed and never committed the transaction; retry the
   * request so Kafka can abort the current transaction
   * @see https://github.com/apache/kafka/blob/201da0542726472d954080d54bc585b111aaf86f/clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java#L1001-L1002
   */ "CONCURRENT_TRANSACTIONS"
];
const $c807f4f80ba29c06$var$COMMIT_RETRIABLE_PROTOCOL_ERRORS = [
    "UNKNOWN_TOPIC_OR_PARTITION",
    "COORDINATOR_LOAD_IN_PROGRESS"
];
const $c807f4f80ba29c06$var$COMMIT_STALE_COORDINATOR_PROTOCOL_ERRORS = [
    "COORDINATOR_NOT_AVAILABLE",
    "NOT_COORDINATOR"
];
/**
 * @typedef {Object} EosManager
 */ /**
 * Manage behavior for an idempotent producer and transactions.
 *
 * @returns {EosManager}
 */ $c807f4f80ba29c06$exports = ({ logger: logger, cluster: cluster, transactionTimeout: transactionTimeout = 60000, transactional: transactional, transactionalId: transactionalId })=>{
    if (transactional && !transactionalId) throw new $c807f4f80ba29c06$require$KafkaJSNonRetriableError("Cannot manage transactions without a transactionalId");
    const retrier = $d1c48a936f24908d$exports(cluster.retry);
    /**
   * Current producer ID
   */ let producerId = $c807f4f80ba29c06$var$NO_PRODUCER_ID;
    /**
   * Current producer epoch
   */ let producerEpoch = 0;
    /**
   * Idempotent production requires that the producer track the sequence number of messages.
   *
   * Sequences are sent with every Record Batch and tracked per Topic-Partition
   */ let producerSequence = {};
    /**
   * Idempotent production requires a mutex lock per broker to serialize requests with sequence number handling
   */ let brokerMutexLocks = {};
    /**
   * Topic partitions already participating in the transaction
   */ let transactionTopicPartitions = {};
    /**
   * Offsets have been added to the transaction
   */ let hasOffsetsAddedToTransaction = false;
    const stateMachine = $154db04d3b126b98$exports({
        logger: logger
    });
    stateMachine.on("transition", ({ to: to })=>{
        if (to === $367233a41a746c87$exports.READY) {
            transactionTopicPartitions = {};
            hasOffsetsAddedToTransaction = false;
        }
    });
    const findTransactionCoordinator = ()=>{
        return cluster.findGroupCoordinator({
            groupId: transactionalId,
            coordinatorType: $iExfi.TRANSACTION
        });
    };
    const transactionalGuard = ()=>{
        if (!transactional) throw new $c807f4f80ba29c06$require$KafkaJSNonRetriableError("Method unavailable if non-transactional");
    };
    /**
   * A transaction is ongoing when offsets or partitions added to it
   *
   * @returns {boolean}
   */ const isOngoing = ()=>{
        return hasOffsetsAddedToTransaction || Object.entries(transactionTopicPartitions).some(([, partitions])=>{
            return Object.entries(partitions).some(([, isPartitionAddedToTransaction])=>isPartitionAddedToTransaction);
        });
    };
    const eosManager = stateMachine.createGuarded({
        /**
       * Get the current producer id
       * @returns {number}
       */ getProducerId () {
            return producerId;
        },
        /**
       * Get the current producer epoch
       * @returns {number}
       */ getProducerEpoch () {
            return producerEpoch;
        },
        getTransactionalId () {
            return transactionalId;
        },
        /**
       * Initialize the idempotent producer by making an `InitProducerId` request.
       * Overwrites any existing state in this transaction manager
       */ async initProducerId () {
            return retrier(async (bail, retryCount, retryTime)=>{
                try {
                    await cluster.refreshMetadataIfNecessary();
                    // If non-transactional we can request the PID from any broker
                    const broker = await (transactional ? findTransactionCoordinator() : cluster.findControllerBroker());
                    const result = await broker.initProducerId({
                        transactionalId: transactional ? transactionalId : undefined,
                        transactionTimeout: transactionTimeout
                    });
                    stateMachine.transitionTo($367233a41a746c87$exports.READY);
                    producerId = result.producerId;
                    producerEpoch = result.producerEpoch;
                    producerSequence = {};
                    brokerMutexLocks = {};
                    logger.debug("Initialized producer id & epoch", {
                        producerId: producerId,
                        producerEpoch: producerEpoch
                    });
                } catch (e) {
                    if ($c807f4f80ba29c06$var$INIT_PRODUCER_RETRIABLE_PROTOCOL_ERRORS.includes(e.type)) {
                        if (e.type === "CONCURRENT_TRANSACTIONS") logger.debug("There is an ongoing transaction on this transactionId, retrying", {
                            error: e.message,
                            stack: e.stack,
                            transactionalId: transactionalId,
                            retryCount: retryCount,
                            retryTime: retryTime
                        });
                        throw e;
                    }
                    bail(e);
                }
            });
        },
        /**
       * Get the current sequence for a given Topic-Partition. Defaults to 0.
       *
       * @param {string} topic
       * @param {string} partition
       * @returns {number}
       */ getSequence (topic, partition) {
            if (!eosManager.isInitialized()) return $c807f4f80ba29c06$var$SEQUENCE_START;
            producerSequence[topic] = producerSequence[topic] || {};
            producerSequence[topic][partition] = producerSequence[topic][partition] || $c807f4f80ba29c06$var$SEQUENCE_START;
            return producerSequence[topic][partition];
        },
        /**
       * Update the sequence for a given Topic-Partition.
       *
       * Do nothing if not yet initialized (not idempotent)
       * @param {string} topic
       * @param {string} partition
       * @param {number} increment
       */ updateSequence (topic, partition, increment) {
            if (!eosManager.isInitialized()) return;
            const previous = eosManager.getSequence(topic, partition);
            let sequence = previous + increment;
            // Sequence is defined as Int32 in the Record Batch,
            // so theoretically should need to rotate here
            if (sequence >= $c807f4f80ba29c06$require$INT_32_MAX_VALUE) {
                logger.debug(`Sequence for ${topic} ${partition} exceeds max value (${sequence}). Rotating to 0.`);
                sequence = 0;
            }
            producerSequence[topic][partition] = sequence;
        },
        /**
       * Begin a transaction
       */ beginTransaction () {
            transactionalGuard();
            stateMachine.transitionTo($367233a41a746c87$exports.TRANSACTING);
        },
        /**
       * Add partitions to a transaction if they are not already marked as participating.
       *
       * Should be called prior to sending any messages during a transaction
       * @param {TopicData[]} topicData
       *
       * @typedef {Object} TopicData
       * @property {string} topic
       * @property {object[]} partitions
       * @property {number} partitions[].partition
       */ async addPartitionsToTransaction (topicData) {
            transactionalGuard();
            const newTopicPartitions = {};
            topicData.forEach(({ topic: topic, partitions: partitions })=>{
                transactionTopicPartitions[topic] = transactionTopicPartitions[topic] || {};
                partitions.forEach(({ partition: partition })=>{
                    if (!transactionTopicPartitions[topic][partition]) {
                        newTopicPartitions[topic] = newTopicPartitions[topic] || [];
                        newTopicPartitions[topic].push(partition);
                    }
                });
            });
            const topics = Object.keys(newTopicPartitions).map((topic)=>({
                    topic: topic,
                    partitions: newTopicPartitions[topic]
                }));
            if (topics.length) {
                const broker = await findTransactionCoordinator();
                await broker.addPartitionsToTxn({
                    transactionalId: transactionalId,
                    producerId: producerId,
                    producerEpoch: producerEpoch,
                    topics: topics
                });
            }
            topics.forEach(({ topic: topic, partitions: partitions })=>{
                partitions.forEach((partition)=>{
                    transactionTopicPartitions[topic][partition] = true;
                });
            });
        },
        /**
       * Commit the ongoing transaction
       */ async commit () {
            transactionalGuard();
            stateMachine.transitionTo($367233a41a746c87$exports.COMMITTING);
            if (!isOngoing()) {
                logger.debug("No partitions or offsets registered, not sending EndTxn");
                stateMachine.transitionTo($367233a41a746c87$exports.READY);
                return;
            }
            const broker = await findTransactionCoordinator();
            await broker.endTxn({
                producerId: producerId,
                producerEpoch: producerEpoch,
                transactionalId: transactionalId,
                transactionResult: true
            });
            stateMachine.transitionTo($367233a41a746c87$exports.READY);
        },
        /**
       * Abort the ongoing transaction
       */ async abort () {
            transactionalGuard();
            stateMachine.transitionTo($367233a41a746c87$exports.ABORTING);
            if (!isOngoing()) {
                logger.debug("No partitions or offsets registered, not sending EndTxn");
                stateMachine.transitionTo($367233a41a746c87$exports.READY);
                return;
            }
            const broker = await findTransactionCoordinator();
            await broker.endTxn({
                producerId: producerId,
                producerEpoch: producerEpoch,
                transactionalId: transactionalId,
                transactionResult: false
            });
            stateMachine.transitionTo($367233a41a746c87$exports.READY);
        },
        /**
       * Whether the producer id has already been initialized
       */ isInitialized () {
            return producerId !== $c807f4f80ba29c06$var$NO_PRODUCER_ID;
        },
        isTransactional () {
            return transactional;
        },
        isInTransaction () {
            return stateMachine.state() === $367233a41a746c87$exports.TRANSACTING;
        },
        async acquireBrokerLock (broker) {
            if (this.isInitialized()) {
                brokerMutexLocks[broker.nodeId] = brokerMutexLocks[broker.nodeId] || new $424a91e9c534a6e7$exports({
                    timeout: 0xffff
                });
                await brokerMutexLocks[broker.nodeId].acquire();
            }
        },
        releaseBrokerLock (broker) {
            if (this.isInitialized()) brokerMutexLocks[broker.nodeId].release();
        },
        /**
       * Mark the provided offsets as participating in the transaction for the given consumer group.
       *
       * This allows us to commit an offset as consumed only if the transaction passes.
       * @param {string} consumerGroupId The unique group identifier
       * @param {OffsetCommitTopic[]} topics The unique group identifier
       * @returns {Promise}
       *
       * @typedef {Object} OffsetCommitTopic
       * @property {string} topic
       * @property {OffsetCommitTopicPartition[]} partitions
       *
       * @typedef {Object} OffsetCommitTopicPartition
       * @property {number} partition
       * @property {number} offset
       */ async sendOffsets ({ consumerGroupId: consumerGroupId, topics: topics }) {
            $4UN2M$assert(consumerGroupId, "Missing consumerGroupId");
            $4UN2M$assert(topics, "Missing offset topics");
            const transactionCoordinator = await findTransactionCoordinator();
            // Do we need to add offsets if we've already done so for this consumer group?
            await transactionCoordinator.addOffsetsToTxn({
                transactionalId: transactionalId,
                producerId: producerId,
                producerEpoch: producerEpoch,
                groupId: consumerGroupId
            });
            hasOffsetsAddedToTransaction = true;
            let groupCoordinator = await cluster.findGroupCoordinator({
                groupId: consumerGroupId,
                coordinatorType: $iExfi.GROUP
            });
            return retrier(async (bail, retryCount, retryTime)=>{
                try {
                    await groupCoordinator.txnOffsetCommit({
                        transactionalId: transactionalId,
                        producerId: producerId,
                        producerEpoch: producerEpoch,
                        groupId: consumerGroupId,
                        topics: topics
                    });
                } catch (e) {
                    if ($c807f4f80ba29c06$var$COMMIT_RETRIABLE_PROTOCOL_ERRORS.includes(e.type)) {
                        logger.debug("Group coordinator is not ready yet, retrying", {
                            error: e.message,
                            stack: e.stack,
                            transactionalId: transactionalId,
                            retryCount: retryCount,
                            retryTime: retryTime
                        });
                        throw e;
                    }
                    if ($c807f4f80ba29c06$var$COMMIT_STALE_COORDINATOR_PROTOCOL_ERRORS.includes(e.type) || e.code === "ECONNREFUSED") {
                        logger.debug("Invalid group coordinator, finding new group coordinator and retrying", {
                            error: e.message,
                            stack: e.stack,
                            transactionalId: transactionalId,
                            retryCount: retryCount,
                            retryTime: retryTime
                        });
                        groupCoordinator = await cluster.findGroupCoordinator({
                            groupId: consumerGroupId,
                            coordinatorType: $iExfi.GROUP
                        });
                        throw e;
                    }
                    bail(e);
                }
            });
        }
    }, /**
     * Transaction state guards
     */ {
        initProducerId: {
            legalStates: [
                $367233a41a746c87$exports.UNINITIALIZED,
                $367233a41a746c87$exports.READY
            ]
        },
        beginTransaction: {
            legalStates: [
                $367233a41a746c87$exports.READY
            ],
            async: false
        },
        addPartitionsToTransaction: {
            legalStates: [
                $367233a41a746c87$exports.TRANSACTING
            ]
        },
        sendOffsets: {
            legalStates: [
                $367233a41a746c87$exports.TRANSACTING
            ]
        },
        commit: {
            legalStates: [
                $367233a41a746c87$exports.TRANSACTING
            ]
        },
        abort: {
            legalStates: [
                $367233a41a746c87$exports.TRANSACTING
            ]
        }
    });
    return eosManager;
};


var $70eac195c2d2f7f0$exports = {};
var $269f1856f26bccdf$exports = {};

var $8mQRr = parcelRequire("8mQRr");
var $269f1856f26bccdf$require$KafkaJSMetadataNotLoaded = $8mQRr.KafkaJSMetadataNotLoaded;

var $iL9Wd = parcelRequire("iL9Wd");
var $269f1856f26bccdf$require$staleMetadata = $iL9Wd.staleMetadata;
var $11a9dc8044b25826$exports = {};
$11a9dc8044b25826$exports = ({ topic: topic, partitionMetadata: partitionMetadata, messages: messages, partitioner: partitioner })=>{
    if (partitionMetadata.length === 0) return {};
    return messages.reduce((result, message)=>{
        const partition = partitioner({
            topic: topic,
            partitionMetadata: partitionMetadata,
            message: message
        });
        const current = result[partition] || [];
        return Object.assign(result, {
            [partition]: [
                ...current,
                message
            ]
        });
    }, {});
};


var $79f5831bd57f6e50$exports = {};
$79f5831bd57f6e50$exports = (topicDataForBroker)=>{
    return topicDataForBroker.map(({ topic: topic, partitions: partitions, messagesPerPartition: messagesPerPartition, sequencePerPartition: sequencePerPartition })=>({
            topic: topic,
            partitions: partitions.map((partition)=>({
                    partition: partition,
                    messages: messagesPerPartition[partition]
                }))
        }));
};


var $71e59df2f2af9619$exports = {};
$71e59df2f2af9619$exports = ({ topics: topics })=>topics.flatMap(({ topicName: topicName, partitions: partitions })=>partitions.map((partition)=>({
                topicName: topicName,
                ...partition
            })));


const { keys: $269f1856f26bccdf$var$keys } = Object;
/**
 * @param {Object} options
 * @param {import("../../types").Logger} options.logger
 * @param {import("../../types").Cluster} options.cluster
 * @param {ReturnType<import("../../types").ICustomPartitioner>} options.partitioner
 * @param {import("./eosManager").EosManager} options.eosManager
 * @param {import("../retry").Retrier} options.retrier
 */ $269f1856f26bccdf$exports = ({ logger: logger, cluster: cluster, partitioner: partitioner, eosManager: eosManager, retrier: retrier })=>{
    return async ({ acks: acks, timeout: timeout, compression: compression, topicMessages: topicMessages })=>{
        /** @type {Map<import("../../types").Broker, any[]>} */ const responsePerBroker = new Map();
        /** @param {Map<import("../../types").Broker, any[]>} responsePerBroker */ const createProducerRequests = async (responsePerBroker)=>{
            const topicMetadata = new Map();
            await cluster.refreshMetadataIfNecessary();
            for (const { topic: topic, messages: messages } of topicMessages){
                const partitionMetadata = cluster.findTopicPartitionMetadata(topic);
                if (partitionMetadata.length === 0) {
                    logger.debug("Producing to topic without metadata", {
                        topic: topic,
                        targetTopics: Array.from(cluster.targetTopics)
                    });
                    throw new $269f1856f26bccdf$require$KafkaJSMetadataNotLoaded("Producing to topic without metadata");
                }
                const messagesPerPartition = $11a9dc8044b25826$exports({
                    topic: topic,
                    partitionMetadata: partitionMetadata,
                    messages: messages,
                    partitioner: partitioner
                });
                const partitions = $269f1856f26bccdf$var$keys(messagesPerPartition);
                const partitionsPerLeader = cluster.findLeaderForPartitions(topic, partitions);
                const leaders = $269f1856f26bccdf$var$keys(partitionsPerLeader);
                topicMetadata.set(topic, {
                    partitionsPerLeader: partitionsPerLeader,
                    messagesPerPartition: messagesPerPartition
                });
                for (const nodeId of leaders){
                    const broker = await cluster.findBroker({
                        nodeId: nodeId
                    });
                    if (!responsePerBroker.has(broker)) responsePerBroker.set(broker, null);
                }
            }
            const brokers = Array.from(responsePerBroker.keys());
            const brokersWithoutResponse = brokers.filter((broker)=>!responsePerBroker.get(broker));
            return brokersWithoutResponse.map(async (broker)=>{
                const entries = Array.from(topicMetadata.entries());
                const topicDataForBroker = entries.filter(([_, { partitionsPerLeader: partitionsPerLeader }])=>!!partitionsPerLeader[broker.nodeId]).map(([topic, { partitionsPerLeader: partitionsPerLeader, messagesPerPartition: messagesPerPartition, sequencePerPartition: sequencePerPartition }])=>({
                        topic: topic,
                        partitions: partitionsPerLeader[broker.nodeId],
                        messagesPerPartition: messagesPerPartition
                    }));
                const topicData = $79f5831bd57f6e50$exports(topicDataForBroker);
                await eosManager.acquireBrokerLock(broker);
                try {
                    if (eosManager.isTransactional()) await eosManager.addPartitionsToTransaction(topicData);
                    topicData.forEach(({ topic: topic, partitions: partitions })=>{
                        partitions.forEach((entry)=>{
                            entry["firstSequence"] = eosManager.getSequence(topic, entry.partition);
                            eosManager.updateSequence(topic, entry.partition, entry.messages.length);
                        });
                    });
                    let response;
                    try {
                        response = await broker.produce({
                            transactionalId: eosManager.isTransactional() ? eosManager.getTransactionalId() : undefined,
                            producerId: eosManager.getProducerId(),
                            producerEpoch: eosManager.getProducerEpoch(),
                            acks: acks,
                            timeout: timeout,
                            compression: compression,
                            topicData: topicData
                        });
                    } catch (e) {
                        topicData.forEach(({ topic: topic, partitions: partitions })=>{
                            partitions.forEach((entry)=>{
                                eosManager.updateSequence(topic, entry.partition, -entry.messages.length);
                            });
                        });
                        throw e;
                    }
                    const expectResponse = acks !== 0;
                    const formattedResponse = expectResponse ? $71e59df2f2af9619$exports(response) : [];
                    responsePerBroker.set(broker, formattedResponse);
                } catch (e) {
                    responsePerBroker.delete(broker);
                    throw e;
                } finally{
                    await eosManager.releaseBrokerLock(broker);
                }
            });
        };
        return retrier(async (bail, retryCount, retryTime)=>{
            const topics = topicMessages.map(({ topic: topic })=>topic);
            await cluster.addMultipleTargetTopics(topics);
            try {
                const requests = await createProducerRequests(responsePerBroker);
                await Promise.all(requests);
                return Array.from(responsePerBroker.values()).flat();
            } catch (e) {
                if (e.name === "KafkaJSConnectionClosedError") cluster.removeBroker({
                    host: e.host,
                    port: e.port
                });
                if (!cluster.isConnected()) {
                    logger.debug(`Cluster has disconnected, reconnecting: ${e.message}`, {
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    await cluster.connect();
                    await cluster.refreshMetadata();
                    throw e;
                }
                // This is necessary in case the metadata is stale and the number of partitions
                // for this topic has increased in the meantime
                if ($269f1856f26bccdf$require$staleMetadata(e) || e.name === "KafkaJSMetadataNotLoaded" || e.name === "KafkaJSConnectionError" || e.name === "KafkaJSConnectionClosedError" || e.name === "KafkaJSProtocolError" && e.retriable) {
                    logger.error(`Failed to send messages: ${e.message}`, {
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    await cluster.refreshMetadata();
                    throw e;
                }
                logger.error(`${e.message}`, {
                    retryCount: retryCount,
                    retryTime: retryTime
                });
                if (e.retriable) throw e;
                bail(e);
            }
        });
    };
};



var $8mQRr = parcelRequire("8mQRr");
var $70eac195c2d2f7f0$require$KafkaJSError = $8mQRr.KafkaJSError;
var $70eac195c2d2f7f0$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;

var $70eac195c2d2f7f0$require$CONNECTION_STATUS = $f5edce9d80bea2fc$exports.CONNECTION_STATUS;
$70eac195c2d2f7f0$exports = ({ logger: logger, cluster: cluster, partitioner: partitioner, eosManager: eosManager, idempotent: idempotent, retrier: retrier, getConnectionStatus: getConnectionStatus })=>{
    const sendMessages = $269f1856f26bccdf$exports({
        logger: logger,
        cluster: cluster,
        retrier: retrier,
        partitioner: partitioner,
        eosManager: eosManager
    });
    const validateConnectionStatus = ()=>{
        const connectionStatus = getConnectionStatus();
        switch(connectionStatus){
            case $70eac195c2d2f7f0$require$CONNECTION_STATUS.DISCONNECTING:
                throw new $70eac195c2d2f7f0$require$KafkaJSNonRetriableError(`The producer is disconnecting; therefore, it can't safely accept messages anymore`);
            case $70eac195c2d2f7f0$require$CONNECTION_STATUS.DISCONNECTED:
                throw new $70eac195c2d2f7f0$require$KafkaJSError("The producer is disconnected");
        }
    };
    /**
   * @typedef {Object} TopicMessages
   * @property {string} topic
   * @property {Array} messages An array of objects with "key" and "value", example:
   *                         [{ key: 'my-key', value: 'my-value'}]
   *
   * @typedef {Object} SendBatchRequest
   * @property {Array<TopicMessages>} topicMessages
   * @property {number} [acks=-1] Control the number of required acks.
   *                           -1 = all replicas must acknowledge
   *                            0 = no acknowledgments
   *                            1 = only waits for the leader to acknowledge
   *
   * @property {number} [timeout=30000] The time to await a response in ms
   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec
   *
   * @param {SendBatchRequest}
   * @returns {Promise}
   */ const sendBatch = async ({ acks: acks = -1, timeout: timeout, compression: compression, topicMessages: topicMessages = [] })=>{
        if (topicMessages.some(({ topic: topic })=>!topic)) throw new $70eac195c2d2f7f0$require$KafkaJSNonRetriableError(`Invalid topic`);
        if (idempotent && acks !== -1) throw new $70eac195c2d2f7f0$require$KafkaJSNonRetriableError(`Not requiring ack for all messages invalidates the idempotent producer's EoS guarantees`);
        for (const { topic: topic, messages: messages } of topicMessages){
            if (!messages) throw new $70eac195c2d2f7f0$require$KafkaJSNonRetriableError(`Invalid messages array [${messages}] for topic "${topic}"`);
            const messageWithoutValue = messages.find((message)=>message.value === undefined);
            if (messageWithoutValue) throw new $70eac195c2d2f7f0$require$KafkaJSNonRetriableError(`Invalid message without value for topic "${topic}": ${JSON.stringify(messageWithoutValue)}`);
        }
        validateConnectionStatus();
        const mergedTopicMessages = topicMessages.reduce((merged, { topic: topic, messages: messages })=>{
            const index = merged.findIndex(({ topic: mergedTopic })=>topic === mergedTopic);
            if (index === -1) merged.push({
                topic: topic,
                messages: messages
            });
            else merged[index].messages = [
                ...merged[index].messages,
                ...messages
            ];
            return merged;
        }, []);
        return await sendMessages({
            acks: acks,
            timeout: timeout,
            compression: compression,
            topicMessages: mergedTopicMessages
        });
    };
    /**
   * @param {ProduceRequest} ProduceRequest
   * @returns {Promise}
   *
   * @typedef {Object} ProduceRequest
   * @property {string} topic
   * @property {Array} messages An array of objects with "key" and "value", example:
   *                         [{ key: 'my-key', value: 'my-value'}]
   * @property {number} [acks=-1] Control the number of required acks.
   *                           -1 = all replicas must acknowledge
   *                            0 = no acknowledgments
   *                            1 = only waits for the leader to acknowledge
   * @property {number} [timeout=30000] The time to await a response in ms
   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec
   */ const send = async ({ acks: acks, timeout: timeout, compression: compression, topic: topic, messages: messages })=>{
        const topicMessage = {
            topic: topic,
            messages: messages
        };
        return sendBatch({
            acks: acks,
            timeout: timeout,
            compression: compression,
            topicMessages: [
                topicMessage
            ]
        });
    };
    return {
        send: send,
        sendBatch: sendBatch
    };
};


var $e9d061bbdf671974$exports = {};
var $382ebe7dda76d67e$exports = {};
const { keys: $382ebe7dda76d67e$var$keys } = Object;
$382ebe7dda76d67e$exports = (object)=>$382ebe7dda76d67e$var$keys(object).reduce((result, key)=>({
            ...result,
            [object[key]]: key
        }), {});




const $e9d061bbdf671974$var$producerType = $96d0cdc4a08345b0$exports("producer");
const $e9d061bbdf671974$var$events = {
    CONNECT: $e9d061bbdf671974$var$producerType("connect"),
    DISCONNECT: $e9d061bbdf671974$var$producerType("disconnect"),
    REQUEST: $e9d061bbdf671974$var$producerType($1da109fb7a6eab1e$exports.NETWORK_REQUEST),
    REQUEST_TIMEOUT: $e9d061bbdf671974$var$producerType($1da109fb7a6eab1e$exports.NETWORK_REQUEST_TIMEOUT),
    REQUEST_QUEUE_SIZE: $e9d061bbdf671974$var$producerType($1da109fb7a6eab1e$exports.NETWORK_REQUEST_QUEUE_SIZE)
};
const $e9d061bbdf671974$var$wrappedEvents = {
    [$e9d061bbdf671974$var$events.REQUEST]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST,
    [$e9d061bbdf671974$var$events.REQUEST_TIMEOUT]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST_TIMEOUT,
    [$e9d061bbdf671974$var$events.REQUEST_QUEUE_SIZE]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST_QUEUE_SIZE
};
const $e9d061bbdf671974$var$reversedWrappedEvents = $382ebe7dda76d67e$exports($e9d061bbdf671974$var$wrappedEvents);
const $e9d061bbdf671974$var$unwrap = (eventName)=>$e9d061bbdf671974$var$wrappedEvents[eventName] || eventName;
const $e9d061bbdf671974$var$wrap = (eventName)=>$e9d061bbdf671974$var$reversedWrappedEvents[eventName] || eventName;
$e9d061bbdf671974$exports = {
    events: $e9d061bbdf671974$var$events,
    wrap: $e9d061bbdf671974$var$wrap,
    unwrap: $e9d061bbdf671974$var$unwrap
};


var $2582da7c2beebc69$require$events = $e9d061bbdf671974$exports.events;
var $2582da7c2beebc69$require$wrapEvent = $e9d061bbdf671974$exports.wrap;
var $2582da7c2beebc69$require$unwrapEvent = $e9d061bbdf671974$exports.unwrap;

var $8mQRr = parcelRequire("8mQRr");
var $2582da7c2beebc69$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
const { values: $2582da7c2beebc69$var$values, keys: $2582da7c2beebc69$var$keys } = Object;
const $2582da7c2beebc69$var$eventNames = $2582da7c2beebc69$var$values($2582da7c2beebc69$require$events);
const $2582da7c2beebc69$var$eventKeys = $2582da7c2beebc69$var$keys($2582da7c2beebc69$require$events).map((key)=>`producer.events.${key}`).join(", ");
const { CONNECT: $2582da7c2beebc69$var$CONNECT, DISCONNECT: $2582da7c2beebc69$var$DISCONNECT } = $2582da7c2beebc69$require$events;
/**
 *
 * @param {Object} params
 * @param {import('../../types').Cluster} params.cluster
 * @param {import('../../types').Logger} params.logger
 * @param {import('../../types').ICustomPartitioner} [params.createPartitioner]
 * @param {import('../../types').RetryOptions} [params.retry]
 * @param {boolean} [params.idempotent]
 * @param {string} [params.transactionalId]
 * @param {number} [params.transactionTimeout]
 * @param {InstrumentationEventEmitter} [params.instrumentationEmitter]
 *
 * @returns {import('../../types').Producer}
 */ $2582da7c2beebc69$exports = ({ cluster: cluster, logger: rootLogger, createPartitioner: createPartitioner = $2582da7c2beebc69$require$DefaultPartitioner, retry: retry, idempotent: idempotent = false, transactionalId: transactionalId, transactionTimeout: transactionTimeout, instrumentationEmitter: rootInstrumentationEmitter })=>{
    let connectionStatus = $2582da7c2beebc69$require$CONNECTION_STATUS.DISCONNECTED;
    retry = retry || {
        retries: idempotent ? Number.MAX_SAFE_INTEGER : 5
    };
    if (idempotent && retry.retries < 1) throw new $2582da7c2beebc69$require$KafkaJSNonRetriableError("Idempotent producer must allow retries to protect against transient errors");
    const logger = rootLogger.namespace("Producer");
    if (idempotent && retry.retries < Number.MAX_SAFE_INTEGER) logger.warn("Limiting retries for the idempotent producer may invalidate EoS guarantees");
    const partitioner = createPartitioner();
    const retrier = $d1c48a936f24908d$exports(Object.assign({}, cluster.retry, retry));
    const instrumentationEmitter = rootInstrumentationEmitter || new $b7828dca740d64c9$exports();
    const idempotentEosManager = $c807f4f80ba29c06$exports({
        logger: logger,
        cluster: cluster,
        transactionTimeout: transactionTimeout,
        transactional: false,
        transactionalId: transactionalId
    });
    const { send: send, sendBatch: sendBatch } = $70eac195c2d2f7f0$exports({
        logger: logger,
        cluster: cluster,
        partitioner: partitioner,
        eosManager: idempotentEosManager,
        idempotent: idempotent,
        retrier: retrier,
        getConnectionStatus: ()=>connectionStatus
    });
    let transactionalEosManager;
    /** @type {import("../../types").Producer["on"]} */ const on = (eventName, listener)=>{
        if (!$2582da7c2beebc69$var$eventNames.includes(eventName)) throw new $2582da7c2beebc69$require$KafkaJSNonRetriableError(`Event name should be one of ${$2582da7c2beebc69$var$eventKeys}`);
        return instrumentationEmitter.addListener($2582da7c2beebc69$require$unwrapEvent(eventName), (event)=>{
            event.type = $2582da7c2beebc69$require$wrapEvent(event.type);
            Promise.resolve(listener(event)).catch((e)=>{
                logger.error(`Failed to execute listener: ${e.message}`, {
                    eventName: eventName,
                    stack: e.stack
                });
            });
        });
    };
    /**
   * Begin a transaction. The returned object contains methods to send messages
   * to the transaction and end the transaction by committing or aborting.
   *
   * Only messages sent on the transaction object will participate in the transaction.
   *
   * Calling any of the transactional methods after the transaction has ended
   * will raise an exception (use `isActive` to ascertain if ended).
   * @returns {Promise<Transaction>}
   *
   * @typedef {Object} Transaction
   * @property {Function} send  Identical to the producer "send" method
   * @property {Function} sendBatch Identical to the producer "sendBatch" method
   * @property {Function} abort Abort the transaction
   * @property {Function} commit  Commit the transaction
   * @property {Function} isActive  Whether the transaction is active
   */ const transaction = async ()=>{
        if (!transactionalId) throw new $2582da7c2beebc69$require$KafkaJSNonRetriableError("Must provide transactional id for transactional producer");
        let transactionDidEnd = false;
        transactionalEosManager = transactionalEosManager || $c807f4f80ba29c06$exports({
            logger: logger,
            cluster: cluster,
            transactionTimeout: transactionTimeout,
            transactional: true,
            transactionalId: transactionalId
        });
        if (transactionalEosManager.isInTransaction()) throw new $2582da7c2beebc69$require$KafkaJSNonRetriableError("There is already an ongoing transaction for this producer. Please end the transaction before beginning another.");
        // We only initialize the producer id once
        if (!transactionalEosManager.isInitialized()) await transactionalEosManager.initProducerId();
        transactionalEosManager.beginTransaction();
        const { send: sendTxn, sendBatch: sendBatchTxn } = $70eac195c2d2f7f0$exports({
            logger: logger,
            cluster: cluster,
            partitioner: partitioner,
            retrier: retrier,
            eosManager: transactionalEosManager,
            idempotent: true,
            getConnectionStatus: ()=>connectionStatus
        });
        const isActive = ()=>transactionalEosManager.isInTransaction() && !transactionDidEnd;
        const transactionGuard = (fn)=>(...args)=>{
                if (!isActive()) return Promise.reject(new $2582da7c2beebc69$require$KafkaJSNonRetriableError("Cannot continue to use transaction once ended"));
                return fn(...args);
            };
        return {
            sendBatch: transactionGuard(sendBatchTxn),
            send: transactionGuard(sendTxn),
            /**
       * Abort the ongoing transaction.
       *
       * @throws {KafkaJSNonRetriableError} If transaction has ended
       */ abort: transactionGuard(async ()=>{
                await transactionalEosManager.abort();
                transactionDidEnd = true;
            }),
            /**
       * Commit the ongoing transaction.
       *
       * @throws {KafkaJSNonRetriableError} If transaction has ended
       */ commit: transactionGuard(async ()=>{
                await transactionalEosManager.commit();
                transactionDidEnd = true;
            }),
            /**
       * Sends a list of specified offsets to the consumer group coordinator, and also marks those offsets as part of the current transaction.
       *
       * @throws {KafkaJSNonRetriableError} If transaction has ended
       */ sendOffsets: transactionGuard(async ({ consumerGroupId: consumerGroupId, topics: topics })=>{
                await transactionalEosManager.sendOffsets({
                    consumerGroupId: consumerGroupId,
                    topics: topics
                });
                for (const topicOffsets of topics){
                    const { topic: topic, partitions: partitions } = topicOffsets;
                    for (const { partition: partition, offset: offset } of partitions)cluster.markOffsetAsCommitted({
                        groupId: consumerGroupId,
                        topic: topic,
                        partition: partition,
                        offset: offset
                    });
                }
            }),
            isActive: isActive
        };
    };
    /**
   * @returns {Object} logger
   */ const getLogger = ()=>logger;
    return {
        /**
     * @returns {Promise}
     */ connect: async ()=>{
            await cluster.connect();
            connectionStatus = $2582da7c2beebc69$require$CONNECTION_STATUS.CONNECTED;
            instrumentationEmitter.emit($2582da7c2beebc69$var$CONNECT);
            if (idempotent && !idempotentEosManager.isInitialized()) await idempotentEosManager.initProducerId();
        },
        /**
     * @return {Promise}
     */ disconnect: async ()=>{
            connectionStatus = $2582da7c2beebc69$require$CONNECTION_STATUS.DISCONNECTING;
            await cluster.disconnect();
            connectionStatus = $2582da7c2beebc69$require$CONNECTION_STATUS.DISCONNECTED;
            instrumentationEmitter.emit($2582da7c2beebc69$var$DISCONNECT);
        },
        isIdempotent: ()=>{
            return idempotent;
        },
        events: $2582da7c2beebc69$require$events,
        on: on,
        send: send,
        sendBatch: sendBatch,
        transaction: transaction,
        logger: getLogger
    };
};


var $321589964ab32f03$exports = {};

var $dSqZK = parcelRequire("dSqZK");


var $jzcUK = parcelRequire("jzcUK");
var $321589964ab32f03$require$initialRetryTime = $jzcUK.initialRetryTime;
var $95e82f69a37b24c8$exports = {};
var $6e9e27040c59eddf$exports = {};
$6e9e27040c59eddf$exports = (timeInMs)=>new Promise((resolve)=>{
        setTimeout(resolve, timeInMs);
    });



var $4jZ5a = parcelRequire("4jZ5a");



var $ae8438bb33d75fc3$exports = {};

var $dSqZK = parcelRequire("dSqZK");
var $6e2611aeddd5d64e$exports = {};

var $dSqZK = parcelRequire("dSqZK");
$6e2611aeddd5d64e$exports = (offset)=>!offset && offset !== 0 || $dSqZK.fromValue(offset).isNegative();


var $f5e1c483726839d3$exports = {};

const { keys: $f5e1c483726839d3$var$keys, assign: $f5e1c483726839d3$var$assign } = Object;
const $f5e1c483726839d3$var$indexPartitions = (obj, { partition: partition, offset: offset })=>$f5e1c483726839d3$var$assign(obj, {
        [partition]: offset
    });
const $f5e1c483726839d3$var$indexTopics = (obj, { topic: topic, partitions: partitions })=>$f5e1c483726839d3$var$assign(obj, {
        [topic]: partitions.reduce($f5e1c483726839d3$var$indexPartitions, {})
    });
$f5e1c483726839d3$exports = (consumerOffsets, topicOffsets)=>{
    const indexedConsumerOffsets = consumerOffsets.reduce($f5e1c483726839d3$var$indexTopics, {});
    const indexedTopicOffsets = topicOffsets.reduce($f5e1c483726839d3$var$indexTopics, {});
    return $f5e1c483726839d3$var$keys(indexedConsumerOffsets).map((topic)=>{
        const partitions = indexedConsumerOffsets[topic];
        return {
            topic: topic,
            partitions: $f5e1c483726839d3$var$keys(partitions).map((partition)=>{
                const offset = partitions[partition];
                const resolvedOffset = $6e2611aeddd5d64e$exports(offset) ? indexedTopicOffsets[topic][partition] : offset;
                return {
                    partition: Number(partition),
                    offset: resolvedOffset
                };
            })
        };
    });
};


var $91b8a578f117fd94$exports = {};



const $91b8a578f117fd94$var$consumerType = $96d0cdc4a08345b0$exports("consumer");
/** @type {import('types').ConsumerEvents} */ const $91b8a578f117fd94$var$events = {
    HEARTBEAT: $91b8a578f117fd94$var$consumerType("heartbeat"),
    COMMIT_OFFSETS: $91b8a578f117fd94$var$consumerType("commit_offsets"),
    GROUP_JOIN: $91b8a578f117fd94$var$consumerType("group_join"),
    FETCH: $91b8a578f117fd94$var$consumerType("fetch"),
    FETCH_START: $91b8a578f117fd94$var$consumerType("fetch_start"),
    START_BATCH_PROCESS: $91b8a578f117fd94$var$consumerType("start_batch_process"),
    END_BATCH_PROCESS: $91b8a578f117fd94$var$consumerType("end_batch_process"),
    CONNECT: $91b8a578f117fd94$var$consumerType("connect"),
    DISCONNECT: $91b8a578f117fd94$var$consumerType("disconnect"),
    STOP: $91b8a578f117fd94$var$consumerType("stop"),
    CRASH: $91b8a578f117fd94$var$consumerType("crash"),
    REBALANCING: $91b8a578f117fd94$var$consumerType("rebalancing"),
    RECEIVED_UNSUBSCRIBED_TOPICS: $91b8a578f117fd94$var$consumerType("received_unsubscribed_topics"),
    REQUEST: $91b8a578f117fd94$var$consumerType($1da109fb7a6eab1e$exports.NETWORK_REQUEST),
    REQUEST_TIMEOUT: $91b8a578f117fd94$var$consumerType($1da109fb7a6eab1e$exports.NETWORK_REQUEST_TIMEOUT),
    REQUEST_QUEUE_SIZE: $91b8a578f117fd94$var$consumerType($1da109fb7a6eab1e$exports.NETWORK_REQUEST_QUEUE_SIZE)
};
const $91b8a578f117fd94$var$wrappedEvents = {
    [$91b8a578f117fd94$var$events.REQUEST]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST,
    [$91b8a578f117fd94$var$events.REQUEST_TIMEOUT]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST_TIMEOUT,
    [$91b8a578f117fd94$var$events.REQUEST_QUEUE_SIZE]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST_QUEUE_SIZE
};
const $91b8a578f117fd94$var$reversedWrappedEvents = $382ebe7dda76d67e$exports($91b8a578f117fd94$var$wrappedEvents);
const $91b8a578f117fd94$var$unwrap = (eventName)=>$91b8a578f117fd94$var$wrappedEvents[eventName] || eventName;
const $91b8a578f117fd94$var$wrap = (eventName)=>$91b8a578f117fd94$var$reversedWrappedEvents[eventName] || eventName;
$91b8a578f117fd94$exports = {
    events: $91b8a578f117fd94$var$events,
    wrap: $91b8a578f117fd94$var$wrap,
    unwrap: $91b8a578f117fd94$var$unwrap
};


const { events: { COMMIT_OFFSETS: $ae8438bb33d75fc3$var$COMMIT_OFFSETS } } = $91b8a578f117fd94$exports;
const { keys: $ae8438bb33d75fc3$var$keys, assign: $ae8438bb33d75fc3$var$assign } = Object;
const $ae8438bb33d75fc3$var$indexTopics = (topics)=>topics.reduce((obj, topic)=>$ae8438bb33d75fc3$var$assign(obj, {
            [topic]: {}
        }), {});
const $ae8438bb33d75fc3$var$PRIVATE = {
    COMMITTED_OFFSETS: Symbol("private:OffsetManager:committedOffsets")
};
$ae8438bb33d75fc3$exports = class OffsetManager {
    /**
   * @param {Object} options
   * @param {import("../../../types").Cluster} options.cluster
   * @param {import("../../../types").Broker} options.coordinator
   * @param {import("../../../types").IMemberAssignment} options.memberAssignment
   * @param {boolean} options.autoCommit
   * @param {number | null} options.autoCommitInterval
   * @param {number | null} options.autoCommitThreshold
   * @param {{[topic: string]: { fromBeginning: boolean }}} options.topicConfigurations
   * @param {import("../../instrumentation/emitter")} options.instrumentationEmitter
   * @param {string} options.groupId
   * @param {number} options.generationId
   * @param {string} options.memberId
   */ constructor({ cluster: cluster, coordinator: coordinator, memberAssignment: memberAssignment, autoCommit: autoCommit, autoCommitInterval: autoCommitInterval, autoCommitThreshold: autoCommitThreshold, topicConfigurations: topicConfigurations, instrumentationEmitter: instrumentationEmitter, groupId: groupId, generationId: generationId, memberId: memberId }){
        this.cluster = cluster;
        this.coordinator = coordinator;
        // memberAssignment format:
        // {
        //   'topic1': [0, 1, 2, 3],
        //   'topic2': [0, 1, 2, 3, 4, 5],
        // }
        this.memberAssignment = memberAssignment;
        this.topicConfigurations = topicConfigurations;
        this.instrumentationEmitter = instrumentationEmitter;
        this.groupId = groupId;
        this.generationId = generationId;
        this.memberId = memberId;
        this.autoCommit = autoCommit;
        this.autoCommitInterval = autoCommitInterval;
        this.autoCommitThreshold = autoCommitThreshold;
        this.lastCommit = Date.now();
        this.topics = $ae8438bb33d75fc3$var$keys(memberAssignment);
        this.clearAllOffsets();
    }
    /**
   * @param {string} topic
   * @param {number} partition
   * @returns {Long}
   */ nextOffset(topic, partition) {
        if (!this.resolvedOffsets[topic][partition]) this.resolvedOffsets[topic][partition] = this.committedOffsets()[topic][partition];
        let offset = this.resolvedOffsets[topic][partition];
        if ($6e2611aeddd5d64e$exports(offset)) offset = "0";
        return $dSqZK.fromValue(offset);
    }
    /**
   * @returns {Promise<import("../../../types").Broker>}
   */ async getCoordinator() {
        if (!this.coordinator.isConnected()) this.coordinator = await this.cluster.findBroker(this.coordinator);
        return this.coordinator;
    }
    /**
   * @param {import("../../../types").TopicPartition} topicPartition
   */ resetOffset({ topic: topic, partition: partition }) {
        this.resolvedOffsets[topic][partition] = this.committedOffsets()[topic][partition];
    }
    /**
   * @param {import("../../../types").TopicPartitionOffset} topicPartitionOffset
   */ resolveOffset({ topic: topic, partition: partition, offset: offset }) {
        this.resolvedOffsets[topic][partition] = $dSqZK.fromValue(offset).add(1).toString();
    }
    /**
   * @returns {Long}
   */ countResolvedOffsets() {
        const committedOffsets = this.committedOffsets();
        const subtractOffsets = (resolvedOffset, committedOffset)=>{
            const resolvedOffsetLong = $dSqZK.fromValue(resolvedOffset);
            return $6e2611aeddd5d64e$exports(committedOffset) ? resolvedOffsetLong : resolvedOffsetLong.subtract($dSqZK.fromValue(committedOffset));
        };
        const subtractPartitionOffsets = (resolvedTopicOffsets, committedTopicOffsets)=>$ae8438bb33d75fc3$var$keys(resolvedTopicOffsets).map((partition)=>subtractOffsets(resolvedTopicOffsets[partition], committedTopicOffsets[partition]));
        const subtractTopicOffsets = (topic)=>subtractPartitionOffsets(this.resolvedOffsets[topic], committedOffsets[topic]);
        const offsetsDiff = this.topics.flatMap(subtractTopicOffsets);
        return offsetsDiff.reduce((sum, offset)=>sum.add(offset), $dSqZK.fromValue(0));
    }
    /**
   * @param {import("../../../types").TopicPartition} topicPartition
   */ async setDefaultOffset({ topic: topic, partition: partition }) {
        const { groupId: groupId, generationId: generationId, memberId: memberId } = this;
        const defaultOffset = this.cluster.defaultOffset(this.topicConfigurations[topic]);
        const coordinator = await this.getCoordinator();
        await coordinator.offsetCommit({
            groupId: groupId,
            memberId: memberId,
            groupGenerationId: generationId,
            topics: [
                {
                    topic: topic,
                    partitions: [
                        {
                            partition: partition,
                            offset: defaultOffset
                        }
                    ]
                }
            ]
        });
        this.clearOffsets({
            topic: topic,
            partition: partition
        });
    }
    /**
   * Commit the given offset to the topic/partition. If the consumer isn't assigned to the given
   * topic/partition this method will be a NO-OP.
   *
   * @param {import("../../../types").TopicPartitionOffset} topicPartitionOffset
   */ async seek({ topic: topic, partition: partition, offset: offset }) {
        if (!this.memberAssignment[topic] || !this.memberAssignment[topic].includes(partition)) return;
        if (!this.autoCommit) {
            this.resolveOffset({
                topic: topic,
                partition: partition,
                offset: $dSqZK.fromValue(offset).subtract(1).toString()
            });
            return;
        }
        const { groupId: groupId, generationId: generationId, memberId: memberId } = this;
        const coordinator = await this.getCoordinator();
        await coordinator.offsetCommit({
            groupId: groupId,
            memberId: memberId,
            groupGenerationId: generationId,
            topics: [
                {
                    topic: topic,
                    partitions: [
                        {
                            partition: partition,
                            offset: offset
                        }
                    ]
                }
            ]
        });
        this.clearOffsets({
            topic: topic,
            partition: partition
        });
    }
    async commitOffsetsIfNecessary() {
        const now = Date.now();
        const timeoutReached = this.autoCommitInterval != null && now >= this.lastCommit + this.autoCommitInterval;
        const thresholdReached = this.autoCommitThreshold != null && this.countResolvedOffsets().gte($dSqZK.fromValue(this.autoCommitThreshold));
        if (timeoutReached || thresholdReached) return this.commitOffsets();
    }
    /**
   * Return all locally resolved offsets which are not marked as committed, by topic-partition.
   * @returns {import('../../../types').OffsetsByTopicPartition}
   */ uncommittedOffsets() {
        const offsets = (topic)=>$ae8438bb33d75fc3$var$keys(this.resolvedOffsets[topic]);
        const emptyPartitions = ({ partitions: partitions })=>partitions.length > 0;
        const toPartitions = (topic)=>(partition)=>({
                    partition: partition,
                    offset: this.resolvedOffsets[topic][partition]
                });
        const changedOffsets = (topic)=>({ partition: partition, offset: offset })=>{
                return offset !== this.committedOffsets()[topic][partition] && $dSqZK.fromValue(offset).greaterThanOrEqual(0);
            };
        // Select and format updated partitions
        const topicsWithPartitionsToCommit = this.topics.map((topic)=>({
                topic: topic,
                partitions: offsets(topic).map(toPartitions(topic)).filter(changedOffsets(topic))
            })).filter(emptyPartitions);
        return {
            topics: topicsWithPartitionsToCommit
        };
    }
    async commitOffsets(offsets = {}) {
        const { groupId: groupId, generationId: generationId, memberId: memberId } = this;
        const { topics: topics = this.uncommittedOffsets().topics } = offsets;
        if (topics.length === 0) {
            this.lastCommit = Date.now();
            return;
        }
        const payload = {
            groupId: groupId,
            memberId: memberId,
            groupGenerationId: generationId,
            topics: topics
        };
        try {
            const coordinator = await this.getCoordinator();
            await coordinator.offsetCommit(payload);
            this.instrumentationEmitter.emit($ae8438bb33d75fc3$var$COMMIT_OFFSETS, payload);
            // Update local reference of committed offsets
            topics.forEach(({ topic: topic, partitions: partitions })=>{
                const updatedOffsets = partitions.reduce((obj, { partition: partition, offset: offset })=>$ae8438bb33d75fc3$var$assign(obj, {
                        [partition]: offset
                    }), {});
                this[$ae8438bb33d75fc3$var$PRIVATE.COMMITTED_OFFSETS][topic] = $ae8438bb33d75fc3$var$assign({}, this.committedOffsets()[topic], updatedOffsets);
            });
            this.lastCommit = Date.now();
        } catch (e) {
            // metadata is stale, the coordinator has changed due to a restart or
            // broker reassignment
            if (e.type === "NOT_COORDINATOR_FOR_GROUP") await this.cluster.refreshMetadata();
            throw e;
        }
    }
    async resolveOffsets() {
        const { groupId: groupId } = this;
        const invalidOffset = (topic)=>(partition)=>{
                return $6e2611aeddd5d64e$exports(this.committedOffsets()[topic][partition]);
            };
        const pendingPartitions = this.topics.map((topic)=>({
                topic: topic,
                partitions: this.memberAssignment[topic].filter(invalidOffset(topic)).map((partition)=>({
                        partition: partition
                    }))
            })).filter((t)=>t.partitions.length > 0);
        if (pendingPartitions.length === 0) return;
        const coordinator = await this.getCoordinator();
        const { responses: consumerOffsets } = await coordinator.offsetFetch({
            groupId: groupId,
            topics: pendingPartitions
        });
        const unresolvedPartitions = consumerOffsets.map(({ topic: topic, partitions: partitions })=>$ae8438bb33d75fc3$var$assign({
                topic: topic,
                partitions: partitions.filter(({ offset: offset })=>$6e2611aeddd5d64e$exports(offset)).map(({ partition: partition })=>$ae8438bb33d75fc3$var$assign({
                        partition: partition
                    }))
            }, this.topicConfigurations[topic]));
        const indexPartitions = (obj, { partition: partition, offset: offset })=>{
            return $ae8438bb33d75fc3$var$assign(obj, {
                [partition]: offset
            });
        };
        const hasUnresolvedPartitions = ()=>unresolvedPartitions.some((t)=>t.partitions.length > 0);
        let offsets = consumerOffsets;
        if (hasUnresolvedPartitions()) {
            const topicOffsets = await this.cluster.fetchTopicsOffset(unresolvedPartitions);
            offsets = $f5e1c483726839d3$exports(consumerOffsets, topicOffsets);
        }
        offsets.forEach(({ topic: topic, partitions: partitions })=>{
            this.committedOffsets()[topic] = partitions.reduce(indexPartitions, {
                ...this.committedOffsets()[topic]
            });
        });
    }
    /**
   * @private
   * @param {import("../../../types").TopicPartition} topicPartition
   */ clearOffsets({ topic: topic, partition: partition }) {
        delete this.committedOffsets()[topic][partition];
        delete this.resolvedOffsets[topic][partition];
    }
    /**
   * @private
   */ clearAllOffsets() {
        const committedOffsets = this.committedOffsets();
        for(const topic in committedOffsets)delete committedOffsets[topic];
        for (const topic of this.topics)committedOffsets[topic] = {};
        this.resolvedOffsets = $ae8438bb33d75fc3$var$indexTopics(this.topics);
    }
    committedOffsets() {
        if (!this[$ae8438bb33d75fc3$var$PRIVATE.COMMITTED_OFFSETS]) this[$ae8438bb33d75fc3$var$PRIVATE.COMMITTED_OFFSETS] = this.groupId ? this.cluster.committedOffsets({
            groupId: this.groupId
        }) : {};
        return this[$ae8438bb33d75fc3$var$PRIVATE.COMMITTED_OFFSETS];
    }
};


var $e69a197130ea9617$exports = {};

var $dSqZK = parcelRequire("dSqZK");
var $918d3a8fcdc3c914$exports = {};

var $918d3a8fcdc3c914$require$Buffer = $4UN2M$buffer.Buffer;

var $dSqZK = parcelRequire("dSqZK");
const $918d3a8fcdc3c914$var$ABORTED_MESSAGE_KEY = $918d3a8fcdc3c914$require$Buffer.from([
    0,
    0,
    0,
    0
]);
const $918d3a8fcdc3c914$var$isAbortMarker = ({ key: key })=>{
    // Handle null/undefined keys.
    if (!key) return false;
    // Cast key to buffer defensively
    return $918d3a8fcdc3c914$require$Buffer.from(key).equals($918d3a8fcdc3c914$var$ABORTED_MESSAGE_KEY);
};
/**
 * Remove messages marked as aborted according to the aborted transactions list.
 *
 * Start of an aborted transaction is determined by message offset.
 * End of an aborted transaction is determined by control messages.
 * @param {Message[]} messages
 * @param {Transaction[]} [abortedTransactions]
 * @returns {Message[]} Messages which did not participate in an aborted transaction
 *
 * @typedef {object} Message
 * @param {Buffer} key
 * @param {lastOffset} key  Int64
 * @param {RecordBatch}  batchContext
 *
 * @typedef {object} Transaction
 * @param {string} firstOffset  Int64
 * @param {string} producerId  Int64
 *
 * @typedef {object} RecordBatch
 * @param {string}  producerId  Int64
 * @param {boolean}  inTransaction
 */ $918d3a8fcdc3c914$exports = ({ messages: messages, abortedTransactions: abortedTransactions })=>{
    const currentAbortedTransactions = new Map();
    if (!abortedTransactions || !abortedTransactions.length) return messages;
    const remainingAbortedTransactions = [
        ...abortedTransactions
    ];
    return messages.filter((message)=>{
        // If the message offset is GTE the first offset of the next aborted transaction
        // then we have stepped into an aborted transaction.
        if (remainingAbortedTransactions.length && $dSqZK.fromValue(message.offset).gte(remainingAbortedTransactions[0].firstOffset)) {
            const { producerId: producerId } = remainingAbortedTransactions.shift();
            currentAbortedTransactions.set(producerId, true);
        }
        const { producerId: producerId, inTransaction: inTransaction } = message.batchContext;
        if ($918d3a8fcdc3c914$var$isAbortMarker(message)) // Transaction is over, we no longer need to ignore messages from this producer
        currentAbortedTransactions.delete(producerId);
        else if (currentAbortedTransactions.has(producerId) && inTransaction) return false;
        return true;
    });
};


/**
 * A batch collects messages returned from a single fetch call.
 *
 * A batch could contain _multiple_ Kafka RecordBatches.
 */ $e69a197130ea9617$exports = class Batch {
    constructor(topic, fetchedOffset, partitionData){
        this.fetchedOffset = fetchedOffset;
        const longFetchedOffset = $dSqZK.fromValue(this.fetchedOffset);
        const { abortedTransactions: abortedTransactions, messages: messages } = partitionData;
        this.topic = topic;
        this.partition = partitionData.partition;
        this.highWatermark = partitionData.highWatermark;
        this.rawMessages = messages;
        // Apparently fetch can return different offsets than the target offset provided to the fetch API.
        // Discard messages that are not in the requested offset
        // https://github.com/apache/kafka/blob/bf237fa7c576bd141d78fdea9f17f65ea269c290/clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java#L912
        this.messagesWithinOffset = this.rawMessages.filter((message)=>$dSqZK.fromValue(message.offset).gte(longFetchedOffset));
        // 1. Don't expose aborted messages
        // 2. Don't expose control records
        // @see https://kafka.apache.org/documentation/#controlbatch
        this.messages = $918d3a8fcdc3c914$exports({
            messages: this.messagesWithinOffset,
            abortedTransactions: abortedTransactions
        }).filter((message)=>!message.isControlRecord);
    }
    isEmpty() {
        return this.messages.length === 0;
    }
    isEmptyIncludingFiltered() {
        return this.messagesWithinOffset.length === 0;
    }
    /**
   * If the batch contained raw messages (i.e was not truly empty) but all messages were filtered out due to
   * log compaction, control records or other reasons
   */ isEmptyDueToFiltering() {
        return this.isEmpty() && this.rawMessages.length > 0;
    }
    isEmptyControlRecord() {
        return this.isEmpty() && this.messagesWithinOffset.some(({ isControlRecord: isControlRecord })=>isControlRecord);
    }
    /**
   * With compressed messages, it's possible for the returned messages to have offsets smaller than the starting offset.
   * These messages will be filtered out (i.e. they are not even included in this.messagesWithinOffset)
   * If these are the only messages, the batch will appear as an empty batch.
   *
   * isEmpty() and isEmptyIncludingFiltered() will always return true if the batch is empty,
   * but this method will only return true if the batch is empty due to log compacted messages.
   *
   * @returns boolean True if the batch is empty, because of log compacted messages in the partition.
   */ isEmptyDueToLogCompactedMessages() {
        const hasMessages = this.rawMessages.length > 0;
        return hasMessages && this.isEmptyIncludingFiltered();
    }
    firstOffset() {
        return this.isEmptyIncludingFiltered() ? null : this.messagesWithinOffset[0].offset;
    }
    lastOffset() {
        if (this.isEmptyDueToLogCompactedMessages()) return this.fetchedOffset;
        if (this.isEmptyIncludingFiltered()) return $dSqZK.fromValue(this.highWatermark).add(-1).toString();
        return this.messagesWithinOffset[this.messagesWithinOffset.length - 1].offset;
    }
    /**
   * Returns the lag based on the last offset in the batch (also known as "high")
   */ offsetLag() {
        const lastOffsetOfPartition = $dSqZK.fromValue(this.highWatermark).add(-1);
        const lastConsumedOffset = $dSqZK.fromValue(this.lastOffset());
        return lastOffsetOfPartition.add(lastConsumedOffset.multiply(-1)).toString();
    }
    /**
   * Returns the lag based on the first offset in the batch
   */ offsetLagLow() {
        if (this.isEmptyIncludingFiltered()) return "0";
        const lastOffsetOfPartition = $dSqZK.fromValue(this.highWatermark).add(-1);
        const firstConsumedOffset = $dSqZK.fromValue(this.firstOffset());
        return lastOffsetOfPartition.add(firstConsumedOffset.multiply(-1)).toString();
    }
};


var $4b64e66ecb382115$exports = {};
$4b64e66ecb382115$exports = class SeekOffsets extends Map {
    getKey(topic, partition) {
        return JSON.stringify([
            topic,
            partition
        ]);
    }
    set(topic, partition, offset) {
        const key = this.getKey(topic, partition);
        super.set(key, offset);
    }
    has(topic, partition) {
        const key = this.getKey(topic, partition);
        return super.has(key);
    }
    pop(topic, partition) {
        if (this.size === 0 || !this.has(topic, partition)) return;
        const key = this.getKey(topic, partition);
        const offset = this.get(key);
        this.delete(key);
        return {
            topic: topic,
            partition: partition,
            offset: offset
        };
    }
};


var $db72354b31b81417$exports = {};
const $db72354b31b81417$var$createState = (topic)=>({
        topic: topic,
        paused: new Set(),
        pauseAll: false,
        resumed: new Set()
    });
$db72354b31b81417$exports = class SubscriptionState {
    constructor(){
        this.assignedPartitionsByTopic = {};
        this.subscriptionStatesByTopic = {};
    }
    /**
   * Replace the current assignment with a new set of assignments
   *
   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ assign(topicPartitions = []) {
        this.assignedPartitionsByTopic = topicPartitions.reduce((assigned, { topic: topic, partitions: partitions = [] })=>{
            return {
                ...assigned,
                [topic]: {
                    topic: topic,
                    partitions: partitions
                }
            };
        }, {});
    }
    /**
   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ pause(topicPartitions = []) {
        topicPartitions.forEach(({ topic: topic, partitions: partitions })=>{
            const state = this.subscriptionStatesByTopic[topic] || $db72354b31b81417$var$createState(topic);
            if (typeof partitions === "undefined") {
                state.paused.clear();
                state.resumed.clear();
                state.pauseAll = true;
            } else if (Array.isArray(partitions)) {
                partitions.forEach((partition)=>{
                    state.paused.add(partition);
                    state.resumed.delete(partition);
                });
                state.pauseAll = false;
            }
            this.subscriptionStatesByTopic[topic] = state;
        });
    }
    /**
   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ resume(topicPartitions = []) {
        topicPartitions.forEach(({ topic: topic, partitions: partitions })=>{
            const state = this.subscriptionStatesByTopic[topic] || $db72354b31b81417$var$createState(topic);
            if (typeof partitions === "undefined") {
                state.paused.clear();
                state.resumed.clear();
                state.pauseAll = false;
            } else if (Array.isArray(partitions)) partitions.forEach((partition)=>{
                state.paused.delete(partition);
                if (state.pauseAll) state.resumed.add(partition);
            });
            this.subscriptionStatesByTopic[topic] = state;
        });
    }
    /**
   * @returns {Array<import("../../types").TopicPartitions>} topicPartitions
   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ assigned() {
        return Object.values(this.assignedPartitionsByTopic).map(({ topic: topic, partitions: partitions })=>({
                topic: topic,
                partitions: partitions.sort()
            }));
    }
    /**
   * @returns {Array<import("../../types").TopicPartitions>} topicPartitions
   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ active() {
        return Object.values(this.assignedPartitionsByTopic).map(({ topic: topic, partitions: partitions })=>({
                topic: topic,
                partitions: partitions.filter((partition)=>!this.isPaused(topic, partition)).sort()
            }));
    }
    /**
   * @returns {Array<import("../../types").TopicPartitions>} topicPartitions
   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ paused() {
        return Object.values(this.assignedPartitionsByTopic).map(({ topic: topic, partitions: partitions })=>({
                topic: topic,
                partitions: partitions.filter((partition)=>this.isPaused(topic, partition)).sort()
            })).filter(({ partitions: partitions })=>partitions.length !== 0);
    }
    isPaused(topic, partition) {
        const state = this.subscriptionStatesByTopic[topic];
        if (!state) return false;
        const partitionResumed = state.resumed.has(partition);
        const partitionPaused = state.paused.has(partition);
        return state.pauseAll && !partitionResumed || partitionPaused;
    }
};



const { events: { GROUP_JOIN: $95e82f69a37b24c8$var$GROUP_JOIN, HEARTBEAT: $95e82f69a37b24c8$var$HEARTBEAT, CONNECT: $95e82f69a37b24c8$var$CONNECT, RECEIVED_UNSUBSCRIBED_TOPICS: $95e82f69a37b24c8$var$RECEIVED_UNSUBSCRIBED_TOPICS } } = $91b8a578f117fd94$exports;
var $68363f5e47f65887$exports = {};

var $68363f5e47f65887$require$Buffer = $4UN2M$buffer.Buffer;

var $7jO81 = parcelRequire("7jO81");

var $eMnPM = parcelRequire("eMnPM");
const $68363f5e47f65887$var$MemberMetadata = {
    /**
   * @param {Object} metadata
   * @param {number} metadata.version
   * @param {Array<string>} metadata.topics
   * @param {Buffer} [metadata.userData=Buffer.alloc(0)]
   *
   * @returns Buffer
   */ encode ({ version: version, topics: topics, userData: userData = $68363f5e47f65887$require$Buffer.alloc(0) }) {
        return new $7jO81().writeInt16(version).writeArray(topics).writeBytes(userData).buffer;
    },
    /**
   * @param {Buffer} buffer
   * @returns {Object}
   */ decode (buffer) {
        const decoder = new $eMnPM(buffer);
        return {
            version: decoder.readInt16(),
            topics: decoder.readArray((d)=>d.readString()),
            userData: decoder.readBytes()
        };
    }
};
const $68363f5e47f65887$var$MemberAssignment = {
    /**
   * @param {object} options
   * @param {number} options.version
   * @param {Object<String,Array>} options.assignment, example:
   *                               {
   *                                 'topic-A': [0, 2, 4, 6],
   *                                 'topic-B': [0, 2],
   *                               }
   * @param {Buffer} [options.userData=Buffer.alloc(0)]
   *
   * @returns Buffer
   */ encode ({ version: version, assignment: assignment, userData: userData = $68363f5e47f65887$require$Buffer.alloc(0) }) {
        return new $7jO81().writeInt16(version).writeArray(Object.keys(assignment).map((topic)=>new $7jO81().writeString(topic).writeArray(assignment[topic]))).writeBytes(userData).buffer;
    },
    /**
   * @param {Buffer} buffer
   * @returns {Object|null}
   */ decode (buffer) {
        const decoder = new $eMnPM(buffer);
        const decodePartitions = (d)=>d.readInt32();
        const decodeAssignment = (d)=>({
                topic: d.readString(),
                partitions: d.readArray(decodePartitions)
            });
        const indexAssignment = (obj, { topic: topic, partitions: partitions })=>Object.assign(obj, {
                [topic]: partitions
            });
        if (!decoder.canReadInt16()) return null;
        return {
            version: decoder.readInt16(),
            assignment: decoder.readArray(decodeAssignment).reduce(indexAssignment, {}),
            userData: decoder.readBytes()
        };
    }
};
$68363f5e47f65887$exports = {
    MemberMetadata: $68363f5e47f65887$var$MemberMetadata,
    MemberAssignment: $68363f5e47f65887$var$MemberAssignment
};


var $95e82f69a37b24c8$require$MemberAssignment = $68363f5e47f65887$exports.MemberAssignment;

var $8mQRr = parcelRequire("8mQRr");
var $95e82f69a37b24c8$require$KafkaJSError = $8mQRr.KafkaJSError;
var $95e82f69a37b24c8$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
var $95e82f69a37b24c8$require$KafkaJSStaleTopicMetadataAssignment = $8mQRr.KafkaJSStaleTopicMetadataAssignment;
var $95e82f69a37b24c8$require$isRebalancing = $8mQRr.isRebalancing;
const { keys: $95e82f69a37b24c8$var$keys } = Object;
const $95e82f69a37b24c8$var$STALE_METADATA_ERRORS = [
    "LEADER_NOT_AVAILABLE",
    // Fetch before v9 uses NOT_LEADER_FOR_PARTITION
    "NOT_LEADER_FOR_PARTITION",
    // Fetch after v9 uses {FENCED,UNKNOWN}_LEADER_EPOCH
    "FENCED_LEADER_EPOCH",
    "UNKNOWN_LEADER_EPOCH",
    "UNKNOWN_TOPIC_OR_PARTITION"
];
const $95e82f69a37b24c8$var$PRIVATE = {
    JOIN: Symbol("private:ConsumerGroup:join"),
    SYNC: Symbol("private:ConsumerGroup:sync"),
    SHARED_HEARTBEAT: Symbol("private:ConsumerGroup:sharedHeartbeat")
};
$95e82f69a37b24c8$exports = class ConsumerGroup {
    /**
   * @param {object} options
   * @param {import('../../types').RetryOptions} options.retry
   * @param {import('../../types').Cluster} options.cluster
   * @param {string} options.groupId
   * @param {string[]} options.topics
   * @param {Record<string, { fromBeginning?: boolean }>} options.topicConfigurations
   * @param {import('../../types').Logger} options.logger
   * @param {import('../instrumentation/emitter')} options.instrumentationEmitter
   * @param {import('../../types').Assigner[]} options.assigners
   * @param {number} options.sessionTimeout
   * @param {number} options.rebalanceTimeout
   * @param {number} options.maxBytesPerPartition
   * @param {number} options.minBytes
   * @param {number} options.maxBytes
   * @param {number} options.maxWaitTimeInMs
   * @param {boolean} options.autoCommit
   * @param {number} options.autoCommitInterval
   * @param {number} options.autoCommitThreshold
   * @param {number} options.isolationLevel
   * @param {string} options.rackId
   * @param {number} options.metadataMaxAge
   */ constructor({ retry: retry, cluster: cluster, groupId: groupId, topics: topics, topicConfigurations: topicConfigurations, logger: logger, instrumentationEmitter: instrumentationEmitter, assigners: assigners, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, maxBytesPerPartition: maxBytesPerPartition, minBytes: minBytes, maxBytes: maxBytes, maxWaitTimeInMs: maxWaitTimeInMs, autoCommit: autoCommit, autoCommitInterval: autoCommitInterval, autoCommitThreshold: autoCommitThreshold, isolationLevel: isolationLevel, rackId: rackId, metadataMaxAge: metadataMaxAge }){
        /** @type {import("../../types").Cluster} */ this.cluster = cluster;
        this.groupId = groupId;
        this.topics = topics;
        this.topicsSubscribed = topics;
        this.topicConfigurations = topicConfigurations;
        this.logger = logger.namespace("ConsumerGroup");
        this.instrumentationEmitter = instrumentationEmitter;
        this.retrier = $d1c48a936f24908d$exports(Object.assign({}, retry));
        this.assigners = assigners;
        this.sessionTimeout = sessionTimeout;
        this.rebalanceTimeout = rebalanceTimeout;
        this.maxBytesPerPartition = maxBytesPerPartition;
        this.minBytes = minBytes;
        this.maxBytes = maxBytes;
        this.maxWaitTime = maxWaitTimeInMs;
        this.autoCommit = autoCommit;
        this.autoCommitInterval = autoCommitInterval;
        this.autoCommitThreshold = autoCommitThreshold;
        this.isolationLevel = isolationLevel;
        this.rackId = rackId;
        this.metadataMaxAge = metadataMaxAge;
        this.seekOffset = new $4b64e66ecb382115$exports();
        this.coordinator = null;
        this.generationId = null;
        this.leaderId = null;
        this.memberId = null;
        this.members = null;
        this.groupProtocol = null;
        this.partitionsPerSubscribedTopic = null;
        /**
     * Preferred read replica per topic and partition
     *
     * Each of the partitions tracks the preferred read replica (`nodeId`) and a timestamp
     * until when that preference is valid.
     *
     * @type {{[topicName: string]: {[partition: number]: {nodeId: number, expireAt: number}}}}
     */ this.preferredReadReplicasPerTopicPartition = {};
        this.offsetManager = null;
        this.subscriptionState = new $db72354b31b81417$exports();
        this.lastRequest = Date.now();
        this[$95e82f69a37b24c8$var$PRIVATE.SHARED_HEARTBEAT] = $9c89082ee7ce8fe3$exports(async ({ interval: interval })=>{
            const { groupId: groupId, generationId: generationId, memberId: memberId } = this;
            const now = Date.now();
            if (memberId && now >= this.lastRequest + interval) {
                const payload = {
                    groupId: groupId,
                    memberId: memberId,
                    groupGenerationId: generationId
                };
                await this.coordinator.heartbeat(payload);
                this.instrumentationEmitter.emit($95e82f69a37b24c8$var$HEARTBEAT, payload);
                this.lastRequest = Date.now();
            }
        });
    }
    isLeader() {
        return this.leaderId && this.memberId === this.leaderId;
    }
    getNodeIds() {
        return this.cluster.getNodeIds();
    }
    async connect() {
        await this.cluster.connect();
        this.instrumentationEmitter.emit($95e82f69a37b24c8$var$CONNECT);
        await this.cluster.refreshMetadataIfNecessary();
    }
    async [$95e82f69a37b24c8$var$PRIVATE.JOIN]() {
        const { groupId: groupId, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout } = this;
        this.coordinator = await this.cluster.findGroupCoordinator({
            groupId: groupId
        });
        const groupData = await this.coordinator.joinGroup({
            groupId: groupId,
            sessionTimeout: sessionTimeout,
            rebalanceTimeout: rebalanceTimeout,
            memberId: this.memberId || "",
            groupProtocols: this.assigners.map((assigner)=>assigner.protocol({
                    topics: this.topicsSubscribed
                }))
        });
        this.generationId = groupData.generationId;
        this.leaderId = groupData.leaderId;
        this.memberId = groupData.memberId;
        this.members = groupData.members;
        this.groupProtocol = groupData.groupProtocol;
    }
    async leave() {
        const { groupId: groupId, memberId: memberId } = this;
        if (memberId) {
            await this.coordinator.leaveGroup({
                groupId: groupId,
                memberId: memberId
            });
            this.memberId = null;
        }
    }
    async [$95e82f69a37b24c8$var$PRIVATE.SYNC]() {
        let assignment = [];
        const { groupId: groupId, generationId: generationId, memberId: memberId, members: members, groupProtocol: groupProtocol, topics: topics, topicsSubscribed: topicsSubscribed, coordinator: coordinator } = this;
        if (this.isLeader()) {
            this.logger.debug("Chosen as group leader", {
                groupId: groupId,
                generationId: generationId,
                memberId: memberId,
                topics: topics
            });
            const assigner = this.assigners.find(({ name: name })=>name === groupProtocol);
            if (!assigner) throw new $95e82f69a37b24c8$require$KafkaJSNonRetriableError(`Unsupported partition assigner "${groupProtocol}", the assigner wasn't found in the assigners list`);
            await this.cluster.refreshMetadata();
            assignment = await assigner.assign({
                members: members,
                topics: topicsSubscribed
            });
            this.logger.debug("Group assignment", {
                groupId: groupId,
                generationId: generationId,
                groupProtocol: groupProtocol,
                assignment: assignment,
                topics: topicsSubscribed
            });
        }
        // Keep track of the partitions for the subscribed topics
        this.partitionsPerSubscribedTopic = this.generatePartitionsPerSubscribedTopic();
        const { memberAssignment: memberAssignment } = await this.coordinator.syncGroup({
            groupId: groupId,
            generationId: generationId,
            memberId: memberId,
            groupAssignment: assignment
        });
        const decodedMemberAssignment = $95e82f69a37b24c8$require$MemberAssignment.decode(memberAssignment);
        const decodedAssignment = decodedMemberAssignment != null ? decodedMemberAssignment.assignment : {};
        this.logger.debug("Received assignment", {
            groupId: groupId,
            generationId: generationId,
            memberId: memberId,
            memberAssignment: decodedAssignment
        });
        const assignedTopics = $95e82f69a37b24c8$var$keys(decodedAssignment);
        const topicsNotSubscribed = $8b1e7982840fa5e9$exports(assignedTopics, topicsSubscribed);
        if (topicsNotSubscribed.length > 0) {
            const payload = {
                groupId: groupId,
                generationId: generationId,
                memberId: memberId,
                assignedTopics: assignedTopics,
                topicsSubscribed: topicsSubscribed,
                topicsNotSubscribed: topicsNotSubscribed
            };
            this.instrumentationEmitter.emit($95e82f69a37b24c8$var$RECEIVED_UNSUBSCRIBED_TOPICS, payload);
            this.logger.warn("Consumer group received unsubscribed topics", {
                ...payload,
                helpUrl: $4jZ5a("docs/faq", "why-am-i-receiving-messages-for-topics-i-m-not-subscribed-to")
            });
        }
        // Remove unsubscribed topics from the list
        const safeAssignment = $8b1e7982840fa5e9$exports(assignedTopics, topicsNotSubscribed);
        const currentMemberAssignment = safeAssignment.map((topic)=>({
                topic: topic,
                partitions: decodedAssignment[topic]
            }));
        // Check if the consumer is aware of all assigned partitions
        for (const assignment of currentMemberAssignment){
            const { topic: topic, partitions: assignedPartitions } = assignment;
            const knownPartitions = this.partitionsPerSubscribedTopic.get(topic);
            const isAwareOfAllAssignedPartitions = assignedPartitions.every((partition)=>knownPartitions.includes(partition));
            if (!isAwareOfAllAssignedPartitions) {
                this.logger.warn("Consumer is not aware of all assigned partitions, refreshing metadata", {
                    groupId: groupId,
                    generationId: generationId,
                    memberId: memberId,
                    topic: topic,
                    knownPartitions: knownPartitions,
                    assignedPartitions: assignedPartitions
                });
                // If the consumer is not aware of all assigned partitions, refresh metadata
                // and update the list of partitions per subscribed topic. It's enough to perform
                // this operation once since refresh metadata will update metadata for all topics
                await this.cluster.refreshMetadata();
                this.partitionsPerSubscribedTopic = this.generatePartitionsPerSubscribedTopic();
                break;
            }
        }
        this.topics = currentMemberAssignment.map(({ topic: topic })=>topic);
        this.subscriptionState.assign(currentMemberAssignment);
        this.offsetManager = new $ae8438bb33d75fc3$exports({
            cluster: this.cluster,
            topicConfigurations: this.topicConfigurations,
            instrumentationEmitter: this.instrumentationEmitter,
            memberAssignment: currentMemberAssignment.reduce((partitionsByTopic, { topic: topic, partitions: partitions })=>({
                    ...partitionsByTopic,
                    [topic]: partitions
                }), {}),
            autoCommit: this.autoCommit,
            autoCommitInterval: this.autoCommitInterval,
            autoCommitThreshold: this.autoCommitThreshold,
            coordinator: coordinator,
            groupId: groupId,
            generationId: generationId,
            memberId: memberId
        });
    }
    joinAndSync() {
        const startJoin = Date.now();
        return this.retrier(async (bail)=>{
            try {
                await this[$95e82f69a37b24c8$var$PRIVATE.JOIN]();
                await this[$95e82f69a37b24c8$var$PRIVATE.SYNC]();
                const memberAssignment = this.assigned().reduce((result, { topic: topic, partitions: partitions })=>({
                        ...result,
                        [topic]: partitions
                    }), {});
                const payload = {
                    groupId: this.groupId,
                    memberId: this.memberId,
                    leaderId: this.leaderId,
                    isLeader: this.isLeader(),
                    memberAssignment: memberAssignment,
                    groupProtocol: this.groupProtocol,
                    duration: Date.now() - startJoin
                };
                this.instrumentationEmitter.emit($95e82f69a37b24c8$var$GROUP_JOIN, payload);
                this.logger.info("Consumer has joined the group", payload);
            } catch (e) {
                if ($95e82f69a37b24c8$require$isRebalancing(e)) // Rebalance in progress isn't a retriable protocol error since the consumer
                // has to go through find coordinator and join again before it can
                // actually retry the operation. We wrap the original error in a retriable error
                // here instead in order to restart the join + sync sequence using the retrier.
                throw new $95e82f69a37b24c8$require$KafkaJSError(e);
                if (e.type === "UNKNOWN_MEMBER_ID") {
                    this.memberId = null;
                    throw new $95e82f69a37b24c8$require$KafkaJSError(e);
                }
                bail(e);
            }
        });
    }
    /**
   * @param {import("../../types").TopicPartition} topicPartition
   */ resetOffset({ topic: topic, partition: partition }) {
        this.offsetManager.resetOffset({
            topic: topic,
            partition: partition
        });
    }
    /**
   * @param {import("../../types").TopicPartitionOffset} topicPartitionOffset
   */ resolveOffset({ topic: topic, partition: partition, offset: offset }) {
        this.offsetManager.resolveOffset({
            topic: topic,
            partition: partition,
            offset: offset
        });
    }
    /**
   * Update the consumer offset for the given topic/partition. This will be used
   * on the next fetch. If this API is invoked for the same topic/partition more
   * than once, the latest offset will be used on the next fetch.
   *
   * @param {import("../../types").TopicPartitionOffset} topicPartitionOffset
   */ seek({ topic: topic, partition: partition, offset: offset }) {
        this.seekOffset.set(topic, partition, offset);
    }
    pause(topicPartitions) {
        this.logger.info(`Pausing fetching from ${topicPartitions.length} topics`, {
            topicPartitions: topicPartitions
        });
        this.subscriptionState.pause(topicPartitions);
    }
    resume(topicPartitions) {
        this.logger.info(`Resuming fetching from ${topicPartitions.length} topics`, {
            topicPartitions: topicPartitions
        });
        this.subscriptionState.resume(topicPartitions);
    }
    assigned() {
        return this.subscriptionState.assigned();
    }
    paused() {
        return this.subscriptionState.paused();
    }
    /**
   * @param {string} topic
   * @param {string} partition
   * @returns {boolean} whether the specified topic-partition are paused or not
   */ isPaused(topic, partition) {
        return this.subscriptionState.isPaused(topic, partition);
    }
    async commitOffsetsIfNecessary() {
        await this.offsetManager.commitOffsetsIfNecessary();
    }
    async commitOffsets(offsets) {
        await this.offsetManager.commitOffsets(offsets);
    }
    uncommittedOffsets() {
        return this.offsetManager.uncommittedOffsets();
    }
    async heartbeat({ interval: interval }) {
        return this[$95e82f69a37b24c8$var$PRIVATE.SHARED_HEARTBEAT]({
            interval: interval
        });
    }
    async fetch(nodeId) {
        try {
            await this.cluster.refreshMetadataIfNecessary();
            this.checkForStaleAssignment();
            let topicPartitions = this.subscriptionState.assigned();
            topicPartitions = this.filterPartitionsByNode(nodeId, topicPartitions);
            await this.seekOffsets(topicPartitions);
            const committedOffsets = this.offsetManager.committedOffsets();
            const activeTopicPartitions = this.getActiveTopicPartitions();
            const requests = topicPartitions.map(({ topic: topic, partitions: partitions })=>({
                    topic: topic,
                    partitions: partitions.filter((partition)=>/**
                 * When recovering from OffsetOutOfRange, each partition can recover
                 * concurrently, which invalidates resolved and committed offsets as part
                 * of the recovery mechanism (see OffsetManager.clearOffsets). In concurrent
                 * scenarios this can initiate a new fetch with invalid offsets.
                 *
                 * This was further highlighted by https://github.com/tulios/kafkajs/pull/570,
                 * which increased concurrency, making this more likely to happen.
                 *
                 * This is solved by only making requests for partitions with initialized offsets.
                 *
                 * See the following pull request which explains the context of the problem:
                 * @issue https://github.com/tulios/kafkajs/pull/578
                 */ committedOffsets[topic][partition] != null && activeTopicPartitions[topic].has(partition)).map((partition)=>({
                            partition: partition,
                            fetchOffset: this.offsetManager.nextOffset(topic, partition).toString(),
                            maxBytes: this.maxBytesPerPartition
                        }))
                })).filter(({ partitions: partitions })=>partitions.length);
            if (!requests.length) {
                await $6e9e27040c59eddf$exports(this.maxWaitTime);
                return [];
            }
            const broker = await this.cluster.findBroker({
                nodeId: nodeId
            });
            const { responses: responses } = await broker.fetch({
                maxWaitTime: this.maxWaitTime,
                minBytes: this.minBytes,
                maxBytes: this.maxBytes,
                isolationLevel: this.isolationLevel,
                topics: requests,
                rackId: this.rackId
            });
            return responses.flatMap(({ topicName: topicName, partitions: partitions })=>{
                const topicRequestData = requests.find(({ topic: topic })=>topic === topicName);
                let preferredReadReplicas = this.preferredReadReplicasPerTopicPartition[topicName];
                if (!preferredReadReplicas) this.preferredReadReplicasPerTopicPartition[topicName] = preferredReadReplicas = {};
                return partitions.filter(({ partition: partition })=>!this.seekOffset.has(topicName, partition) && !this.subscriptionState.isPaused(topicName, partition)).map((partitionData)=>{
                    const { partition: partition, preferredReadReplica: preferredReadReplica } = partitionData;
                    if (preferredReadReplica != null && preferredReadReplica !== -1) {
                        const { nodeId: currentPreferredReadReplica } = preferredReadReplicas[partition] || {};
                        if (currentPreferredReadReplica !== preferredReadReplica) this.logger.info(`Preferred read replica is now ${preferredReadReplica}`, {
                            groupId: this.groupId,
                            memberId: this.memberId,
                            topic: topicName,
                            partition: partition
                        });
                        preferredReadReplicas[partition] = {
                            nodeId: preferredReadReplica,
                            expireAt: Date.now() + this.metadataMaxAge
                        };
                    }
                    const partitionRequestData = topicRequestData.partitions.find(({ partition: partition })=>partition === partitionData.partition);
                    const fetchedOffset = partitionRequestData.fetchOffset;
                    return new $e69a197130ea9617$exports(topicName, fetchedOffset, partitionData);
                });
            });
        } catch (e) {
            await this.recoverFromFetch(e);
            return [];
        }
    }
    async recoverFromFetch(e) {
        if ($95e82f69a37b24c8$var$STALE_METADATA_ERRORS.includes(e.type) || e.name === "KafkaJSTopicMetadataNotLoaded") {
            this.logger.debug("Stale cluster metadata, refreshing...", {
                groupId: this.groupId,
                memberId: this.memberId,
                error: e.message
            });
            await this.cluster.refreshMetadata();
            await this.joinAndSync();
            return;
        }
        if (e.name === "KafkaJSStaleTopicMetadataAssignment") {
            this.logger.warn(`${e.message}, resync group`, {
                groupId: this.groupId,
                memberId: this.memberId,
                topic: e.topic,
                unknownPartitions: e.unknownPartitions
            });
            await this.joinAndSync();
            return;
        }
        if (e.name === "KafkaJSOffsetOutOfRange") {
            await this.recoverFromOffsetOutOfRange(e);
            return;
        }
        if (e.name === "KafkaJSConnectionClosedError") {
            this.cluster.removeBroker({
                host: e.host,
                port: e.port
            });
            return;
        }
        if (e.name === "KafkaJSBrokerNotFound" || e.name === "KafkaJSConnectionClosedError") {
            this.logger.debug(`${e.message}, refreshing metadata and retrying...`);
            await this.cluster.refreshMetadata();
            return;
        }
        throw e;
    }
    async recoverFromOffsetOutOfRange(e) {
        // If we are fetching from a follower try with the leader before resetting offsets
        const preferredReadReplicas = this.preferredReadReplicasPerTopicPartition[e.topic];
        if (preferredReadReplicas && typeof preferredReadReplicas[e.partition] === "number") {
            this.logger.info("Offset out of range while fetching from follower, retrying with leader", {
                topic: e.topic,
                partition: e.partition,
                groupId: this.groupId,
                memberId: this.memberId
            });
            delete preferredReadReplicas[e.partition];
        } else {
            this.logger.error("Offset out of range, resetting to default offset", {
                topic: e.topic,
                partition: e.partition,
                groupId: this.groupId,
                memberId: this.memberId
            });
            await this.offsetManager.setDefaultOffset({
                topic: e.topic,
                partition: e.partition
            });
        }
    }
    generatePartitionsPerSubscribedTopic() {
        const map = new Map();
        for (const topic of this.topicsSubscribed){
            const partitions = this.cluster.findTopicPartitionMetadata(topic).map((m)=>m.partitionId).sort();
            map.set(topic, partitions);
        }
        return map;
    }
    checkForStaleAssignment() {
        if (!this.partitionsPerSubscribedTopic) return;
        const newPartitionsPerSubscribedTopic = this.generatePartitionsPerSubscribedTopic();
        for (const [topic, partitions] of newPartitionsPerSubscribedTopic){
            const diff = $8b1e7982840fa5e9$exports(partitions, this.partitionsPerSubscribedTopic.get(topic));
            if (diff.length > 0) throw new $95e82f69a37b24c8$require$KafkaJSStaleTopicMetadataAssignment("Topic has been updated", {
                topic: topic,
                unknownPartitions: diff
            });
        }
    }
    async seekOffsets(topicPartitions) {
        for (const { topic: topic, partitions: partitions } of topicPartitions)for (const partition of partitions){
            const seekEntry = this.seekOffset.pop(topic, partition);
            if (!seekEntry) continue;
            this.logger.debug("Seek offset", {
                groupId: this.groupId,
                memberId: this.memberId,
                seek: seekEntry
            });
            await this.offsetManager.seek(seekEntry);
        }
        await this.offsetManager.resolveOffsets();
    }
    hasSeekOffset({ topic: topic, partition: partition }) {
        return this.seekOffset.has(topic, partition);
    }
    /**
   * For each of the partitions find the best nodeId to read it from
   *
   * @param {string} topic
   * @param {number[]} partitions
   * @returns {{[nodeId: number]: number[]}} per-node assignment of partitions
   * @see Cluster~findLeaderForPartitions
   */ // Invariant: The resulting object has each partition referenced exactly once
    findReadReplicaForPartitions(topic, partitions) {
        const partitionMetadata = this.cluster.findTopicPartitionMetadata(topic);
        const preferredReadReplicas = this.preferredReadReplicasPerTopicPartition[topic];
        return partitions.reduce((result, id)=>{
            const partitionId = parseInt(id, 10);
            const metadata = partitionMetadata.find((p)=>p.partitionId === partitionId);
            if (!metadata) return result;
            if (metadata.leader == null) throw new $95e82f69a37b24c8$require$KafkaJSError("Invalid partition metadata", {
                topic: topic,
                partitionId: partitionId,
                metadata: metadata
            });
            // Pick the preferred replica if there is one, and it isn't known to be offline, otherwise the leader.
            let nodeId = metadata.leader;
            if (preferredReadReplicas) {
                const { nodeId: preferredReadReplica, expireAt: expireAt } = preferredReadReplicas[partitionId] || {};
                if (Date.now() >= expireAt) {
                    this.logger.debug("Preferred read replica information has expired, using leader", {
                        topic: topic,
                        partitionId: partitionId,
                        groupId: this.groupId,
                        memberId: this.memberId,
                        preferredReadReplica: preferredReadReplica,
                        leader: metadata.leader
                    });
                    // Drop the entry
                    delete preferredReadReplicas[partitionId];
                } else if (preferredReadReplica != null) {
                    // Valid entry, check whether it is not offline
                    // Note that we don't delete the preference here, and rather hope that eventually that replica comes online again
                    const offlineReplicas = metadata.offlineReplicas;
                    if (Array.isArray(offlineReplicas) && offlineReplicas.includes(nodeId)) this.logger.debug("Preferred read replica is offline, using leader", {
                        topic: topic,
                        partitionId: partitionId,
                        groupId: this.groupId,
                        memberId: this.memberId,
                        preferredReadReplica: preferredReadReplica,
                        leader: metadata.leader
                    });
                    else nodeId = preferredReadReplica;
                }
            }
            const current = result[nodeId] || [];
            return {
                ...result,
                [nodeId]: [
                    ...current,
                    partitionId
                ]
            };
        }, {});
    }
    filterPartitionsByNode(nodeId, topicPartitions) {
        return topicPartitions.map(({ topic: topic, partitions: partitions })=>({
                topic: topic,
                partitions: this.findReadReplicaForPartitions(topic, partitions)[nodeId] || []
            }));
    }
    getActiveTopicPartitions() {
        const activeSubscriptionState = this.subscriptionState.active();
        const activeTopicPartitions = {};
        activeSubscriptionState.forEach(({ topic: topic, partitions: partitions })=>{
            activeTopicPartitions[topic] = new Set(partitions);
        });
        return activeTopicPartitions;
    }
};


var $c37630351c3a368e$exports = {};

var $c37630351c3a368e$require$EventEmitter = $4UN2M$events.EventEmitter;

var $dSqZK = parcelRequire("dSqZK");


var $8mQRr = parcelRequire("8mQRr");
var $c37630351c3a368e$require$isKafkaJSError = $8mQRr.isKafkaJSError;
var $c37630351c3a368e$require$isRebalancing = $8mQRr.isRebalancing;

const { events: { FETCH: $c37630351c3a368e$var$FETCH, FETCH_START: $c37630351c3a368e$var$FETCH_START, START_BATCH_PROCESS: $c37630351c3a368e$var$START_BATCH_PROCESS, END_BATCH_PROCESS: $c37630351c3a368e$var$END_BATCH_PROCESS, REBALANCING: $c37630351c3a368e$var$REBALANCING } } = $91b8a578f117fd94$exports;
var $38504a64da4ef490$exports = {};
var $e12c92353bdf97d0$exports = {};
/**
 * @param {number} count
 * @param {(index: number) => T} [callback]
 * @template T
 */ const $e12c92353bdf97d0$var$seq = (count, callback = (x)=>x)=>new Array(count).fill(0).map((_, index)=>callback(index));
$e12c92353bdf97d0$exports = $e12c92353bdf97d0$var$seq;


var $f2f15f9e3ac27173$exports = {};

/**
 * Fetches data from all assigned nodes, waits for workerQueue to drain and repeats.
 *
 * @param {object} options
 * @param {number} options.nodeId
 * @param {import('./workerQueue').WorkerQueue} options.workerQueue
 * @param {Map<string, string[]>} options.partitionAssignments
 * @param {(nodeId: number) => Promise<T[]>} options.fetch
 * @param {import('../../types').Logger} options.logger
 * @template T
 */ const $f2f15f9e3ac27173$var$createFetcher = ({ nodeId: nodeId, workerQueue: workerQueue, partitionAssignments: partitionAssignments, fetch: fetch, logger: rootLogger })=>{
    const logger = rootLogger.namespace(`Fetcher ${nodeId}`);
    const emitter = new $4UN2M$events();
    let isRunning = false;
    const getWorkerQueue = ()=>workerQueue;
    const assignmentKey = ({ topic: topic, partition: partition })=>`${topic}|${partition}`;
    const getAssignedFetcher = (batch)=>partitionAssignments.get(assignmentKey(batch));
    const assignTopicPartition = (batch)=>partitionAssignments.set(assignmentKey(batch), nodeId);
    const unassignTopicPartition = (batch)=>partitionAssignments.delete(assignmentKey(batch));
    const filterUnassignedBatches = (batches)=>batches.filter((batch)=>{
            const assignedFetcher = getAssignedFetcher(batch);
            if (assignedFetcher != null && assignedFetcher !== nodeId) {
                logger.info("Filtering out batch due to partition already being processed by another fetcher", {
                    topic: batch.topic,
                    partition: batch.partition,
                    assignedFetcher: assignedFetcher,
                    fetcher: nodeId
                });
                return false;
            }
            return true;
        });
    const start = async ()=>{
        if (isRunning) return;
        isRunning = true;
        while(isRunning)try {
            const batches = await fetch(nodeId);
            if (isRunning) {
                const availableBatches = filterUnassignedBatches(batches);
                if (availableBatches.length > 0) {
                    availableBatches.forEach(assignTopicPartition);
                    try {
                        await workerQueue.push(...availableBatches);
                    } finally{
                        availableBatches.forEach(unassignTopicPartition);
                    }
                }
            }
        } catch (error) {
            isRunning = false;
            emitter.emit("end");
            throw error;
        }
        emitter.emit("end");
    };
    const stop = async ()=>{
        if (!isRunning) return;
        isRunning = false;
        await new Promise((resolve)=>emitter.once("end", ()=>resolve()));
    };
    return {
        start: start,
        stop: stop,
        getWorkerQueue: getWorkerQueue
    };
};
$f2f15f9e3ac27173$exports = $f2f15f9e3ac27173$var$createFetcher;


var $4e5ea9b09937155a$exports = {};
/**
 * @typedef {(batch: T, metadata: { workerId: number }) => Promise<void>} Handler
 * @template T
 *
 * @typedef {ReturnType<typeof createWorker>} Worker
 */ 
/**
 * @param {{ handler: Handler<T>, workerId: number }} options
 * @template T
 */ const $4e5ea9b09937155a$var$createWorker = ({ handler: handler, workerId: workerId })=>{
    /**
   * Takes batches from next() until it returns undefined.
   *
   * @param {{ next: () => { batch: T, resolve: () => void, reject: (e: Error) => void } | undefined }} param0
   * @returns {Promise<void>}
   */ const run = $9c89082ee7ce8fe3$exports(async ({ next: next })=>{
        while(true){
            const item = next();
            if (!item) break;
            const { batch: batch, resolve: resolve, reject: reject } = item;
            try {
                await handler(batch, {
                    workerId: workerId
                });
                resolve();
            } catch (error) {
                reject(error);
            }
        }
    });
    return {
        run: run
    };
};
$4e5ea9b09937155a$exports = $4e5ea9b09937155a$var$createWorker;


var $5373d8586a3777d5$exports = {};
/**
 * @typedef {ReturnType<typeof createWorkerQueue>} WorkerQueue
 */ /**
 * @param {object} options
 * @param {import('./worker').Worker<T>[]} options.workers
 * @template T
 */ const $5373d8586a3777d5$var$createWorkerQueue = ({ workers: workers })=>{
    /** @type {{ batch: T, resolve: (value?: any) => void, reject: (e: Error) => void}[]} */ const queue = [];
    const getWorkers = ()=>workers;
    /**
   * Waits until workers have processed all batches in the queue.
   *
   * @param {...T} batches
   * @returns {Promise<void>}
   */ const push = async (...batches)=>{
        const promises = batches.map((batch)=>new Promise((resolve, reject)=>queue.push({
                    batch: batch,
                    resolve: resolve,
                    reject: reject
                })));
        workers.forEach((worker)=>worker.run({
                next: ()=>queue.shift()
            }));
        const results = await Promise.allSettled(promises);
        const rejected = results.find((result)=>result.status === "rejected");
        if (rejected) // @ts-ignore
        throw rejected.reason;
    };
    return {
        push: push,
        getWorkers: getWorkers
    };
};
$5373d8586a3777d5$exports = $5373d8586a3777d5$var$createWorkerQueue;



var $8mQRr = parcelRequire("8mQRr");
var $38504a64da4ef490$require$KafkaJSFetcherRebalanceError = $8mQRr.KafkaJSFetcherRebalanceError;
var $38504a64da4ef490$require$KafkaJSNoBrokerAvailableError = $8mQRr.KafkaJSNoBrokerAvailableError;
/** @typedef {ReturnType<typeof createFetchManager>} FetchManager */ /**
 * @param {object} options
 * @param {import('../../types').Logger} options.logger
 * @param {() => number[]} options.getNodeIds
 * @param {(nodeId: number) => Promise<import('../../types').Batch[]>} options.fetch
 * @param {import('./worker').Handler<T>} options.handler
 * @param {number} [options.concurrency]
 * @template T
 */ const $38504a64da4ef490$var$createFetchManager = ({ logger: rootLogger, getNodeIds: getNodeIds, fetch: fetch, handler: handler, concurrency: concurrency = 1 })=>{
    const logger = rootLogger.namespace("FetchManager");
    const workers = $e12c92353bdf97d0$exports(concurrency, (workerId)=>$4e5ea9b09937155a$exports({
            handler: handler,
            workerId: workerId
        }));
    const workerQueue = $5373d8586a3777d5$exports({
        workers: workers
    });
    let fetchers = [];
    const getFetchers = ()=>fetchers;
    const createFetchers = ()=>{
        const nodeIds = getNodeIds();
        const partitionAssignments = new Map();
        if (nodeIds.length === 0) throw new $38504a64da4ef490$require$KafkaJSNoBrokerAvailableError();
        const validateShouldRebalance = ()=>{
            const current = getNodeIds();
            const hasChanged = nodeIds.length !== current.length || nodeIds.some((nodeId)=>!current.includes(nodeId));
            if (hasChanged && current.length !== 0) throw new $38504a64da4ef490$require$KafkaJSFetcherRebalanceError();
        };
        const fetchers = nodeIds.map((nodeId)=>$f2f15f9e3ac27173$exports({
                nodeId: nodeId,
                workerQueue: workerQueue,
                partitionAssignments: partitionAssignments,
                fetch: async (nodeId)=>{
                    validateShouldRebalance();
                    return fetch(nodeId);
                },
                logger: logger
            }));
        logger.debug(`Created ${fetchers.length} fetchers`, {
            nodeIds: nodeIds,
            concurrency: concurrency
        });
        return fetchers;
    };
    const start = async ()=>{
        logger.debug("Starting...");
        while(true){
            fetchers = createFetchers();
            try {
                await Promise.all(fetchers.map((fetcher)=>fetcher.start()));
            } catch (error) {
                await stop();
                if (error instanceof $38504a64da4ef490$require$KafkaJSFetcherRebalanceError) {
                    logger.debug("Rebalancing fetchers...");
                    continue;
                }
                throw error;
            }
            break;
        }
    };
    const stop = async ()=>{
        logger.debug("Stopping fetchers...");
        await Promise.all(fetchers.map((fetcher)=>fetcher.stop()));
        logger.debug("Stopped fetchers");
    };
    return {
        start: start,
        stop: stop,
        getFetchers: getFetchers
    };
};
$38504a64da4ef490$exports = $38504a64da4ef490$var$createFetchManager;


const $c37630351c3a368e$var$isSameOffset = (offsetA, offsetB)=>$dSqZK.fromValue(offsetA).equals($dSqZK.fromValue(offsetB));
const $c37630351c3a368e$var$CONSUMING_START = "consuming-start";
const $c37630351c3a368e$var$CONSUMING_STOP = "consuming-stop";
$c37630351c3a368e$exports = class Runner extends $c37630351c3a368e$require$EventEmitter {
    /**
   * @param {object} options
   * @param {import("../../types").Logger} options.logger
   * @param {import("./consumerGroup")} options.consumerGroup
   * @param {import("../instrumentation/emitter")} options.instrumentationEmitter
   * @param {boolean} [options.eachBatchAutoResolve=true]
   * @param {number} options.concurrency
   * @param {(payload: import("../../types").EachBatchPayload) => Promise<void>} [options.eachBatch]
   * @param {(payload: import("../../types").EachMessagePayload) => Promise<void>} [options.eachMessage]
   * @param {number} [options.heartbeatInterval]
   * @param {(reason: Error) => void} options.onCrash
   * @param {import("../../types").RetryOptions} [options.retry]
   * @param {boolean} [options.autoCommit=true]
   */ constructor({ logger: logger, consumerGroup: consumerGroup, instrumentationEmitter: instrumentationEmitter, eachBatchAutoResolve: eachBatchAutoResolve = true, concurrency: concurrency, eachBatch: eachBatch, eachMessage: eachMessage, heartbeatInterval: heartbeatInterval, onCrash: onCrash, retry: retry, autoCommit: autoCommit = true }){
        super();
        this.logger = logger.namespace("Runner");
        this.consumerGroup = consumerGroup;
        this.instrumentationEmitter = instrumentationEmitter;
        this.eachBatchAutoResolve = eachBatchAutoResolve;
        this.eachBatch = eachBatch;
        this.eachMessage = eachMessage;
        this.heartbeatInterval = heartbeatInterval;
        this.retrier = $d1c48a936f24908d$exports(Object.assign({}, retry));
        this.onCrash = onCrash;
        this.autoCommit = autoCommit;
        this.fetchManager = $38504a64da4ef490$exports({
            logger: this.logger,
            getNodeIds: ()=>this.consumerGroup.getNodeIds(),
            fetch: (nodeId)=>this.fetch(nodeId),
            handler: (batch)=>this.handleBatch(batch),
            concurrency: concurrency
        });
        this.running = false;
        this.consuming = false;
    }
    get consuming() {
        return this._consuming;
    }
    set consuming(value) {
        if (this._consuming !== value) {
            this._consuming = value;
            this.emit(value ? $c37630351c3a368e$var$CONSUMING_START : $c37630351c3a368e$var$CONSUMING_STOP);
        }
    }
    async start() {
        if (this.running) return;
        try {
            await this.consumerGroup.connect();
            await this.consumerGroup.joinAndSync();
        } catch (e) {
            return this.onCrash(e);
        }
        this.running = true;
        this.scheduleFetchManager();
    }
    scheduleFetchManager() {
        if (!this.running) {
            this.consuming = false;
            this.logger.info("consumer not running, exiting", {
                groupId: this.consumerGroup.groupId,
                memberId: this.consumerGroup.memberId
            });
            return;
        }
        this.consuming = true;
        this.retrier(async (bail, retryCount, retryTime)=>{
            if (!this.running) return;
            try {
                await this.fetchManager.start();
            } catch (e) {
                if ($c37630351c3a368e$require$isRebalancing(e)) {
                    this.logger.warn("The group is rebalancing, re-joining", {
                        groupId: this.consumerGroup.groupId,
                        memberId: this.consumerGroup.memberId,
                        error: e.message
                    });
                    this.instrumentationEmitter.emit($c37630351c3a368e$var$REBALANCING, {
                        groupId: this.consumerGroup.groupId,
                        memberId: this.consumerGroup.memberId
                    });
                    await this.consumerGroup.joinAndSync();
                    return;
                }
                if (e.type === "UNKNOWN_MEMBER_ID") {
                    this.logger.error("The coordinator is not aware of this member, re-joining the group", {
                        groupId: this.consumerGroup.groupId,
                        memberId: this.consumerGroup.memberId,
                        error: e.message
                    });
                    this.consumerGroup.memberId = null;
                    await this.consumerGroup.joinAndSync();
                    return;
                }
                if (e.name === "KafkaJSNotImplemented") return bail(e);
                if (e.name === "KafkaJSNoBrokerAvailableError") return bail(e);
                this.logger.debug("Error while scheduling fetch manager, trying again...", {
                    groupId: this.consumerGroup.groupId,
                    memberId: this.consumerGroup.memberId,
                    error: e.message,
                    stack: e.stack,
                    retryCount: retryCount,
                    retryTime: retryTime
                });
                throw e;
            }
        }).then(()=>{
            this.scheduleFetchManager();
        }).catch((e)=>{
            this.onCrash(e);
            this.consuming = false;
            this.running = false;
        });
    }
    async stop() {
        if (!this.running) return;
        this.logger.debug("stop consumer group", {
            groupId: this.consumerGroup.groupId,
            memberId: this.consumerGroup.memberId
        });
        this.running = false;
        try {
            await this.fetchManager.stop();
            await this.waitForConsumer();
            await this.consumerGroup.leave();
        } catch (e) {}
    }
    waitForConsumer() {
        return new Promise((resolve)=>{
            if (!this.consuming) return resolve();
            this.logger.debug("waiting for consumer to finish...", {
                groupId: this.consumerGroup.groupId,
                memberId: this.consumerGroup.memberId
            });
            this.once($c37630351c3a368e$var$CONSUMING_STOP, ()=>resolve());
        });
    }
    async heartbeat() {
        try {
            await this.consumerGroup.heartbeat({
                interval: this.heartbeatInterval
            });
        } catch (e) {
            if ($c37630351c3a368e$require$isRebalancing(e)) await this.autoCommitOffsets();
            throw e;
        }
    }
    async processEachMessage(batch) {
        const { topic: topic, partition: partition } = batch;
        const pause = ()=>{
            this.consumerGroup.pause([
                {
                    topic: topic,
                    partitions: [
                        partition
                    ]
                }
            ]);
            return ()=>this.consumerGroup.resume([
                    {
                        topic: topic,
                        partitions: [
                            partition
                        ]
                    }
                ]);
        };
        for (const message of batch.messages){
            if (!this.running || this.consumerGroup.hasSeekOffset({
                topic: topic,
                partition: partition
            })) break;
            try {
                await this.eachMessage({
                    topic: topic,
                    partition: partition,
                    message: message,
                    heartbeat: ()=>this.heartbeat(),
                    pause: pause
                });
            } catch (e) {
                if (!$c37630351c3a368e$require$isKafkaJSError(e)) this.logger.error(`Error when calling eachMessage`, {
                    topic: topic,
                    partition: partition,
                    offset: message.offset,
                    stack: e.stack,
                    error: e
                });
                // In case of errors, commit the previously consumed offsets unless autoCommit is disabled
                await this.autoCommitOffsets();
                throw e;
            }
            this.consumerGroup.resolveOffset({
                topic: topic,
                partition: partition,
                offset: message.offset
            });
            await this.heartbeat();
            await this.autoCommitOffsetsIfNecessary();
            if (this.consumerGroup.isPaused(topic, partition)) break;
        }
    }
    async processEachBatch(batch) {
        const { topic: topic, partition: partition } = batch;
        const lastFilteredMessage = batch.messages[batch.messages.length - 1];
        const pause = ()=>{
            this.consumerGroup.pause([
                {
                    topic: topic,
                    partitions: [
                        partition
                    ]
                }
            ]);
            return ()=>this.consumerGroup.resume([
                    {
                        topic: topic,
                        partitions: [
                            partition
                        ]
                    }
                ]);
        };
        try {
            await this.eachBatch({
                batch: batch,
                resolveOffset: (offset)=>{
                    /**
           * The transactional producer generates a control record after committing the transaction.
           * The control record is the last record on the RecordBatch, and it is filtered before it
           * reaches the eachBatch callback. When disabling auto-resolve, the user-land code won't
           * be able to resolve the control record offset, since it never reaches the callback,
           * causing stuck consumers as the consumer will never move the offset marker.
           *
           * When the last offset of the batch is resolved, we should automatically resolve
           * the control record offset as this entry doesn't have any meaning to the user-land code,
           * and won't interfere with the stream processing.
           *
           * @see https://github.com/apache/kafka/blob/9aa660786e46c1efbf5605a6a69136a1dac6edb9/clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java#L1499-L1505
           */ const offsetToResolve = lastFilteredMessage && $c37630351c3a368e$var$isSameOffset(offset, lastFilteredMessage.offset) ? batch.lastOffset() : offset;
                    this.consumerGroup.resolveOffset({
                        topic: topic,
                        partition: partition,
                        offset: offsetToResolve
                    });
                },
                heartbeat: ()=>this.heartbeat(),
                pause: /**
         * Pause consumption for the current topic-partition being processed
         */ pause,
                /**
         * Commit offsets if provided. Otherwise commit most recent resolved offsets
         * if the autoCommit conditions are met.
         *
         * @param {import('../../types').OffsetsByTopicPartition} [offsets] Optional.
         */ commitOffsetsIfNecessary: async (offsets)=>{
                    return offsets ? this.consumerGroup.commitOffsets(offsets) : this.consumerGroup.commitOffsetsIfNecessary();
                },
                uncommittedOffsets: ()=>this.consumerGroup.uncommittedOffsets(),
                isRunning: ()=>this.running,
                isStale: ()=>this.consumerGroup.hasSeekOffset({
                        topic: topic,
                        partition: partition
                    })
            });
        } catch (e) {
            if (!$c37630351c3a368e$require$isKafkaJSError(e)) this.logger.error(`Error when calling eachBatch`, {
                topic: topic,
                partition: partition,
                offset: batch.firstOffset(),
                stack: e.stack,
                error: e
            });
            // eachBatch has a special resolveOffset which can be used
            // to keep track of the messages
            await this.autoCommitOffsets();
            throw e;
        }
        // resolveOffset for the last offset can be disabled to allow the users of eachBatch to
        // stop their consumers without resolving unprocessed offsets (issues/18)
        if (this.eachBatchAutoResolve) this.consumerGroup.resolveOffset({
            topic: topic,
            partition: partition,
            offset: batch.lastOffset()
        });
    }
    async fetch(nodeId) {
        if (!this.running) {
            this.logger.debug("consumer not running, exiting", {
                groupId: this.consumerGroup.groupId,
                memberId: this.consumerGroup.memberId
            });
            return [];
        }
        const startFetch = Date.now();
        this.instrumentationEmitter.emit($c37630351c3a368e$var$FETCH_START, {
            nodeId: nodeId
        });
        const batches = await this.consumerGroup.fetch(nodeId);
        this.instrumentationEmitter.emit($c37630351c3a368e$var$FETCH, {
            /**
       * PR #570 removed support for the number of batches in this instrumentation event;
       * The new implementation uses an async generation to deliver the batches, which makes
       * this number impossible to get. The number is set to 0 to keep the event backward
       * compatible until we bump KafkaJS to version 2, following the end of node 8 LTS.
       *
       * @since 2019-11-29
       */ numberOfBatches: 0,
            duration: Date.now() - startFetch,
            nodeId: nodeId
        });
        if (batches.length === 0) await this.heartbeat();
        return batches;
    }
    async handleBatch(batch) {
        if (!this.running) {
            this.logger.debug("consumer not running, exiting", {
                groupId: this.consumerGroup.groupId,
                memberId: this.consumerGroup.memberId
            });
            return;
        }
        /** @param {import('./batch')} batch */ const onBatch = async (batch)=>{
            const startBatchProcess = Date.now();
            const payload = {
                topic: batch.topic,
                partition: batch.partition,
                highWatermark: batch.highWatermark,
                offsetLag: batch.offsetLag(),
                /**
         * @since 2019-06-24 (>= 1.8.0)
         *
         * offsetLag returns the lag based on the latest offset in the batch, to
         * keep the event backward compatible we just introduced "offsetLagLow"
         * which calculates the lag based on the first offset in the batch
         */ offsetLagLow: batch.offsetLagLow(),
                batchSize: batch.messages.length,
                firstOffset: batch.firstOffset(),
                lastOffset: batch.lastOffset()
            };
            /**
       * If the batch contained only control records or only aborted messages then we still
       * need to resolve and auto-commit to ensure the consumer can move forward.
       *
       * We also need to emit batch instrumentation events to allow any listeners keeping
       * track of offsets to know about the latest point of consumption.
       *
       * Added in #1256
       *
       * @see https://github.com/apache/kafka/blob/9aa660786e46c1efbf5605a6a69136a1dac6edb9/clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java#L1499-L1505
       */ if (batch.isEmptyDueToFiltering()) {
                this.instrumentationEmitter.emit($c37630351c3a368e$var$START_BATCH_PROCESS, payload);
                this.consumerGroup.resolveOffset({
                    topic: batch.topic,
                    partition: batch.partition,
                    offset: batch.lastOffset()
                });
                await this.autoCommitOffsetsIfNecessary();
                this.instrumentationEmitter.emit($c37630351c3a368e$var$END_BATCH_PROCESS, {
                    ...payload,
                    duration: Date.now() - startBatchProcess
                });
                await this.heartbeat();
                return;
            }
            if (batch.isEmpty()) {
                await this.heartbeat();
                return;
            }
            this.instrumentationEmitter.emit($c37630351c3a368e$var$START_BATCH_PROCESS, payload);
            if (this.eachMessage) await this.processEachMessage(batch);
            else if (this.eachBatch) await this.processEachBatch(batch);
            this.instrumentationEmitter.emit($c37630351c3a368e$var$END_BATCH_PROCESS, {
                ...payload,
                duration: Date.now() - startBatchProcess
            });
            await this.autoCommitOffsets();
            await this.heartbeat();
        };
        await onBatch(batch);
    }
    autoCommitOffsets() {
        if (this.autoCommit) return this.consumerGroup.commitOffsets();
    }
    autoCommitOffsetsIfNecessary() {
        if (this.autoCommit) return this.consumerGroup.commitOffsetsIfNecessary();
    }
    commitOffsets(offsets) {
        if (!this.running) {
            this.logger.debug("consumer not running, exiting", {
                groupId: this.consumerGroup.groupId,
                memberId: this.consumerGroup.memberId,
                offsets: offsets
            });
            return;
        }
        return this.retrier(async (bail, retryCount, retryTime)=>{
            try {
                await this.consumerGroup.commitOffsets(offsets);
            } catch (e) {
                if (!this.running) {
                    this.logger.debug("consumer not running, exiting", {
                        error: e.message,
                        groupId: this.consumerGroup.groupId,
                        memberId: this.consumerGroup.memberId,
                        offsets: offsets
                    });
                    return;
                }
                if (e.name === "KafkaJSNotImplemented") return bail(e);
                this.logger.debug("Error while committing offsets, trying again...", {
                    groupId: this.consumerGroup.groupId,
                    memberId: this.consumerGroup.memberId,
                    error: e.message,
                    stack: e.stack,
                    retryCount: retryCount,
                    retryTime: retryTime,
                    offsets: offsets
                });
                throw e;
            }
        });
    }
};



var $321589964ab32f03$require$events = $91b8a578f117fd94$exports.events;
var $321589964ab32f03$require$wrapEvent = $91b8a578f117fd94$exports.wrap;
var $321589964ab32f03$require$unwrapEvent = $91b8a578f117fd94$exports.unwrap;


var $8mQRr = parcelRequire("8mQRr");
var $321589964ab32f03$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
var $d426eccef4ee7752$exports = {};
var $aea5ad26d887e9b2$exports = {};

var $aea5ad26d887e9b2$require$MemberMetadata = $68363f5e47f65887$exports.MemberMetadata;
var $aea5ad26d887e9b2$require$MemberAssignment = $68363f5e47f65887$exports.MemberAssignment;
/**
 * RoundRobinAssigner
 * @type {import('types').PartitionAssigner}
 */ $aea5ad26d887e9b2$exports = ({ cluster: cluster })=>({
        name: "RoundRobinAssigner",
        version: 0,
        /**
   * Assign the topics to the provided members.
   *
   * The members array contains information about each member, `memberMetadata` is the result of the
   * `protocol` operation.
   *
   * @param {object} group
   * @param {import('types').GroupMember[]} group.members array of members, e.g:
                              [{ memberId: 'test-5f93f5a3', memberMetadata: Buffer }]
   * @param {string[]} group.topics
   * @returns {Promise<import('types').GroupMemberAssignment[]>} object partitions per topic per member, e.g:
   *                   [
   *                     {
   *                       memberId: 'test-5f93f5a3',
   *                       memberAssignment: {
   *                         'topic-A': [0, 2, 4, 6],
   *                         'topic-B': [1],
   *                       },
   *                     },
   *                     {
   *                       memberId: 'test-3d3d5341',
   *                       memberAssignment: {
   *                         'topic-A': [1, 3, 5],
   *                         'topic-B': [0, 2],
   *                       },
   *                     }
   *                   ]
   */ async assign ({ members: members, topics: topics }) {
            const membersCount = members.length;
            const sortedMembers = members.map(({ memberId: memberId })=>memberId).sort();
            const assignment = {};
            const topicsPartitions = topics.flatMap((topic)=>{
                const partitionMetadata = cluster.findTopicPartitionMetadata(topic);
                return partitionMetadata.map((m)=>({
                        topic: topic,
                        partitionId: m.partitionId
                    }));
            });
            topicsPartitions.forEach((topicPartition, i)=>{
                const assignee = sortedMembers[i % membersCount];
                if (!assignment[assignee]) assignment[assignee] = Object.create(null);
                if (!assignment[assignee][topicPartition.topic]) assignment[assignee][topicPartition.topic] = [];
                assignment[assignee][topicPartition.topic].push(topicPartition.partitionId);
            });
            return Object.keys(assignment).map((memberId)=>({
                    memberId: memberId,
                    memberAssignment: $aea5ad26d887e9b2$require$MemberAssignment.encode({
                        version: this.version,
                        assignment: assignment[memberId]
                    })
                }));
        },
        protocol ({ topics: topics }) {
            return {
                name: this.name,
                metadata: $aea5ad26d887e9b2$require$MemberMetadata.encode({
                    version: this.version,
                    topics: topics
                })
            };
        }
    });


$d426eccef4ee7752$exports = {
    roundRobin: $aea5ad26d887e9b2$exports
};


var $321589964ab32f03$require$roundRobin = $d426eccef4ee7752$exports.roundRobin;

var $321589964ab32f03$require$EARLIEST_OFFSET = $b2095807cf05621c$exports.EARLIEST_OFFSET;
var $321589964ab32f03$require$LATEST_OFFSET = $b2095807cf05621c$exports.LATEST_OFFSET;

var $hNBWH = parcelRequire("hNBWH");

const { keys: $321589964ab32f03$var$keys, values: $321589964ab32f03$var$values } = Object;
const { CONNECT: $321589964ab32f03$var$CONNECT, DISCONNECT: $321589964ab32f03$var$DISCONNECT, STOP: $321589964ab32f03$var$STOP, CRASH: $321589964ab32f03$var$CRASH } = $321589964ab32f03$require$events;
const $321589964ab32f03$var$eventNames = $321589964ab32f03$var$values($321589964ab32f03$require$events);
const $321589964ab32f03$var$eventKeys = $321589964ab32f03$var$keys($321589964ab32f03$require$events).map((key)=>`consumer.events.${key}`).join(", ");
const $321589964ab32f03$var$specialOffsets = [
    $dSqZK.fromValue($321589964ab32f03$require$EARLIEST_OFFSET).toString(),
    $dSqZK.fromValue($321589964ab32f03$require$LATEST_OFFSET).toString()
];
/**
 * @param {Object} params
 * @param {import("../../types").Cluster} params.cluster
 * @param {String} params.groupId
 * @param {import('../../types').RetryOptions} [params.retry]
 * @param {import('../../types').Logger} params.logger
 * @param {import('../../types').PartitionAssigner[]} [params.partitionAssigners]
 * @param {number} [params.sessionTimeout]
 * @param {number} [params.rebalanceTimeout]
 * @param {number} [params.heartbeatInterval]
 * @param {number} [params.maxBytesPerPartition]
 * @param {number} [params.minBytes]
 * @param {number} [params.maxBytes]
 * @param {number} [params.maxWaitTimeInMs]
 * @param {number} [params.isolationLevel]
 * @param {string} [params.rackId]
 * @param {InstrumentationEventEmitter} [params.instrumentationEmitter]
 * @param {number} params.metadataMaxAge
 *
 * @returns {import("../../types").Consumer}
 */ $321589964ab32f03$exports = ({ cluster: cluster, groupId: groupId, retry: retry, logger: rootLogger, partitionAssigners: partitionAssigners = [
    $321589964ab32f03$require$roundRobin
], sessionTimeout: sessionTimeout = 30000, rebalanceTimeout: rebalanceTimeout = 60000, heartbeatInterval: heartbeatInterval = 3000, maxBytesPerPartition: maxBytesPerPartition = 1048576, minBytes: minBytes = 1, maxBytes: maxBytes = 10485760, maxWaitTimeInMs: maxWaitTimeInMs = 5000, isolationLevel: isolationLevel = $hNBWH.READ_COMMITTED, rackId: rackId = "", instrumentationEmitter: rootInstrumentationEmitter, metadataMaxAge: metadataMaxAge })=>{
    if (!groupId) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Consumer groupId must be a non-empty string.");
    const logger = rootLogger.namespace("Consumer");
    const instrumentationEmitter = rootInstrumentationEmitter || new $b7828dca740d64c9$exports();
    const assigners = partitionAssigners.map((createAssigner)=>createAssigner({
            groupId: groupId,
            logger: logger,
            cluster: cluster
        }));
    /** @type {Record<string, { fromBeginning?: boolean }>} */ const topics = {};
    let runner = null;
    /** @type {ConsumerGroup} */ let consumerGroup = null;
    let restartTimeout = null;
    if (heartbeatInterval >= sessionTimeout) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Consumer heartbeatInterval (${heartbeatInterval}) must be lower than sessionTimeout (${sessionTimeout}). It is recommended to set heartbeatInterval to approximately a third of the sessionTimeout.`);
    /** @type {import("../../types").Consumer["connect"]} */ const connect = async ()=>{
        await cluster.connect();
        instrumentationEmitter.emit($321589964ab32f03$var$CONNECT);
    };
    /** @type {import("../../types").Consumer["disconnect"]} */ const disconnect = async ()=>{
        try {
            await stop();
            logger.debug("consumer has stopped, disconnecting", {
                groupId: groupId
            });
            await cluster.disconnect();
            instrumentationEmitter.emit($321589964ab32f03$var$DISCONNECT);
        } catch (e) {
            logger.error(`Caught error when disconnecting the consumer: ${e.message}`, {
                stack: e.stack,
                groupId: groupId
            });
            throw e;
        }
    };
    /** @type {import("../../types").Consumer["stop"]} */ const stop = $9c89082ee7ce8fe3$exports(async ()=>{
        try {
            if (runner) {
                await runner.stop();
                runner = null;
                consumerGroup = null;
                instrumentationEmitter.emit($321589964ab32f03$var$STOP);
            }
            clearTimeout(restartTimeout);
            logger.info("Stopped", {
                groupId: groupId
            });
        } catch (e) {
            logger.error(`Caught error when stopping the consumer: ${e.message}`, {
                stack: e.stack,
                groupId: groupId
            });
            throw e;
        }
    });
    /** @type {import("../../types").Consumer["subscribe"]} */ const subscribe = async ({ topic: topic, topics: subscriptionTopics, fromBeginning: fromBeginning = false })=>{
        if (consumerGroup) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Cannot subscribe to topic while consumer is running");
        if (!topic && !subscriptionTopics) throw new $321589964ab32f03$require$KafkaJSNonRetriableError('Missing required argument "topics"');
        if (subscriptionTopics != null && !Array.isArray(subscriptionTopics)) throw new $321589964ab32f03$require$KafkaJSNonRetriableError('Argument "topics" must be an array');
        const subscriptions = subscriptionTopics || [
            topic
        ];
        for (const subscription of subscriptions){
            if (typeof subscription !== "string" && !(subscription instanceof RegExp)) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid topic ${subscription} (${typeof subscription}), the topic name has to be a String or a RegExp`);
        }
        const hasRegexSubscriptions = subscriptions.some((subscription)=>subscription instanceof RegExp);
        const metadata = hasRegexSubscriptions ? await cluster.metadata() : undefined;
        const topicsToSubscribe = [];
        for (const subscription of subscriptions){
            const isRegExp = subscription instanceof RegExp;
            if (isRegExp) {
                const topicRegExp = subscription;
                const matchedTopics = metadata.topicMetadata.map(({ topic: topicName })=>topicName).filter((topicName)=>topicRegExp.test(topicName));
                logger.debug("Subscription based on RegExp", {
                    groupId: groupId,
                    topicRegExp: topicRegExp.toString(),
                    matchedTopics: matchedTopics
                });
                topicsToSubscribe.push(...matchedTopics);
            } else topicsToSubscribe.push(subscription);
        }
        for (const t of topicsToSubscribe)topics[t] = {
            fromBeginning: fromBeginning
        };
        await cluster.addMultipleTargetTopics(topicsToSubscribe);
    };
    /** @type {import("../../types").Consumer["run"]} */ const run = async ({ autoCommit: autoCommit = true, autoCommitInterval: autoCommitInterval = null, autoCommitThreshold: autoCommitThreshold = null, eachBatchAutoResolve: eachBatchAutoResolve = true, partitionsConsumedConcurrently: concurrency = 1, eachBatch: eachBatch = null, eachMessage: eachMessage = null } = {})=>{
        if (consumerGroup) {
            logger.warn("consumer#run was called, but the consumer is already running", {
                groupId: groupId
            });
            return;
        }
        const start = async (onCrash)=>{
            logger.info("Starting", {
                groupId: groupId
            });
            consumerGroup = new $95e82f69a37b24c8$exports({
                logger: rootLogger,
                topics: $321589964ab32f03$var$keys(topics),
                topicConfigurations: topics,
                retry: retry,
                cluster: cluster,
                groupId: groupId,
                assigners: assigners,
                sessionTimeout: sessionTimeout,
                rebalanceTimeout: rebalanceTimeout,
                maxBytesPerPartition: maxBytesPerPartition,
                minBytes: minBytes,
                maxBytes: maxBytes,
                maxWaitTimeInMs: maxWaitTimeInMs,
                instrumentationEmitter: instrumentationEmitter,
                isolationLevel: isolationLevel,
                rackId: rackId,
                metadataMaxAge: metadataMaxAge,
                autoCommit: autoCommit,
                autoCommitInterval: autoCommitInterval,
                autoCommitThreshold: autoCommitThreshold
            });
            runner = new $c37630351c3a368e$exports({
                logger: rootLogger,
                consumerGroup: consumerGroup,
                instrumentationEmitter: instrumentationEmitter,
                heartbeatInterval: heartbeatInterval,
                retry: retry,
                autoCommit: autoCommit,
                eachBatchAutoResolve: eachBatchAutoResolve,
                eachBatch: eachBatch,
                eachMessage: eachMessage,
                onCrash: onCrash,
                concurrency: concurrency
            });
            await runner.start();
        };
        const onCrash = async (e)=>{
            logger.error(`Crash: ${e.name}: ${e.message}`, {
                groupId: groupId,
                retryCount: e.retryCount,
                stack: e.stack
            });
            if (e.name === "KafkaJSConnectionClosedError") cluster.removeBroker({
                host: e.host,
                port: e.port
            });
            await disconnect();
            const getOriginalCause = (error)=>{
                if (error.cause) return getOriginalCause(error.cause);
                return error;
            };
            const isErrorRetriable = e.name === "KafkaJSNumberOfRetriesExceeded" || getOriginalCause(e).retriable === true;
            const shouldRestart = isErrorRetriable && (!retry || !retry.restartOnFailure || await retry.restartOnFailure(e).catch((error)=>{
                logger.error('Caught error when invoking user-provided "restartOnFailure" callback. Defaulting to restarting.', {
                    error: error.message || error,
                    cause: e.message || e,
                    groupId: groupId
                });
                return true;
            }));
            instrumentationEmitter.emit($321589964ab32f03$var$CRASH, {
                error: e,
                groupId: groupId,
                restart: shouldRestart
            });
            if (shouldRestart) {
                const retryTime = e.retryTime || retry && retry.initialRetryTime || $321589964ab32f03$require$initialRetryTime;
                logger.error(`Restarting the consumer in ${retryTime}ms`, {
                    retryCount: e.retryCount,
                    retryTime: retryTime,
                    groupId: groupId
                });
                restartTimeout = setTimeout(()=>start(onCrash), retryTime);
            }
        };
        await start(onCrash);
    };
    /** @type {import("../../types").Consumer["on"]} */ const on = (eventName, listener)=>{
        if (!$321589964ab32f03$var$eventNames.includes(eventName)) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Event name should be one of ${$321589964ab32f03$var$eventKeys}`);
        return instrumentationEmitter.addListener($321589964ab32f03$require$unwrapEvent(eventName), (event)=>{
            event.type = $321589964ab32f03$require$wrapEvent(event.type);
            Promise.resolve(listener(event)).catch((e)=>{
                logger.error(`Failed to execute listener: ${e.message}`, {
                    eventName: eventName,
                    stack: e.stack
                });
            });
        });
    };
    /**
   * @type {import("../../types").Consumer["commitOffsets"]}
   * @param topicPartitions
   *   Example: [{ topic: 'topic-name', partition: 0, offset: '1', metadata: 'event-id-3' }]
   */ const commitOffsets = async (topicPartitions = [])=>{
        const commitsByTopic = topicPartitions.reduce((payload, { topic: topic, partition: partition, offset: offset, metadata: metadata = null })=>{
            if (!topic) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid topic ${topic}`);
            if (isNaN(partition)) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid partition, expected a number received ${partition}`);
            let commitOffset;
            try {
                commitOffset = $dSqZK.fromValue(offset);
            } catch (_) {
                throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid offset, expected a long received ${offset}`);
            }
            if (commitOffset.lessThan(0)) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Offset must not be a negative number");
            if (metadata !== null && typeof metadata !== "string") throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid offset metadata, expected string or null, received ${metadata}`);
            const topicCommits = payload[topic] || [];
            topicCommits.push({
                partition: partition,
                offset: commitOffset,
                metadata: metadata
            });
            return {
                ...payload,
                [topic]: topicCommits
            };
        }, {});
        if (!consumerGroup) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Consumer group was not initialized, consumer#run must be called first");
        const topics = Object.keys(commitsByTopic);
        return runner.commitOffsets({
            topics: topics.map((topic)=>{
                return {
                    topic: topic,
                    partitions: commitsByTopic[topic]
                };
            })
        });
    };
    /** @type {import("../../types").Consumer["seek"]} */ const seek = ({ topic: topic, partition: partition, offset: offset })=>{
        if (!topic) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid topic ${topic}`);
        if (isNaN(partition)) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid partition, expected a number received ${partition}`);
        let seekOffset;
        try {
            seekOffset = $dSqZK.fromValue(offset);
        } catch (_) {
            throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid offset, expected a long received ${offset}`);
        }
        if (seekOffset.lessThan(0) && !$321589964ab32f03$var$specialOffsets.includes(seekOffset.toString())) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Offset must not be a negative number");
        if (!consumerGroup) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Consumer group was not initialized, consumer#run must be called first");
        consumerGroup.seek({
            topic: topic,
            partition: partition,
            offset: seekOffset.toString()
        });
    };
    /** @type {import("../../types").Consumer["describeGroup"]} */ const describeGroup = async ()=>{
        const coordinator = await cluster.findGroupCoordinator({
            groupId: groupId
        });
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async ()=>{
            const { groups: groups } = await coordinator.describeGroups({
                groupIds: [
                    groupId
                ]
            });
            return groups.find((group)=>group.groupId === groupId);
        });
    };
    /**
   * @type {import("../../types").Consumer["pause"]}
   * @param topicPartitions
   *   Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ const pause = (topicPartitions = [])=>{
        for (const topicPartition of topicPartitions){
            if (!topicPartition || !topicPartition.topic) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid topic ${topicPartition && topicPartition.topic || topicPartition}`);
            else if (typeof topicPartition.partitions !== "undefined" && (!Array.isArray(topicPartition.partitions) || topicPartition.partitions.some(isNaN))) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Array of valid partitions required to pause specific partitions instead of ${topicPartition.partitions}`);
        }
        if (!consumerGroup) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Consumer group was not initialized, consumer#run must be called first");
        consumerGroup.pause(topicPartitions);
    };
    /**
   * Returns the list of topic partitions paused on this consumer
   *
   * @type {import("../../types").Consumer["paused"]}
   */ const paused = ()=>{
        if (!consumerGroup) return [];
        return consumerGroup.paused();
    };
    /**
   * @type {import("../../types").Consumer["resume"]}
   * @param topicPartitions
   *  Example: [{ topic: 'topic-name', partitions: [1, 2] }]
   */ const resume = (topicPartitions = [])=>{
        for (const topicPartition of topicPartitions){
            if (!topicPartition || !topicPartition.topic) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Invalid topic ${topicPartition && topicPartition.topic || topicPartition}`);
            else if (typeof topicPartition.partitions !== "undefined" && (!Array.isArray(topicPartition.partitions) || topicPartition.partitions.some(isNaN))) throw new $321589964ab32f03$require$KafkaJSNonRetriableError(`Array of valid partitions required to resume specific partitions instead of ${topicPartition.partitions}`);
        }
        if (!consumerGroup) throw new $321589964ab32f03$require$KafkaJSNonRetriableError("Consumer group was not initialized, consumer#run must be called first");
        consumerGroup.resume(topicPartitions);
    };
    /**
   * @return {Object} logger
   */ const getLogger = ()=>logger;
    return {
        connect: connect,
        disconnect: disconnect,
        subscribe: subscribe,
        stop: stop,
        run: run,
        commitOffsets: commitOffsets,
        seek: seek,
        describeGroup: describeGroup,
        pause: pause,
        paused: paused,
        resume: resume,
        on: on,
        events: $321589964ab32f03$require$events,
        logger: getLogger
    };
};


var $83381089a44f952b$exports = {};

var $2e3b53509af57877$exports = {};


var $8mQRr = parcelRequire("8mQRr");
var $2e3b53509af57877$require$KafkaJSTimeout = $8mQRr.KafkaJSTimeout;
$2e3b53509af57877$exports = (fn, { delay: delay = 50, maxWait: maxWait = 10000, timeoutMessage: timeoutMessage = "Timeout", ignoreTimeout: ignoreTimeout = false } = {})=>{
    let timeoutId;
    let totalWait = 0;
    let fulfilled = false;
    const checkCondition = async (resolve, reject)=>{
        totalWait += delay;
        if (fulfilled) return;
        await $6e9e27040c59eddf$exports(delay);
        try {
            const result = await fn(totalWait);
            if (result) {
                fulfilled = true;
                clearTimeout(timeoutId);
                return resolve(result);
            }
            checkCondition(resolve, reject);
        } catch (e) {
            fulfilled = true;
            clearTimeout(timeoutId);
            reject(e);
        }
    };
    return new Promise((resolve, reject)=>{
        checkCondition(resolve, reject);
        if (ignoreTimeout) return;
        timeoutId = setTimeout(()=>{
            if (!fulfilled) {
                fulfilled = true;
                return reject(new $2e3b53509af57877$require$KafkaJSTimeout(timeoutMessage));
            }
        }, maxWait);
    });
};


var $c111f15444cb2679$exports = {};
$c111f15444cb2679$exports = async (array, groupFn)=>{
    const result = new Map();
    for (const item of array){
        const group = await Promise.resolve(groupFn(item));
        result.set(group, result.has(group) ? [
            ...result.get(group),
            item
        ] : [
            item
        ]);
    }
    return result;
};




var $50b11d63f1a97819$exports = {};



const $50b11d63f1a97819$var$adminType = $96d0cdc4a08345b0$exports("admin");
const $50b11d63f1a97819$var$events = {
    CONNECT: $50b11d63f1a97819$var$adminType("connect"),
    DISCONNECT: $50b11d63f1a97819$var$adminType("disconnect"),
    REQUEST: $50b11d63f1a97819$var$adminType($1da109fb7a6eab1e$exports.NETWORK_REQUEST),
    REQUEST_TIMEOUT: $50b11d63f1a97819$var$adminType($1da109fb7a6eab1e$exports.NETWORK_REQUEST_TIMEOUT),
    REQUEST_QUEUE_SIZE: $50b11d63f1a97819$var$adminType($1da109fb7a6eab1e$exports.NETWORK_REQUEST_QUEUE_SIZE)
};
const $50b11d63f1a97819$var$wrappedEvents = {
    [$50b11d63f1a97819$var$events.REQUEST]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST,
    [$50b11d63f1a97819$var$events.REQUEST_TIMEOUT]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST_TIMEOUT,
    [$50b11d63f1a97819$var$events.REQUEST_QUEUE_SIZE]: $1da109fb7a6eab1e$exports.NETWORK_REQUEST_QUEUE_SIZE
};
const $50b11d63f1a97819$var$reversedWrappedEvents = $382ebe7dda76d67e$exports($50b11d63f1a97819$var$wrappedEvents);
const $50b11d63f1a97819$var$unwrap = (eventName)=>$50b11d63f1a97819$var$wrappedEvents[eventName] || eventName;
const $50b11d63f1a97819$var$wrap = (eventName)=>$50b11d63f1a97819$var$reversedWrappedEvents[eventName] || eventName;
$50b11d63f1a97819$exports = {
    events: $50b11d63f1a97819$var$events,
    wrap: $50b11d63f1a97819$var$wrap,
    unwrap: $50b11d63f1a97819$var$unwrap
};


var $83381089a44f952b$require$events = $50b11d63f1a97819$exports.events;
var $83381089a44f952b$require$wrapEvent = $50b11d63f1a97819$exports.wrap;
var $83381089a44f952b$require$unwrapEvent = $50b11d63f1a97819$exports.unwrap;

var $83381089a44f952b$require$LEVELS = $0d5d3ffc5a7e9da7$exports.LEVELS;

var $8mQRr = parcelRequire("8mQRr");
var $83381089a44f952b$require$KafkaJSNonRetriableError = $8mQRr.KafkaJSNonRetriableError;
var $83381089a44f952b$require$KafkaJSDeleteGroupsError = $8mQRr.KafkaJSDeleteGroupsError;
var $83381089a44f952b$require$KafkaJSBrokerNotFound = $8mQRr.KafkaJSBrokerNotFound;
var $83381089a44f952b$require$KafkaJSDeleteTopicRecordsError = $8mQRr.KafkaJSDeleteTopicRecordsError;
var $83381089a44f952b$require$KafkaJSAggregateError = $8mQRr.KafkaJSAggregateError;

var $iL9Wd = parcelRequire("iL9Wd");
var $83381089a44f952b$require$staleMetadata = $iL9Wd.staleMetadata;

var $f3rUS = parcelRequire("f3rUS");
var $1473e915169cecf6$exports = {};
/**
 * @see https://github.com/apache/kafka/blob/a15387f34d142684859c2a57fcbef25edcdce25a/clients/src/main/java/org/apache/kafka/common/resource/ResourceType.java#L25-L31
 * @typedef {number} ACLResourceTypes
 *
 * Enum for ACL Resource Types
 * @readonly
 * @enum {ACLResourceTypes}
 */ $1473e915169cecf6$exports = {
    /**
   * Represents any ResourceType which this client cannot understand,
   * perhaps because this client is too old.
   */ UNKNOWN: 0,
    /**
   * In a filter, matches any ResourceType.
   */ ANY: 1,
    /**
   * A Kafka topic.
   * @see http://kafka.apache.org/documentation/#topicconfigs
   */ TOPIC: 2,
    /**
   * A consumer group.
   * @see http://kafka.apache.org/documentation/#consumerconfigs
   */ GROUP: 3,
    /**
   * The cluster as a whole.
   */ CLUSTER: 4,
    /**
   * A transactional ID.
   */ TRANSACTIONAL_ID: 5,
    /**
   * A token ID.
   */ DELEGATION_TOKEN: 6
};


var $0a4f3d7291cb1631$exports = {};
// From:
// https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/acl/AclOperation.java#L44
/**
 * @typedef {number} ACLOperationTypes
 *
 * Enum for ACL Operations Types
 * @readonly
 * @enum {ACLOperationTypes}
 */ $0a4f3d7291cb1631$exports = {
    /**
   * Represents any AclOperation which this client cannot understand, perhaps because this
   * client is too old.
   */ UNKNOWN: 0,
    /**
   * In a filter, matches any AclOperation.
   */ ANY: 1,
    /**
   * ALL operation.
   */ ALL: 2,
    /**
   * READ operation.
   */ READ: 3,
    /**
   * WRITE operation.
   */ WRITE: 4,
    /**
   * CREATE operation.
   */ CREATE: 5,
    /**
   * DELETE operation.
   */ DELETE: 6,
    /**
   * ALTER operation.
   */ ALTER: 7,
    /**
   * DESCRIBE operation.
   */ DESCRIBE: 8,
    /**
   * CLUSTER_ACTION operation.
   */ CLUSTER_ACTION: 9,
    /**
   * DESCRIBE_CONFIGS operation.
   */ DESCRIBE_CONFIGS: 10,
    /**
   * ALTER_CONFIGS operation.
   */ ALTER_CONFIGS: 11,
    /**
   * IDEMPOTENT_WRITE operation.
   */ IDEMPOTENT_WRITE: 12
};


var $8b8aab81618599b9$exports = {};
// From:
// https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/acl/AclPermissionType.java/#L31
/**
 * @typedef {number} ACLPermissionTypes
 *
 * Enum for Permission Types
 * @readonly
 * @enum {ACLPermissionTypes}
 */ $8b8aab81618599b9$exports = {
    /**
   * Represents any AclPermissionType which this client cannot understand,
   * perhaps because this client is too old.
   */ UNKNOWN: 0,
    /**
   * In a filter, matches any AclPermissionType.
   */ ANY: 1,
    /**
   * Disallows access.
   */ DENY: 2,
    /**
   * Grants access.
   */ ALLOW: 3
};


var $fa79594316f04025$exports = {};
// From:
// https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/resource/PatternType.java#L32
/**
 * @typedef {number} ACLResourcePatternTypes
 *
 * Enum for ACL Resource Pattern Type
 * @readonly
 * @enum {ACLResourcePatternTypes}
 */ $fa79594316f04025$exports = {
    /**
   * Represents any PatternType which this client cannot understand, perhaps because this client is too old.
   */ UNKNOWN: 0,
    /**
   * In a filter, matches any resource pattern type.
   */ ANY: 1,
    /**
   * In a filter, will perform pattern matching.
   *
   * e.g. Given a filter of {@code ResourcePatternFilter(TOPIC, "payments.received", MATCH)`}, the filter match
   * any {@link ResourcePattern} that matches topic 'payments.received'. This might include:
   * <ul>
   *     <li>A Literal pattern with the same type and name, e.g. {@code ResourcePattern(TOPIC, "payments.received", LITERAL)}</li>
   *     <li>A Wildcard pattern with the same type, e.g. {@code ResourcePattern(TOPIC, "*", LITERAL)}</li>
   *     <li>A Prefixed pattern with the same type and where the name is a matching prefix, e.g. {@code ResourcePattern(TOPIC, "payments.", PREFIXED)}</li>
   * </ul>
   */ MATCH: 2,
    /**
   * A literal resource name.
   *
   * A literal name defines the full name of a resource, e.g. topic with name 'foo', or group with name 'bob'.
   *
   * The special wildcard character {@code *} can be used to represent a resource with any name.
   */ LITERAL: 3,
    /**
   * A prefixed resource name.
   *
   * A prefixed name defines a prefix for a resource, e.g. topics with names that start with 'foo'.
   */ PREFIXED: 4
};



var $83381089a44f952b$require$EARLIEST_OFFSET = $b2095807cf05621c$exports.EARLIEST_OFFSET;
var $83381089a44f952b$require$LATEST_OFFSET = $b2095807cf05621c$exports.LATEST_OFFSET;
const { CONNECT: $83381089a44f952b$var$CONNECT, DISCONNECT: $83381089a44f952b$var$DISCONNECT } = $83381089a44f952b$require$events;
const $83381089a44f952b$var$NO_CONTROLLER_ID = -1;
const { values: $83381089a44f952b$var$values, keys: $83381089a44f952b$var$keys, entries: $83381089a44f952b$var$entries } = Object;
const $83381089a44f952b$var$eventNames = $83381089a44f952b$var$values($83381089a44f952b$require$events);
const $83381089a44f952b$var$eventKeys = $83381089a44f952b$var$keys($83381089a44f952b$require$events).map((key)=>`admin.events.${key}`).join(", ");
const $83381089a44f952b$var$retryOnLeaderNotAvailable = (fn, opts = {})=>{
    const callback = async ()=>{
        try {
            return await fn();
        } catch (e) {
            if (e.type !== "LEADER_NOT_AVAILABLE") throw e;
            return false;
        }
    };
    return $2e3b53509af57877$exports(callback, opts);
};
const $83381089a44f952b$var$isConsumerGroupRunning = (description)=>[
        "Empty",
        "Dead"
    ].includes(description.state);
const $83381089a44f952b$var$findTopicPartitions = async (cluster, topic)=>{
    await cluster.addTargetTopic(topic);
    await cluster.refreshMetadataIfNecessary();
    return cluster.findTopicPartitionMetadata(topic).map(({ partitionId: partitionId })=>partitionId).sort();
};
const $83381089a44f952b$var$indexByPartition = (array)=>array.reduce((obj, { partition: partition, ...props })=>Object.assign(obj, {
            [partition]: {
                ...props
            }
        }), {});
/**
 *
 * @param {Object} params
 * @param {import("../../types").Logger} params.logger
 * @param {InstrumentationEventEmitter} [params.instrumentationEmitter]
 * @param {import('../../types').RetryOptions} params.retry
 * @param {import("../../types").Cluster} params.cluster
 *
 * @returns {import("../../types").Admin}
 */ $83381089a44f952b$exports = ({ logger: rootLogger, instrumentationEmitter: rootInstrumentationEmitter, retry: retry, cluster: cluster })=>{
    const logger = rootLogger.namespace("Admin");
    const instrumentationEmitter = rootInstrumentationEmitter || new $b7828dca740d64c9$exports();
    /**
   * @returns {Promise}
   */ const connect = async ()=>{
        await cluster.connect();
        instrumentationEmitter.emit($83381089a44f952b$var$CONNECT);
    };
    /**
   * @return {Promise}
   */ const disconnect = async ()=>{
        await cluster.disconnect();
        instrumentationEmitter.emit($83381089a44f952b$var$DISCONNECT);
    };
    /**
   * @return {Promise}
   */ const listTopics = async ()=>{
        const { topicMetadata: topicMetadata } = await cluster.metadata();
        const topics = topicMetadata.map((t)=>t.topic);
        return topics;
    };
    /**
   * @param {Object} request
   * @param {array} request.topics
   * @param {boolean} [request.validateOnly=false]
   * @param {number} [request.timeout=5000]
   * @param {boolean} [request.waitForLeaders=true]
   * @return {Promise}
   */ const createTopics = async ({ topics: topics, validateOnly: validateOnly, timeout: timeout, waitForLeaders: waitForLeaders = true })=>{
        if (!topics || !Array.isArray(topics)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topics array ${topics}`);
        if (topics.filter(({ topic: topic })=>typeof topic !== "string").length > 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topics array, the topic names have to be a valid string");
        const topicNames = new Set(topics.map(({ topic: topic })=>topic));
        if (topicNames.size < topics.length) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topics array, it cannot have multiple entries for the same topic");
        for (const { topic: topic, configEntries: configEntries } of topics){
            if (configEntries == null) continue;
            if (!Array.isArray(configEntries)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid configEntries for topic "${topic}", must be an array`);
            configEntries.forEach((entry, index)=>{
                if (typeof entry !== "object" || entry == null) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid configEntries for topic "${topic}". Entry ${index} must be an object`);
                for (const requiredProperty of [
                    "name",
                    "value"
                ]){
                    if (!Object.prototype.hasOwnProperty.call(entry, requiredProperty) || typeof entry[requiredProperty] !== "string") throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid configEntries for topic "${topic}". Entry ${index} must have a valid "${requiredProperty}" property`);
                }
            });
        }
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                await broker.createTopics({
                    topics: topics,
                    validateOnly: validateOnly,
                    timeout: timeout
                });
                if (waitForLeaders) {
                    const topicNamesArray = Array.from(topicNames.values());
                    await $83381089a44f952b$var$retryOnLeaderNotAvailable(async ()=>await broker.metadata(topicNamesArray), {
                        delay: 100,
                        maxWait: timeout,
                        timeoutMessage: "Timed out while waiting for topic leaders"
                    });
                }
                return true;
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not create topics", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                if (e instanceof $83381089a44f952b$require$KafkaJSAggregateError) {
                    if (e.errors.every((error)=>error.type === "TOPIC_ALREADY_EXISTS")) return false;
                }
                bail(e);
            }
        });
    };
    /**
   * @param {array} topicPartitions
   * @param {boolean} [validateOnly=false]
   * @param {number} [timeout=5000]
   * @return {Promise<void>}
   */ const createPartitions = async ({ topicPartitions: topicPartitions, validateOnly: validateOnly, timeout: timeout })=>{
        if (!topicPartitions || !Array.isArray(topicPartitions)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topic partitions array ${topicPartitions}`);
        if (topicPartitions.length === 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Empty topic partitions array`);
        if (topicPartitions.filter(({ topic: topic })=>typeof topic !== "string").length > 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topic partitions array, the topic names have to be a valid string");
        const topicNames = new Set(topicPartitions.map(({ topic: topic })=>topic));
        if (topicNames.size < topicPartitions.length) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topic partitions array, it cannot have multiple entries for the same topic");
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                await broker.createPartitions({
                    topicPartitions: topicPartitions,
                    validateOnly: validateOnly,
                    timeout: timeout
                });
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not create topics", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * @param {string[]} topics
   * @param {number} [timeout=5000]
   * @return {Promise}
   */ const deleteTopics = async ({ topics: topics, timeout: timeout })=>{
        if (!topics || !Array.isArray(topics)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topics array ${topics}`);
        if (topics.filter((topic)=>typeof topic !== "string").length > 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topics array, the names must be a valid string");
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                await broker.deleteTopics({
                    topics: topics,
                    timeout: timeout
                });
                // Remove deleted topics
                for (const topic of topics)cluster.targetTopics.delete(topic);
                await cluster.refreshMetadata();
            } catch (e) {
                if ([
                    "NOT_CONTROLLER",
                    "UNKNOWN_TOPIC_OR_PARTITION"
                ].includes(e.type)) {
                    logger.warn("Could not delete topics", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                if (e.type === "REQUEST_TIMED_OUT") logger.error('Could not delete topics, check if "delete.topic.enable" is set to "true" (the default value is "false") or increase the timeout', {
                    error: e.message,
                    retryCount: retryCount,
                    retryTime: retryTime
                });
                bail(e);
            }
        });
    };
    /**
   * @param {string} topic
   */ const fetchTopicOffsets = async (topic)=>{
        if (!topic || typeof topic !== "string") throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topic ${topic}`);
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.addTargetTopic(topic);
                await cluster.refreshMetadataIfNecessary();
                const metadata = cluster.findTopicPartitionMetadata(topic);
                const high = await cluster.fetchTopicsOffset([
                    {
                        topic: topic,
                        fromBeginning: false,
                        partitions: metadata.map((p)=>({
                                partition: p.partitionId
                            }))
                    }
                ]);
                const low = await cluster.fetchTopicsOffset([
                    {
                        topic: topic,
                        fromBeginning: true,
                        partitions: metadata.map((p)=>({
                                partition: p.partitionId
                            }))
                    }
                ]);
                const { partitions: highPartitions } = high.pop();
                const { partitions: lowPartitions } = low.pop();
                return highPartitions.map(({ partition: partition, offset: offset })=>({
                        partition: partition,
                        offset: offset,
                        high: offset,
                        low: lowPartitions.find(({ partition: lowPartition })=>lowPartition === partition).offset
                    }));
            } catch (e) {
                if (e.type === "UNKNOWN_TOPIC_OR_PARTITION") {
                    await cluster.refreshMetadata();
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * @param {string} topic
   * @param {number} [timestamp]
   */ const fetchTopicOffsetsByTimestamp = async (topic, timestamp)=>{
        if (!topic || typeof topic !== "string") throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topic ${topic}`);
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.addTargetTopic(topic);
                await cluster.refreshMetadataIfNecessary();
                const metadata = cluster.findTopicPartitionMetadata(topic);
                const partitions = metadata.map((p)=>({
                        partition: p.partitionId
                    }));
                const high = await cluster.fetchTopicsOffset([
                    {
                        topic: topic,
                        fromBeginning: false,
                        partitions: partitions
                    }
                ]);
                const { partitions: highPartitions } = high.pop();
                const offsets = await cluster.fetchTopicsOffset([
                    {
                        topic: topic,
                        fromTimestamp: timestamp,
                        partitions: partitions
                    }
                ]);
                const { partitions: lowPartitions } = offsets.pop();
                return lowPartitions.map(({ partition: partition, offset: offset })=>({
                        partition: partition,
                        offset: parseInt(offset, 10) >= 0 ? offset : highPartitions.find(({ partition: highPartition })=>highPartition === partition).offset
                    }));
            } catch (e) {
                if (e.type === "UNKNOWN_TOPIC_OR_PARTITION") {
                    await cluster.refreshMetadata();
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * Fetch offsets for a topic or multiple topics
   *
   * Note: set either topic or topics but not both.
   *
   * @param {string} groupId
   * @param {string[]} topics - list of topics to fetch offsets for, defaults to `[]` which fetches all topics for `groupId`.
   * @param {boolean} [resolveOffsets=false]
   * @return {Promise}
   */ const fetchOffsets = async ({ groupId: groupId, topics: topics, resolveOffsets: resolveOffsets = false })=>{
        if (!groupId) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid groupId ${groupId}`);
        if (!topics) topics = [];
        if (!Array.isArray(topics)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Expected topics array to be set");
        const coordinator = await cluster.findGroupCoordinator({
            groupId: groupId
        });
        const topicsToFetch = await Promise.all(topics.map(async (topic)=>{
            const partitions = await $83381089a44f952b$var$findTopicPartitions(cluster, topic);
            const partitionsToFetch = partitions.map((partition)=>({
                    partition: partition
                }));
            return {
                topic: topic,
                partitions: partitionsToFetch
            };
        }));
        let { responses: consumerOffsets } = await coordinator.offsetFetch({
            groupId: groupId,
            topics: topicsToFetch
        });
        if (resolveOffsets) consumerOffsets = await Promise.all(consumerOffsets.map(async ({ topic: topic, partitions: partitions })=>{
            const indexedOffsets = $83381089a44f952b$var$indexByPartition(await fetchTopicOffsets(topic));
            const recalculatedPartitions = partitions.map(({ offset: offset, partition: partition, ...props })=>{
                let resolvedOffset = offset;
                if (Number(offset) === $83381089a44f952b$require$EARLIEST_OFFSET) resolvedOffset = indexedOffsets[partition].low;
                if (Number(offset) === $83381089a44f952b$require$LATEST_OFFSET) resolvedOffset = indexedOffsets[partition].high;
                return {
                    partition: partition,
                    offset: resolvedOffset,
                    ...props
                };
            });
            await setOffsets({
                groupId: groupId,
                topic: topic,
                partitions: recalculatedPartitions
            });
            return {
                topic: topic,
                partitions: recalculatedPartitions
            };
        }));
        return consumerOffsets.map(({ topic: topic, partitions: partitions })=>{
            const completePartitions = partitions.map(({ partition: partition, offset: offset, metadata: metadata })=>({
                    partition: partition,
                    offset: offset,
                    metadata: metadata || null
                }));
            return {
                topic: topic,
                partitions: completePartitions
            };
        });
    };
    /**
   * @param {string} groupId
   * @param {string} topic
   * @param {boolean} [earliest=false]
   * @return {Promise}
   */ const resetOffsets = async ({ groupId: groupId, topic: topic, earliest: earliest = false })=>{
        if (!groupId) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid groupId ${groupId}`);
        if (!topic) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topic ${topic}`);
        const partitions = await $83381089a44f952b$var$findTopicPartitions(cluster, topic);
        const partitionsToSeek = partitions.map((partition)=>({
                partition: partition,
                offset: cluster.defaultOffset({
                    fromBeginning: earliest
                })
            }));
        return setOffsets({
            groupId: groupId,
            topic: topic,
            partitions: partitionsToSeek
        });
    };
    /**
   * @param {string} groupId
   * @param {string} topic
   * @param {Array<SeekEntry>} partitions
   * @return {Promise}
   *
   * @typedef {Object} SeekEntry
   * @property {number} partition
   * @property {string} offset
   */ const setOffsets = async ({ groupId: groupId, topic: topic, partitions: partitions })=>{
        if (!groupId) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid groupId ${groupId}`);
        if (!topic) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topic ${topic}`);
        if (!partitions || partitions.length === 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid partitions`);
        const consumer = $321589964ab32f03$exports({
            logger: rootLogger.namespace("Admin", $83381089a44f952b$require$LEVELS.NOTHING),
            cluster: cluster,
            groupId: groupId
        });
        await consumer.subscribe({
            topic: topic,
            fromBeginning: true
        });
        const description = await consumer.describeGroup();
        if (!$83381089a44f952b$var$isConsumerGroupRunning(description)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`The consumer group must have no running instances, current state: ${description.state}`);
        return new Promise((resolve, reject)=>{
            consumer.on(consumer.events.FETCH, async ()=>consumer.stop().then(resolve).catch(reject));
            consumer.run({
                eachBatchAutoResolve: false,
                eachBatch: async ()=>true
            }).catch(reject);
            // This consumer doesn't need to consume any data
            consumer.pause([
                {
                    topic: topic
                }
            ]);
            for (const seekData of partitions)consumer.seek({
                topic: topic,
                ...seekData
            });
        });
    };
    const isBrokerConfig = (type)=>[
            $f3rUS.BROKER,
            $f3rUS.BROKER_LOGGER
        ].includes(type);
    /**
   * Broker configs can only be returned by the target broker
   *
   * @see
   * https://github.com/apache/kafka/blob/821c1ac6641845aeca96a43bc2b946ecec5cba4f/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java#L3783
   * https://github.com/apache/kafka/blob/821c1ac6641845aeca96a43bc2b946ecec5cba4f/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java#L2027
   *
   * @param {Broker} defaultBroker. Broker used in case the configuration is not a broker config
   */ const groupResourcesByBroker = ({ resources: resources, defaultBroker: defaultBroker })=>$c111f15444cb2679$exports(resources, async ({ type: type, name: nodeId })=>{
            return isBrokerConfig(type) ? await cluster.findBroker({
                nodeId: String(nodeId)
            }) : defaultBroker;
        });
    /**
   * @param {Array<ResourceConfigQuery>} resources
   * @param {boolean} [includeSynonyms=false]
   * @return {Promise}
   *
   * @typedef {Object} ResourceConfigQuery
   * @property {ConfigResourceType} type
   * @property {string} name
   * @property {Array<String>} [configNames=[]]
   */ const describeConfigs = async ({ resources: resources, includeSynonyms: includeSynonyms })=>{
        if (!resources || !Array.isArray(resources)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resources array ${resources}`);
        if (resources.length === 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Resources array cannot be empty");
        const validResourceTypes = Object.values($f3rUS);
        const invalidType = resources.find((r)=>!validResourceTypes.includes(r.type));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource type ${invalidType.type}: ${JSON.stringify(invalidType)}`);
        const invalidName = resources.find((r)=>!r.name || typeof r.name !== "string");
        if (invalidName) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource name ${invalidName.name}: ${JSON.stringify(invalidName)}`);
        const invalidConfigs = resources.find((r)=>!Array.isArray(r.configNames) && r.configNames != null);
        if (invalidConfigs) {
            const { configNames: configNames } = invalidConfigs;
            throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource configNames ${configNames}: ${JSON.stringify(invalidConfigs)}`);
        }
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const controller = await cluster.findControllerBroker();
                const resourcerByBroker = await groupResourcesByBroker({
                    resources: resources,
                    defaultBroker: controller
                });
                const describeConfigsAction = async (broker)=>{
                    const targetBroker = broker || controller;
                    return targetBroker.describeConfigs({
                        resources: resourcerByBroker.get(targetBroker),
                        includeSynonyms: includeSynonyms
                    });
                };
                const brokers = Array.from(resourcerByBroker.keys());
                const responses = await Promise.all(brokers.map(describeConfigsAction));
                const responseResources = responses.reduce((result, { resources: resources })=>[
                        ...result,
                        ...resources
                    ], []);
                return {
                    resources: responseResources
                };
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not describe configs", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * @param {Array<ResourceConfig>} resources
   * @param {boolean} [validateOnly=false]
   * @return {Promise}
   *
   * @typedef {Object} ResourceConfig
   * @property {ConfigResourceType} type
   * @property {string} name
   * @property {Array<ResourceConfigEntry>} configEntries
   *
   * @typedef {Object} ResourceConfigEntry
   * @property {string} name
   * @property {string} value
   */ const alterConfigs = async ({ resources: resources, validateOnly: validateOnly })=>{
        if (!resources || !Array.isArray(resources)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resources array ${resources}`);
        if (resources.length === 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Resources array cannot be empty");
        const validResourceTypes = Object.values($f3rUS);
        const invalidType = resources.find((r)=>!validResourceTypes.includes(r.type));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource type ${invalidType.type}: ${JSON.stringify(invalidType)}`);
        const invalidName = resources.find((r)=>!r.name || typeof r.name !== "string");
        if (invalidName) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource name ${invalidName.name}: ${JSON.stringify(invalidName)}`);
        const invalidConfigs = resources.find((r)=>!Array.isArray(r.configEntries));
        if (invalidConfigs) {
            const { configEntries: configEntries } = invalidConfigs;
            throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource configEntries ${configEntries}: ${JSON.stringify(invalidConfigs)}`);
        }
        const invalidConfigValue = resources.find((r)=>r.configEntries.some((e)=>typeof e.name !== "string" || typeof e.value !== "string"));
        if (invalidConfigValue) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource config value: ${JSON.stringify(invalidConfigValue)}`);
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const controller = await cluster.findControllerBroker();
                const resourcerByBroker = await groupResourcesByBroker({
                    resources: resources,
                    defaultBroker: controller
                });
                const alterConfigsAction = async (broker)=>{
                    const targetBroker = broker || controller;
                    return targetBroker.alterConfigs({
                        resources: resourcerByBroker.get(targetBroker),
                        validateOnly: !!validateOnly
                    });
                };
                const brokers = Array.from(resourcerByBroker.keys());
                const responses = await Promise.all(brokers.map(alterConfigsAction));
                const responseResources = responses.reduce((result, { resources: resources })=>[
                        ...result,
                        ...resources
                    ], []);
                return {
                    resources: responseResources
                };
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not alter configs", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * Fetch metadata for provided topics.
   *
   * If no topics are provided fetch metadata for all topics.
   * @see https://kafka.apache.org/protocol#The_Messages_Metadata
   *
   * @param {Object} [options]
   * @param {string[]} [options.topics]
   * @return {Promise<TopicsMetadata>}
   *
   * @typedef {Object} TopicsMetadata
   * @property {Array<TopicMetadata>} topics
   *
   * @typedef {Object} TopicMetadata
   * @property {String} name
   * @property {Array<PartitionMetadata>} partitions
   *
   * @typedef {Object} PartitionMetadata
   * @property {number} partitionErrorCode Response error code
   * @property {number} partitionId Topic partition id
   * @property {number} leader  The id of the broker acting as leader for this partition.
   * @property {Array<number>} replicas The set of all nodes that host this partition.
   * @property {Array<number>} isr The set of nodes that are in sync with the leader for this partition.
   */ const fetchTopicMetadata = async ({ topics: topics = [] } = {})=>{
        if (topics) topics.forEach((topic)=>{
            if (!topic || typeof topic !== "string") throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topic ${topic}`);
        });
        const metadata = await cluster.metadata({
            topics: topics
        });
        return {
            topics: metadata.topicMetadata.map((topicMetadata)=>({
                    name: topicMetadata.topic,
                    partitions: topicMetadata.partitionMetadata
                }))
        };
    };
    /**
   * Describe cluster
   *
   * @return {Promise<ClusterMetadata>}
   *
   * @typedef {Object} ClusterMetadata
   * @property {Array<Broker>} brokers
   * @property {Number} controller Current controller id. Returns null if unknown.
   * @property {String} clusterId
   *
   * @typedef {Object} Broker
   * @property {Number} nodeId
   * @property {String} host
   * @property {Number} port
   */ const describeCluster = async ()=>{
        const { brokers: nodes, clusterId: clusterId, controllerId: controllerId } = await cluster.metadata({
            topics: []
        });
        const brokers = nodes.map(({ nodeId: nodeId, host: host, port: port })=>({
                nodeId: nodeId,
                host: host,
                port: port
            }));
        const controller = controllerId == null || controllerId === $83381089a44f952b$var$NO_CONTROLLER_ID ? null : controllerId;
        return {
            brokers: brokers,
            controller: controller,
            clusterId: clusterId
        };
    };
    /**
   * List groups in a broker
   *
   * @return {Promise<ListGroups>}
   *
   * @typedef {Object} ListGroups
   * @property {Array<ListGroup>} groups
   *
   * @typedef {Object} ListGroup
   * @property {string} groupId
   * @property {string} protocolType
   */ const listGroups = async ()=>{
        await cluster.refreshMetadata();
        let groups = [];
        for(var nodeId in cluster.brokerPool.brokers){
            const broker = await cluster.findBroker({
                nodeId: nodeId
            });
            const response = await broker.listGroups();
            groups = groups.concat(response.groups);
        }
        return {
            groups: groups
        };
    };
    /**
   * Describe groups by group ids
   * @param {Array<string>} groupIds
   *
   * @typedef {Object} GroupDescriptions
   * @property {Array<GroupDescription>} groups
   *
   * @return {Promise<GroupDescriptions>}
   */ const describeGroups = async (groupIds)=>{
        const coordinatorsForGroup = await Promise.all(groupIds.map(async (groupId)=>{
            const coordinator = await cluster.findGroupCoordinator({
                groupId: groupId
            });
            return {
                coordinator: coordinator,
                groupId: groupId
            };
        }));
        const groupsByCoordinator = Object.values(coordinatorsForGroup.reduce((coordinators, { coordinator: coordinator, groupId: groupId })=>{
            const group = coordinators[coordinator.nodeId];
            if (group) coordinators[coordinator.nodeId] = {
                ...group,
                groupIds: [
                    ...group.groupIds,
                    groupId
                ]
            };
            else coordinators[coordinator.nodeId] = {
                coordinator: coordinator,
                groupIds: [
                    groupId
                ]
            };
            return coordinators;
        }, {}));
        const responses = await Promise.all(groupsByCoordinator.map(async ({ coordinator: coordinator, groupIds: groupIds })=>{
            const retrier = $d1c48a936f24908d$exports(retry);
            const { groups: groups } = await retrier(()=>coordinator.describeGroups({
                    groupIds: groupIds
                }));
            return groups;
        }));
        const groups = [].concat.apply([], responses);
        return {
            groups: groups
        };
    };
    /**
   * Delete groups in a broker
   *
   * @param {string[]} [groupIds]
   * @return {Promise<DeleteGroups>}
   *
   * @typedef {Array} DeleteGroups
   * @property {string} groupId
   * @property {number} errorCode
   */ const deleteGroups = async (groupIds)=>{
        if (!groupIds || !Array.isArray(groupIds)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid groupIds array ${groupIds}`);
        const invalidGroupId = groupIds.some((g)=>typeof g !== "string");
        if (invalidGroupId) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid groupId name: ${JSON.stringify(invalidGroupId)}`);
        const retrier = $d1c48a936f24908d$exports(retry);
        let results = [];
        let clonedGroupIds = groupIds.slice();
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                if (clonedGroupIds.length === 0) return [];
                await cluster.refreshMetadata();
                const brokersPerGroups = {};
                const brokersPerNode = {};
                for (const groupId of clonedGroupIds){
                    const broker = await cluster.findGroupCoordinator({
                        groupId: groupId
                    });
                    if (brokersPerGroups[broker.nodeId] === undefined) brokersPerGroups[broker.nodeId] = [];
                    brokersPerGroups[broker.nodeId].push(groupId);
                    brokersPerNode[broker.nodeId] = broker;
                }
                const res = await Promise.all(Object.keys(brokersPerNode).map(async (nodeId)=>await brokersPerNode[nodeId].deleteGroups(brokersPerGroups[nodeId])));
                const errors = res.flatMap(({ results: results })=>results.map(({ groupId: groupId, errorCode: errorCode, error: error })=>{
                        return {
                            groupId: groupId,
                            errorCode: errorCode,
                            error: error
                        };
                    })).filter(({ errorCode: errorCode })=>errorCode !== 0);
                clonedGroupIds = errors.map(({ groupId: groupId })=>groupId);
                if (errors.length > 0) throw new $83381089a44f952b$require$KafkaJSDeleteGroupsError("Error in DeleteGroups", errors);
                results = res.flatMap(({ results: results })=>results);
                return results;
            } catch (e) {
                if (e.type === "NOT_CONTROLLER" || e.type === "COORDINATOR_NOT_AVAILABLE") {
                    logger.warn("Could not delete groups", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * Delete topic records up to the selected partition offsets
   *
   * @param {string} topic
   * @param {Array<SeekEntry>} partitions
   * @return {Promise}
   *
   * @typedef {Object} SeekEntry
   * @property {number} partition
   * @property {string} offset
   */ const deleteTopicRecords = async ({ topic: topic, partitions: partitions })=>{
        if (!topic || typeof topic !== "string") throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topic "${topic}"`);
        if (!partitions || partitions.length === 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid partitions`);
        const partitionsByBroker = cluster.findLeaderForPartitions(topic, partitions.map((p)=>p.partition));
        const partitionsFound = $83381089a44f952b$var$values(partitionsByBroker).flat();
        const topicOffsets = await fetchTopicOffsets(topic);
        const leaderNotFoundErrors = [];
        partitions.forEach(({ partition: partition, offset: offset })=>{
            // throw if no leader found for partition
            if (!partitionsFound.includes(partition)) {
                leaderNotFoundErrors.push({
                    partition: partition,
                    offset: offset,
                    error: new $83381089a44f952b$require$KafkaJSBrokerNotFound("Could not find the leader for the partition", {
                        retriable: false
                    })
                });
                return;
            }
            const { low: low } = topicOffsets.find((p)=>p.partition === partition) || {
                high: undefined,
                low: undefined
            };
            // warn in case of offset below low watermark
            if (parseInt(offset) < parseInt(low) && parseInt(offset) !== -1) logger.warn("The requested offset is before the earliest offset maintained on the partition - no records will be deleted from this partition", {
                topic: topic,
                partition: partition,
                offset: offset
            });
        });
        if (leaderNotFoundErrors.length > 0) throw new $83381089a44f952b$require$KafkaJSDeleteTopicRecordsError({
            topic: topic,
            partitions: leaderNotFoundErrors
        });
        const seekEntriesByBroker = $83381089a44f952b$var$entries(partitionsByBroker).reduce((obj, [nodeId, nodePartitions])=>{
            obj[nodeId] = {
                topic: topic,
                partitions: partitions.filter((p)=>nodePartitions.includes(p.partition))
            };
            return obj;
        }, {});
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail)=>{
            try {
                const partitionErrors = [];
                const brokerRequests = $83381089a44f952b$var$entries(seekEntriesByBroker).map(([nodeId, { topic: topic, partitions: partitions }])=>async ()=>{
                        const broker = await cluster.findBroker({
                            nodeId: nodeId
                        });
                        await broker.deleteRecords({
                            topics: [
                                {
                                    topic: topic,
                                    partitions: partitions
                                }
                            ]
                        });
                        // remove successful entry so it's ignored on retry
                        delete seekEntriesByBroker[nodeId];
                    });
                await Promise.all(brokerRequests.map((request)=>request().catch((e)=>{
                        if (e.name === "KafkaJSDeleteTopicRecordsError") e.partitions.forEach(({ partition: partition, offset: offset, error: error })=>{
                            partitionErrors.push({
                                partition: partition,
                                offset: offset,
                                error: error
                            });
                        });
                        else // then it's an unknown error, not from the broker response
                        throw e;
                    })));
                if (partitionErrors.length > 0) throw new $83381089a44f952b$require$KafkaJSDeleteTopicRecordsError({
                    topic: topic,
                    partitions: partitionErrors
                });
            } catch (e) {
                if (e.retriable && e.partitions.some(({ error: error })=>$83381089a44f952b$require$staleMetadata(error) || error.name === "KafkaJSMetadataNotLoaded")) await cluster.refreshMetadata();
                throw e;
            }
        });
    };
    /**
   * @param {Array<ACLEntry>} acl
   * @return {Promise<void>}
   *
   * @typedef {Object} ACLEntry
   */ const createAcls = async ({ acl: acl })=>{
        if (!acl || !Array.isArray(acl)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid ACL array ${acl}`);
        if (acl.length === 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Empty ACL array");
        // Validate principal
        if (acl.some(({ principal: principal })=>typeof principal !== "string")) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid ACL array, the principals have to be a valid string");
        // Validate host
        if (acl.some(({ host: host })=>typeof host !== "string")) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid ACL array, the hosts have to be a valid string");
        // Validate resourceName
        if (acl.some(({ resourceName: resourceName })=>typeof resourceName !== "string")) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid ACL array, the resourceNames have to be a valid string");
        let invalidType;
        // Validate operation
        const validOperationTypes = Object.values($0a4f3d7291cb1631$exports);
        invalidType = acl.find((i)=>!validOperationTypes.includes(i.operation));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid operation type ${invalidType.operation}: ${JSON.stringify(invalidType)}`);
        // Validate resourcePatternTypes
        const validResourcePatternTypes = Object.values($fa79594316f04025$exports);
        invalidType = acl.find((i)=>!validResourcePatternTypes.includes(i.resourcePatternType));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource pattern type ${invalidType.resourcePatternType}: ${JSON.stringify(invalidType)}`);
        // Validate permissionTypes
        const validPermissionTypes = Object.values($8b8aab81618599b9$exports);
        invalidType = acl.find((i)=>!validPermissionTypes.includes(i.permissionType));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid permission type ${invalidType.permissionType}: ${JSON.stringify(invalidType)}`);
        // Validate resourceTypes
        const validResourceTypes = Object.values($1473e915169cecf6$exports);
        invalidType = acl.find((i)=>!validResourceTypes.includes(i.resourceType));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource type ${invalidType.resourceType}: ${JSON.stringify(invalidType)}`);
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                await broker.createAcls({
                    acl: acl
                });
                return true;
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not create ACL", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * @param {ACLResourceTypes} resourceType The type of resource
   * @param {string} resourceName The name of the resource
   * @param {ACLResourcePatternTypes} resourcePatternType The resource pattern type filter
   * @param {string} principal The principal name
   * @param {string} host The hostname
   * @param {ACLOperationTypes} operation The type of operation
   * @param {ACLPermissionTypes} permissionType The type of permission
   * @return {Promise<void>}
   *
   * @typedef {number} ACLResourceTypes
   * @typedef {number} ACLResourcePatternTypes
   * @typedef {number} ACLOperationTypes
   * @typedef {number} ACLPermissionTypes
   */ const describeAcls = async ({ resourceType: resourceType, resourceName: resourceName, resourcePatternType: resourcePatternType, principal: principal, host: host, operation: operation, permissionType: permissionType })=>{
        // Validate principal
        if (typeof principal !== "string" && typeof principal !== "undefined") throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid principal, the principal have to be a valid string");
        // Validate host
        if (typeof host !== "string" && typeof host !== "undefined") throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid host, the host have to be a valid string");
        // Validate resourceName
        if (typeof resourceName !== "string" && typeof resourceName !== "undefined") throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid resourceName, the resourceName have to be a valid string");
        // Validate operation
        const validOperationTypes = Object.values($0a4f3d7291cb1631$exports);
        if (!validOperationTypes.includes(operation)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid operation type ${operation}`);
        // Validate resourcePatternType
        const validResourcePatternTypes = Object.values($fa79594316f04025$exports);
        if (!validResourcePatternTypes.includes(resourcePatternType)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource pattern filter type ${resourcePatternType}`);
        // Validate permissionType
        const validPermissionTypes = Object.values($8b8aab81618599b9$exports);
        if (!validPermissionTypes.includes(permissionType)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid permission type ${permissionType}`);
        // Validate resourceType
        const validResourceTypes = Object.values($1473e915169cecf6$exports);
        if (!validResourceTypes.includes(resourceType)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource type ${resourceType}`);
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                const { resources: resources } = await broker.describeAcls({
                    resourceType: resourceType,
                    resourceName: resourceName,
                    resourcePatternType: resourcePatternType,
                    principal: principal,
                    host: host,
                    operation: operation,
                    permissionType: permissionType
                });
                return {
                    resources: resources
                };
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not describe ACL", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * @param {Array<ACLFilter>} filters
   * @return {Promise<void>}
   *
   * @typedef {Object} ACLFilter
   */ const deleteAcls = async ({ filters: filters })=>{
        if (!filters || !Array.isArray(filters)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid ACL Filter array ${filters}`);
        if (filters.length === 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Empty ACL Filter array");
        // Validate principal
        if (filters.some(({ principal: principal })=>typeof principal !== "string" && typeof principal !== "undefined")) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid ACL Filter array, the principals have to be a valid string");
        // Validate host
        if (filters.some(({ host: host })=>typeof host !== "string" && typeof host !== "undefined")) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid ACL Filter array, the hosts have to be a valid string");
        // Validate resourceName
        if (filters.some(({ resourceName: resourceName })=>typeof resourceName !== "string" && typeof resourceName !== "undefined")) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid ACL Filter array, the resourceNames have to be a valid string");
        let invalidType;
        // Validate operation
        const validOperationTypes = Object.values($0a4f3d7291cb1631$exports);
        invalidType = filters.find((i)=>!validOperationTypes.includes(i.operation));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid operation type ${invalidType.operation}: ${JSON.stringify(invalidType)}`);
        // Validate resourcePatternTypes
        const validResourcePatternTypes = Object.values($fa79594316f04025$exports);
        invalidType = filters.find((i)=>!validResourcePatternTypes.includes(i.resourcePatternType));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource pattern type ${invalidType.resourcePatternType}: ${JSON.stringify(invalidType)}`);
        // Validate permissionTypes
        const validPermissionTypes = Object.values($8b8aab81618599b9$exports);
        invalidType = filters.find((i)=>!validPermissionTypes.includes(i.permissionType));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid permission type ${invalidType.permissionType}: ${JSON.stringify(invalidType)}`);
        // Validate resourceTypes
        const validResourceTypes = Object.values($1473e915169cecf6$exports);
        invalidType = filters.find((i)=>!validResourceTypes.includes(i.resourceType));
        if (invalidType) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid resource type ${invalidType.resourceType}: ${JSON.stringify(invalidType)}`);
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                const { filterResponses: filterResponses } = await broker.deleteAcls({
                    filters: filters
                });
                return {
                    filterResponses: filterResponses
                };
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not delete ACL", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * Alter the replicas partitions are assigned to for a topic
   * @param {Object} request
   * @param {import("../../types").IPartitionReassignment[]} request.topics topics and the paritions to be reassigned
   * @param {number} [request.timeout]
   * @returns {Promise}
   */ const alterPartitionReassignments = async ({ topics: topics, timeout: timeout })=>{
        if (!topics || !Array.isArray(topics)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topics array ${topics}`);
        if (topics.filter(({ topic: topic })=>typeof topic !== "string").length > 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topics array, the topic names have to be a valid string");
        const topicNames = new Set(topics.map(({ topic: topic })=>topic));
        if (topicNames.size < topics.length) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topics array, it cannot have multiple entries for the same topic");
        for (const { topic: topic, partitionAssignment: partitionAssignment } of topics){
            if (!partitionAssignment || !Array.isArray(partitionAssignment)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid partitions array: ${partitionAssignment} for topic: ${topic}`);
            for (const { partition: partition, replicas: replicas } of partitionAssignment){
                if (partition === null || partition === undefined || typeof partition !== "number" || partition < 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid partitions index: ${partition} for topic: ${topic}`);
                if (!replicas || !Array.isArray(replicas)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid replica assignment: ${replicas} for topic: ${topic} on partition: ${partition}`);
                if (replicas.filter((replica)=>typeof replica !== "number" || replica < 0).length >= 1) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid replica assignment: ${replicas} for topic: ${topic} on partition: ${partition}. Replicas must be a non negative number`);
            }
        }
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                await broker.alterPartitionReassignments({
                    topics: topics,
                    timeout: timeout
                });
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not reassign partitions", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /**
   * List the partition reassignments in progress.
   * If a partition is not going through a reassignment, its AddingReplicas and RemovingReplicas fields will simply be empty.
   * If a partition doesn't exist, no response will be returned for it.
   * @param {Object} request
   * @param {import("../../types").TopicPartitions[]} request.topics topics and the paritions to be returned, if this is null will return all the topics.
   * @param {number} [request.timeout]
   * @returns {Promise<import("../../types").ListPartitionReassignmentsResponse>}
   */ const listPartitionReassignments = async ({ topics: topics = null, timeout: timeout })=>{
        if (topics) {
            if (!Array.isArray(topics)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid topics array ${topics}`);
            if (topics.filter(({ topic: topic })=>typeof topic !== "string").length > 0) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topics array, the topic names have to be a valid string");
            const topicNames = new Set(topics.map(({ topic: topic })=>topic));
            if (topicNames.size < topics.length) throw new $83381089a44f952b$require$KafkaJSNonRetriableError("Invalid topics array, it cannot have multiple entries for the same topic");
            for (const { topic: topic, partitions: partitions } of topics){
                if (!partitions || !Array.isArray(partitions)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid partition array: ${partitions} for topic: ${topic}`);
                if (partitions.filter((partition)=>typeof partition !== "number" || partition < 0).length >= 1) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Invalid partition array: ${partitions} for topic: ${topic}. The partition indices have to be a valid number greater than 0.`);
            }
        }
        const retrier = $d1c48a936f24908d$exports(retry);
        return retrier(async (bail, retryCount, retryTime)=>{
            try {
                await cluster.refreshMetadata();
                const broker = await cluster.findControllerBroker();
                const response = await broker.listPartitionReassignments({
                    topics: topics,
                    timeout: timeout
                });
                return {
                    topics: response.topics
                };
            } catch (e) {
                if (e.type === "NOT_CONTROLLER") {
                    logger.warn("Could not reassign partitions", {
                        error: e.message,
                        retryCount: retryCount,
                        retryTime: retryTime
                    });
                    throw e;
                }
                bail(e);
            }
        });
    };
    /** @type {import("../../types").Admin["on"]} */ const on = (eventName, listener)=>{
        if (!$83381089a44f952b$var$eventNames.includes(eventName)) throw new $83381089a44f952b$require$KafkaJSNonRetriableError(`Event name should be one of ${$83381089a44f952b$var$eventKeys}`);
        return instrumentationEmitter.addListener($83381089a44f952b$require$unwrapEvent(eventName), (event)=>{
            event.type = $83381089a44f952b$require$wrapEvent(event.type);
            Promise.resolve(listener(event)).catch((e)=>{
                logger.error(`Failed to execute listener: ${e.message}`, {
                    eventName: eventName,
                    stack: e.stack
                });
            });
        });
    };
    /**
   * @return {Object} logger
   */ const getLogger = ()=>logger;
    return {
        connect: connect,
        disconnect: disconnect,
        listTopics: listTopics,
        createTopics: createTopics,
        deleteTopics: deleteTopics,
        createPartitions: createPartitions,
        fetchTopicMetadata: fetchTopicMetadata,
        describeCluster: describeCluster,
        events: $83381089a44f952b$require$events,
        fetchOffsets: fetchOffsets,
        fetchTopicOffsets: fetchTopicOffsets,
        fetchTopicOffsetsByTimestamp: fetchTopicOffsetsByTimestamp,
        setOffsets: setOffsets,
        resetOffsets: resetOffsets,
        describeConfigs: describeConfigs,
        alterConfigs: alterConfigs,
        on: on,
        logger: getLogger,
        listGroups: listGroups,
        describeGroups: describeGroups,
        deleteGroups: deleteGroups,
        describeAcls: describeAcls,
        deleteAcls: deleteAcls,
        createAcls: createAcls,
        deleteTopicRecords: deleteTopicRecords,
        alterPartitionReassignments: alterPartitionReassignments,
        listPartitionReassignments: listPartitionReassignments
    };
};



var $hNBWH = parcelRequire("hNBWH");
var $6d390508abcffa11$exports = {};
const $6d390508abcffa11$var$KEEP_ALIVE_DELAY = 60000 // in ms
;


/**
 * @returns {import("../../types").ISocketFactory}
 */ $6d390508abcffa11$exports = ()=>{
    const net = $4UN2M$net;
    const tls = $4UN2M$tls;
    return ({ host: host, port: port, ssl: ssl, onConnect: onConnect })=>{
        const socket = ssl ? tls.connect(Object.assign({
            host: host,
            port: port
        }, !net.isIP(host) ? {
            servername: host
        } : {}, ssl), onConnect) : net.connect({
            host: host,
            port: port
        }, onConnect);
        socket.setKeepAlive(true, $6d390508abcffa11$var$KEEP_ALIVE_DELAY);
        return socket;
    };
};


var $7ab53c6e49cd8430$exports = {};
$7ab53c6e49cd8430$exports = (fn)=>{
    let called = false;
    return (...args)=>{
        if (!called) {
            called = true;
            return fn(...args);
        }
    };
};



var $4jZ5a = parcelRequire("4jZ5a");
const $d25eed3aacc5b2b2$var$PRIVATE = {
    CREATE_CLUSTER: Symbol("private:Kafka:createCluster"),
    CLUSTER_RETRY: Symbol("private:Kafka:clusterRetry"),
    LOGGER: Symbol("private:Kafka:logger"),
    OFFSETS: Symbol("private:Kafka:offsets")
};
const $d25eed3aacc5b2b2$var$DEFAULT_METADATA_MAX_AGE = 300000;
const $d25eed3aacc5b2b2$var$warnOfDefaultPartitioner = $7ab53c6e49cd8430$exports((logger)=>{
    logger.warn(`KafkaJS v2.0.0 switched default partitioner. To retain the same partitioning behavior as in previous versions, create the producer with the option "createPartitioner: Partitioners.LegacyPartitioner". See the migration guide at ${$4jZ5a("docs/migration-guide-v2.0.0", "producer-new-default-partitioner")} for details. Silence this warning by setting the environment variable "KAFKAJS_NO_PARTITIONER_WARNING=1"`);
});
$d25eed3aacc5b2b2$exports = class Client {
    /**
   * @param {Object} options
   * @param {Array<string>} options.brokers example: ['127.0.0.1:9092', '127.0.0.1:9094']
   * @param {Object} options.ssl
   * @param {Object} options.sasl
   * @param {string} options.clientId
   * @param {number} [options.connectionTimeout=1000] - in milliseconds
   * @param {number} options.authenticationTimeout - in milliseconds
   * @param {number} options.reauthenticationThreshold - in milliseconds
   * @param {number} [options.requestTimeout=30000] - in milliseconds
   * @param {boolean} [options.enforceRequestTimeout]
   * @param {import("../types").RetryOptions} [options.retry]
   * @param {import("../types").ISocketFactory} [options.socketFactory]
   */ constructor({ brokers: brokers, ssl: ssl, sasl: sasl, clientId: clientId, connectionTimeout: connectionTimeout = 1000, authenticationTimeout: authenticationTimeout, reauthenticationThreshold: reauthenticationThreshold, requestTimeout: requestTimeout, enforceRequestTimeout: enforceRequestTimeout = true, retry: retry, socketFactory: socketFactory = $6d390508abcffa11$exports(), logLevel: logLevel = $d25eed3aacc5b2b2$var$INFO, logCreator: logCreator = $6a8f52227ba48177$exports }){
        this[$d25eed3aacc5b2b2$var$PRIVATE.OFFSETS] = new Map();
        this[$d25eed3aacc5b2b2$var$PRIVATE.LOGGER] = $d25eed3aacc5b2b2$var$createLogger({
            level: logLevel,
            logCreator: logCreator
        });
        this[$d25eed3aacc5b2b2$var$PRIVATE.CLUSTER_RETRY] = retry;
        this[$d25eed3aacc5b2b2$var$PRIVATE.CREATE_CLUSTER] = ({ metadataMaxAge: metadataMaxAge, allowAutoTopicCreation: allowAutoTopicCreation = true, maxInFlightRequests: maxInFlightRequests = null, instrumentationEmitter: instrumentationEmitter = null, isolationLevel: isolationLevel })=>new $dd751a346b077b84$exports({
                logger: this[$d25eed3aacc5b2b2$var$PRIVATE.LOGGER],
                retry: this[$d25eed3aacc5b2b2$var$PRIVATE.CLUSTER_RETRY],
                offsets: this[$d25eed3aacc5b2b2$var$PRIVATE.OFFSETS],
                socketFactory: socketFactory,
                brokers: brokers,
                ssl: ssl,
                sasl: sasl,
                clientId: clientId,
                connectionTimeout: connectionTimeout,
                authenticationTimeout: authenticationTimeout,
                reauthenticationThreshold: reauthenticationThreshold,
                requestTimeout: requestTimeout,
                enforceRequestTimeout: enforceRequestTimeout,
                metadataMaxAge: metadataMaxAge,
                instrumentationEmitter: instrumentationEmitter,
                allowAutoTopicCreation: allowAutoTopicCreation,
                maxInFlightRequests: maxInFlightRequests,
                isolationLevel: isolationLevel
            });
    }
    /**
   * @public
   */ producer({ createPartitioner: createPartitioner, retry: retry, metadataMaxAge: metadataMaxAge = $d25eed3aacc5b2b2$var$DEFAULT_METADATA_MAX_AGE, allowAutoTopicCreation: allowAutoTopicCreation, idempotent: idempotent, transactionalId: transactionalId, transactionTimeout: transactionTimeout, maxInFlightRequests: maxInFlightRequests } = {}) {
        const instrumentationEmitter = new $b7828dca740d64c9$exports();
        const cluster = this[$d25eed3aacc5b2b2$var$PRIVATE.CREATE_CLUSTER]({
            metadataMaxAge: metadataMaxAge,
            allowAutoTopicCreation: allowAutoTopicCreation,
            maxInFlightRequests: maxInFlightRequests,
            instrumentationEmitter: instrumentationEmitter
        });
        if (createPartitioner == null) $d25eed3aacc5b2b2$var$warnOfDefaultPartitioner(this[$d25eed3aacc5b2b2$var$PRIVATE.LOGGER]);
        return $2582da7c2beebc69$exports({
            retry: {
                ...this[$d25eed3aacc5b2b2$var$PRIVATE.CLUSTER_RETRY],
                ...retry
            },
            logger: this[$d25eed3aacc5b2b2$var$PRIVATE.LOGGER],
            cluster: cluster,
            createPartitioner: createPartitioner,
            idempotent: idempotent,
            transactionalId: transactionalId,
            transactionTimeout: transactionTimeout,
            instrumentationEmitter: instrumentationEmitter
        });
    }
    /**
   * @public
   */ consumer({ groupId: groupId, partitionAssigners: partitionAssigners, metadataMaxAge: metadataMaxAge = $d25eed3aacc5b2b2$var$DEFAULT_METADATA_MAX_AGE, sessionTimeout: sessionTimeout, rebalanceTimeout: rebalanceTimeout, heartbeatInterval: heartbeatInterval, maxBytesPerPartition: maxBytesPerPartition, minBytes: minBytes, maxBytes: maxBytes, maxWaitTimeInMs: maxWaitTimeInMs, retry: retry = {
        retries: 5
    }, allowAutoTopicCreation: allowAutoTopicCreation, maxInFlightRequests: maxInFlightRequests, readUncommitted: readUncommitted = false, rackId: rackId = "" } = {}) {
        const isolationLevel = readUncommitted ? $hNBWH.READ_UNCOMMITTED : $hNBWH.READ_COMMITTED;
        const instrumentationEmitter = new $b7828dca740d64c9$exports();
        const cluster = this[$d25eed3aacc5b2b2$var$PRIVATE.CREATE_CLUSTER]({
            metadataMaxAge: metadataMaxAge,
            allowAutoTopicCreation: allowAutoTopicCreation,
            maxInFlightRequests: maxInFlightRequests,
            isolationLevel: isolationLevel,
            instrumentationEmitter: instrumentationEmitter
        });
        return $321589964ab32f03$exports({
            retry: {
                ...this[$d25eed3aacc5b2b2$var$PRIVATE.CLUSTER_RETRY],
                ...retry
            },
            logger: this[$d25eed3aacc5b2b2$var$PRIVATE.LOGGER],
            cluster: cluster,
            groupId: groupId,
            partitionAssigners: partitionAssigners,
            sessionTimeout: sessionTimeout,
            rebalanceTimeout: rebalanceTimeout,
            heartbeatInterval: heartbeatInterval,
            maxBytesPerPartition: maxBytesPerPartition,
            minBytes: minBytes,
            maxBytes: maxBytes,
            maxWaitTimeInMs: maxWaitTimeInMs,
            isolationLevel: isolationLevel,
            instrumentationEmitter: instrumentationEmitter,
            rackId: rackId,
            metadataMaxAge: metadataMaxAge
        });
    }
    /**
   * @public
   */ admin({ retry: retry } = {}) {
        const instrumentationEmitter = new $b7828dca740d64c9$exports();
        const cluster = this[$d25eed3aacc5b2b2$var$PRIVATE.CREATE_CLUSTER]({
            allowAutoTopicCreation: false,
            instrumentationEmitter: instrumentationEmitter
        });
        return $83381089a44f952b$exports({
            retry: {
                ...this[$d25eed3aacc5b2b2$var$PRIVATE.CLUSTER_RETRY],
                ...retry
            },
            logger: this[$d25eed3aacc5b2b2$var$PRIVATE.LOGGER],
            instrumentationEmitter: instrumentationEmitter,
            cluster: cluster
        });
    }
    /**
   * @public
   */ logger() {
        return this[$d25eed3aacc5b2b2$var$PRIVATE.LOGGER];
    }
};






var $2aK07 = parcelRequire("2aK07");

var $f3rUS = parcelRequire("f3rUS");

var $hNLcg = parcelRequire("hNLcg");





var $8mQRr = parcelRequire("8mQRr");
const { isRebalancing: $62ee5ef26bce7619$var$isRebalancing, isKafkaJSError: $62ee5ef26bce7619$var$isKafkaJSError, ...$62ee5ef26bce7619$var$errors } = $8mQRr;

var $62ee5ef26bce7619$require$LEVELS = $0d5d3ffc5a7e9da7$exports.LEVELS;
$62ee5ef26bce7619$exports = {
    Kafka: $d25eed3aacc5b2b2$exports,
    PartitionAssigners: $d426eccef4ee7752$exports,
    AssignerProtocol: $68363f5e47f65887$exports,
    Partitioners: $40efbf9052fe03b5$exports,
    logLevel: $62ee5ef26bce7619$require$LEVELS,
    CompressionTypes: $2aK07.Types,
    CompressionCodecs: $2aK07.Codecs,
    ConfigResourceTypes: $f3rUS,
    AclResourceTypes: $1473e915169cecf6$exports,
    AclOperationTypes: $0a4f3d7291cb1631$exports,
    AclPermissionTypes: $8b8aab81618599b9$exports,
    ResourcePatternTypes: $fa79594316f04025$exports,
    ConfigSource: $hNLcg,
    ...$62ee5ef26bce7619$var$errors
};


var $383e46f26d360885$require$Kafka = $62ee5ef26bce7619$exports.Kafka;

var $b390b84af73eefa2$exports = {};

/*! Browser bundle of nunjucks 3.2.4  */ (function webpackUniversalModuleDefinition(root, factory) {
    $b390b84af73eefa2$exports = factory();
})(typeof self !== "undefined" ? self : $b390b84af73eefa2$exports, function() {
    return /******/ function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module1.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) /******/ Object.defineProperty(exports, name, {
                /******/ configurable: false,
                /******/ enumerable: true,
                /******/ get: getter
            });
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module1) {
            /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {
                return module1["default"];
            } : /******/ function getModuleExports() {
                return module1;
            };
            /******/ __webpack_require__.d(getter, "a", getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = 11);
    /******/ }([
        /* 0 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var ArrayProto = Array.prototype;
            var ObjProto = Object.prototype;
            var escapeMap = {
                "&": "&amp;",
                '"': "&quot;",
                "'": "&#39;",
                "<": "&lt;",
                ">": "&gt;",
                "\\": "&#92;"
            };
            var escapeRegex = /[&"'<>\\]/g;
            var exports = module1.exports = {};
            function hasOwnProp(obj, k) {
                return ObjProto.hasOwnProperty.call(obj, k);
            }
            exports.hasOwnProp = hasOwnProp;
            function lookupEscape(ch) {
                return escapeMap[ch];
            }
            function _prettifyError(path, withInternals, err) {
                if (!err.Update) // not one of ours, cast it
                err = new exports.TemplateError(err);
                err.Update(path);
                // Unless they marked the dev flag, show them a trace from here
                if (!withInternals) {
                    var old = err;
                    err = new Error(old.message);
                    err.name = old.name;
                }
                return err;
            }
            exports._prettifyError = _prettifyError;
            function TemplateError(message, lineno, colno) {
                var err;
                var cause;
                if (message instanceof Error) {
                    cause = message;
                    message = cause.name + ": " + cause.message;
                }
                if (Object.setPrototypeOf) {
                    err = new Error(message);
                    Object.setPrototypeOf(err, TemplateError.prototype);
                } else {
                    err = this;
                    Object.defineProperty(err, "message", {
                        enumerable: false,
                        writable: true,
                        value: message
                    });
                }
                Object.defineProperty(err, "name", {
                    value: "Template render error"
                });
                if (Error.captureStackTrace) Error.captureStackTrace(err, this.constructor);
                var getStack;
                if (cause) {
                    var stackDescriptor = Object.getOwnPropertyDescriptor(cause, "stack");
                    getStack = stackDescriptor && (stackDescriptor.get || function() {
                        return stackDescriptor.value;
                    });
                    if (!getStack) getStack = function getStack() {
                        return cause.stack;
                    };
                } else {
                    var stack = new Error(message).stack;
                    getStack = function getStack() {
                        return stack;
                    };
                }
                Object.defineProperty(err, "stack", {
                    get: function get() {
                        return getStack.call(err);
                    }
                });
                Object.defineProperty(err, "cause", {
                    value: cause
                });
                err.lineno = lineno;
                err.colno = colno;
                err.firstUpdate = true;
                err.Update = function Update(path) {
                    var msg = "(" + (path || "unknown path") + ")";
                    // only show lineno + colno next to path of template
                    // where error occurred
                    if (this.firstUpdate) {
                        if (this.lineno && this.colno) msg += " [Line " + this.lineno + ", Column " + this.colno + "]";
                        else if (this.lineno) msg += " [Line " + this.lineno + "]";
                    }
                    msg += "\n ";
                    if (this.firstUpdate) msg += " ";
                    this.message = msg + (this.message || "");
                    this.firstUpdate = false;
                    return this;
                };
                return err;
            }
            if (Object.setPrototypeOf) Object.setPrototypeOf(TemplateError.prototype, Error.prototype);
            else TemplateError.prototype = Object.create(Error.prototype, {
                constructor: {
                    value: TemplateError
                }
            });
            exports.TemplateError = TemplateError;
            function escape(val) {
                return val.replace(escapeRegex, lookupEscape);
            }
            exports.escape = escape;
            function isFunction(obj) {
                return ObjProto.toString.call(obj) === "[object Function]";
            }
            exports.isFunction = isFunction;
            function isArray(obj) {
                return ObjProto.toString.call(obj) === "[object Array]";
            }
            exports.isArray = isArray;
            function isString(obj) {
                return ObjProto.toString.call(obj) === "[object String]";
            }
            exports.isString = isString;
            function isObject(obj) {
                return ObjProto.toString.call(obj) === "[object Object]";
            }
            exports.isObject = isObject;
            /**
 * @param {string|number} attr
 * @returns {(string|number)[]}
 * @private
 */ function _prepareAttributeParts(attr) {
                if (!attr) return [];
                if (typeof attr === "string") return attr.split(".");
                return [
                    attr
                ];
            }
            /**
 * @param {string}   attribute      Attribute value. Dots allowed.
 * @returns {function(Object): *}
 */ function getAttrGetter(attribute) {
                var parts = _prepareAttributeParts(attribute);
                return function attrGetter(item) {
                    var _item = item;
                    for(var i = 0; i < parts.length; i++){
                        var part = parts[i];
                        // If item is not an object, and we still got parts to handle, it means
                        // that something goes wrong. Just roll out to undefined in that case.
                        if (hasOwnProp(_item, part)) _item = _item[part];
                        else return undefined;
                    }
                    return _item;
                };
            }
            exports.getAttrGetter = getAttrGetter;
            function groupBy(obj, val, throwOnUndefined) {
                var result = {};
                var iterator = isFunction(val) ? val : getAttrGetter(val);
                for(var i = 0; i < obj.length; i++){
                    var value = obj[i];
                    var key = iterator(value, i);
                    if (key === undefined && throwOnUndefined === true) throw new TypeError('groupby: attribute "' + val + '" resolved to undefined');
                    (result[key] || (result[key] = [])).push(value);
                }
                return result;
            }
            exports.groupBy = groupBy;
            function toArray(obj) {
                return Array.prototype.slice.call(obj);
            }
            exports.toArray = toArray;
            function without(array) {
                var result = [];
                if (!array) return result;
                var length = array.length;
                var contains = toArray(arguments).slice(1);
                var index = -1;
                while(++index < length)if (indexOf(contains, array[index]) === -1) result.push(array[index]);
                return result;
            }
            exports.without = without;
            function repeat(char_, n) {
                var str = "";
                for(var i = 0; i < n; i++)str += char_;
                return str;
            }
            exports.repeat = repeat;
            function each(obj, func, context) {
                if (obj == null) return;
                if (ArrayProto.forEach && obj.forEach === ArrayProto.forEach) obj.forEach(func, context);
                else if (obj.length === +obj.length) for(var i = 0, l = obj.length; i < l; i++)func.call(context, obj[i], i, obj);
            }
            exports.each = each;
            function map(obj, func) {
                var results = [];
                if (obj == null) return results;
                if (ArrayProto.map && obj.map === ArrayProto.map) return obj.map(func);
                for(var i = 0; i < obj.length; i++)results[results.length] = func(obj[i], i);
                if (obj.length === +obj.length) results.length = obj.length;
                return results;
            }
            exports.map = map;
            function asyncIter(arr, iter, cb) {
                var i = -1;
                function next() {
                    i++;
                    if (i < arr.length) iter(arr[i], i, next, cb);
                    else cb();
                }
                next();
            }
            exports.asyncIter = asyncIter;
            function asyncFor(obj, iter, cb) {
                var keys = keys_(obj || {});
                var len = keys.length;
                var i = -1;
                function next() {
                    i++;
                    var k = keys[i];
                    if (i < len) iter(k, obj[k], i, len, next);
                    else cb();
                }
                next();
            }
            exports.asyncFor = asyncFor;
            function indexOf(arr, searchElement, fromIndex) {
                return Array.prototype.indexOf.call(arr || [], searchElement, fromIndex);
            }
            exports.indexOf = indexOf;
            function keys_(obj) {
                /* eslint-disable no-restricted-syntax */ var arr = [];
                for(var k in obj)if (hasOwnProp(obj, k)) arr.push(k);
                return arr;
            }
            exports.keys = keys_;
            function _entries(obj) {
                return keys_(obj).map(function(k) {
                    return [
                        k,
                        obj[k]
                    ];
                });
            }
            exports._entries = _entries;
            function _values(obj) {
                return keys_(obj).map(function(k) {
                    return obj[k];
                });
            }
            exports._values = _values;
            function extend(obj1, obj2) {
                obj1 = obj1 || {};
                keys_(obj2).forEach(function(k) {
                    obj1[k] = obj2[k];
                });
                return obj1;
            }
            exports._assign = exports.extend = extend;
            function inOperator(key, val) {
                if (isArray(val) || isString(val)) return val.indexOf(key) !== -1;
                else if (isObject(val)) return key in val;
                throw new Error('Cannot use "in" operator to search for "' + key + '" in unexpected types.');
            }
            exports.inOperator = inOperator;
        /***/ },
        /* 1 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            // A simple class system, more documentation to come
            function _defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", {
                    writable: false
                });
                return Constructor;
            }
            function _toPropertyKey(arg) {
                var key = _toPrimitive(arg, "string");
                return typeof key === "symbol" ? key : String(key);
            }
            function _toPrimitive(input, hint) {
                if (typeof input !== "object" || input === null) return input;
                var prim = input[Symbol.toPrimitive];
                if (prim !== undefined) {
                    var res = prim.call(input, hint || "default");
                    if (typeof res !== "object") return res;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return (hint === "string" ? String : Number)(input);
            }
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var EventEmitter = __webpack_require__(16);
            var lib = __webpack_require__(0);
            function parentWrap(parent, prop) {
                if (typeof parent !== "function" || typeof prop !== "function") return prop;
                return function wrap() {
                    // Save the current parent method
                    var tmp = this.parent;
                    // Set parent to the previous method, call, and restore
                    this.parent = parent;
                    var res = prop.apply(this, arguments);
                    this.parent = tmp;
                    return res;
                };
            }
            function extendClass(cls, name, props) {
                props = props || {};
                lib.keys(props).forEach(function(k) {
                    props[k] = parentWrap(cls.prototype[k], props[k]);
                });
                var subclass = /*#__PURE__*/ function(_cls) {
                    _inheritsLoose(subclass, _cls);
                    function subclass() {
                        return _cls.apply(this, arguments) || this;
                    }
                    _createClass(subclass, [
                        {
                            key: "typename",
                            get: function get() {
                                return name;
                            }
                        }
                    ]);
                    return subclass;
                }(cls);
                lib._assign(subclass.prototype, props);
                return subclass;
            }
            var Obj = /*#__PURE__*/ function() {
                function Obj() {
                    // Unfortunately necessary for backwards compatibility
                    this.init.apply(this, arguments);
                }
                var _proto = Obj.prototype;
                _proto.init = function init() {};
                Obj.extend = function extend(name, props) {
                    if (typeof name === "object") {
                        props = name;
                        name = "anonymous";
                    }
                    return extendClass(this, name, props);
                };
                _createClass(Obj, [
                    {
                        key: "typename",
                        get: function get() {
                            return this.constructor.name;
                        }
                    }
                ]);
                return Obj;
            }();
            var EmitterObj = /*#__PURE__*/ function(_EventEmitter) {
                _inheritsLoose(EmitterObj, _EventEmitter);
                function EmitterObj() {
                    var _this2;
                    var _this;
                    _this = _EventEmitter.call(this) || this;
                    // Unfortunately necessary for backwards compatibility
                    (_this2 = _this).init.apply(_this2, arguments);
                    return _this;
                }
                var _proto2 = EmitterObj.prototype;
                _proto2.init = function init() {};
                EmitterObj.extend = function extend(name, props) {
                    if (typeof name === "object") {
                        props = name;
                        name = "anonymous";
                    }
                    return extendClass(this, name, props);
                };
                _createClass(EmitterObj, [
                    {
                        key: "typename",
                        get: function get() {
                            return this.constructor.name;
                        }
                    }
                ]);
                return EmitterObj;
            }(EventEmitter);
            module1.exports = {
                Obj: Obj,
                EmitterObj: EmitterObj
            };
        /***/ },
        /* 2 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var arrayFrom = Array.from;
            var supportsIterators = typeof Symbol === "function" && Symbol.iterator && typeof arrayFrom === "function";
            // Frames keep track of scoping both at compile-time and run-time so
            // we know how to access variables. Block tags can introduce special
            // variables, for example.
            var Frame = /*#__PURE__*/ function() {
                function Frame(parent, isolateWrites) {
                    this.variables = Object.create(null);
                    this.parent = parent;
                    this.topLevel = false;
                    // if this is true, writes (set) should never propagate upwards past
                    // this frame to its parent (though reads may).
                    this.isolateWrites = isolateWrites;
                }
                var _proto = Frame.prototype;
                _proto.set = function set(name, val, resolveUp) {
                    // Allow variables with dots by automatically creating the
                    // nested structure
                    var parts = name.split(".");
                    var obj = this.variables;
                    var frame = this;
                    if (resolveUp) {
                        if (frame = this.resolve(parts[0], true)) {
                            frame.set(name, val);
                            return;
                        }
                    }
                    for(var i = 0; i < parts.length - 1; i++){
                        var id = parts[i];
                        if (!obj[id]) obj[id] = {};
                        obj = obj[id];
                    }
                    obj[parts[parts.length - 1]] = val;
                };
                _proto.get = function get(name) {
                    var val = this.variables[name];
                    if (val !== undefined) return val;
                    return null;
                };
                _proto.lookup = function lookup(name) {
                    var p = this.parent;
                    var val = this.variables[name];
                    if (val !== undefined) return val;
                    return p && p.lookup(name);
                };
                _proto.resolve = function resolve(name, forWrite) {
                    var p = forWrite && this.isolateWrites ? undefined : this.parent;
                    var val = this.variables[name];
                    if (val !== undefined) return this;
                    return p && p.resolve(name);
                };
                _proto.push = function push(isolateWrites) {
                    return new Frame(this, isolateWrites);
                };
                _proto.pop = function pop() {
                    return this.parent;
                };
                return Frame;
            }();
            function makeMacro(argNames, kwargNames, func) {
                return function macro() {
                    for(var _len = arguments.length, macroArgs = new Array(_len), _key = 0; _key < _len; _key++)macroArgs[_key] = arguments[_key];
                    var argCount = numArgs(macroArgs);
                    var args;
                    var kwargs = getKeywordArgs(macroArgs);
                    if (argCount > argNames.length) {
                        args = macroArgs.slice(0, argNames.length);
                        // Positional arguments that should be passed in as
                        // keyword arguments (essentially default values)
                        macroArgs.slice(args.length, argCount).forEach(function(val, i) {
                            if (i < kwargNames.length) kwargs[kwargNames[i]] = val;
                        });
                        args.push(kwargs);
                    } else if (argCount < argNames.length) {
                        args = macroArgs.slice(0, argCount);
                        for(var i = argCount; i < argNames.length; i++){
                            var arg = argNames[i];
                            // Keyword arguments that should be passed as
                            // positional arguments, i.e. the caller explicitly
                            // used the name of a positional arg
                            args.push(kwargs[arg]);
                            delete kwargs[arg];
                        }
                        args.push(kwargs);
                    } else args = macroArgs;
                    return func.apply(this, args);
                };
            }
            function makeKeywordArgs(obj) {
                obj.__keywords = true;
                return obj;
            }
            function isKeywordArgs(obj) {
                return obj && Object.prototype.hasOwnProperty.call(obj, "__keywords");
            }
            function getKeywordArgs(args) {
                var len = args.length;
                if (len) {
                    var lastArg = args[len - 1];
                    if (isKeywordArgs(lastArg)) return lastArg;
                }
                return {};
            }
            function numArgs(args) {
                var len = args.length;
                if (len === 0) return 0;
                var lastArg = args[len - 1];
                if (isKeywordArgs(lastArg)) return len - 1;
                else return len;
            }
            // A SafeString object indicates that the string should not be
            // autoescaped. This happens magically because autoescaping only
            // occurs on primitive string objects.
            function SafeString(val) {
                if (typeof val !== "string") return val;
                this.val = val;
                this.length = val.length;
            }
            SafeString.prototype = Object.create(String.prototype, {
                length: {
                    writable: true,
                    configurable: true,
                    value: 0
                }
            });
            SafeString.prototype.valueOf = function valueOf() {
                return this.val;
            };
            SafeString.prototype.toString = function toString() {
                return this.val;
            };
            function copySafeness(dest, target) {
                if (dest instanceof SafeString) return new SafeString(target);
                return target.toString();
            }
            function markSafe(val) {
                var type = typeof val;
                if (type === "string") return new SafeString(val);
                else if (type !== "function") return val;
                else return function wrapSafe(args) {
                    var ret = val.apply(this, arguments);
                    if (typeof ret === "string") return new SafeString(ret);
                    return ret;
                };
            }
            function suppressValue(val, autoescape) {
                val = val !== undefined && val !== null ? val : "";
                if (autoescape && !(val instanceof SafeString)) val = lib.escape(val.toString());
                return val;
            }
            function ensureDefined(val, lineno, colno) {
                if (val === null || val === undefined) throw new lib.TemplateError("attempted to output null or undefined value", lineno + 1, colno + 1);
                return val;
            }
            function memberLookup(obj, val) {
                if (obj === undefined || obj === null) return undefined;
                if (typeof obj[val] === "function") return function() {
                    for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                    return obj[val].apply(obj, args);
                };
                return obj[val];
            }
            function callWrap(obj, name, context, args) {
                if (!obj) throw new Error("Unable to call `" + name + "`, which is undefined or falsey");
                else if (typeof obj !== "function") throw new Error("Unable to call `" + name + "`, which is not a function");
                return obj.apply(context, args);
            }
            function contextOrFrameLookup(context, frame, name) {
                var val = frame.lookup(name);
                return val !== undefined ? val : context.lookup(name);
            }
            function handleError(error, lineno, colno) {
                if (error.lineno) return error;
                else return new lib.TemplateError(error, lineno, colno);
            }
            function asyncEach(arr, dimen, iter, cb) {
                if (lib.isArray(arr)) {
                    var len = arr.length;
                    lib.asyncIter(arr, function iterCallback(item, i, next) {
                        switch(dimen){
                            case 1:
                                iter(item, i, len, next);
                                break;
                            case 2:
                                iter(item[0], item[1], i, len, next);
                                break;
                            case 3:
                                iter(item[0], item[1], item[2], i, len, next);
                                break;
                            default:
                                item.push(i, len, next);
                                iter.apply(this, item);
                        }
                    }, cb);
                } else lib.asyncFor(arr, function iterCallback(key, val, i, len, next) {
                    iter(key, val, i, len, next);
                }, cb);
            }
            function asyncAll(arr, dimen, func, cb) {
                var finished = 0;
                var len;
                var outputArr;
                function done(i, output) {
                    finished++;
                    outputArr[i] = output;
                    if (finished === len) cb(null, outputArr.join(""));
                }
                if (lib.isArray(arr)) {
                    len = arr.length;
                    outputArr = new Array(len);
                    if (len === 0) cb(null, "");
                    else for(var i = 0; i < arr.length; i++){
                        var item = arr[i];
                        switch(dimen){
                            case 1:
                                func(item, i, len, done);
                                break;
                            case 2:
                                func(item[0], item[1], i, len, done);
                                break;
                            case 3:
                                func(item[0], item[1], item[2], i, len, done);
                                break;
                            default:
                                item.push(i, len, done);
                                func.apply(this, item);
                        }
                    }
                } else {
                    var keys = lib.keys(arr || {});
                    len = keys.length;
                    outputArr = new Array(len);
                    if (len === 0) cb(null, "");
                    else for(var _i = 0; _i < keys.length; _i++){
                        var k = keys[_i];
                        func(k, arr[k], _i, len, done);
                    }
                }
            }
            function fromIterator(arr) {
                if (typeof arr !== "object" || arr === null || lib.isArray(arr)) return arr;
                else if (supportsIterators && Symbol.iterator in arr) return arrayFrom(arr);
                else return arr;
            }
            module1.exports = {
                Frame: Frame,
                makeMacro: makeMacro,
                makeKeywordArgs: makeKeywordArgs,
                numArgs: numArgs,
                suppressValue: suppressValue,
                ensureDefined: ensureDefined,
                memberLookup: memberLookup,
                contextOrFrameLookup: contextOrFrameLookup,
                callWrap: callWrap,
                handleError: handleError,
                isArray: lib.isArray,
                keys: lib.keys,
                SafeString: SafeString,
                copySafeness: copySafeness,
                markSafe: markSafe,
                asyncEach: asyncEach,
                asyncAll: asyncAll,
                inOperator: lib.inOperator,
                fromIterator: fromIterator
            };
        /***/ },
        /* 3 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                Object.defineProperty(Constructor, "prototype", {
                    writable: false
                });
                return Constructor;
            }
            function _toPropertyKey(arg) {
                var key = _toPrimitive(arg, "string");
                return typeof key === "symbol" ? key : String(key);
            }
            function _toPrimitive(input, hint) {
                if (typeof input !== "object" || input === null) return input;
                var prim = input[Symbol.toPrimitive];
                if (prim !== undefined) {
                    var res = prim.call(input, hint || "default");
                    if (typeof res !== "object") return res;
                    throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return (hint === "string" ? String : Number)(input);
            }
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var _require = __webpack_require__(1), Obj = _require.Obj;
            function traverseAndCheck(obj, type, results) {
                if (obj instanceof type) results.push(obj);
                if (obj instanceof Node) obj.findAll(type, results);
            }
            var Node = /*#__PURE__*/ function(_Obj) {
                _inheritsLoose(Node, _Obj);
                function Node() {
                    return _Obj.apply(this, arguments) || this;
                }
                var _proto = Node.prototype;
                _proto.init = function init(lineno, colno) {
                    var _arguments = arguments, _this = this;
                    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)args[_key - 2] = arguments[_key];
                    this.lineno = lineno;
                    this.colno = colno;
                    this.fields.forEach(function(field, i) {
                        // The first two args are line/col numbers, so offset by 2
                        var val = _arguments[i + 2];
                        // Fields should never be undefined, but null. It makes
                        // testing easier to normalize values.
                        if (val === undefined) val = null;
                        _this[field] = val;
                    });
                };
                _proto.findAll = function findAll(type, results) {
                    var _this2 = this;
                    results = results || [];
                    if (this instanceof NodeList) this.children.forEach(function(child) {
                        return traverseAndCheck(child, type, results);
                    });
                    else this.fields.forEach(function(field) {
                        return traverseAndCheck(_this2[field], type, results);
                    });
                    return results;
                };
                _proto.iterFields = function iterFields(func) {
                    var _this3 = this;
                    this.fields.forEach(function(field) {
                        func(_this3[field], field);
                    });
                };
                return Node;
            }(Obj); // Abstract nodes
            var Value = /*#__PURE__*/ function(_Node) {
                _inheritsLoose(Value, _Node);
                function Value() {
                    return _Node.apply(this, arguments) || this;
                }
                _createClass(Value, [
                    {
                        key: "typename",
                        get: function get() {
                            return "Value";
                        }
                    },
                    {
                        key: "fields",
                        get: function get() {
                            return [
                                "value"
                            ];
                        }
                    }
                ]);
                return Value;
            }(Node); // Concrete nodes
            var NodeList = /*#__PURE__*/ function(_Node2) {
                _inheritsLoose(NodeList, _Node2);
                function NodeList() {
                    return _Node2.apply(this, arguments) || this;
                }
                var _proto2 = NodeList.prototype;
                _proto2.init = function init(lineno, colno, nodes) {
                    _Node2.prototype.init.call(this, lineno, colno, nodes || []);
                };
                _proto2.addChild = function addChild(node) {
                    this.children.push(node);
                };
                _createClass(NodeList, [
                    {
                        key: "typename",
                        get: function get() {
                            return "NodeList";
                        }
                    },
                    {
                        key: "fields",
                        get: function get() {
                            return [
                                "children"
                            ];
                        }
                    }
                ]);
                return NodeList;
            }(Node);
            var Root = NodeList.extend("Root");
            var Literal = Value.extend("Literal");
            var _Symbol = Value.extend("Symbol");
            var Group = NodeList.extend("Group");
            var ArrayNode = NodeList.extend("Array");
            var Pair = Node.extend("Pair", {
                fields: [
                    "key",
                    "value"
                ]
            });
            var Dict = NodeList.extend("Dict");
            var LookupVal = Node.extend("LookupVal", {
                fields: [
                    "target",
                    "val"
                ]
            });
            var If = Node.extend("If", {
                fields: [
                    "cond",
                    "body",
                    "else_"
                ]
            });
            var IfAsync = If.extend("IfAsync");
            var InlineIf = Node.extend("InlineIf", {
                fields: [
                    "cond",
                    "body",
                    "else_"
                ]
            });
            var For = Node.extend("For", {
                fields: [
                    "arr",
                    "name",
                    "body",
                    "else_"
                ]
            });
            var AsyncEach = For.extend("AsyncEach");
            var AsyncAll = For.extend("AsyncAll");
            var Macro = Node.extend("Macro", {
                fields: [
                    "name",
                    "args",
                    "body"
                ]
            });
            var Caller = Macro.extend("Caller");
            var Import = Node.extend("Import", {
                fields: [
                    "template",
                    "target",
                    "withContext"
                ]
            });
            var FromImport = /*#__PURE__*/ function(_Node3) {
                _inheritsLoose(FromImport, _Node3);
                function FromImport() {
                    return _Node3.apply(this, arguments) || this;
                }
                var _proto3 = FromImport.prototype;
                _proto3.init = function init(lineno, colno, template, names, withContext) {
                    _Node3.prototype.init.call(this, lineno, colno, template, names || new NodeList(), withContext);
                };
                _createClass(FromImport, [
                    {
                        key: "typename",
                        get: function get() {
                            return "FromImport";
                        }
                    },
                    {
                        key: "fields",
                        get: function get() {
                            return [
                                "template",
                                "names",
                                "withContext"
                            ];
                        }
                    }
                ]);
                return FromImport;
            }(Node);
            var FunCall = Node.extend("FunCall", {
                fields: [
                    "name",
                    "args"
                ]
            });
            var Filter = FunCall.extend("Filter");
            var FilterAsync = Filter.extend("FilterAsync", {
                fields: [
                    "name",
                    "args",
                    "symbol"
                ]
            });
            var KeywordArgs = Dict.extend("KeywordArgs");
            var Block = Node.extend("Block", {
                fields: [
                    "name",
                    "body"
                ]
            });
            var Super = Node.extend("Super", {
                fields: [
                    "blockName",
                    "symbol"
                ]
            });
            var TemplateRef = Node.extend("TemplateRef", {
                fields: [
                    "template"
                ]
            });
            var Extends = TemplateRef.extend("Extends");
            var Include = Node.extend("Include", {
                fields: [
                    "template",
                    "ignoreMissing"
                ]
            });
            var Set1 = Node.extend("Set", {
                fields: [
                    "targets",
                    "value"
                ]
            });
            var Switch = Node.extend("Switch", {
                fields: [
                    "expr",
                    "cases",
                    "default"
                ]
            });
            var Case = Node.extend("Case", {
                fields: [
                    "cond",
                    "body"
                ]
            });
            var Output = NodeList.extend("Output");
            var Capture = Node.extend("Capture", {
                fields: [
                    "body"
                ]
            });
            var TemplateData = Literal.extend("TemplateData");
            var UnaryOp = Node.extend("UnaryOp", {
                fields: [
                    "target"
                ]
            });
            var BinOp = Node.extend("BinOp", {
                fields: [
                    "left",
                    "right"
                ]
            });
            var In = BinOp.extend("In");
            var Is = BinOp.extend("Is");
            var Or = BinOp.extend("Or");
            var And = BinOp.extend("And");
            var Not = UnaryOp.extend("Not");
            var Add = BinOp.extend("Add");
            var Concat = BinOp.extend("Concat");
            var Sub = BinOp.extend("Sub");
            var Mul = BinOp.extend("Mul");
            var Div = BinOp.extend("Div");
            var FloorDiv = BinOp.extend("FloorDiv");
            var Mod = BinOp.extend("Mod");
            var Pow = BinOp.extend("Pow");
            var Neg = UnaryOp.extend("Neg");
            var Pos = UnaryOp.extend("Pos");
            var Compare = Node.extend("Compare", {
                fields: [
                    "expr",
                    "ops"
                ]
            });
            var CompareOperand = Node.extend("CompareOperand", {
                fields: [
                    "expr",
                    "type"
                ]
            });
            var CallExtension = Node.extend("CallExtension", {
                init: function init(ext, prop, args, contentArgs) {
                    this.parent();
                    this.extName = ext.__name || ext;
                    this.prop = prop;
                    this.args = args || new NodeList();
                    this.contentArgs = contentArgs || [];
                    this.autoescape = ext.autoescape;
                },
                fields: [
                    "extName",
                    "prop",
                    "args",
                    "contentArgs"
                ]
            });
            var CallExtensionAsync = CallExtension.extend("CallExtensionAsync");
            // This is hacky, but this is just a debugging function anyway
            function print(str, indent, inline) {
                var lines = str.split("\n");
                lines.forEach(function(line, i) {
                    if (line && (inline && i > 0 || !inline)) $4UN2M$process.stdout.write(" ".repeat(indent));
                    var nl = i === lines.length - 1 ? "" : "\n";
                    $4UN2M$process.stdout.write("" + line + nl);
                });
            }
            // Print the AST in a nicely formatted tree format for debuggin
            function printNodes(node, indent) {
                indent = indent || 0;
                print(node.typename + ": ", indent);
                if (node instanceof NodeList) {
                    print("\n");
                    node.children.forEach(function(n) {
                        printNodes(n, indent + 2);
                    });
                } else if (node instanceof CallExtension) {
                    print(node.extName + "." + node.prop + "\n");
                    if (node.args) printNodes(node.args, indent + 2);
                    if (node.contentArgs) node.contentArgs.forEach(function(n) {
                        printNodes(n, indent + 2);
                    });
                } else {
                    var nodes = [];
                    var props = null;
                    node.iterFields(function(val, fieldName) {
                        if (val instanceof Node) nodes.push([
                            fieldName,
                            val
                        ]);
                        else {
                            props = props || {};
                            props[fieldName] = val;
                        }
                    });
                    if (props) print(JSON.stringify(props, null, 2) + "\n", null, true);
                    else print("\n");
                    nodes.forEach(function(_ref) {
                        var fieldName = _ref[0], n = _ref[1];
                        print("[" + fieldName + "] =>", indent + 2);
                        printNodes(n, indent + 4);
                    });
                }
            }
            module1.exports = {
                Node: Node,
                Root: Root,
                NodeList: NodeList,
                Value: Value,
                Literal: Literal,
                Symbol: _Symbol,
                Group: Group,
                Array: ArrayNode,
                Pair: Pair,
                Dict: Dict,
                Output: Output,
                Capture: Capture,
                TemplateData: TemplateData,
                If: If,
                IfAsync: IfAsync,
                InlineIf: InlineIf,
                For: For,
                AsyncEach: AsyncEach,
                AsyncAll: AsyncAll,
                Macro: Macro,
                Caller: Caller,
                Import: Import,
                FromImport: FromImport,
                FunCall: FunCall,
                Filter: Filter,
                FilterAsync: FilterAsync,
                KeywordArgs: KeywordArgs,
                Block: Block,
                Super: Super,
                Extends: Extends,
                Include: Include,
                Set: Set1,
                Switch: Switch,
                Case: Case,
                LookupVal: LookupVal,
                BinOp: BinOp,
                In: In,
                Is: Is,
                Or: Or,
                And: And,
                Not: Not,
                Add: Add,
                Concat: Concat,
                Sub: Sub,
                Mul: Mul,
                Div: Div,
                FloorDiv: FloorDiv,
                Mod: Mod,
                Pow: Pow,
                Neg: Neg,
                Pos: Pos,
                Compare: Compare,
                CompareOperand: CompareOperand,
                CallExtension: CallExtension,
                CallExtensionAsync: CallExtensionAsync,
                printNodes: printNodes
            };
        /***/ },
        /* 4 */ /***/ function(module1, exports) {
        /***/ },
        /* 5 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var parser = __webpack_require__(8);
            var transformer = __webpack_require__(17);
            var nodes = __webpack_require__(3);
            var _require = __webpack_require__(0), TemplateError = _require.TemplateError;
            var _require2 = __webpack_require__(2), Frame = _require2.Frame;
            var _require3 = __webpack_require__(1), Obj = _require3.Obj;
            // These are all the same for now, but shouldn't be passed straight
            // through
            var compareOps = {
                "==": "==",
                "===": "===",
                "!=": "!=",
                "!==": "!==",
                "<": "<",
                ">": ">",
                "<=": "<=",
                ">=": ">="
            };
            var Compiler = /*#__PURE__*/ function(_Obj) {
                _inheritsLoose(Compiler, _Obj);
                function Compiler() {
                    return _Obj.apply(this, arguments) || this;
                }
                var _proto = Compiler.prototype;
                _proto.init = function init(templateName, throwOnUndefined) {
                    this.templateName = templateName;
                    this.codebuf = [];
                    this.lastId = 0;
                    this.buffer = null;
                    this.bufferStack = [];
                    this._scopeClosers = "";
                    this.inBlock = false;
                    this.throwOnUndefined = throwOnUndefined;
                };
                _proto.fail = function fail(msg, lineno, colno) {
                    if (lineno !== undefined) lineno += 1;
                    if (colno !== undefined) colno += 1;
                    throw new TemplateError(msg, lineno, colno);
                };
                _proto._pushBuffer = function _pushBuffer() {
                    var id = this._tmpid();
                    this.bufferStack.push(this.buffer);
                    this.buffer = id;
                    this._emit("var " + this.buffer + ' = "";');
                    return id;
                };
                _proto._popBuffer = function _popBuffer() {
                    this.buffer = this.bufferStack.pop();
                };
                _proto._emit = function _emit(code) {
                    this.codebuf.push(code);
                };
                _proto._emitLine = function _emitLine(code) {
                    this._emit(code + "\n");
                };
                _proto._emitLines = function _emitLines() {
                    var _this = this;
                    for(var _len = arguments.length, lines = new Array(_len), _key = 0; _key < _len; _key++)lines[_key] = arguments[_key];
                    lines.forEach(function(line) {
                        return _this._emitLine(line);
                    });
                };
                _proto._emitFuncBegin = function _emitFuncBegin(node, name) {
                    this.buffer = "output";
                    this._scopeClosers = "";
                    this._emitLine("function " + name + "(env, context, frame, runtime, cb) {");
                    this._emitLine("var lineno = " + node.lineno + ";");
                    this._emitLine("var colno = " + node.colno + ";");
                    this._emitLine("var " + this.buffer + ' = "";');
                    this._emitLine("try {");
                };
                _proto._emitFuncEnd = function _emitFuncEnd(noReturn) {
                    if (!noReturn) this._emitLine("cb(null, " + this.buffer + ");");
                    this._closeScopeLevels();
                    this._emitLine("} catch (e) {");
                    this._emitLine("  cb(runtime.handleError(e, lineno, colno));");
                    this._emitLine("}");
                    this._emitLine("}");
                    this.buffer = null;
                };
                _proto._addScopeLevel = function _addScopeLevel() {
                    this._scopeClosers += "})";
                };
                _proto._closeScopeLevels = function _closeScopeLevels() {
                    this._emitLine(this._scopeClosers + ";");
                    this._scopeClosers = "";
                };
                _proto._withScopedSyntax = function _withScopedSyntax(func) {
                    var _scopeClosers = this._scopeClosers;
                    this._scopeClosers = "";
                    func.call(this);
                    this._closeScopeLevels();
                    this._scopeClosers = _scopeClosers;
                };
                _proto._makeCallback = function _makeCallback(res) {
                    var err = this._tmpid();
                    return "function(" + err + (res ? "," + res : "") + ") {\n" + "if(" + err + ") { cb(" + err + "); return; }";
                };
                _proto._tmpid = function _tmpid() {
                    this.lastId++;
                    return "t_" + this.lastId;
                };
                _proto._templateName = function _templateName() {
                    return this.templateName == null ? "undefined" : JSON.stringify(this.templateName);
                };
                _proto._compileChildren = function _compileChildren(node, frame) {
                    var _this2 = this;
                    node.children.forEach(function(child) {
                        _this2.compile(child, frame);
                    });
                };
                _proto._compileAggregate = function _compileAggregate(node, frame, startChar, endChar) {
                    var _this3 = this;
                    if (startChar) this._emit(startChar);
                    node.children.forEach(function(child, i) {
                        if (i > 0) _this3._emit(",");
                        _this3.compile(child, frame);
                    });
                    if (endChar) this._emit(endChar);
                };
                _proto._compileExpression = function _compileExpression(node, frame) {
                    // TODO: I'm not really sure if this type check is worth it or
                    // not.
                    this.assertType(node, nodes.Literal, nodes.Symbol, nodes.Group, nodes.Array, nodes.Dict, nodes.FunCall, nodes.Caller, nodes.Filter, nodes.LookupVal, nodes.Compare, nodes.InlineIf, nodes.In, nodes.Is, nodes.And, nodes.Or, nodes.Not, nodes.Add, nodes.Concat, nodes.Sub, nodes.Mul, nodes.Div, nodes.FloorDiv, nodes.Mod, nodes.Pow, nodes.Neg, nodes.Pos, nodes.Compare, nodes.NodeList);
                    this.compile(node, frame);
                };
                _proto.assertType = function assertType(node) {
                    for(var _len2 = arguments.length, types = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)types[_key2 - 1] = arguments[_key2];
                    if (!types.some(function(t) {
                        return node instanceof t;
                    })) this.fail("assertType: invalid type: " + node.typename, node.lineno, node.colno);
                };
                _proto.compileCallExtension = function compileCallExtension(node, frame, async) {
                    var _this4 = this;
                    var args = node.args;
                    var contentArgs = node.contentArgs;
                    var autoescape = typeof node.autoescape === "boolean" ? node.autoescape : true;
                    if (!async) this._emit(this.buffer + " += runtime.suppressValue(");
                    this._emit('env.getExtension("' + node.extName + '")["' + node.prop + '"](');
                    this._emit("context");
                    if (args || contentArgs) this._emit(",");
                    if (args) {
                        if (!(args instanceof nodes.NodeList)) this.fail("compileCallExtension: arguments must be a NodeList, use `parser.parseSignature`");
                        args.children.forEach(function(arg, i) {
                            // Tag arguments are passed normally to the call. Note
                            // that keyword arguments are turned into a single js
                            // object as the last argument, if they exist.
                            _this4._compileExpression(arg, frame);
                            if (i !== args.children.length - 1 || contentArgs.length) _this4._emit(",");
                        });
                    }
                    if (contentArgs.length) contentArgs.forEach(function(arg, i) {
                        if (i > 0) _this4._emit(",");
                        if (arg) {
                            _this4._emitLine("function(cb) {");
                            _this4._emitLine("if(!cb) { cb = function(err) { if(err) { throw err; }}}");
                            var id = _this4._pushBuffer();
                            _this4._withScopedSyntax(function() {
                                _this4.compile(arg, frame);
                                _this4._emitLine("cb(null, " + id + ");");
                            });
                            _this4._popBuffer();
                            _this4._emitLine("return " + id + ";");
                            _this4._emitLine("}");
                        } else _this4._emit("null");
                    });
                    if (async) {
                        var res = this._tmpid();
                        this._emitLine(", " + this._makeCallback(res));
                        this._emitLine(this.buffer + " += runtime.suppressValue(" + res + ", " + autoescape + " && env.opts.autoescape);");
                        this._addScopeLevel();
                    } else {
                        this._emit(")");
                        this._emit(", " + autoescape + " && env.opts.autoescape);\n");
                    }
                };
                _proto.compileCallExtensionAsync = function compileCallExtensionAsync(node, frame) {
                    this.compileCallExtension(node, frame, true);
                };
                _proto.compileNodeList = function compileNodeList(node, frame) {
                    this._compileChildren(node, frame);
                };
                _proto.compileLiteral = function compileLiteral(node) {
                    if (typeof node.value === "string") {
                        var val = node.value.replace(/\\/g, "\\\\");
                        val = val.replace(/"/g, '\\"');
                        val = val.replace(/\n/g, "\\n");
                        val = val.replace(/\r/g, "\\r");
                        val = val.replace(/\t/g, "\\t");
                        val = val.replace(/\u2028/g, "\\u2028");
                        this._emit('"' + val + '"');
                    } else if (node.value === null) this._emit("null");
                    else this._emit(node.value.toString());
                };
                _proto.compileSymbol = function compileSymbol(node, frame) {
                    var name = node.value;
                    var v = frame.lookup(name);
                    if (v) this._emit(v);
                    else this._emit('runtime.contextOrFrameLookup(context, frame, "' + name + '")');
                };
                _proto.compileGroup = function compileGroup(node, frame) {
                    this._compileAggregate(node, frame, "(", ")");
                };
                _proto.compileArray = function compileArray(node, frame) {
                    this._compileAggregate(node, frame, "[", "]");
                };
                _proto.compileDict = function compileDict(node, frame) {
                    this._compileAggregate(node, frame, "{", "}");
                };
                _proto.compilePair = function compilePair(node, frame) {
                    var key = node.key;
                    var val = node.value;
                    if (key instanceof nodes.Symbol) key = new nodes.Literal(key.lineno, key.colno, key.value);
                    else if (!(key instanceof nodes.Literal && typeof key.value === "string")) this.fail("compilePair: Dict keys must be strings or names", key.lineno, key.colno);
                    this.compile(key, frame);
                    this._emit(": ");
                    this._compileExpression(val, frame);
                };
                _proto.compileInlineIf = function compileInlineIf(node, frame) {
                    this._emit("(");
                    this.compile(node.cond, frame);
                    this._emit("?");
                    this.compile(node.body, frame);
                    this._emit(":");
                    if (node.else_ !== null) this.compile(node.else_, frame);
                    else this._emit('""');
                    this._emit(")");
                };
                _proto.compileIn = function compileIn(node, frame) {
                    this._emit("runtime.inOperator(");
                    this.compile(node.left, frame);
                    this._emit(",");
                    this.compile(node.right, frame);
                    this._emit(")");
                };
                _proto.compileIs = function compileIs(node, frame) {
                    // first, we need to try to get the name of the test function, if it's a
                    // callable (i.e., has args) and not a symbol.
                    var right = node.right.name ? node.right.name.value : node.right.value;
                    this._emit('env.getTest("' + right + '").call(context, ');
                    this.compile(node.left, frame);
                    // compile the arguments for the callable if they exist
                    if (node.right.args) {
                        this._emit(",");
                        this.compile(node.right.args, frame);
                    }
                    this._emit(") === true");
                };
                _proto._binOpEmitter = function _binOpEmitter(node, frame, str) {
                    this.compile(node.left, frame);
                    this._emit(str);
                    this.compile(node.right, frame);
                };
                _proto.compileOr = function compileOr(node, frame) {
                    return this._binOpEmitter(node, frame, " || ");
                };
                _proto.compileAnd = function compileAnd(node, frame) {
                    return this._binOpEmitter(node, frame, " && ");
                };
                _proto.compileAdd = function compileAdd(node, frame) {
                    return this._binOpEmitter(node, frame, " + ");
                };
                _proto.compileConcat = function compileConcat(node, frame) {
                    return this._binOpEmitter(node, frame, ' + "" + ');
                };
                _proto.compileSub = function compileSub(node, frame) {
                    return this._binOpEmitter(node, frame, " - ");
                };
                _proto.compileMul = function compileMul(node, frame) {
                    return this._binOpEmitter(node, frame, " * ");
                };
                _proto.compileDiv = function compileDiv(node, frame) {
                    return this._binOpEmitter(node, frame, " / ");
                };
                _proto.compileMod = function compileMod(node, frame) {
                    return this._binOpEmitter(node, frame, " % ");
                };
                _proto.compileNot = function compileNot(node, frame) {
                    this._emit("!");
                    this.compile(node.target, frame);
                };
                _proto.compileFloorDiv = function compileFloorDiv(node, frame) {
                    this._emit("Math.floor(");
                    this.compile(node.left, frame);
                    this._emit(" / ");
                    this.compile(node.right, frame);
                    this._emit(")");
                };
                _proto.compilePow = function compilePow(node, frame) {
                    this._emit("Math.pow(");
                    this.compile(node.left, frame);
                    this._emit(", ");
                    this.compile(node.right, frame);
                    this._emit(")");
                };
                _proto.compileNeg = function compileNeg(node, frame) {
                    this._emit("-");
                    this.compile(node.target, frame);
                };
                _proto.compilePos = function compilePos(node, frame) {
                    this._emit("+");
                    this.compile(node.target, frame);
                };
                _proto.compileCompare = function compileCompare(node, frame) {
                    var _this5 = this;
                    this.compile(node.expr, frame);
                    node.ops.forEach(function(op) {
                        _this5._emit(" " + compareOps[op.type] + " ");
                        _this5.compile(op.expr, frame);
                    });
                };
                _proto.compileLookupVal = function compileLookupVal(node, frame) {
                    this._emit("runtime.memberLookup((");
                    this._compileExpression(node.target, frame);
                    this._emit("),");
                    this._compileExpression(node.val, frame);
                    this._emit(")");
                };
                _proto._getNodeName = function _getNodeName(node) {
                    switch(node.typename){
                        case "Symbol":
                            return node.value;
                        case "FunCall":
                            return "the return value of (" + this._getNodeName(node.name) + ")";
                        case "LookupVal":
                            return this._getNodeName(node.target) + '["' + this._getNodeName(node.val) + '"]';
                        case "Literal":
                            return node.value.toString();
                        default:
                            return "--expression--";
                    }
                };
                _proto.compileFunCall = function compileFunCall(node, frame) {
                    // Keep track of line/col info at runtime by settings
                    // variables within an expression. An expression in javascript
                    // like (x, y, z) returns the last value, and x and y can be
                    // anything
                    this._emit("(lineno = " + node.lineno + ", colno = " + node.colno + ", ");
                    this._emit("runtime.callWrap(");
                    // Compile it as normal.
                    this._compileExpression(node.name, frame);
                    // Output the name of what we're calling so we can get friendly errors
                    // if the lookup fails.
                    this._emit(', "' + this._getNodeName(node.name).replace(/"/g, '\\"') + '", context, ');
                    this._compileAggregate(node.args, frame, "[", "])");
                    this._emit(")");
                };
                _proto.compileFilter = function compileFilter(node, frame) {
                    var name = node.name;
                    this.assertType(name, nodes.Symbol);
                    this._emit('env.getFilter("' + name.value + '").call(context, ');
                    this._compileAggregate(node.args, frame);
                    this._emit(")");
                };
                _proto.compileFilterAsync = function compileFilterAsync(node, frame) {
                    var name = node.name;
                    var symbol = node.symbol.value;
                    this.assertType(name, nodes.Symbol);
                    frame.set(symbol, symbol);
                    this._emit('env.getFilter("' + name.value + '").call(context, ');
                    this._compileAggregate(node.args, frame);
                    this._emitLine(", " + this._makeCallback(symbol));
                    this._addScopeLevel();
                };
                _proto.compileKeywordArgs = function compileKeywordArgs(node, frame) {
                    this._emit("runtime.makeKeywordArgs(");
                    this.compileDict(node, frame);
                    this._emit(")");
                };
                _proto.compileSet = function compileSet(node, frame) {
                    var _this6 = this;
                    var ids = [];
                    // Lookup the variable names for each identifier and create
                    // new ones if necessary
                    node.targets.forEach(function(target) {
                        var name = target.value;
                        var id = frame.lookup(name);
                        if (id === null || id === undefined) {
                            id = _this6._tmpid();
                            // Note: This relies on js allowing scope across
                            // blocks, in case this is created inside an `if`
                            _this6._emitLine("var " + id + ";");
                        }
                        ids.push(id);
                    });
                    if (node.value) {
                        this._emit(ids.join(" = ") + " = ");
                        this._compileExpression(node.value, frame);
                        this._emitLine(";");
                    } else {
                        this._emit(ids.join(" = ") + " = ");
                        this.compile(node.body, frame);
                        this._emitLine(";");
                    }
                    node.targets.forEach(function(target, i) {
                        var id = ids[i];
                        var name = target.value;
                        // We are running this for every var, but it's very
                        // uncommon to assign to multiple vars anyway
                        _this6._emitLine('frame.set("' + name + '", ' + id + ", true);");
                        _this6._emitLine("if(frame.topLevel) {");
                        _this6._emitLine('context.setVariable("' + name + '", ' + id + ");");
                        _this6._emitLine("}");
                        if (name.charAt(0) !== "_") {
                            _this6._emitLine("if(frame.topLevel) {");
                            _this6._emitLine('context.addExport("' + name + '", ' + id + ");");
                            _this6._emitLine("}");
                        }
                    });
                };
                _proto.compileSwitch = function compileSwitch(node, frame) {
                    var _this7 = this;
                    this._emit("switch (");
                    this.compile(node.expr, frame);
                    this._emit(") {");
                    node.cases.forEach(function(c, i) {
                        _this7._emit("case ");
                        _this7.compile(c.cond, frame);
                        _this7._emit(": ");
                        _this7.compile(c.body, frame);
                        // preserve fall-throughs
                        if (c.body.children.length) _this7._emitLine("break;");
                    });
                    if (node.default) {
                        this._emit("default:");
                        this.compile(node.default, frame);
                    }
                    this._emit("}");
                };
                _proto.compileIf = function compileIf(node, frame, async) {
                    var _this8 = this;
                    this._emit("if(");
                    this._compileExpression(node.cond, frame);
                    this._emitLine(") {");
                    this._withScopedSyntax(function() {
                        _this8.compile(node.body, frame);
                        if (async) _this8._emit("cb()");
                    });
                    if (node.else_) {
                        this._emitLine("}\nelse {");
                        this._withScopedSyntax(function() {
                            _this8.compile(node.else_, frame);
                            if (async) _this8._emit("cb()");
                        });
                    } else if (async) {
                        this._emitLine("}\nelse {");
                        this._emit("cb()");
                    }
                    this._emitLine("}");
                };
                _proto.compileIfAsync = function compileIfAsync(node, frame) {
                    this._emit("(function(cb) {");
                    this.compileIf(node, frame, true);
                    this._emit("})(" + this._makeCallback());
                    this._addScopeLevel();
                };
                _proto._emitLoopBindings = function _emitLoopBindings(node, arr, i, len) {
                    var _this9 = this;
                    var bindings = [
                        {
                            name: "index",
                            val: i + " + 1"
                        },
                        {
                            name: "index0",
                            val: i
                        },
                        {
                            name: "revindex",
                            val: len + " - " + i
                        },
                        {
                            name: "revindex0",
                            val: len + " - " + i + " - 1"
                        },
                        {
                            name: "first",
                            val: i + " === 0"
                        },
                        {
                            name: "last",
                            val: i + " === " + len + " - 1"
                        },
                        {
                            name: "length",
                            val: len
                        }
                    ];
                    bindings.forEach(function(b) {
                        _this9._emitLine('frame.set("loop.' + b.name + '", ' + b.val + ");");
                    });
                };
                _proto.compileFor = function compileFor(node, frame) {
                    var _this10 = this;
                    // Some of this code is ugly, but it keeps the generated code
                    // as fast as possible. ForAsync also shares some of this, but
                    // not much.
                    var i = this._tmpid();
                    var len = this._tmpid();
                    var arr = this._tmpid();
                    frame = frame.push();
                    this._emitLine("frame = frame.push();");
                    this._emit("var " + arr + " = ");
                    this._compileExpression(node.arr, frame);
                    this._emitLine(";");
                    this._emit("if(" + arr + ") {");
                    this._emitLine(arr + " = runtime.fromIterator(" + arr + ");");
                    // If multiple names are passed, we need to bind them
                    // appropriately
                    if (node.name instanceof nodes.Array) {
                        this._emitLine("var " + i + ";");
                        // The object could be an arroy or object. Note that the
                        // body of the loop is duplicated for each condition, but
                        // we are optimizing for speed over size.
                        this._emitLine("if(runtime.isArray(" + arr + ")) {");
                        this._emitLine("var " + len + " = " + arr + ".length;");
                        this._emitLine("for(" + i + "=0; " + i + " < " + arr + ".length; " + i + "++) {");
                        // Bind each declared var
                        node.name.children.forEach(function(child, u) {
                            var tid = _this10._tmpid();
                            _this10._emitLine("var " + tid + " = " + arr + "[" + i + "][" + u + "];");
                            _this10._emitLine('frame.set("' + child + '", ' + arr + "[" + i + "][" + u + "]);");
                            frame.set(node.name.children[u].value, tid);
                        });
                        this._emitLoopBindings(node, arr, i, len);
                        this._withScopedSyntax(function() {
                            _this10.compile(node.body, frame);
                        });
                        this._emitLine("}");
                        this._emitLine("} else {");
                        // Iterate over the key/values of an object
                        var _node$name$children = node.name.children, key = _node$name$children[0], val = _node$name$children[1];
                        var k = this._tmpid();
                        var v = this._tmpid();
                        frame.set(key.value, k);
                        frame.set(val.value, v);
                        this._emitLine(i + " = -1;");
                        this._emitLine("var " + len + " = runtime.keys(" + arr + ").length;");
                        this._emitLine("for(var " + k + " in " + arr + ") {");
                        this._emitLine(i + "++;");
                        this._emitLine("var " + v + " = " + arr + "[" + k + "];");
                        this._emitLine('frame.set("' + key.value + '", ' + k + ");");
                        this._emitLine('frame.set("' + val.value + '", ' + v + ");");
                        this._emitLoopBindings(node, arr, i, len);
                        this._withScopedSyntax(function() {
                            _this10.compile(node.body, frame);
                        });
                        this._emitLine("}");
                        this._emitLine("}");
                    } else {
                        // Generate a typical array iteration
                        var _v = this._tmpid();
                        frame.set(node.name.value, _v);
                        this._emitLine("var " + len + " = " + arr + ".length;");
                        this._emitLine("for(var " + i + "=0; " + i + " < " + arr + ".length; " + i + "++) {");
                        this._emitLine("var " + _v + " = " + arr + "[" + i + "];");
                        this._emitLine('frame.set("' + node.name.value + '", ' + _v + ");");
                        this._emitLoopBindings(node, arr, i, len);
                        this._withScopedSyntax(function() {
                            _this10.compile(node.body, frame);
                        });
                        this._emitLine("}");
                    }
                    this._emitLine("}");
                    if (node.else_) {
                        this._emitLine("if (!" + len + ") {");
                        this.compile(node.else_, frame);
                        this._emitLine("}");
                    }
                    this._emitLine("frame = frame.pop();");
                };
                _proto._compileAsyncLoop = function _compileAsyncLoop(node, frame, parallel) {
                    var _this11 = this;
                    // This shares some code with the For tag, but not enough to
                    // worry about. This iterates across an object asynchronously,
                    // but not in parallel.
                    var i = this._tmpid();
                    var len = this._tmpid();
                    var arr = this._tmpid();
                    var asyncMethod = parallel ? "asyncAll" : "asyncEach";
                    frame = frame.push();
                    this._emitLine("frame = frame.push();");
                    this._emit("var " + arr + " = runtime.fromIterator(");
                    this._compileExpression(node.arr, frame);
                    this._emitLine(");");
                    if (node.name instanceof nodes.Array) {
                        var arrayLen = node.name.children.length;
                        this._emit("runtime." + asyncMethod + "(" + arr + ", " + arrayLen + ", function(");
                        node.name.children.forEach(function(name) {
                            _this11._emit(name.value + ",");
                        });
                        this._emit(i + "," + len + ",next) {");
                        node.name.children.forEach(function(name) {
                            var id = name.value;
                            frame.set(id, id);
                            _this11._emitLine('frame.set("' + id + '", ' + id + ");");
                        });
                    } else {
                        var id = node.name.value;
                        this._emitLine("runtime." + asyncMethod + "(" + arr + ", 1, function(" + id + ", " + i + ", " + len + ",next) {");
                        this._emitLine('frame.set("' + id + '", ' + id + ");");
                        frame.set(id, id);
                    }
                    this._emitLoopBindings(node, arr, i, len);
                    this._withScopedSyntax(function() {
                        var buf;
                        if (parallel) buf = _this11._pushBuffer();
                        _this11.compile(node.body, frame);
                        _this11._emitLine("next(" + i + (buf ? "," + buf : "") + ");");
                        if (parallel) _this11._popBuffer();
                    });
                    var output = this._tmpid();
                    this._emitLine("}, " + this._makeCallback(output));
                    this._addScopeLevel();
                    if (parallel) this._emitLine(this.buffer + " += " + output + ";");
                    if (node.else_) {
                        this._emitLine("if (!" + arr + ".length) {");
                        this.compile(node.else_, frame);
                        this._emitLine("}");
                    }
                    this._emitLine("frame = frame.pop();");
                };
                _proto.compileAsyncEach = function compileAsyncEach(node, frame) {
                    this._compileAsyncLoop(node, frame);
                };
                _proto.compileAsyncAll = function compileAsyncAll(node, frame) {
                    this._compileAsyncLoop(node, frame, true);
                };
                _proto._compileMacro = function _compileMacro(node, frame) {
                    var _this12 = this;
                    var args = [];
                    var kwargs = null;
                    var funcId = "macro_" + this._tmpid();
                    var keepFrame = frame !== undefined;
                    // Type check the definition of the args
                    node.args.children.forEach(function(arg, i) {
                        if (i === node.args.children.length - 1 && arg instanceof nodes.Dict) kwargs = arg;
                        else {
                            _this12.assertType(arg, nodes.Symbol);
                            args.push(arg);
                        }
                    });
                    var realNames = [].concat(args.map(function(n) {
                        return "l_" + n.value;
                    }), [
                        "kwargs"
                    ]);
                    // Quoted argument names
                    var argNames = args.map(function(n) {
                        return '"' + n.value + '"';
                    });
                    var kwargNames = (kwargs && kwargs.children || []).map(function(n) {
                        return '"' + n.key.value + '"';
                    });
                    // We pass a function to makeMacro which destructures the
                    // arguments so support setting positional args with keywords
                    // args and passing keyword args as positional args
                    // (essentially default values). See runtime.js.
                    var currFrame;
                    if (keepFrame) currFrame = frame.push(true);
                    else currFrame = new Frame();
                    this._emitLines("var " + funcId + " = runtime.makeMacro(", "[" + argNames.join(", ") + "], ", "[" + kwargNames.join(", ") + "], ", "function (" + realNames.join(", ") + ") {", "var callerFrame = frame;", "frame = " + (keepFrame ? "frame.push(true);" : "new runtime.Frame();"), "kwargs = kwargs || {};", 'if (Object.prototype.hasOwnProperty.call(kwargs, "caller")) {', 'frame.set("caller", kwargs.caller); }');
                    // Expose the arguments to the template. Don't need to use
                    // random names because the function
                    // will create a new run-time scope for us
                    args.forEach(function(arg) {
                        _this12._emitLine('frame.set("' + arg.value + '", l_' + arg.value + ");");
                        currFrame.set(arg.value, "l_" + arg.value);
                    });
                    // Expose the keyword arguments
                    if (kwargs) kwargs.children.forEach(function(pair) {
                        var name = pair.key.value;
                        _this12._emit('frame.set("' + name + '", ');
                        _this12._emit('Object.prototype.hasOwnProperty.call(kwargs, "' + name + '")');
                        _this12._emit(' ? kwargs["' + name + '"] : ');
                        _this12._compileExpression(pair.value, currFrame);
                        _this12._emit(");");
                    });
                    var bufferId = this._pushBuffer();
                    this._withScopedSyntax(function() {
                        _this12.compile(node.body, currFrame);
                    });
                    this._emitLine("frame = " + (keepFrame ? "frame.pop();" : "callerFrame;"));
                    this._emitLine("return new runtime.SafeString(" + bufferId + ");");
                    this._emitLine("});");
                    this._popBuffer();
                    return funcId;
                };
                _proto.compileMacro = function compileMacro(node, frame) {
                    var funcId = this._compileMacro(node);
                    // Expose the macro to the templates
                    var name = node.name.value;
                    frame.set(name, funcId);
                    if (frame.parent) this._emitLine('frame.set("' + name + '", ' + funcId + ");");
                    else {
                        if (node.name.value.charAt(0) !== "_") this._emitLine('context.addExport("' + name + '");');
                        this._emitLine('context.setVariable("' + name + '", ' + funcId + ");");
                    }
                };
                _proto.compileCaller = function compileCaller(node, frame) {
                    // basically an anonymous "macro expression"
                    this._emit("(function (){");
                    var funcId = this._compileMacro(node, frame);
                    this._emit("return " + funcId + ";})()");
                };
                _proto._compileGetTemplate = function _compileGetTemplate(node, frame, eagerCompile, ignoreMissing) {
                    var parentTemplateId = this._tmpid();
                    var parentName = this._templateName();
                    var cb = this._makeCallback(parentTemplateId);
                    var eagerCompileArg = eagerCompile ? "true" : "false";
                    var ignoreMissingArg = ignoreMissing ? "true" : "false";
                    this._emit("env.getTemplate(");
                    this._compileExpression(node.template, frame);
                    this._emitLine(", " + eagerCompileArg + ", " + parentName + ", " + ignoreMissingArg + ", " + cb);
                    return parentTemplateId;
                };
                _proto.compileImport = function compileImport(node, frame) {
                    var target = node.target.value;
                    var id = this._compileGetTemplate(node, frame, false, false);
                    this._addScopeLevel();
                    this._emitLine(id + ".getExported(" + (node.withContext ? "context.getVariables(), frame, " : "") + this._makeCallback(id));
                    this._addScopeLevel();
                    frame.set(target, id);
                    if (frame.parent) this._emitLine('frame.set("' + target + '", ' + id + ");");
                    else this._emitLine('context.setVariable("' + target + '", ' + id + ");");
                };
                _proto.compileFromImport = function compileFromImport(node, frame) {
                    var _this13 = this;
                    var importedId = this._compileGetTemplate(node, frame, false, false);
                    this._addScopeLevel();
                    this._emitLine(importedId + ".getExported(" + (node.withContext ? "context.getVariables(), frame, " : "") + this._makeCallback(importedId));
                    this._addScopeLevel();
                    node.names.children.forEach(function(nameNode) {
                        var name;
                        var alias;
                        var id = _this13._tmpid();
                        if (nameNode instanceof nodes.Pair) {
                            name = nameNode.key.value;
                            alias = nameNode.value.value;
                        } else {
                            name = nameNode.value;
                            alias = name;
                        }
                        _this13._emitLine("if(Object.prototype.hasOwnProperty.call(" + importedId + ', "' + name + '")) {');
                        _this13._emitLine("var " + id + " = " + importedId + "." + name + ";");
                        _this13._emitLine("} else {");
                        _this13._emitLine("cb(new Error(\"cannot import '" + name + "'\")); return;");
                        _this13._emitLine("}");
                        frame.set(alias, id);
                        if (frame.parent) _this13._emitLine('frame.set("' + alias + '", ' + id + ");");
                        else _this13._emitLine('context.setVariable("' + alias + '", ' + id + ");");
                    });
                };
                _proto.compileBlock = function compileBlock(node) {
                    var id = this._tmpid();
                    // If we are executing outside a block (creating a top-level
                    // block), we really don't want to execute its code because it
                    // will execute twice: once when the child template runs and
                    // again when the parent template runs. Note that blocks
                    // within blocks will *always* execute immediately *and*
                    // wherever else they are invoked (like used in a parent
                    // template). This may have behavioral differences from jinja
                    // because blocks can have side effects, but it seems like a
                    // waste of performance to always execute huge top-level
                    // blocks twice
                    if (!this.inBlock) this._emit('(parentTemplate ? function(e, c, f, r, cb) { cb(""); } : ');
                    this._emit('context.getBlock("' + node.name.value + '")');
                    if (!this.inBlock) this._emit(")");
                    this._emitLine("(env, context, frame, runtime, " + this._makeCallback(id));
                    this._emitLine(this.buffer + " += " + id + ";");
                    this._addScopeLevel();
                };
                _proto.compileSuper = function compileSuper(node, frame) {
                    var name = node.blockName.value;
                    var id = node.symbol.value;
                    var cb = this._makeCallback(id);
                    this._emitLine('context.getSuper(env, "' + name + '", b_' + name + ", frame, runtime, " + cb);
                    this._emitLine(id + " = runtime.markSafe(" + id + ");");
                    this._addScopeLevel();
                    frame.set(id, id);
                };
                _proto.compileExtends = function compileExtends(node, frame) {
                    var k = this._tmpid();
                    var parentTemplateId = this._compileGetTemplate(node, frame, true, false);
                    // extends is a dynamic tag and can occur within a block like
                    // `if`, so if this happens we need to capture the parent
                    // template in the top-level scope
                    this._emitLine("parentTemplate = " + parentTemplateId);
                    this._emitLine("for(var " + k + " in parentTemplate.blocks) {");
                    this._emitLine("context.addBlock(" + k + ", parentTemplate.blocks[" + k + "]);");
                    this._emitLine("}");
                    this._addScopeLevel();
                };
                _proto.compileInclude = function compileInclude(node, frame) {
                    this._emitLine("var tasks = [];");
                    this._emitLine("tasks.push(");
                    this._emitLine("function(callback) {");
                    var id = this._compileGetTemplate(node, frame, false, node.ignoreMissing);
                    this._emitLine("callback(null," + id + ");});");
                    this._emitLine("});");
                    var id2 = this._tmpid();
                    this._emitLine("tasks.push(");
                    this._emitLine("function(template, callback){");
                    this._emitLine("template.render(context.getVariables(), frame, " + this._makeCallback(id2));
                    this._emitLine("callback(null," + id2 + ");});");
                    this._emitLine("});");
                    this._emitLine("tasks.push(");
                    this._emitLine("function(result, callback){");
                    this._emitLine(this.buffer + " += result;");
                    this._emitLine("callback(null);");
                    this._emitLine("});");
                    this._emitLine("env.waterfall(tasks, function(){");
                    this._addScopeLevel();
                };
                _proto.compileTemplateData = function compileTemplateData(node, frame) {
                    this.compileLiteral(node, frame);
                };
                _proto.compileCapture = function compileCapture(node, frame) {
                    var _this14 = this;
                    // we need to temporarily override the current buffer id as 'output'
                    // so the set block writes to the capture output instead of the buffer
                    var buffer = this.buffer;
                    this.buffer = "output";
                    this._emitLine("(function() {");
                    this._emitLine('var output = "";');
                    this._withScopedSyntax(function() {
                        _this14.compile(node.body, frame);
                    });
                    this._emitLine("return output;");
                    this._emitLine("})()");
                    // and of course, revert back to the old buffer id
                    this.buffer = buffer;
                };
                _proto.compileOutput = function compileOutput(node, frame) {
                    var _this15 = this;
                    var children = node.children;
                    children.forEach(function(child) {
                        // TemplateData is a special case because it is never
                        // autoescaped, so simply output it for optimization
                        if (child instanceof nodes.TemplateData) {
                            if (child.value) {
                                _this15._emit(_this15.buffer + " += ");
                                _this15.compileLiteral(child, frame);
                                _this15._emitLine(";");
                            }
                        } else {
                            _this15._emit(_this15.buffer + " += runtime.suppressValue(");
                            if (_this15.throwOnUndefined) _this15._emit("runtime.ensureDefined(");
                            _this15.compile(child, frame);
                            if (_this15.throwOnUndefined) _this15._emit("," + node.lineno + "," + node.colno + ")");
                            _this15._emit(", env.opts.autoescape);\n");
                        }
                    });
                };
                _proto.compileRoot = function compileRoot(node, frame) {
                    var _this16 = this;
                    if (frame) this.fail("compileRoot: root node can't have frame");
                    frame = new Frame();
                    this._emitFuncBegin(node, "root");
                    this._emitLine("var parentTemplate = null;");
                    this._compileChildren(node, frame);
                    this._emitLine("if(parentTemplate) {");
                    this._emitLine("parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);");
                    this._emitLine("} else {");
                    this._emitLine("cb(null, " + this.buffer + ");");
                    this._emitLine("}");
                    this._emitFuncEnd(true);
                    this.inBlock = true;
                    var blockNames = [];
                    var blocks = node.findAll(nodes.Block);
                    blocks.forEach(function(block, i) {
                        var name = block.name.value;
                        if (blockNames.indexOf(name) !== -1) throw new Error('Block "' + name + '" defined more than once.');
                        blockNames.push(name);
                        _this16._emitFuncBegin(block, "b_" + name);
                        var tmpFrame = new Frame();
                        _this16._emitLine("var frame = frame.push(true);");
                        _this16.compile(block.body, tmpFrame);
                        _this16._emitFuncEnd();
                    });
                    this._emitLine("return {");
                    blocks.forEach(function(block, i) {
                        var blockName = "b_" + block.name.value;
                        _this16._emitLine(blockName + ": " + blockName + ",");
                    });
                    this._emitLine("root: root\n};");
                };
                _proto.compile = function compile(node, frame) {
                    var _compile = this["compile" + node.typename];
                    if (_compile) _compile.call(this, node, frame);
                    else this.fail("compile: Cannot compile node: " + node.typename, node.lineno, node.colno);
                };
                _proto.getCode = function getCode() {
                    return this.codebuf.join("");
                };
                return Compiler;
            }(Obj);
            module1.exports = {
                compile: function compile(src, asyncFilters, extensions, name, opts) {
                    if (opts === void 0) opts = {};
                    var c = new Compiler(name, opts.throwOnUndefined);
                    // Run the extension preprocessors against the source.
                    var preprocessors = (extensions || []).map(function(ext) {
                        return ext.preprocess;
                    }).filter(function(f) {
                        return !!f;
                    });
                    var processedSrc = preprocessors.reduce(function(s, processor) {
                        return processor(s);
                    }, src);
                    c.compile(transformer.transform(parser.parse(processedSrc, extensions, opts), asyncFilters, name));
                    return c.getCode();
                },
                Compiler: Compiler
            };
        /***/ },
        /* 6 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var path = __webpack_require__(4);
            var _require = __webpack_require__(1), EmitterObj = _require.EmitterObj;
            module1.exports = /*#__PURE__*/ function(_EmitterObj) {
                _inheritsLoose(Loader, _EmitterObj);
                function Loader() {
                    return _EmitterObj.apply(this, arguments) || this;
                }
                var _proto = Loader.prototype;
                _proto.resolve = function resolve(from, to) {
                    return path.resolve(path.dirname(from), to);
                };
                _proto.isRelative = function isRelative(filename) {
                    return filename.indexOf("./") === 0 || filename.indexOf("../") === 0;
                };
                return Loader;
            }(EmitterObj);
        /***/ },
        /* 7 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var asap = __webpack_require__(12);
            var _waterfall = __webpack_require__(15);
            var lib = __webpack_require__(0);
            var compiler = __webpack_require__(5);
            var filters = __webpack_require__(18);
            var _require = __webpack_require__(10), FileSystemLoader = _require.FileSystemLoader, WebLoader = _require.WebLoader, PrecompiledLoader = _require.PrecompiledLoader;
            var tests = __webpack_require__(20);
            var globals = __webpack_require__(21);
            var _require2 = __webpack_require__(1), Obj = _require2.Obj, EmitterObj = _require2.EmitterObj;
            var globalRuntime = __webpack_require__(2);
            var handleError = globalRuntime.handleError, Frame = globalRuntime.Frame;
            var expressApp = __webpack_require__(22);
            // If the user is using the async API, *always* call it
            // asynchronously even if the template was synchronous.
            function callbackAsap(cb, err, res) {
                asap(function() {
                    cb(err, res);
                });
            }
            /**
 * A no-op template, for use with {% include ignore missing %}
 */ var noopTmplSrc = {
                type: "code",
                obj: {
                    root: function root(env, context, frame, runtime, cb) {
                        try {
                            cb(null, "");
                        } catch (e) {
                            cb(handleError(e, null, null));
                        }
                    }
                }
            };
            var Environment = /*#__PURE__*/ function(_EmitterObj) {
                _inheritsLoose(Environment, _EmitterObj);
                function Environment() {
                    return _EmitterObj.apply(this, arguments) || this;
                }
                var _proto = Environment.prototype;
                _proto.init = function init(loaders, opts) {
                    var _this = this;
                    // The dev flag determines the trace that'll be shown on errors.
                    // If set to true, returns the full trace from the error point,
                    // otherwise will return trace starting from Template.render
                    // (the full trace from within nunjucks may confuse developers using
                    //  the library)
                    // defaults to false
                    opts = this.opts = opts || {};
                    this.opts.dev = !!opts.dev;
                    // The autoescape flag sets global autoescaping. If true,
                    // every string variable will be escaped by default.
                    // If false, strings can be manually escaped using the `escape` filter.
                    // defaults to true
                    this.opts.autoescape = opts.autoescape != null ? opts.autoescape : true;
                    // If true, this will make the system throw errors if trying
                    // to output a null or undefined value
                    this.opts.throwOnUndefined = !!opts.throwOnUndefined;
                    this.opts.trimBlocks = !!opts.trimBlocks;
                    this.opts.lstripBlocks = !!opts.lstripBlocks;
                    this.loaders = [];
                    if (!loaders) {
                        // The filesystem loader is only available server-side
                        if (FileSystemLoader) this.loaders = [
                            new FileSystemLoader("views")
                        ];
                        else if (WebLoader) this.loaders = [
                            new WebLoader("/views")
                        ];
                    } else this.loaders = lib.isArray(loaders) ? loaders : [
                        loaders
                    ];
                    // It's easy to use precompiled templates: just include them
                    // before you configure nunjucks and this will automatically
                    // pick it up and use it
                    if (typeof window !== "undefined" && window.nunjucksPrecompiled) this.loaders.unshift(new PrecompiledLoader(window.nunjucksPrecompiled));
                    this._initLoaders();
                    this.globals = globals();
                    this.filters = {};
                    this.tests = {};
                    this.asyncFilters = [];
                    this.extensions = {};
                    this.extensionsList = [];
                    lib._entries(filters).forEach(function(_ref) {
                        var name = _ref[0], filter = _ref[1];
                        return _this.addFilter(name, filter);
                    });
                    lib._entries(tests).forEach(function(_ref2) {
                        var name = _ref2[0], test = _ref2[1];
                        return _this.addTest(name, test);
                    });
                };
                _proto._initLoaders = function _initLoaders() {
                    var _this2 = this;
                    this.loaders.forEach(function(loader) {
                        // Caching and cache busting
                        loader.cache = {};
                        if (typeof loader.on === "function") {
                            loader.on("update", function(name, fullname) {
                                loader.cache[name] = null;
                                _this2.emit("update", name, fullname, loader);
                            });
                            loader.on("load", function(name, source) {
                                _this2.emit("load", name, source, loader);
                            });
                        }
                    });
                };
                _proto.invalidateCache = function invalidateCache() {
                    this.loaders.forEach(function(loader) {
                        loader.cache = {};
                    });
                };
                _proto.addExtension = function addExtension(name, extension) {
                    extension.__name = name;
                    this.extensions[name] = extension;
                    this.extensionsList.push(extension);
                    return this;
                };
                _proto.removeExtension = function removeExtension(name) {
                    var extension = this.getExtension(name);
                    if (!extension) return;
                    this.extensionsList = lib.without(this.extensionsList, extension);
                    delete this.extensions[name];
                };
                _proto.getExtension = function getExtension(name) {
                    return this.extensions[name];
                };
                _proto.hasExtension = function hasExtension(name) {
                    return !!this.extensions[name];
                };
                _proto.addGlobal = function addGlobal(name, value) {
                    this.globals[name] = value;
                    return this;
                };
                _proto.getGlobal = function getGlobal(name) {
                    if (typeof this.globals[name] === "undefined") throw new Error("global not found: " + name);
                    return this.globals[name];
                };
                _proto.addFilter = function addFilter(name, func, async) {
                    var wrapped = func;
                    if (async) this.asyncFilters.push(name);
                    this.filters[name] = wrapped;
                    return this;
                };
                _proto.getFilter = function getFilter(name) {
                    if (!this.filters[name]) throw new Error("filter not found: " + name);
                    return this.filters[name];
                };
                _proto.addTest = function addTest(name, func) {
                    this.tests[name] = func;
                    return this;
                };
                _proto.getTest = function getTest(name) {
                    if (!this.tests[name]) throw new Error("test not found: " + name);
                    return this.tests[name];
                };
                _proto.resolveTemplate = function resolveTemplate(loader, parentName, filename) {
                    var isRelative = loader.isRelative && parentName ? loader.isRelative(filename) : false;
                    return isRelative && loader.resolve ? loader.resolve(parentName, filename) : filename;
                };
                _proto.getTemplate = function getTemplate(name, eagerCompile, parentName, ignoreMissing, cb) {
                    var _this3 = this;
                    var that = this;
                    var tmpl = null;
                    if (name && name.raw) // this fixes autoescape for templates referenced in symbols
                    name = name.raw;
                    if (lib.isFunction(parentName)) {
                        cb = parentName;
                        parentName = null;
                        eagerCompile = eagerCompile || false;
                    }
                    if (lib.isFunction(eagerCompile)) {
                        cb = eagerCompile;
                        eagerCompile = false;
                    }
                    if (name instanceof Template) tmpl = name;
                    else if (typeof name !== "string") throw new Error("template names must be a string: " + name);
                    else for(var i = 0; i < this.loaders.length; i++){
                        var loader = this.loaders[i];
                        tmpl = loader.cache[this.resolveTemplate(loader, parentName, name)];
                        if (tmpl) break;
                    }
                    if (tmpl) {
                        if (eagerCompile) tmpl.compile();
                        if (cb) {
                            cb(null, tmpl);
                            return undefined;
                        } else return tmpl;
                    }
                    var syncResult;
                    var createTemplate = function createTemplate(err, info) {
                        if (!info && !err && !ignoreMissing) err = new Error("template not found: " + name);
                        if (err) {
                            if (cb) {
                                cb(err);
                                return;
                            } else throw err;
                        }
                        var newTmpl;
                        if (!info) newTmpl = new Template(noopTmplSrc, _this3, "", eagerCompile);
                        else {
                            newTmpl = new Template(info.src, _this3, info.path, eagerCompile);
                            if (!info.noCache) info.loader.cache[name] = newTmpl;
                        }
                        if (cb) cb(null, newTmpl);
                        else syncResult = newTmpl;
                    };
                    lib.asyncIter(this.loaders, function(loader, i, next, done) {
                        function handle(err, src) {
                            if (err) done(err);
                            else if (src) {
                                src.loader = loader;
                                done(null, src);
                            } else next();
                        }
                        // Resolve name relative to parentName
                        name = that.resolveTemplate(loader, parentName, name);
                        if (loader.async) loader.getSource(name, handle);
                        else handle(null, loader.getSource(name));
                    }, createTemplate);
                    return syncResult;
                };
                _proto.express = function express(app) {
                    return expressApp(this, app);
                };
                _proto.render = function render(name, ctx, cb) {
                    if (lib.isFunction(ctx)) {
                        cb = ctx;
                        ctx = null;
                    }
                    // We support a synchronous API to make it easier to migrate
                    // existing code to async. This works because if you don't do
                    // anything async work, the whole thing is actually run
                    // synchronously.
                    var syncResult = null;
                    this.getTemplate(name, function(err, tmpl) {
                        if (err && cb) callbackAsap(cb, err);
                        else if (err) throw err;
                        else syncResult = tmpl.render(ctx, cb);
                    });
                    return syncResult;
                };
                _proto.renderString = function renderString(src, ctx, opts, cb) {
                    if (lib.isFunction(opts)) {
                        cb = opts;
                        opts = {};
                    }
                    opts = opts || {};
                    var tmpl = new Template(src, this, opts.path);
                    return tmpl.render(ctx, cb);
                };
                _proto.waterfall = function waterfall(tasks, callback, forceAsync) {
                    return _waterfall(tasks, callback, forceAsync);
                };
                return Environment;
            }(EmitterObj);
            var Context = /*#__PURE__*/ function(_Obj) {
                _inheritsLoose(Context, _Obj);
                function Context() {
                    return _Obj.apply(this, arguments) || this;
                }
                var _proto2 = Context.prototype;
                _proto2.init = function init(ctx, blocks, env) {
                    var _this4 = this;
                    // Has to be tied to an environment so we can tap into its globals.
                    this.env = env || new Environment();
                    // Make a duplicate of ctx
                    this.ctx = lib.extend({}, ctx);
                    this.blocks = {};
                    this.exported = [];
                    lib.keys(blocks).forEach(function(name) {
                        _this4.addBlock(name, blocks[name]);
                    });
                };
                _proto2.lookup = function lookup(name) {
                    // This is one of the most called functions, so optimize for
                    // the typical case where the name isn't in the globals
                    if (name in this.env.globals && !(name in this.ctx)) return this.env.globals[name];
                    else return this.ctx[name];
                };
                _proto2.setVariable = function setVariable(name, val) {
                    this.ctx[name] = val;
                };
                _proto2.getVariables = function getVariables() {
                    return this.ctx;
                };
                _proto2.addBlock = function addBlock(name, block) {
                    this.blocks[name] = this.blocks[name] || [];
                    this.blocks[name].push(block);
                    return this;
                };
                _proto2.getBlock = function getBlock(name) {
                    if (!this.blocks[name]) throw new Error('unknown block "' + name + '"');
                    return this.blocks[name][0];
                };
                _proto2.getSuper = function getSuper(env, name, block, frame, runtime, cb) {
                    var idx = lib.indexOf(this.blocks[name] || [], block);
                    var blk = this.blocks[name][idx + 1];
                    var context = this;
                    if (idx === -1 || !blk) throw new Error('no super block available for "' + name + '"');
                    blk(env, context, frame, runtime, cb);
                };
                _proto2.addExport = function addExport(name) {
                    this.exported.push(name);
                };
                _proto2.getExported = function getExported() {
                    var _this5 = this;
                    var exported = {};
                    this.exported.forEach(function(name) {
                        exported[name] = _this5.ctx[name];
                    });
                    return exported;
                };
                return Context;
            }(Obj);
            var Template = /*#__PURE__*/ function(_Obj2) {
                _inheritsLoose(Template, _Obj2);
                function Template() {
                    return _Obj2.apply(this, arguments) || this;
                }
                var _proto3 = Template.prototype;
                _proto3.init = function init(src, env, path, eagerCompile) {
                    this.env = env || new Environment();
                    if (lib.isObject(src)) switch(src.type){
                        case "code":
                            this.tmplProps = src.obj;
                            break;
                        case "string":
                            this.tmplStr = src.obj;
                            break;
                        default:
                            throw new Error("Unexpected template object type " + src.type + "; expected 'code', or 'string'");
                    }
                    else if (lib.isString(src)) this.tmplStr = src;
                    else throw new Error("src must be a string or an object describing the source");
                    this.path = path;
                    if (eagerCompile) try {
                        this._compile();
                    } catch (err) {
                        throw lib._prettifyError(this.path, this.env.opts.dev, err);
                    }
                    else this.compiled = false;
                };
                _proto3.render = function render(ctx, parentFrame, cb) {
                    var _this6 = this;
                    if (typeof ctx === "function") {
                        cb = ctx;
                        ctx = {};
                    } else if (typeof parentFrame === "function") {
                        cb = parentFrame;
                        parentFrame = null;
                    }
                    // If there is a parent frame, we are being called from internal
                    // code of another template, and the internal system
                    // depends on the sync/async nature of the parent template
                    // to be inherited, so force an async callback
                    var forceAsync = !parentFrame;
                    // Catch compile errors for async rendering
                    try {
                        this.compile();
                    } catch (e) {
                        var err = lib._prettifyError(this.path, this.env.opts.dev, e);
                        if (cb) return callbackAsap(cb, err);
                        else throw err;
                    }
                    var context = new Context(ctx || {}, this.blocks, this.env);
                    var frame = parentFrame ? parentFrame.push(true) : new Frame();
                    frame.topLevel = true;
                    var syncResult = null;
                    var didError = false;
                    this.rootRenderFunc(this.env, context, frame, globalRuntime, function(err, res) {
                        // TODO: this is actually a bug in the compiled template (because waterfall
                        // tasks are both not passing errors up the chain of callbacks AND are not
                        // causing a return from the top-most render function). But fixing that
                        // will require a more substantial change to the compiler.
                        if (didError && cb && typeof res !== "undefined") // prevent multiple calls to cb
                        return;
                        if (err) {
                            err = lib._prettifyError(_this6.path, _this6.env.opts.dev, err);
                            didError = true;
                        }
                        if (cb) {
                            if (forceAsync) callbackAsap(cb, err, res);
                            else cb(err, res);
                        } else {
                            if (err) throw err;
                            syncResult = res;
                        }
                    });
                    return syncResult;
                };
                _proto3.getExported = function getExported(ctx, parentFrame, cb) {
                    // eslint-disable-line consistent-return
                    if (typeof ctx === "function") {
                        cb = ctx;
                        ctx = {};
                    }
                    if (typeof parentFrame === "function") {
                        cb = parentFrame;
                        parentFrame = null;
                    }
                    // Catch compile errors for async rendering
                    try {
                        this.compile();
                    } catch (e) {
                        if (cb) return cb(e);
                        else throw e;
                    }
                    var frame = parentFrame ? parentFrame.push() : new Frame();
                    frame.topLevel = true;
                    // Run the rootRenderFunc to populate the context with exported vars
                    var context = new Context(ctx || {}, this.blocks, this.env);
                    this.rootRenderFunc(this.env, context, frame, globalRuntime, function(err) {
                        if (err) cb(err, null);
                        else cb(null, context.getExported());
                    });
                };
                _proto3.compile = function compile() {
                    if (!this.compiled) this._compile();
                };
                _proto3._compile = function _compile() {
                    var props;
                    if (this.tmplProps) props = this.tmplProps;
                    else {
                        var source = compiler.compile(this.tmplStr, this.env.asyncFilters, this.env.extensionsList, this.path, this.env.opts);
                        var func = new Function(source); // eslint-disable-line no-new-func
                        props = func();
                    }
                    this.blocks = this._getBlocks(props);
                    this.rootRenderFunc = props.root;
                    this.compiled = true;
                };
                _proto3._getBlocks = function _getBlocks(props) {
                    var blocks = {};
                    lib.keys(props).forEach(function(k) {
                        if (k.slice(0, 2) === "b_") blocks[k.slice(2)] = props[k];
                    });
                    return blocks;
                };
                return Template;
            }(Obj);
            module1.exports = {
                Environment: Environment,
                Template: Template
            };
        /***/ },
        /* 8 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var lexer = __webpack_require__(9);
            var nodes = __webpack_require__(3);
            var Obj = __webpack_require__(1).Obj;
            var lib = __webpack_require__(0);
            var Parser = /*#__PURE__*/ function(_Obj) {
                _inheritsLoose(Parser, _Obj);
                function Parser() {
                    return _Obj.apply(this, arguments) || this;
                }
                var _proto = Parser.prototype;
                _proto.init = function init(tokens) {
                    this.tokens = tokens;
                    this.peeked = null;
                    this.breakOnBlocks = null;
                    this.dropLeadingWhitespace = false;
                    this.extensions = [];
                };
                _proto.nextToken = function nextToken(withWhitespace) {
                    var tok;
                    if (this.peeked) {
                        if (!withWhitespace && this.peeked.type === lexer.TOKEN_WHITESPACE) this.peeked = null;
                        else {
                            tok = this.peeked;
                            this.peeked = null;
                            return tok;
                        }
                    }
                    tok = this.tokens.nextToken();
                    if (!withWhitespace) while(tok && tok.type === lexer.TOKEN_WHITESPACE)tok = this.tokens.nextToken();
                    return tok;
                };
                _proto.peekToken = function peekToken() {
                    this.peeked = this.peeked || this.nextToken();
                    return this.peeked;
                };
                _proto.pushToken = function pushToken(tok) {
                    if (this.peeked) throw new Error("pushToken: can only push one token on between reads");
                    this.peeked = tok;
                };
                _proto.error = function error(msg, lineno, colno) {
                    if (lineno === undefined || colno === undefined) {
                        var tok = this.peekToken() || {};
                        lineno = tok.lineno;
                        colno = tok.colno;
                    }
                    if (lineno !== undefined) lineno += 1;
                    if (colno !== undefined) colno += 1;
                    return new lib.TemplateError(msg, lineno, colno);
                };
                _proto.fail = function fail(msg, lineno, colno) {
                    throw this.error(msg, lineno, colno);
                };
                _proto.skip = function skip(type) {
                    var tok = this.nextToken();
                    if (!tok || tok.type !== type) {
                        this.pushToken(tok);
                        return false;
                    }
                    return true;
                };
                _proto.expect = function expect(type) {
                    var tok = this.nextToken();
                    if (tok.type !== type) this.fail("expected " + type + ", got " + tok.type, tok.lineno, tok.colno);
                    return tok;
                };
                _proto.skipValue = function skipValue(type, val) {
                    var tok = this.nextToken();
                    if (!tok || tok.type !== type || tok.value !== val) {
                        this.pushToken(tok);
                        return false;
                    }
                    return true;
                };
                _proto.skipSymbol = function skipSymbol(val) {
                    return this.skipValue(lexer.TOKEN_SYMBOL, val);
                };
                _proto.advanceAfterBlockEnd = function advanceAfterBlockEnd(name) {
                    var tok;
                    if (!name) {
                        tok = this.peekToken();
                        if (!tok) this.fail("unexpected end of file");
                        if (tok.type !== lexer.TOKEN_SYMBOL) this.fail("advanceAfterBlockEnd: expected symbol token or explicit name to be passed");
                        name = this.nextToken().value;
                    }
                    tok = this.nextToken();
                    if (tok && tok.type === lexer.TOKEN_BLOCK_END) {
                        if (tok.value.charAt(0) === "-") this.dropLeadingWhitespace = true;
                    } else this.fail("expected block end in " + name + " statement");
                    return tok;
                };
                _proto.advanceAfterVariableEnd = function advanceAfterVariableEnd() {
                    var tok = this.nextToken();
                    if (tok && tok.type === lexer.TOKEN_VARIABLE_END) this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.VARIABLE_END.length - 1) === "-";
                    else {
                        this.pushToken(tok);
                        this.fail("expected variable end");
                    }
                };
                _proto.parseFor = function parseFor() {
                    var forTok = this.peekToken();
                    var node;
                    var endBlock;
                    if (this.skipSymbol("for")) {
                        node = new nodes.For(forTok.lineno, forTok.colno);
                        endBlock = "endfor";
                    } else if (this.skipSymbol("asyncEach")) {
                        node = new nodes.AsyncEach(forTok.lineno, forTok.colno);
                        endBlock = "endeach";
                    } else if (this.skipSymbol("asyncAll")) {
                        node = new nodes.AsyncAll(forTok.lineno, forTok.colno);
                        endBlock = "endall";
                    } else this.fail("parseFor: expected for{Async}", forTok.lineno, forTok.colno);
                    node.name = this.parsePrimary();
                    if (!(node.name instanceof nodes.Symbol)) this.fail("parseFor: variable name expected for loop");
                    var type = this.peekToken().type;
                    if (type === lexer.TOKEN_COMMA) {
                        // key/value iteration
                        var key = node.name;
                        node.name = new nodes.Array(key.lineno, key.colno);
                        node.name.addChild(key);
                        while(this.skip(lexer.TOKEN_COMMA)){
                            var prim = this.parsePrimary();
                            node.name.addChild(prim);
                        }
                    }
                    if (!this.skipSymbol("in")) this.fail('parseFor: expected "in" keyword for loop', forTok.lineno, forTok.colno);
                    node.arr = this.parseExpression();
                    this.advanceAfterBlockEnd(forTok.value);
                    node.body = this.parseUntilBlocks(endBlock, "else");
                    if (this.skipSymbol("else")) {
                        this.advanceAfterBlockEnd("else");
                        node.else_ = this.parseUntilBlocks(endBlock);
                    }
                    this.advanceAfterBlockEnd();
                    return node;
                };
                _proto.parseMacro = function parseMacro() {
                    var macroTok = this.peekToken();
                    if (!this.skipSymbol("macro")) this.fail("expected macro");
                    var name = this.parsePrimary(true);
                    var args = this.parseSignature();
                    var node = new nodes.Macro(macroTok.lineno, macroTok.colno, name, args);
                    this.advanceAfterBlockEnd(macroTok.value);
                    node.body = this.parseUntilBlocks("endmacro");
                    this.advanceAfterBlockEnd();
                    return node;
                };
                _proto.parseCall = function parseCall() {
                    // a call block is parsed as a normal FunCall, but with an added
                    // 'caller' kwarg which is a Caller node.
                    var callTok = this.peekToken();
                    if (!this.skipSymbol("call")) this.fail("expected call");
                    var callerArgs = this.parseSignature(true) || new nodes.NodeList();
                    var macroCall = this.parsePrimary();
                    this.advanceAfterBlockEnd(callTok.value);
                    var body = this.parseUntilBlocks("endcall");
                    this.advanceAfterBlockEnd();
                    var callerName = new nodes.Symbol(callTok.lineno, callTok.colno, "caller");
                    var callerNode = new nodes.Caller(callTok.lineno, callTok.colno, callerName, callerArgs, body);
                    // add the additional caller kwarg, adding kwargs if necessary
                    var args = macroCall.args.children;
                    if (!(args[args.length - 1] instanceof nodes.KeywordArgs)) args.push(new nodes.KeywordArgs());
                    var kwargs = args[args.length - 1];
                    kwargs.addChild(new nodes.Pair(callTok.lineno, callTok.colno, callerName, callerNode));
                    return new nodes.Output(callTok.lineno, callTok.colno, [
                        macroCall
                    ]);
                };
                _proto.parseWithContext = function parseWithContext() {
                    var tok = this.peekToken();
                    var withContext = null;
                    if (this.skipSymbol("with")) withContext = true;
                    else if (this.skipSymbol("without")) withContext = false;
                    if (withContext !== null) {
                        if (!this.skipSymbol("context")) this.fail("parseFrom: expected context after with/without", tok.lineno, tok.colno);
                    }
                    return withContext;
                };
                _proto.parseImport = function parseImport() {
                    var importTok = this.peekToken();
                    if (!this.skipSymbol("import")) this.fail("parseImport: expected import", importTok.lineno, importTok.colno);
                    var template = this.parseExpression();
                    if (!this.skipSymbol("as")) this.fail('parseImport: expected "as" keyword', importTok.lineno, importTok.colno);
                    var target = this.parseExpression();
                    var withContext = this.parseWithContext();
                    var node = new nodes.Import(importTok.lineno, importTok.colno, template, target, withContext);
                    this.advanceAfterBlockEnd(importTok.value);
                    return node;
                };
                _proto.parseFrom = function parseFrom() {
                    var fromTok = this.peekToken();
                    if (!this.skipSymbol("from")) this.fail("parseFrom: expected from");
                    var template = this.parseExpression();
                    if (!this.skipSymbol("import")) this.fail("parseFrom: expected import", fromTok.lineno, fromTok.colno);
                    var names = new nodes.NodeList();
                    var withContext;
                    while(true){
                        // eslint-disable-line no-constant-condition
                        var nextTok = this.peekToken();
                        if (nextTok.type === lexer.TOKEN_BLOCK_END) {
                            if (!names.children.length) this.fail("parseFrom: Expected at least one import name", fromTok.lineno, fromTok.colno);
                            // Since we are manually advancing past the block end,
                            // need to keep track of whitespace control (normally
                            // this is done in `advanceAfterBlockEnd`
                            if (nextTok.value.charAt(0) === "-") this.dropLeadingWhitespace = true;
                            this.nextToken();
                            break;
                        }
                        if (names.children.length > 0 && !this.skip(lexer.TOKEN_COMMA)) this.fail("parseFrom: expected comma", fromTok.lineno, fromTok.colno);
                        var name = this.parsePrimary();
                        if (name.value.charAt(0) === "_") this.fail("parseFrom: names starting with an underscore cannot be imported", name.lineno, name.colno);
                        if (this.skipSymbol("as")) {
                            var alias = this.parsePrimary();
                            names.addChild(new nodes.Pair(name.lineno, name.colno, name, alias));
                        } else names.addChild(name);
                        withContext = this.parseWithContext();
                    }
                    return new nodes.FromImport(fromTok.lineno, fromTok.colno, template, names, withContext);
                };
                _proto.parseBlock = function parseBlock() {
                    var tag = this.peekToken();
                    if (!this.skipSymbol("block")) this.fail("parseBlock: expected block", tag.lineno, tag.colno);
                    var node = new nodes.Block(tag.lineno, tag.colno);
                    node.name = this.parsePrimary();
                    if (!(node.name instanceof nodes.Symbol)) this.fail("parseBlock: variable name expected", tag.lineno, tag.colno);
                    this.advanceAfterBlockEnd(tag.value);
                    node.body = this.parseUntilBlocks("endblock");
                    this.skipSymbol("endblock");
                    this.skipSymbol(node.name.value);
                    var tok = this.peekToken();
                    if (!tok) this.fail("parseBlock: expected endblock, got end of file");
                    this.advanceAfterBlockEnd(tok.value);
                    return node;
                };
                _proto.parseExtends = function parseExtends() {
                    var tagName = "extends";
                    var tag = this.peekToken();
                    if (!this.skipSymbol(tagName)) this.fail("parseTemplateRef: expected " + tagName);
                    var node = new nodes.Extends(tag.lineno, tag.colno);
                    node.template = this.parseExpression();
                    this.advanceAfterBlockEnd(tag.value);
                    return node;
                };
                _proto.parseInclude = function parseInclude() {
                    var tagName = "include";
                    var tag = this.peekToken();
                    if (!this.skipSymbol(tagName)) this.fail("parseInclude: expected " + tagName);
                    var node = new nodes.Include(tag.lineno, tag.colno);
                    node.template = this.parseExpression();
                    if (this.skipSymbol("ignore") && this.skipSymbol("missing")) node.ignoreMissing = true;
                    this.advanceAfterBlockEnd(tag.value);
                    return node;
                };
                _proto.parseIf = function parseIf() {
                    var tag = this.peekToken();
                    var node;
                    if (this.skipSymbol("if") || this.skipSymbol("elif") || this.skipSymbol("elseif")) node = new nodes.If(tag.lineno, tag.colno);
                    else if (this.skipSymbol("ifAsync")) node = new nodes.IfAsync(tag.lineno, tag.colno);
                    else this.fail("parseIf: expected if, elif, or elseif", tag.lineno, tag.colno);
                    node.cond = this.parseExpression();
                    this.advanceAfterBlockEnd(tag.value);
                    node.body = this.parseUntilBlocks("elif", "elseif", "else", "endif");
                    var tok = this.peekToken();
                    switch(tok && tok.value){
                        case "elseif":
                        case "elif":
                            node.else_ = this.parseIf();
                            break;
                        case "else":
                            this.advanceAfterBlockEnd();
                            node.else_ = this.parseUntilBlocks("endif");
                            this.advanceAfterBlockEnd();
                            break;
                        case "endif":
                            node.else_ = null;
                            this.advanceAfterBlockEnd();
                            break;
                        default:
                            this.fail("parseIf: expected elif, else, or endif, got end of file");
                    }
                    return node;
                };
                _proto.parseSet = function parseSet() {
                    var tag = this.peekToken();
                    if (!this.skipSymbol("set")) this.fail("parseSet: expected set", tag.lineno, tag.colno);
                    var node = new nodes.Set(tag.lineno, tag.colno, []);
                    var target;
                    while(target = this.parsePrimary()){
                        node.targets.push(target);
                        if (!this.skip(lexer.TOKEN_COMMA)) break;
                    }
                    if (!this.skipValue(lexer.TOKEN_OPERATOR, "=")) {
                        if (!this.skip(lexer.TOKEN_BLOCK_END)) this.fail("parseSet: expected = or block end in set tag", tag.lineno, tag.colno);
                        else {
                            node.body = new nodes.Capture(tag.lineno, tag.colno, this.parseUntilBlocks("endset"));
                            node.value = null;
                            this.advanceAfterBlockEnd();
                        }
                    } else {
                        node.value = this.parseExpression();
                        this.advanceAfterBlockEnd(tag.value);
                    }
                    return node;
                };
                _proto.parseSwitch = function parseSwitch() {
                    /*
     * Store the tag names in variables in case someone ever wants to
     * customize this.
     */ var switchStart = "switch";
                    var switchEnd = "endswitch";
                    var caseStart = "case";
                    var caseDefault = "default";
                    // Get the switch tag.
                    var tag = this.peekToken();
                    // fail early if we get some unexpected tag.
                    if (!this.skipSymbol(switchStart) && !this.skipSymbol(caseStart) && !this.skipSymbol(caseDefault)) this.fail('parseSwitch: expected "switch," "case" or "default"', tag.lineno, tag.colno);
                    // parse the switch expression
                    var expr = this.parseExpression();
                    // advance until a start of a case, a default case or an endswitch.
                    this.advanceAfterBlockEnd(switchStart);
                    this.parseUntilBlocks(caseStart, caseDefault, switchEnd);
                    // this is the first case. it could also be an endswitch, we'll check.
                    var tok = this.peekToken();
                    // create new variables for our cases and default case.
                    var cases = [];
                    var defaultCase;
                    // while we're dealing with new cases nodes...
                    do {
                        // skip the start symbol and get the case expression
                        this.skipSymbol(caseStart);
                        var cond = this.parseExpression();
                        this.advanceAfterBlockEnd(switchStart);
                        // get the body of the case node and add it to the array of cases.
                        var body = this.parseUntilBlocks(caseStart, caseDefault, switchEnd);
                        cases.push(new nodes.Case(tok.line, tok.col, cond, body));
                        // get our next case
                        tok = this.peekToken();
                    }while (tok && tok.value === caseStart);
                    // we either have a default case or a switch end.
                    switch(tok.value){
                        case caseDefault:
                            this.advanceAfterBlockEnd();
                            defaultCase = this.parseUntilBlocks(switchEnd);
                            this.advanceAfterBlockEnd();
                            break;
                        case switchEnd:
                            this.advanceAfterBlockEnd();
                            break;
                        default:
                            // otherwise bail because EOF
                            this.fail('parseSwitch: expected "case," "default" or "endswitch," got EOF.');
                    }
                    // and return the switch node.
                    return new nodes.Switch(tag.lineno, tag.colno, expr, cases, defaultCase);
                };
                _proto.parseStatement = function parseStatement() {
                    var tok = this.peekToken();
                    var node;
                    if (tok.type !== lexer.TOKEN_SYMBOL) this.fail("tag name expected", tok.lineno, tok.colno);
                    if (this.breakOnBlocks && lib.indexOf(this.breakOnBlocks, tok.value) !== -1) return null;
                    switch(tok.value){
                        case "raw":
                            return this.parseRaw();
                        case "verbatim":
                            return this.parseRaw("verbatim");
                        case "if":
                        case "ifAsync":
                            return this.parseIf();
                        case "for":
                        case "asyncEach":
                        case "asyncAll":
                            return this.parseFor();
                        case "block":
                            return this.parseBlock();
                        case "extends":
                            return this.parseExtends();
                        case "include":
                            return this.parseInclude();
                        case "set":
                            return this.parseSet();
                        case "macro":
                            return this.parseMacro();
                        case "call":
                            return this.parseCall();
                        case "import":
                            return this.parseImport();
                        case "from":
                            return this.parseFrom();
                        case "filter":
                            return this.parseFilterStatement();
                        case "switch":
                            return this.parseSwitch();
                        default:
                            if (this.extensions.length) for(var i = 0; i < this.extensions.length; i++){
                                var ext = this.extensions[i];
                                if (lib.indexOf(ext.tags || [], tok.value) !== -1) return ext.parse(this, nodes, lexer);
                            }
                            this.fail("unknown block tag: " + tok.value, tok.lineno, tok.colno);
                    }
                    return node;
                };
                _proto.parseRaw = function parseRaw(tagName) {
                    tagName = tagName || "raw";
                    var endTagName = "end" + tagName;
                    // Look for upcoming raw blocks (ignore all other kinds of blocks)
                    var rawBlockRegex = new RegExp("([\\s\\S]*?){%\\s*(" + tagName + "|" + endTagName + ")\\s*(?=%})%}");
                    var rawLevel = 1;
                    var str = "";
                    var matches = null;
                    // Skip opening raw token
                    // Keep this token to track line and column numbers
                    var begun = this.advanceAfterBlockEnd();
                    // Exit when there's nothing to match
                    // or when we've found the matching "endraw" block
                    while((matches = this.tokens._extractRegex(rawBlockRegex)) && rawLevel > 0){
                        var all = matches[0];
                        var pre = matches[1];
                        var blockName = matches[2];
                        // Adjust rawlevel
                        if (blockName === tagName) rawLevel += 1;
                        else if (blockName === endTagName) rawLevel -= 1;
                        // Add to str
                        if (rawLevel === 0) {
                            // We want to exclude the last "endraw"
                            str += pre;
                            // Move tokenizer to beginning of endraw block
                            this.tokens.backN(all.length - pre.length);
                        } else str += all;
                    }
                    return new nodes.Output(begun.lineno, begun.colno, [
                        new nodes.TemplateData(begun.lineno, begun.colno, str)
                    ]);
                };
                _proto.parsePostfix = function parsePostfix(node) {
                    var lookup;
                    var tok = this.peekToken();
                    while(tok){
                        if (tok.type === lexer.TOKEN_LEFT_PAREN) // Function call
                        node = new nodes.FunCall(tok.lineno, tok.colno, node, this.parseSignature());
                        else if (tok.type === lexer.TOKEN_LEFT_BRACKET) {
                            // Reference
                            lookup = this.parseAggregate();
                            if (lookup.children.length > 1) this.fail("invalid index");
                            node = new nodes.LookupVal(tok.lineno, tok.colno, node, lookup.children[0]);
                        } else if (tok.type === lexer.TOKEN_OPERATOR && tok.value === ".") {
                            // Reference
                            this.nextToken();
                            var val = this.nextToken();
                            if (val.type !== lexer.TOKEN_SYMBOL) this.fail("expected name as lookup value, got " + val.value, val.lineno, val.colno);
                            // Make a literal string because it's not a variable
                            // reference
                            lookup = new nodes.Literal(val.lineno, val.colno, val.value);
                            node = new nodes.LookupVal(tok.lineno, tok.colno, node, lookup);
                        } else break;
                        tok = this.peekToken();
                    }
                    return node;
                };
                _proto.parseExpression = function parseExpression() {
                    var node = this.parseInlineIf();
                    return node;
                };
                _proto.parseInlineIf = function parseInlineIf() {
                    var node = this.parseOr();
                    if (this.skipSymbol("if")) {
                        var condNode = this.parseOr();
                        var bodyNode = node;
                        node = new nodes.InlineIf(node.lineno, node.colno);
                        node.body = bodyNode;
                        node.cond = condNode;
                        if (this.skipSymbol("else")) node.else_ = this.parseOr();
                        else node.else_ = null;
                    }
                    return node;
                };
                _proto.parseOr = function parseOr() {
                    var node = this.parseAnd();
                    while(this.skipSymbol("or")){
                        var node2 = this.parseAnd();
                        node = new nodes.Or(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseAnd = function parseAnd() {
                    var node = this.parseNot();
                    while(this.skipSymbol("and")){
                        var node2 = this.parseNot();
                        node = new nodes.And(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseNot = function parseNot() {
                    var tok = this.peekToken();
                    if (this.skipSymbol("not")) return new nodes.Not(tok.lineno, tok.colno, this.parseNot());
                    return this.parseIn();
                };
                _proto.parseIn = function parseIn() {
                    var node = this.parseIs();
                    while(true){
                        // eslint-disable-line no-constant-condition
                        // check if the next token is 'not'
                        var tok = this.nextToken();
                        if (!tok) break;
                        var invert = tok.type === lexer.TOKEN_SYMBOL && tok.value === "not";
                        // if it wasn't 'not', put it back
                        if (!invert) this.pushToken(tok);
                        if (this.skipSymbol("in")) {
                            var node2 = this.parseIs();
                            node = new nodes.In(node.lineno, node.colno, node, node2);
                            if (invert) node = new nodes.Not(node.lineno, node.colno, node);
                        } else {
                            // if we'd found a 'not' but this wasn't an 'in', put back the 'not'
                            if (invert) this.pushToken(tok);
                            break;
                        }
                    }
                    return node;
                };
                _proto.parseIs = function parseIs() {
                    var node = this.parseCompare();
                    // look for an is
                    if (this.skipSymbol("is")) {
                        // look for a not
                        var not = this.skipSymbol("not");
                        // get the next node
                        var node2 = this.parseCompare();
                        // create an Is node using the next node and the info from our Is node.
                        node = new nodes.Is(node.lineno, node.colno, node, node2);
                        // if we have a Not, create a Not node from our Is node.
                        if (not) node = new nodes.Not(node.lineno, node.colno, node);
                    }
                    // return the node.
                    return node;
                };
                _proto.parseCompare = function parseCompare() {
                    var compareOps = [
                        "==",
                        "===",
                        "!=",
                        "!==",
                        "<",
                        ">",
                        "<=",
                        ">="
                    ];
                    var expr = this.parseConcat();
                    var ops = [];
                    while(true){
                        // eslint-disable-line no-constant-condition
                        var tok = this.nextToken();
                        if (!tok) break;
                        else if (compareOps.indexOf(tok.value) !== -1) ops.push(new nodes.CompareOperand(tok.lineno, tok.colno, this.parseConcat(), tok.value));
                        else {
                            this.pushToken(tok);
                            break;
                        }
                    }
                    if (ops.length) return new nodes.Compare(ops[0].lineno, ops[0].colno, expr, ops);
                    else return expr;
                };
                _proto.parseConcat = function parseConcat() {
                    var node = this.parseAdd();
                    while(this.skipValue(lexer.TOKEN_TILDE, "~")){
                        var node2 = this.parseAdd();
                        node = new nodes.Concat(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseAdd = function parseAdd() {
                    var node = this.parseSub();
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "+")){
                        var node2 = this.parseSub();
                        node = new nodes.Add(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseSub = function parseSub() {
                    var node = this.parseMul();
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "-")){
                        var node2 = this.parseMul();
                        node = new nodes.Sub(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseMul = function parseMul() {
                    var node = this.parseDiv();
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "*")){
                        var node2 = this.parseDiv();
                        node = new nodes.Mul(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseDiv = function parseDiv() {
                    var node = this.parseFloorDiv();
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "/")){
                        var node2 = this.parseFloorDiv();
                        node = new nodes.Div(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseFloorDiv = function parseFloorDiv() {
                    var node = this.parseMod();
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "//")){
                        var node2 = this.parseMod();
                        node = new nodes.FloorDiv(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseMod = function parseMod() {
                    var node = this.parsePow();
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "%")){
                        var node2 = this.parsePow();
                        node = new nodes.Mod(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parsePow = function parsePow() {
                    var node = this.parseUnary();
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "**")){
                        var node2 = this.parseUnary();
                        node = new nodes.Pow(node.lineno, node.colno, node, node2);
                    }
                    return node;
                };
                _proto.parseUnary = function parseUnary(noFilters) {
                    var tok = this.peekToken();
                    var node;
                    if (this.skipValue(lexer.TOKEN_OPERATOR, "-")) node = new nodes.Neg(tok.lineno, tok.colno, this.parseUnary(true));
                    else if (this.skipValue(lexer.TOKEN_OPERATOR, "+")) node = new nodes.Pos(tok.lineno, tok.colno, this.parseUnary(true));
                    else node = this.parsePrimary();
                    if (!noFilters) node = this.parseFilter(node);
                    return node;
                };
                _proto.parsePrimary = function parsePrimary(noPostfix) {
                    var tok = this.nextToken();
                    var val;
                    var node = null;
                    if (!tok) this.fail("expected expression, got end of file");
                    else if (tok.type === lexer.TOKEN_STRING) val = tok.value;
                    else if (tok.type === lexer.TOKEN_INT) val = parseInt(tok.value, 10);
                    else if (tok.type === lexer.TOKEN_FLOAT) val = parseFloat(tok.value);
                    else if (tok.type === lexer.TOKEN_BOOLEAN) {
                        if (tok.value === "true") val = true;
                        else if (tok.value === "false") val = false;
                        else this.fail("invalid boolean: " + tok.value, tok.lineno, tok.colno);
                    } else if (tok.type === lexer.TOKEN_NONE) val = null;
                    else if (tok.type === lexer.TOKEN_REGEX) val = new RegExp(tok.value.body, tok.value.flags);
                    if (val !== undefined) node = new nodes.Literal(tok.lineno, tok.colno, val);
                    else if (tok.type === lexer.TOKEN_SYMBOL) node = new nodes.Symbol(tok.lineno, tok.colno, tok.value);
                    else {
                        // See if it's an aggregate type, we need to push the
                        // current delimiter token back on
                        this.pushToken(tok);
                        node = this.parseAggregate();
                    }
                    if (!noPostfix) node = this.parsePostfix(node);
                    if (node) return node;
                    else throw this.error("unexpected token: " + tok.value, tok.lineno, tok.colno);
                };
                _proto.parseFilterName = function parseFilterName() {
                    var tok = this.expect(lexer.TOKEN_SYMBOL);
                    var name = tok.value;
                    while(this.skipValue(lexer.TOKEN_OPERATOR, "."))name += "." + this.expect(lexer.TOKEN_SYMBOL).value;
                    return new nodes.Symbol(tok.lineno, tok.colno, name);
                };
                _proto.parseFilterArgs = function parseFilterArgs(node) {
                    if (this.peekToken().type === lexer.TOKEN_LEFT_PAREN) {
                        // Get a FunCall node and add the parameters to the
                        // filter
                        var call = this.parsePostfix(node);
                        return call.args.children;
                    }
                    return [];
                };
                _proto.parseFilter = function parseFilter(node) {
                    while(this.skip(lexer.TOKEN_PIPE)){
                        var name = this.parseFilterName();
                        node = new nodes.Filter(name.lineno, name.colno, name, new nodes.NodeList(name.lineno, name.colno, [
                            node
                        ].concat(this.parseFilterArgs(node))));
                    }
                    return node;
                };
                _proto.parseFilterStatement = function parseFilterStatement() {
                    var filterTok = this.peekToken();
                    if (!this.skipSymbol("filter")) this.fail("parseFilterStatement: expected filter");
                    var name = this.parseFilterName();
                    var args = this.parseFilterArgs(name);
                    this.advanceAfterBlockEnd(filterTok.value);
                    var body = new nodes.Capture(name.lineno, name.colno, this.parseUntilBlocks("endfilter"));
                    this.advanceAfterBlockEnd();
                    var node = new nodes.Filter(name.lineno, name.colno, name, new nodes.NodeList(name.lineno, name.colno, [
                        body
                    ].concat(args)));
                    return new nodes.Output(name.lineno, name.colno, [
                        node
                    ]);
                };
                _proto.parseAggregate = function parseAggregate() {
                    var tok = this.nextToken();
                    var node;
                    switch(tok.type){
                        case lexer.TOKEN_LEFT_PAREN:
                            node = new nodes.Group(tok.lineno, tok.colno);
                            break;
                        case lexer.TOKEN_LEFT_BRACKET:
                            node = new nodes.Array(tok.lineno, tok.colno);
                            break;
                        case lexer.TOKEN_LEFT_CURLY:
                            node = new nodes.Dict(tok.lineno, tok.colno);
                            break;
                        default:
                            return null;
                    }
                    while(true){
                        // eslint-disable-line no-constant-condition
                        var type = this.peekToken().type;
                        if (type === lexer.TOKEN_RIGHT_PAREN || type === lexer.TOKEN_RIGHT_BRACKET || type === lexer.TOKEN_RIGHT_CURLY) {
                            this.nextToken();
                            break;
                        }
                        if (node.children.length > 0) {
                            if (!this.skip(lexer.TOKEN_COMMA)) this.fail("parseAggregate: expected comma after expression", tok.lineno, tok.colno);
                        }
                        if (node instanceof nodes.Dict) {
                            // TODO: check for errors
                            var key = this.parsePrimary();
                            // We expect a key/value pair for dicts, separated by a
                            // colon
                            if (!this.skip(lexer.TOKEN_COLON)) this.fail("parseAggregate: expected colon after dict key", tok.lineno, tok.colno);
                            // TODO: check for errors
                            var value = this.parseExpression();
                            node.addChild(new nodes.Pair(key.lineno, key.colno, key, value));
                        } else {
                            // TODO: check for errors
                            var expr = this.parseExpression();
                            node.addChild(expr);
                        }
                    }
                    return node;
                };
                _proto.parseSignature = function parseSignature(tolerant, noParens) {
                    var tok = this.peekToken();
                    if (!noParens && tok.type !== lexer.TOKEN_LEFT_PAREN) {
                        if (tolerant) return null;
                        else this.fail("expected arguments", tok.lineno, tok.colno);
                    }
                    if (tok.type === lexer.TOKEN_LEFT_PAREN) tok = this.nextToken();
                    var args = new nodes.NodeList(tok.lineno, tok.colno);
                    var kwargs = new nodes.KeywordArgs(tok.lineno, tok.colno);
                    var checkComma = false;
                    while(true){
                        // eslint-disable-line no-constant-condition
                        tok = this.peekToken();
                        if (!noParens && tok.type === lexer.TOKEN_RIGHT_PAREN) {
                            this.nextToken();
                            break;
                        } else if (noParens && tok.type === lexer.TOKEN_BLOCK_END) break;
                        if (checkComma && !this.skip(lexer.TOKEN_COMMA)) this.fail("parseSignature: expected comma after expression", tok.lineno, tok.colno);
                        else {
                            var arg = this.parseExpression();
                            if (this.skipValue(lexer.TOKEN_OPERATOR, "=")) kwargs.addChild(new nodes.Pair(arg.lineno, arg.colno, arg, this.parseExpression()));
                            else args.addChild(arg);
                        }
                        checkComma = true;
                    }
                    if (kwargs.children.length) args.addChild(kwargs);
                    return args;
                };
                _proto.parseUntilBlocks = function parseUntilBlocks() {
                    var prev = this.breakOnBlocks;
                    for(var _len = arguments.length, blockNames = new Array(_len), _key = 0; _key < _len; _key++)blockNames[_key] = arguments[_key];
                    this.breakOnBlocks = blockNames;
                    var ret = this.parse();
                    this.breakOnBlocks = prev;
                    return ret;
                };
                _proto.parseNodes = function parseNodes() {
                    var tok;
                    var buf = [];
                    while(tok = this.nextToken()){
                        if (tok.type === lexer.TOKEN_DATA) {
                            var data = tok.value;
                            var nextToken = this.peekToken();
                            var nextVal = nextToken && nextToken.value;
                            // If the last token has "-" we need to trim the
                            // leading whitespace of the data. This is marked with
                            // the `dropLeadingWhitespace` variable.
                            if (this.dropLeadingWhitespace) {
                                // TODO: this could be optimized (don't use regex)
                                data = data.replace(/^\s*/, "");
                                this.dropLeadingWhitespace = false;
                            }
                            // Same for the succeeding block start token
                            if (nextToken && (nextToken.type === lexer.TOKEN_BLOCK_START && nextVal.charAt(nextVal.length - 1) === "-" || nextToken.type === lexer.TOKEN_VARIABLE_START && nextVal.charAt(this.tokens.tags.VARIABLE_START.length) === "-" || nextToken.type === lexer.TOKEN_COMMENT && nextVal.charAt(this.tokens.tags.COMMENT_START.length) === "-")) // TODO: this could be optimized (don't use regex)
                            data = data.replace(/\s*$/, "");
                            buf.push(new nodes.Output(tok.lineno, tok.colno, [
                                new nodes.TemplateData(tok.lineno, tok.colno, data)
                            ]));
                        } else if (tok.type === lexer.TOKEN_BLOCK_START) {
                            this.dropLeadingWhitespace = false;
                            var n = this.parseStatement();
                            if (!n) break;
                            buf.push(n);
                        } else if (tok.type === lexer.TOKEN_VARIABLE_START) {
                            var e = this.parseExpression();
                            this.dropLeadingWhitespace = false;
                            this.advanceAfterVariableEnd();
                            buf.push(new nodes.Output(tok.lineno, tok.colno, [
                                e
                            ]));
                        } else if (tok.type === lexer.TOKEN_COMMENT) this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.COMMENT_END.length - 1) === "-";
                        else // Ignore comments, otherwise this should be an error
                        this.fail("Unexpected token at top-level: " + tok.type, tok.lineno, tok.colno);
                    }
                    return buf;
                };
                _proto.parse = function parse() {
                    return new nodes.NodeList(0, 0, this.parseNodes());
                };
                _proto.parseAsRoot = function parseAsRoot() {
                    return new nodes.Root(0, 0, this.parseNodes());
                };
                return Parser;
            }(Obj); // var util = require('util');
            // var l = lexer.lex('{%- if x -%}\n hello {% endif %}');
            // var t;
            // while((t = l.nextToken())) {
            //     console.log(util.inspect(t));
            // }
            // var p = new Parser(lexer.lex('hello {% filter title %}' +
            //                              'Hello madam how are you' +
            //                              '{% endfilter %}'));
            // var n = p.parseAsRoot();
            // nodes.printNodes(n);
            module1.exports = {
                parse: function parse(src, extensions, opts) {
                    var p = new Parser(lexer.lex(src, opts));
                    if (extensions !== undefined) p.extensions = extensions;
                    return p.parseAsRoot();
                },
                Parser: Parser
            };
        /***/ },
        /* 9 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var whitespaceChars = " \n	\r\xa0";
            var delimChars = "()[]{}%*-+~/#,:|.<>=!";
            var intChars = "0123456789";
            var BLOCK_START = "{%";
            var BLOCK_END = "%}";
            var VARIABLE_START = "{{";
            var VARIABLE_END = "}}";
            var COMMENT_START = "{#";
            var COMMENT_END = "#}";
            var TOKEN_STRING = "string";
            var TOKEN_WHITESPACE = "whitespace";
            var TOKEN_DATA = "data";
            var TOKEN_BLOCK_START = "block-start";
            var TOKEN_BLOCK_END = "block-end";
            var TOKEN_VARIABLE_START = "variable-start";
            var TOKEN_VARIABLE_END = "variable-end";
            var TOKEN_COMMENT = "comment";
            var TOKEN_LEFT_PAREN = "left-paren";
            var TOKEN_RIGHT_PAREN = "right-paren";
            var TOKEN_LEFT_BRACKET = "left-bracket";
            var TOKEN_RIGHT_BRACKET = "right-bracket";
            var TOKEN_LEFT_CURLY = "left-curly";
            var TOKEN_RIGHT_CURLY = "right-curly";
            var TOKEN_OPERATOR = "operator";
            var TOKEN_COMMA = "comma";
            var TOKEN_COLON = "colon";
            var TOKEN_TILDE = "tilde";
            var TOKEN_PIPE = "pipe";
            var TOKEN_INT = "int";
            var TOKEN_FLOAT = "float";
            var TOKEN_BOOLEAN = "boolean";
            var TOKEN_NONE = "none";
            var TOKEN_SYMBOL = "symbol";
            var TOKEN_SPECIAL = "special";
            var TOKEN_REGEX = "regex";
            function token(type, value, lineno, colno) {
                return {
                    type: type,
                    value: value,
                    lineno: lineno,
                    colno: colno
                };
            }
            var Tokenizer = /*#__PURE__*/ function() {
                function Tokenizer(str, opts) {
                    this.str = str;
                    this.index = 0;
                    this.len = str.length;
                    this.lineno = 0;
                    this.colno = 0;
                    this.in_code = false;
                    opts = opts || {};
                    var tags = opts.tags || {};
                    this.tags = {
                        BLOCK_START: tags.blockStart || BLOCK_START,
                        BLOCK_END: tags.blockEnd || BLOCK_END,
                        VARIABLE_START: tags.variableStart || VARIABLE_START,
                        VARIABLE_END: tags.variableEnd || VARIABLE_END,
                        COMMENT_START: tags.commentStart || COMMENT_START,
                        COMMENT_END: tags.commentEnd || COMMENT_END
                    };
                    this.trimBlocks = !!opts.trimBlocks;
                    this.lstripBlocks = !!opts.lstripBlocks;
                }
                var _proto = Tokenizer.prototype;
                _proto.nextToken = function nextToken() {
                    var lineno = this.lineno;
                    var colno = this.colno;
                    var tok;
                    if (this.in_code) {
                        // Otherwise, if we are in a block parse it as code
                        var cur = this.current();
                        if (this.isFinished()) // We have nothing else to parse
                        return null;
                        else if (cur === '"' || cur === "'") // We've hit a string
                        return token(TOKEN_STRING, this._parseString(cur), lineno, colno);
                        else if (tok = this._extract(whitespaceChars)) // We hit some whitespace
                        return token(TOKEN_WHITESPACE, tok, lineno, colno);
                        else if ((tok = this._extractString(this.tags.BLOCK_END)) || (tok = this._extractString("-" + this.tags.BLOCK_END))) {
                            // Special check for the block end tag
                            //
                            // It is a requirement that start and end tags are composed of
                            // delimiter characters (%{}[] etc), and our code always
                            // breaks on delimiters so we can assume the token parsing
                            // doesn't consume these elsewhere
                            this.in_code = false;
                            if (this.trimBlocks) {
                                cur = this.current();
                                if (cur === "\n") // Skip newline
                                this.forward();
                                else if (cur === "\r") {
                                    // Skip CRLF newline
                                    this.forward();
                                    cur = this.current();
                                    if (cur === "\n") this.forward();
                                    else // Was not a CRLF, so go back
                                    this.back();
                                }
                            }
                            return token(TOKEN_BLOCK_END, tok, lineno, colno);
                        } else if ((tok = this._extractString(this.tags.VARIABLE_END)) || (tok = this._extractString("-" + this.tags.VARIABLE_END))) {
                            // Special check for variable end tag (see above)
                            this.in_code = false;
                            return token(TOKEN_VARIABLE_END, tok, lineno, colno);
                        } else if (cur === "r" && this.str.charAt(this.index + 1) === "/") {
                            // Skip past 'r/'.
                            this.forwardN(2);
                            // Extract until the end of the regex -- / ends it, \/ does not.
                            var regexBody = "";
                            while(!this.isFinished())if (this.current() === "/" && this.previous() !== "\\") {
                                this.forward();
                                break;
                            } else {
                                regexBody += this.current();
                                this.forward();
                            }
                            // Check for flags.
                            // The possible flags are according to https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp)
                            var POSSIBLE_FLAGS = [
                                "g",
                                "i",
                                "m",
                                "y"
                            ];
                            var regexFlags = "";
                            while(!this.isFinished()){
                                var isCurrentAFlag = POSSIBLE_FLAGS.indexOf(this.current()) !== -1;
                                if (isCurrentAFlag) {
                                    regexFlags += this.current();
                                    this.forward();
                                } else break;
                            }
                            return token(TOKEN_REGEX, {
                                body: regexBody,
                                flags: regexFlags
                            }, lineno, colno);
                        } else if (delimChars.indexOf(cur) !== -1) {
                            // We've hit a delimiter (a special char like a bracket)
                            this.forward();
                            var complexOps = [
                                "==",
                                "===",
                                "!=",
                                "!==",
                                "<=",
                                ">=",
                                "//",
                                "**"
                            ];
                            var curComplex = cur + this.current();
                            var type;
                            if (lib.indexOf(complexOps, curComplex) !== -1) {
                                this.forward();
                                cur = curComplex;
                                // See if this is a strict equality/inequality comparator
                                if (lib.indexOf(complexOps, curComplex + this.current()) !== -1) {
                                    cur = curComplex + this.current();
                                    this.forward();
                                }
                            }
                            switch(cur){
                                case "(":
                                    type = TOKEN_LEFT_PAREN;
                                    break;
                                case ")":
                                    type = TOKEN_RIGHT_PAREN;
                                    break;
                                case "[":
                                    type = TOKEN_LEFT_BRACKET;
                                    break;
                                case "]":
                                    type = TOKEN_RIGHT_BRACKET;
                                    break;
                                case "{":
                                    type = TOKEN_LEFT_CURLY;
                                    break;
                                case "}":
                                    type = TOKEN_RIGHT_CURLY;
                                    break;
                                case ",":
                                    type = TOKEN_COMMA;
                                    break;
                                case ":":
                                    type = TOKEN_COLON;
                                    break;
                                case "~":
                                    type = TOKEN_TILDE;
                                    break;
                                case "|":
                                    type = TOKEN_PIPE;
                                    break;
                                default:
                                    type = TOKEN_OPERATOR;
                            }
                            return token(type, cur, lineno, colno);
                        } else {
                            // We are not at whitespace or a delimiter, so extract the
                            // text and parse it
                            tok = this._extractUntil(whitespaceChars + delimChars);
                            if (tok.match(/^[-+]?[0-9]+$/)) {
                                if (this.current() === ".") {
                                    this.forward();
                                    var dec = this._extract(intChars);
                                    return token(TOKEN_FLOAT, tok + "." + dec, lineno, colno);
                                } else return token(TOKEN_INT, tok, lineno, colno);
                            } else if (tok.match(/^(true|false)$/)) return token(TOKEN_BOOLEAN, tok, lineno, colno);
                            else if (tok === "none") return token(TOKEN_NONE, tok, lineno, colno);
                            else if (tok === "null") return token(TOKEN_NONE, tok, lineno, colno);
                            else if (tok) return token(TOKEN_SYMBOL, tok, lineno, colno);
                            else throw new Error("Unexpected value while parsing: " + tok);
                        }
                    } else {
                        // Parse out the template text, breaking on tag
                        // delimiters because we need to look for block/variable start
                        // tags (don't use the full delimChars for optimization)
                        var beginChars = this.tags.BLOCK_START.charAt(0) + this.tags.VARIABLE_START.charAt(0) + this.tags.COMMENT_START.charAt(0) + this.tags.COMMENT_END.charAt(0);
                        if (this.isFinished()) return null;
                        else if ((tok = this._extractString(this.tags.BLOCK_START + "-")) || (tok = this._extractString(this.tags.BLOCK_START))) {
                            this.in_code = true;
                            return token(TOKEN_BLOCK_START, tok, lineno, colno);
                        } else if ((tok = this._extractString(this.tags.VARIABLE_START + "-")) || (tok = this._extractString(this.tags.VARIABLE_START))) {
                            this.in_code = true;
                            return token(TOKEN_VARIABLE_START, tok, lineno, colno);
                        } else {
                            tok = "";
                            var data;
                            var inComment = false;
                            if (this._matches(this.tags.COMMENT_START)) {
                                inComment = true;
                                tok = this._extractString(this.tags.COMMENT_START);
                            }
                            // Continually consume text, breaking on the tag delimiter
                            // characters and checking to see if it's a start tag.
                            //
                            // We could hit the end of the template in the middle of
                            // our looping, so check for the null return value from
                            // _extractUntil
                            while((data = this._extractUntil(beginChars)) !== null){
                                tok += data;
                                if ((this._matches(this.tags.BLOCK_START) || this._matches(this.tags.VARIABLE_START) || this._matches(this.tags.COMMENT_START)) && !inComment) {
                                    if (this.lstripBlocks && this._matches(this.tags.BLOCK_START) && this.colno > 0 && this.colno <= tok.length) {
                                        var lastLine = tok.slice(-this.colno);
                                        if (/^\s+$/.test(lastLine)) {
                                            // Remove block leading whitespace from beginning of the string
                                            tok = tok.slice(0, -this.colno);
                                            if (!tok.length) // All data removed, collapse to avoid unnecessary nodes
                                            // by returning next token (block start)
                                            return this.nextToken();
                                        }
                                    }
                                    break;
                                } else if (this._matches(this.tags.COMMENT_END)) {
                                    if (!inComment) throw new Error("unexpected end of comment");
                                    tok += this._extractString(this.tags.COMMENT_END);
                                    break;
                                } else {
                                    // It does not match any tag, so add the character and
                                    // carry on
                                    tok += this.current();
                                    this.forward();
                                }
                            }
                            if (data === null && inComment) throw new Error("expected end of comment, got end of file");
                            return token(inComment ? TOKEN_COMMENT : TOKEN_DATA, tok, lineno, colno);
                        }
                    }
                };
                _proto._parseString = function _parseString(delimiter) {
                    this.forward();
                    var str = "";
                    while(!this.isFinished() && this.current() !== delimiter){
                        var cur = this.current();
                        if (cur === "\\") {
                            this.forward();
                            switch(this.current()){
                                case "n":
                                    str += "\n";
                                    break;
                                case "t":
                                    str += "	";
                                    break;
                                case "r":
                                    str += "\r";
                                    break;
                                default:
                                    str += this.current();
                            }
                            this.forward();
                        } else {
                            str += cur;
                            this.forward();
                        }
                    }
                    this.forward();
                    return str;
                };
                _proto._matches = function _matches(str) {
                    if (this.index + str.length > this.len) return null;
                    var m = this.str.slice(this.index, this.index + str.length);
                    return m === str;
                };
                _proto._extractString = function _extractString(str) {
                    if (this._matches(str)) {
                        this.forwardN(str.length);
                        return str;
                    }
                    return null;
                };
                _proto._extractUntil = function _extractUntil(charString) {
                    // Extract all non-matching chars, with the default matching set
                    // to everything
                    return this._extractMatching(true, charString || "");
                };
                _proto._extract = function _extract(charString) {
                    // Extract all matching chars (no default, so charString must be
                    // explicit)
                    return this._extractMatching(false, charString);
                };
                _proto._extractMatching = function _extractMatching(breakOnMatch, charString) {
                    // Pull out characters until a breaking char is hit.
                    // If breakOnMatch is false, a non-matching char stops it.
                    // If breakOnMatch is true, a matching char stops it.
                    if (this.isFinished()) return null;
                    var first = charString.indexOf(this.current());
                    // Only proceed if the first character doesn't meet our condition
                    if (breakOnMatch && first === -1 || !breakOnMatch && first !== -1) {
                        var t = this.current();
                        this.forward();
                        // And pull out all the chars one at a time until we hit a
                        // breaking char
                        var idx = charString.indexOf(this.current());
                        while((breakOnMatch && idx === -1 || !breakOnMatch && idx !== -1) && !this.isFinished()){
                            t += this.current();
                            this.forward();
                            idx = charString.indexOf(this.current());
                        }
                        return t;
                    }
                    return "";
                };
                _proto._extractRegex = function _extractRegex(regex) {
                    var matches = this.currentStr().match(regex);
                    if (!matches) return null;
                    // Move forward whatever was matched
                    this.forwardN(matches[0].length);
                    return matches;
                };
                _proto.isFinished = function isFinished() {
                    return this.index >= this.len;
                };
                _proto.forwardN = function forwardN(n) {
                    for(var i = 0; i < n; i++)this.forward();
                };
                _proto.forward = function forward() {
                    this.index++;
                    if (this.previous() === "\n") {
                        this.lineno++;
                        this.colno = 0;
                    } else this.colno++;
                };
                _proto.backN = function backN(n) {
                    for(var i = 0; i < n; i++)this.back();
                };
                _proto.back = function back() {
                    this.index--;
                    if (this.current() === "\n") {
                        this.lineno--;
                        var idx = this.src.lastIndexOf("\n", this.index - 1);
                        if (idx === -1) this.colno = this.index;
                        else this.colno = this.index - idx;
                    } else this.colno--;
                };
                _proto.current = function current() {
                    if (!this.isFinished()) return this.str.charAt(this.index);
                    return "";
                };
                _proto.currentStr = function currentStr() {
                    if (!this.isFinished()) return this.str.substr(this.index);
                    return "";
                };
                _proto.previous = function previous() {
                    return this.str.charAt(this.index - 1);
                };
                return Tokenizer;
            }();
            module1.exports = {
                lex: function lex(src, opts) {
                    return new Tokenizer(src, opts);
                },
                TOKEN_STRING: TOKEN_STRING,
                TOKEN_WHITESPACE: TOKEN_WHITESPACE,
                TOKEN_DATA: TOKEN_DATA,
                TOKEN_BLOCK_START: TOKEN_BLOCK_START,
                TOKEN_BLOCK_END: TOKEN_BLOCK_END,
                TOKEN_VARIABLE_START: TOKEN_VARIABLE_START,
                TOKEN_VARIABLE_END: TOKEN_VARIABLE_END,
                TOKEN_COMMENT: TOKEN_COMMENT,
                TOKEN_LEFT_PAREN: TOKEN_LEFT_PAREN,
                TOKEN_RIGHT_PAREN: TOKEN_RIGHT_PAREN,
                TOKEN_LEFT_BRACKET: TOKEN_LEFT_BRACKET,
                TOKEN_RIGHT_BRACKET: TOKEN_RIGHT_BRACKET,
                TOKEN_LEFT_CURLY: TOKEN_LEFT_CURLY,
                TOKEN_RIGHT_CURLY: TOKEN_RIGHT_CURLY,
                TOKEN_OPERATOR: TOKEN_OPERATOR,
                TOKEN_COMMA: TOKEN_COMMA,
                TOKEN_COLON: TOKEN_COLON,
                TOKEN_TILDE: TOKEN_TILDE,
                TOKEN_PIPE: TOKEN_PIPE,
                TOKEN_INT: TOKEN_INT,
                TOKEN_FLOAT: TOKEN_FLOAT,
                TOKEN_BOOLEAN: TOKEN_BOOLEAN,
                TOKEN_NONE: TOKEN_NONE,
                TOKEN_SYMBOL: TOKEN_SYMBOL,
                TOKEN_SPECIAL: TOKEN_SPECIAL,
                TOKEN_REGEX: TOKEN_REGEX
            };
        /***/ },
        /* 10 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var Loader = __webpack_require__(6);
            var _require = __webpack_require__(19), PrecompiledLoader = _require.PrecompiledLoader;
            var WebLoader = /*#__PURE__*/ function(_Loader) {
                _inheritsLoose(WebLoader, _Loader);
                function WebLoader(baseURL, opts) {
                    var _this;
                    _this = _Loader.call(this) || this;
                    _this.baseURL = baseURL || ".";
                    opts = opts || {};
                    // By default, the cache is turned off because there's no way
                    // to "watch" templates over HTTP, so they are re-downloaded
                    // and compiled each time. (Remember, PRECOMPILE YOUR
                    // TEMPLATES in production!)
                    _this.useCache = !!opts.useCache;
                    // We default `async` to false so that the simple synchronous
                    // API can be used when you aren't doing anything async in
                    // your templates (which is most of the time). This performs a
                    // sync ajax request, but that's ok because it should *only*
                    // happen in development. PRECOMPILE YOUR TEMPLATES.
                    _this.async = !!opts.async;
                    return _this;
                }
                var _proto = WebLoader.prototype;
                _proto.resolve = function resolve(from, to) {
                    throw new Error("relative templates not support in the browser yet");
                };
                _proto.getSource = function getSource(name, cb) {
                    var _this2 = this;
                    var useCache = this.useCache;
                    var result;
                    this.fetch(this.baseURL + "/" + name, function(err, src) {
                        if (err) {
                            if (cb) cb(err.content);
                            else if (err.status === 404) result = null;
                            else throw err.content;
                        } else {
                            result = {
                                src: src,
                                path: name,
                                noCache: !useCache
                            };
                            _this2.emit("load", name, result);
                            if (cb) cb(null, result);
                        }
                    });
                    // if this WebLoader isn't running asynchronously, the
                    // fetch above would actually run sync and we'll have a
                    // result here
                    return result;
                };
                _proto.fetch = function fetch(url, cb) {
                    // Only in the browser please
                    if (typeof window === "undefined") throw new Error("WebLoader can only by used in a browser");
                    var ajax = new XMLHttpRequest();
                    var loading = true;
                    ajax.onreadystatechange = function() {
                        if (ajax.readyState === 4 && loading) {
                            loading = false;
                            if (ajax.status === 0 || ajax.status === 200) cb(null, ajax.responseText);
                            else cb({
                                status: ajax.status,
                                content: ajax.responseText
                            });
                        }
                    };
                    url += (url.indexOf("?") === -1 ? "?" : "&") + "s=" + new Date().getTime();
                    ajax.open("GET", url, this.async);
                    ajax.send();
                };
                return WebLoader;
            }(Loader);
            module1.exports = {
                WebLoader: WebLoader,
                PrecompiledLoader: PrecompiledLoader
            };
        /***/ },
        /* 11 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var _require = __webpack_require__(7), Environment = _require.Environment, Template = _require.Template;
            var Loader = __webpack_require__(6);
            var loaders = __webpack_require__(10);
            var precompile = __webpack_require__(23);
            var compiler = __webpack_require__(5);
            var parser = __webpack_require__(8);
            var lexer = __webpack_require__(9);
            var runtime = __webpack_require__(2);
            var nodes = __webpack_require__(3);
            var installJinjaCompat = __webpack_require__(25);
            // A single instance of an environment, since this is so commonly used
            var e;
            function configure(templatesPath, opts) {
                opts = opts || {};
                if (lib.isObject(templatesPath)) {
                    opts = templatesPath;
                    templatesPath = null;
                }
                var TemplateLoader;
                if (loaders.FileSystemLoader) TemplateLoader = new loaders.FileSystemLoader(templatesPath, {
                    watch: opts.watch,
                    noCache: opts.noCache
                });
                else if (loaders.WebLoader) TemplateLoader = new loaders.WebLoader(templatesPath, {
                    useCache: opts.web && opts.web.useCache,
                    async: opts.web && opts.web.async
                });
                e = new Environment(TemplateLoader, opts);
                if (opts && opts.express) e.express(opts.express);
                return e;
            }
            module1.exports = {
                Environment: Environment,
                Template: Template,
                Loader: Loader,
                FileSystemLoader: loaders.FileSystemLoader,
                NodeResolveLoader: loaders.NodeResolveLoader,
                PrecompiledLoader: loaders.PrecompiledLoader,
                WebLoader: loaders.WebLoader,
                compiler: compiler,
                parser: parser,
                lexer: lexer,
                runtime: runtime,
                lib: lib,
                nodes: nodes,
                installJinjaCompat: installJinjaCompat,
                configure: configure,
                reset: function reset() {
                    e = undefined;
                },
                compile: function compile(src, env, path, eagerCompile) {
                    if (!e) configure();
                    return new Template(src, env, path, eagerCompile);
                },
                render: function render(name, ctx, cb) {
                    if (!e) configure();
                    return e.render(name, ctx, cb);
                },
                renderString: function renderString(src, ctx, cb) {
                    if (!e) configure();
                    return e.renderString(src, ctx, cb);
                },
                precompile: precompile ? precompile.precompile : undefined,
                precompileString: precompile ? precompile.precompileString : undefined
            };
        /***/ },
        /* 12 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            // rawAsap provides everything we need except exception management.
            var rawAsap = __webpack_require__(13);
            // RawTasks are recycled to reduce GC churn.
            var freeTasks = [];
            // We queue errors to ensure they are thrown in right order (FIFO).
            // Array-as-queue is good enough here, since we are just dealing with exceptions.
            var pendingErrors = [];
            var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);
            function throwFirstError() {
                if (pendingErrors.length) throw pendingErrors.shift();
            }
            /**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */ module1.exports = asap;
            function asap(task) {
                var rawTask;
                if (freeTasks.length) rawTask = freeTasks.pop();
                else rawTask = new RawTask();
                rawTask.task = task;
                rawAsap(rawTask);
            }
            // We wrap tasks with recyclable task objects.  A task object implements
            // `call`, just like a function.
            function RawTask() {
                this.task = null;
            }
            // The sole purpose of wrapping the task is to catch the exception and recycle
            // the task object after its single use.
            RawTask.prototype.call = function() {
                try {
                    this.task.call();
                } catch (error) {
                    if (asap.onerror) // This hook exists purely for testing purposes.
                    // Its name will be periodically randomized to break any code that
                    // depends on its existence.
                    asap.onerror(error);
                    else {
                        // In a web browser, exceptions are not fatal. However, to avoid
                        // slowing down the queue of pending tasks, we rethrow the error in a
                        // lower priority turn.
                        pendingErrors.push(error);
                        requestErrorThrow();
                    }
                } finally{
                    this.task = null;
                    freeTasks[freeTasks.length] = this;
                }
            };
        /***/ },
        /* 13 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            /* WEBPACK VAR INJECTION */ (function(global) {
                // Use the fastest means possible to execute a task in its own turn, with
                // priority over other events including IO, animation, reflow, and redraw
                // events in browsers.
                //
                // An exception thrown by a task will permanently interrupt the processing of
                // subsequent tasks. The higher level `asap` function ensures that if an
                // exception is thrown by a task, that the task queue will continue flushing as
                // soon as possible, but if you use `rawAsap` directly, you are responsible to
                // either ensure that no exceptions are thrown from your task, or to manually
                // call `rawAsap.requestFlush` if an exception is thrown.
                module1.exports = rawAsap;
                function rawAsap(task) {
                    if (!queue.length) {
                        requestFlush();
                        flushing = true;
                    }
                    // Equivalent to push, but avoids a function call.
                    queue[queue.length] = task;
                }
                var queue = [];
                // Once a flush has been requested, no further calls to `requestFlush` are
                // necessary until the next `flush` completes.
                var flushing = false;
                // `requestFlush` is an implementation-specific method that attempts to kick
                // off a `flush` event as quickly as possible. `flush` will attempt to exhaust
                // the event queue before yielding to the browser's own event loop.
                var requestFlush;
                // The position of the next task to execute in the task queue. This is
                // preserved between calls to `flush` so that it can be resumed if
                // a task throws an exception.
                var index = 0;
                // If a task schedules additional tasks recursively, the task queue can grow
                // unbounded. To prevent memory exhaustion, the task queue will periodically
                // truncate already-completed tasks.
                var capacity = 1024;
                // The flush function processes all tasks that have been scheduled with
                // `rawAsap` unless and until one of those tasks throws an exception.
                // If a task throws an exception, `flush` ensures that its state will remain
                // consistent and will resume where it left off when called again.
                // However, `flush` does not make any arrangements to be called again if an
                // exception is thrown.
                function flush() {
                    while(index < queue.length){
                        var currentIndex = index;
                        // Advance the index before calling the task. This ensures that we will
                        // begin flushing on the next task the task throws an error.
                        index = index + 1;
                        queue[currentIndex].call();
                        // Prevent leaking memory for long chains of recursive calls to `asap`.
                        // If we call `asap` within tasks scheduled by `asap`, the queue will
                        // grow, but to avoid an O(n) walk for every task we execute, we don't
                        // shift tasks off the queue after they have been executed.
                        // Instead, we periodically shift 1024 tasks off the queue.
                        if (index > capacity) {
                            // Manually shift all values starting at the index back to the
                            // beginning of the queue.
                            for(var scan = 0, newLength = queue.length - index; scan < newLength; scan++)queue[scan] = queue[scan + index];
                            queue.length -= index;
                            index = 0;
                        }
                    }
                    queue.length = 0;
                    index = 0;
                    flushing = false;
                }
                // `requestFlush` is implemented using a strategy based on data collected from
                // every available SauceLabs Selenium web driver worker at time of writing.
                // https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
                // Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
                // have WebKitMutationObserver but not un-prefixed MutationObserver.
                // Must use `global` or `self` instead of `window` to work in both frames and web
                // workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
                /* globals self */ var scope = typeof global !== "undefined" ? global : self;
                var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
                // MutationObservers are desirable because they have high priority and work
                // reliably everywhere they are implemented.
                // They are implemented in all modern browsers.
                //
                // - Android 4-4.3
                // - Chrome 26-34
                // - Firefox 14-29
                // - Internet Explorer 11
                // - iPad Safari 6-7.1
                // - iPhone Safari 7-7.1
                // - Safari 6-7
                if (typeof BrowserMutationObserver === "function") requestFlush = makeRequestCallFromMutationObserver(flush);
                else requestFlush = makeRequestCallFromTimer(flush);
                // `requestFlush` requests that the high priority event queue be flushed as
                // soon as possible.
                // This is useful to prevent an error thrown in a task from stalling the event
                // queue if the exception handled by Node.js’s
                // `process.on("uncaughtException")` or by a domain.
                rawAsap.requestFlush = requestFlush;
                // To request a high priority event, we induce a mutation observer by toggling
                // the text of a text node between "1" and "-1".
                function makeRequestCallFromMutationObserver(callback) {
                    var toggle = 1;
                    var observer = new BrowserMutationObserver(callback);
                    var node = document.createTextNode("");
                    observer.observe(node, {
                        characterData: true
                    });
                    return function requestCall() {
                        toggle = -toggle;
                        node.data = toggle;
                    };
                }
                // The message channel technique was discovered by Malte Ubl and was the
                // original foundation for this library.
                // http://www.nonblocking.io/2011/06/windownexttick.html
                // Safari 6.0.5 (at least) intermittently fails to create message ports on a
                // page's first load. Thankfully, this version of Safari supports
                // MutationObservers, so we don't need to fall back in that case.
                // function makeRequestCallFromMessageChannel(callback) {
                //     var channel = new MessageChannel();
                //     channel.port1.onmessage = callback;
                //     return function requestCall() {
                //         channel.port2.postMessage(0);
                //     };
                // }
                // For reasons explained above, we are also unable to use `setImmediate`
                // under any circumstances.
                // Even if we were, there is another bug in Internet Explorer 10.
                // It is not sufficient to assign `setImmediate` to `requestFlush` because
                // `setImmediate` must be called *by name* and therefore must be wrapped in a
                // closure.
                // Never forget.
                // function makeRequestCallFromSetImmediate(callback) {
                //     return function requestCall() {
                //         setImmediate(callback);
                //     };
                // }
                // Safari 6.0 has a problem where timers will get lost while the user is
                // scrolling. This problem does not impact ASAP because Safari 6.0 supports
                // mutation observers, so that implementation is used instead.
                // However, if we ever elect to use timers in Safari, the prevalent work-around
                // is to add a scroll event listener that calls for a flush.
                // `setTimeout` does not call the passed callback if the delay is less than
                // approximately 7 in web workers in Firefox 8 through 18, and sometimes not
                // even then.
                function makeRequestCallFromTimer(callback) {
                    return function requestCall() {
                        // We dispatch a timeout with a specified delay of 0 for engines that
                        // can reliably accommodate that request. This will usually be snapped
                        // to a 4 milisecond delay, but once we're flushing, there's no delay
                        // between events.
                        var timeoutHandle = setTimeout(handleTimer, 0);
                        // However, since this timer gets frequently dropped in Firefox
                        // workers, we enlist an interval handle that will try to fire
                        // an event 20 times per second until it succeeds.
                        var intervalHandle = setInterval(handleTimer, 50);
                        function handleTimer() {
                            // Whichever timer succeeds will cancel both timers and
                            // execute the callback.
                            clearTimeout(timeoutHandle);
                            clearInterval(intervalHandle);
                            callback();
                        }
                    };
                }
                // This is for `asap.js` only.
                // Its name will be periodically randomized to break any code that depends on
                // its existence.
                rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
            // ASAP was originally a nextTick shim included in Q. This was factored out
            // into this ASAP package. It was later adapted to RSVP which made further
            // amendments. These decisions, particularly to marginalize MessageChannel and
            // to capture the MutationObserver implementation in a closure, were integrated
            // back into ASAP proper.
            // https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
            /* WEBPACK VAR INJECTION */ }).call(exports, __webpack_require__(14));
        /***/ },
        /* 14 */ /***/ function(module1, exports) {
            var g;
            // This works in non-strict mode
            g = function() {
                return this;
            }();
            try {
                // This works if eval is allowed (see CSP)
                g = g || Function("return this")() || (0, eval)("this");
            } catch (e) {
                // This works if the window reference is available
                if (typeof window === "object") g = window;
            }
            // g can still be undefined, but nothing to do about it...
            // We return undefined, instead of nothing here, so it's
            // easier to handle this case. if(!global) { ...}
            module1.exports = g;
        /***/ },
        /* 15 */ /***/ function(module1, exports, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; // MIT license (by Elan Shanker).
            (function(globals) {
                "use strict";
                var executeSync = function() {
                    var args = Array.prototype.slice.call(arguments);
                    if (typeof args[0] === "function") args[0].apply(null, args.splice(1));
                };
                var executeAsync = function(fn) {
                    if (typeof setImmediate === "function") setImmediate(fn);
                    else if (typeof $4UN2M$process !== "undefined" && $4UN2M$process.nextTick) $4UN2M$process.nextTick(fn);
                    else setTimeout(fn, 0);
                };
                var makeIterator = function(tasks) {
                    var makeCallback = function(index) {
                        var fn = function() {
                            if (tasks.length) tasks[index].apply(null, arguments);
                            return fn.next();
                        };
                        fn.next = function() {
                            return index < tasks.length - 1 ? makeCallback(index + 1) : null;
                        };
                        return fn;
                    };
                    return makeCallback(0);
                };
                var _isArray = Array.isArray || function(maybeArray) {
                    return Object.prototype.toString.call(maybeArray) === "[object Array]";
                };
                var waterfall = function(tasks, callback, forceAsync) {
                    var nextTick = forceAsync ? executeAsync : executeSync;
                    callback = callback || function() {};
                    if (!_isArray(tasks)) {
                        var err = new Error("First argument to waterfall must be an array of functions");
                        return callback(err);
                    }
                    if (!tasks.length) return callback();
                    var wrapIterator = function(iterator) {
                        return function(err) {
                            if (err) {
                                callback.apply(null, arguments);
                                callback = function() {};
                            } else {
                                var args = Array.prototype.slice.call(arguments, 1);
                                var next = iterator.next();
                                if (next) args.push(wrapIterator(next));
                                else args.push(callback);
                                nextTick(function() {
                                    iterator.apply(null, args);
                                });
                            }
                        };
                    };
                    wrapIterator(makeIterator(tasks))();
                };
                __WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
                    return waterfall;
                }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module1.exports = __WEBPACK_AMD_DEFINE_RESULT__); // RequireJS
            })(this);
        /***/ },
        /* 16 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.
            var R = typeof Reflect === "object" ? Reflect : null;
            var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
                return Function.prototype.apply.call(target, receiver, args);
            };
            var ReflectOwnKeys;
            if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
            else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
                return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
            };
            else ReflectOwnKeys = function ReflectOwnKeys(target) {
                return Object.getOwnPropertyNames(target);
            };
            function ProcessEmitWarning(warning) {
                if (console && console.warn) console.warn(warning);
            }
            var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
                return value !== value;
            };
            function EventEmitter() {
                EventEmitter.init.call(this);
            }
            module1.exports = EventEmitter;
            module1.exports.once = once;
            // Backwards-compat with node 0.10.x
            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._eventsCount = 0;
            EventEmitter.prototype._maxListeners = undefined;
            // By default EventEmitters will print a warning if more than 10 listeners are
            // added to it. This is a useful default which helps finding memory leaks.
            var defaultMaxListeners = 10;
            function checkListener(listener) {
                if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
            }
            Object.defineProperty(EventEmitter, "defaultMaxListeners", {
                enumerable: true,
                get: function() {
                    return defaultMaxListeners;
                },
                set: function(arg) {
                    if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
                    defaultMaxListeners = arg;
                }
            });
            EventEmitter.init = function() {
                if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
                    this._events = Object.create(null);
                    this._eventsCount = 0;
                }
                this._maxListeners = this._maxListeners || undefined;
            };
            // Obviously not all Emitters should be limited to 10. This function allows
            // that to be increased. Set to zero for unlimited.
            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
                this._maxListeners = n;
                return this;
            };
            function _getMaxListeners(that) {
                if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
                return that._maxListeners;
            }
            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                return _getMaxListeners(this);
            };
            EventEmitter.prototype.emit = function emit(type) {
                var args = [];
                for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
                var doError = type === "error";
                var events = this._events;
                if (events !== undefined) doError = doError && events.error === undefined;
                else if (!doError) return false;
                // If there is no 'error' event listener then throw.
                if (doError) {
                    var er;
                    if (args.length > 0) er = args[0];
                    if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
                    // up in Node's output if this results in an unhandled exception.
                    throw er; // Unhandled 'error' event
                    // At least give some kind of context to the user
                    var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
                    err.context = er;
                    throw err; // Unhandled 'error' event
                }
                var handler = events[type];
                if (handler === undefined) return false;
                if (typeof handler === "function") ReflectApply(handler, this, args);
                else {
                    var len = handler.length;
                    var listeners = arrayClone(handler, len);
                    for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
                }
                return true;
            };
            function _addListener(target, type, listener, prepend) {
                var m;
                var events;
                var existing;
                checkListener(listener);
                events = target._events;
                if (events === undefined) {
                    events = target._events = Object.create(null);
                    target._eventsCount = 0;
                } else {
                    // To avoid recursion in the case that type === "newListener"! Before
                    // adding it to the listeners, first emit "newListener".
                    if (events.newListener !== undefined) {
                        target.emit("newListener", type, listener.listener ? listener.listener : listener);
                        // Re-assign `events` because a newListener handler could have caused the
                        // this._events to be assigned to a new object
                        events = target._events;
                    }
                    existing = events[type];
                }
                if (existing === undefined) {
                    // Optimize the case of one listener. Don't need the extra array object.
                    existing = events[type] = listener;
                    ++target._eventsCount;
                } else {
                    if (typeof existing === "function") // Adding the second element, need to change to array.
                    existing = events[type] = prepend ? [
                        listener,
                        existing
                    ] : [
                        existing,
                        listener
                    ];
                    else if (prepend) existing.unshift(listener);
                    else existing.push(listener);
                    // Check for listener leak
                    m = _getMaxListeners(target);
                    if (m > 0 && existing.length > m && !existing.warned) {
                        existing.warned = true;
                        // No error code for this since it is a Warning
                        // eslint-disable-next-line no-restricted-syntax
                        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
                        w.name = "MaxListenersExceededWarning";
                        w.emitter = target;
                        w.type = type;
                        w.count = existing.length;
                        ProcessEmitWarning(w);
                    }
                }
                return target;
            }
            EventEmitter.prototype.addListener = function addListener(type, listener) {
                return _addListener(this, type, listener, false);
            };
            EventEmitter.prototype.on = EventEmitter.prototype.addListener;
            EventEmitter.prototype.prependListener = function prependListener(type, listener) {
                return _addListener(this, type, listener, true);
            };
            function onceWrapper() {
                if (!this.fired) {
                    this.target.removeListener(this.type, this.wrapFn);
                    this.fired = true;
                    if (arguments.length === 0) return this.listener.call(this.target);
                    return this.listener.apply(this.target, arguments);
                }
            }
            function _onceWrap(target, type, listener) {
                var state = {
                    fired: false,
                    wrapFn: undefined,
                    target: target,
                    type: type,
                    listener: listener
                };
                var wrapped = onceWrapper.bind(state);
                wrapped.listener = listener;
                state.wrapFn = wrapped;
                return wrapped;
            }
            EventEmitter.prototype.once = function once(type, listener) {
                checkListener(listener);
                this.on(type, _onceWrap(this, type, listener));
                return this;
            };
            EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
                checkListener(listener);
                this.prependListener(type, _onceWrap(this, type, listener));
                return this;
            };
            // Emits a 'removeListener' event if and only if the listener was removed.
            EventEmitter.prototype.removeListener = function removeListener(type, listener) {
                var list, events, position, i, originalListener;
                checkListener(listener);
                events = this._events;
                if (events === undefined) return this;
                list = events[type];
                if (list === undefined) return this;
                if (list === listener || list.listener === listener) {
                    if (--this._eventsCount === 0) this._events = Object.create(null);
                    else {
                        delete events[type];
                        if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
                    }
                } else if (typeof list !== "function") {
                    position = -1;
                    for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
                        originalListener = list[i].listener;
                        position = i;
                        break;
                    }
                    if (position < 0) return this;
                    if (position === 0) list.shift();
                    else spliceOne(list, position);
                    if (list.length === 1) events[type] = list[0];
                    if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
                }
                return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
                var listeners, events, i;
                events = this._events;
                if (events === undefined) return this;
                // not listening for removeListener, no need to emit
                if (events.removeListener === undefined) {
                    if (arguments.length === 0) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    } else if (events[type] !== undefined) {
                        if (--this._eventsCount === 0) this._events = Object.create(null);
                        else delete events[type];
                    }
                    return this;
                }
                // emit removeListener for all listeners on all events
                if (arguments.length === 0) {
                    var keys = Object.keys(events);
                    var key;
                    for(i = 0; i < keys.length; ++i){
                        key = keys[i];
                        if (key === "removeListener") continue;
                        this.removeAllListeners(key);
                    }
                    this.removeAllListeners("removeListener");
                    this._events = Object.create(null);
                    this._eventsCount = 0;
                    return this;
                }
                listeners = events[type];
                if (typeof listeners === "function") this.removeListener(type, listeners);
                else if (listeners !== undefined) // LIFO order
                for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
                return this;
            };
            function _listeners(target, type, unwrap) {
                var events = target._events;
                if (events === undefined) return [];
                var evlistener = events[type];
                if (evlistener === undefined) return [];
                if (typeof evlistener === "function") return unwrap ? [
                    evlistener.listener || evlistener
                ] : [
                    evlistener
                ];
                return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
            }
            EventEmitter.prototype.listeners = function listeners(type) {
                return _listeners(this, type, true);
            };
            EventEmitter.prototype.rawListeners = function rawListeners(type) {
                return _listeners(this, type, false);
            };
            EventEmitter.listenerCount = function(emitter, type) {
                if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
                else return listenerCount.call(emitter, type);
            };
            EventEmitter.prototype.listenerCount = listenerCount;
            function listenerCount(type) {
                var events = this._events;
                if (events !== undefined) {
                    var evlistener = events[type];
                    if (typeof evlistener === "function") return 1;
                    else if (evlistener !== undefined) return evlistener.length;
                }
                return 0;
            }
            EventEmitter.prototype.eventNames = function eventNames() {
                return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
            };
            function arrayClone(arr, n) {
                var copy = new Array(n);
                for(var i = 0; i < n; ++i)copy[i] = arr[i];
                return copy;
            }
            function spliceOne(list, index) {
                for(; index + 1 < list.length; index++)list[index] = list[index + 1];
                list.pop();
            }
            function unwrapListeners(arr) {
                var ret = new Array(arr.length);
                for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
                return ret;
            }
            function once(emitter, name) {
                return new Promise(function(resolve, reject) {
                    function errorListener(err) {
                        emitter.removeListener(name, resolver);
                        reject(err);
                    }
                    function resolver() {
                        if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
                        resolve([].slice.call(arguments));
                    }
                    eventTargetAgnosticAddListener(emitter, name, resolver, {
                        once: true
                    });
                    if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
                        once: true
                    });
                });
            }
            function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
            }
            function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                if (typeof emitter.on === "function") {
                    if (flags.once) emitter.once(name, listener);
                    else emitter.on(name, listener);
                } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
                // EventEmitters, we do not listen for `error` events here.
                emitter.addEventListener(name, function wrapListener(arg) {
                    // IE does not have builtin `{ once: true }` support so we
                    // have to do it manually.
                    if (flags.once) emitter.removeEventListener(name, wrapListener);
                    listener(arg);
                });
                else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
            }
        /***/ },
        /* 17 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var nodes = __webpack_require__(3);
            var lib = __webpack_require__(0);
            var sym = 0;
            function gensym() {
                return "hole_" + sym++;
            }
            // copy-on-write version of map
            function mapCOW(arr, func) {
                var res = null;
                for(var i = 0; i < arr.length; i++){
                    var item = func(arr[i]);
                    if (item !== arr[i]) {
                        if (!res) res = arr.slice();
                        res[i] = item;
                    }
                }
                return res || arr;
            }
            function walk(ast, func, depthFirst) {
                if (!(ast instanceof nodes.Node)) return ast;
                if (!depthFirst) {
                    var astT = func(ast);
                    if (astT && astT !== ast) return astT;
                }
                if (ast instanceof nodes.NodeList) {
                    var children = mapCOW(ast.children, function(node) {
                        return walk(node, func, depthFirst);
                    });
                    if (children !== ast.children) ast = new nodes[ast.typename](ast.lineno, ast.colno, children);
                } else if (ast instanceof nodes.CallExtension) {
                    var args = walk(ast.args, func, depthFirst);
                    var contentArgs = mapCOW(ast.contentArgs, function(node) {
                        return walk(node, func, depthFirst);
                    });
                    if (args !== ast.args || contentArgs !== ast.contentArgs) ast = new nodes[ast.typename](ast.extName, ast.prop, args, contentArgs);
                } else {
                    var props = ast.fields.map(function(field) {
                        return ast[field];
                    });
                    var propsT = mapCOW(props, function(prop) {
                        return walk(prop, func, depthFirst);
                    });
                    if (propsT !== props) {
                        ast = new nodes[ast.typename](ast.lineno, ast.colno);
                        propsT.forEach(function(prop, i) {
                            ast[ast.fields[i]] = prop;
                        });
                    }
                }
                return depthFirst ? func(ast) || ast : ast;
            }
            function depthWalk(ast, func) {
                return walk(ast, func, true);
            }
            function _liftFilters(node, asyncFilters, prop) {
                var children = [];
                var walked = depthWalk(prop ? node[prop] : node, function(descNode) {
                    var symbol;
                    if (descNode instanceof nodes.Block) return descNode;
                    else if (descNode instanceof nodes.Filter && lib.indexOf(asyncFilters, descNode.name.value) !== -1 || descNode instanceof nodes.CallExtensionAsync) {
                        symbol = new nodes.Symbol(descNode.lineno, descNode.colno, gensym());
                        children.push(new nodes.FilterAsync(descNode.lineno, descNode.colno, descNode.name, descNode.args, symbol));
                    }
                    return symbol;
                });
                if (prop) node[prop] = walked;
                else node = walked;
                if (children.length) {
                    children.push(node);
                    return new nodes.NodeList(node.lineno, node.colno, children);
                } else return node;
            }
            function liftFilters(ast, asyncFilters) {
                return depthWalk(ast, function(node) {
                    if (node instanceof nodes.Output) return _liftFilters(node, asyncFilters);
                    else if (node instanceof nodes.Set) return _liftFilters(node, asyncFilters, "value");
                    else if (node instanceof nodes.For) return _liftFilters(node, asyncFilters, "arr");
                    else if (node instanceof nodes.If) return _liftFilters(node, asyncFilters, "cond");
                    else if (node instanceof nodes.CallExtension) return _liftFilters(node, asyncFilters, "args");
                    else return undefined;
                });
            }
            function liftSuper(ast) {
                return walk(ast, function(blockNode) {
                    if (!(blockNode instanceof nodes.Block)) return;
                    var hasSuper = false;
                    var symbol = gensym();
                    blockNode.body = walk(blockNode.body, function(node) {
                        // eslint-disable-line consistent-return
                        if (node instanceof nodes.FunCall && node.name.value === "super") {
                            hasSuper = true;
                            return new nodes.Symbol(node.lineno, node.colno, symbol);
                        }
                    });
                    if (hasSuper) blockNode.body.children.unshift(new nodes.Super(0, 0, blockNode.name, new nodes.Symbol(0, 0, symbol)));
                });
            }
            function convertStatements(ast) {
                return depthWalk(ast, function(node) {
                    if (!(node instanceof nodes.If) && !(node instanceof nodes.For)) return undefined;
                    var async = false;
                    walk(node, function(child) {
                        if (child instanceof nodes.FilterAsync || child instanceof nodes.IfAsync || child instanceof nodes.AsyncEach || child instanceof nodes.AsyncAll || child instanceof nodes.CallExtensionAsync) {
                            async = true;
                            // Stop iterating by returning the node
                            return child;
                        }
                        return undefined;
                    });
                    if (async) {
                        if (node instanceof nodes.If) return new nodes.IfAsync(node.lineno, node.colno, node.cond, node.body, node.else_);
                        else if (node instanceof nodes.For && !(node instanceof nodes.AsyncAll)) return new nodes.AsyncEach(node.lineno, node.colno, node.arr, node.name, node.body, node.else_);
                    }
                    return undefined;
                });
            }
            function cps(ast, asyncFilters) {
                return convertStatements(liftSuper(liftFilters(ast, asyncFilters)));
            }
            function transform(ast, asyncFilters) {
                return cps(ast, asyncFilters || []);
            }
            // var parser = require('./parser');
            // var src = 'hello {% foo %}{% endfoo %} end';
            // var ast = transform(parser.parse(src, [new FooExtension()]), ['bar']);
            // nodes.printNodes(ast);
            module1.exports = {
                transform: transform
            };
        /***/ },
        /* 18 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var r = __webpack_require__(2);
            var exports = module1.exports = {};
            function normalize(value, defaultValue) {
                if (value === null || value === undefined || value === false) return defaultValue;
                return value;
            }
            exports.abs = Math.abs;
            function isNaN(num) {
                return num !== num; // eslint-disable-line no-self-compare
            }
            function batch(arr, linecount, fillWith) {
                var i;
                var res = [];
                var tmp = [];
                for(i = 0; i < arr.length; i++){
                    if (i % linecount === 0 && tmp.length) {
                        res.push(tmp);
                        tmp = [];
                    }
                    tmp.push(arr[i]);
                }
                if (tmp.length) {
                    if (fillWith) for(i = tmp.length; i < linecount; i++)tmp.push(fillWith);
                    res.push(tmp);
                }
                return res;
            }
            exports.batch = batch;
            function capitalize(str) {
                str = normalize(str, "");
                var ret = str.toLowerCase();
                return r.copySafeness(str, ret.charAt(0).toUpperCase() + ret.slice(1));
            }
            exports.capitalize = capitalize;
            function center(str, width) {
                str = normalize(str, "");
                width = width || 80;
                if (str.length >= width) return str;
                var spaces = width - str.length;
                var pre = lib.repeat(" ", spaces / 2 - spaces % 2);
                var post = lib.repeat(" ", spaces / 2);
                return r.copySafeness(str, pre + str + post);
            }
            exports.center = center;
            function default_(val, def, bool) {
                if (bool) return val || def;
                else return val !== undefined ? val : def;
            }
            // TODO: it is confusing to export something called 'default'
            exports["default"] = default_; // eslint-disable-line dot-notation
            function dictsort(val, caseSensitive, by) {
                if (!lib.isObject(val)) throw new lib.TemplateError("dictsort filter: val must be an object");
                var array = [];
                // deliberately include properties from the object's prototype
                for(var k in val)// eslint-disable-line guard-for-in, no-restricted-syntax
                array.push([
                    k,
                    val[k]
                ]);
                var si;
                if (by === undefined || by === "key") si = 0;
                else if (by === "value") si = 1;
                else throw new lib.TemplateError("dictsort filter: You can only sort by either key or value");
                array.sort(function(t1, t2) {
                    var a = t1[si];
                    var b = t2[si];
                    if (!caseSensitive) {
                        if (lib.isString(a)) a = a.toUpperCase();
                        if (lib.isString(b)) b = b.toUpperCase();
                    }
                    return a > b ? 1 : a === b ? 0 : -1; // eslint-disable-line no-nested-ternary
                });
                return array;
            }
            exports.dictsort = dictsort;
            function dump(obj, spaces) {
                return JSON.stringify(obj, null, spaces);
            }
            exports.dump = dump;
            function escape(str) {
                if (str instanceof r.SafeString) return str;
                str = str === null || str === undefined ? "" : str;
                return r.markSafe(lib.escape(str.toString()));
            }
            exports.escape = escape;
            function safe(str) {
                if (str instanceof r.SafeString) return str;
                str = str === null || str === undefined ? "" : str;
                return r.markSafe(str.toString());
            }
            exports.safe = safe;
            function first(arr) {
                return arr[0];
            }
            exports.first = first;
            function forceescape(str) {
                str = str === null || str === undefined ? "" : str;
                return r.markSafe(lib.escape(str.toString()));
            }
            exports.forceescape = forceescape;
            function groupby(arr, attr) {
                return lib.groupBy(arr, attr, this.env.opts.throwOnUndefined);
            }
            exports.groupby = groupby;
            function indent(str, width, indentfirst) {
                str = normalize(str, "");
                if (str === "") return "";
                width = width || 4;
                // let res = '';
                var lines = str.split("\n");
                var sp = lib.repeat(" ", width);
                var res = lines.map(function(l, i) {
                    return i === 0 && !indentfirst ? l : "" + sp + l;
                }).join("\n");
                return r.copySafeness(str, res);
            }
            exports.indent = indent;
            function join(arr, del, attr) {
                del = del || "";
                if (attr) arr = lib.map(arr, function(v) {
                    return v[attr];
                });
                return arr.join(del);
            }
            exports.join = join;
            function last(arr) {
                return arr[arr.length - 1];
            }
            exports.last = last;
            function lengthFilter(val) {
                var value = normalize(val, "");
                if (value !== undefined) {
                    if (typeof Map === "function" && value instanceof Map || typeof Set === "function" && value instanceof Set) // ECMAScript 2015 Maps and Sets
                    return value.size;
                    if (lib.isObject(value) && !(value instanceof r.SafeString)) // Objects (besides SafeStrings), non-primative Arrays
                    return lib.keys(value).length;
                    return value.length;
                }
                return 0;
            }
            exports.length = lengthFilter;
            function list(val) {
                if (lib.isString(val)) return val.split("");
                else if (lib.isObject(val)) return lib._entries(val || {}).map(function(_ref) {
                    var key = _ref[0], value = _ref[1];
                    return {
                        key: key,
                        value: value
                    };
                });
                else if (lib.isArray(val)) return val;
                else throw new lib.TemplateError("list filter: type not iterable");
            }
            exports.list = list;
            function lower(str) {
                str = normalize(str, "");
                return str.toLowerCase();
            }
            exports.lower = lower;
            function nl2br(str) {
                if (str === null || str === undefined) return "";
                return r.copySafeness(str, str.replace(/\r\n|\n/g, "<br />\n"));
            }
            exports.nl2br = nl2br;
            function random(arr) {
                return arr[Math.floor(Math.random() * arr.length)];
            }
            exports.random = random;
            /**
 * Construct select or reject filter
 *
 * @param {boolean} expectedTestResult
 * @returns {function(array, string, *): array}
 */ function getSelectOrReject(expectedTestResult) {
                function filter(arr, testName, secondArg) {
                    if (testName === void 0) testName = "truthy";
                    var context = this;
                    var test = context.env.getTest(testName);
                    return lib.toArray(arr).filter(function examineTestResult(item) {
                        return test.call(context, item, secondArg) === expectedTestResult;
                    });
                }
                return filter;
            }
            exports.reject = getSelectOrReject(false);
            function rejectattr(arr, attr) {
                return arr.filter(function(item) {
                    return !item[attr];
                });
            }
            exports.rejectattr = rejectattr;
            exports.select = getSelectOrReject(true);
            function selectattr(arr, attr) {
                return arr.filter(function(item) {
                    return !!item[attr];
                });
            }
            exports.selectattr = selectattr;
            function replace(str, old, new_, maxCount) {
                var originalStr = str;
                if (old instanceof RegExp) return str.replace(old, new_);
                if (typeof maxCount === "undefined") maxCount = -1;
                var res = ""; // Output
                // Cast Numbers in the search term to string
                if (typeof old === "number") old = "" + old;
                else if (typeof old !== "string") // If it is something other than number or string,
                // return the original string
                return str;
                // Cast numbers in the replacement to string
                if (typeof str === "number") str = "" + str;
                // If by now, we don't have a string, throw it back
                if (typeof str !== "string" && !(str instanceof r.SafeString)) return str;
                // ShortCircuits
                if (old === "") {
                    // Mimic the python behaviour: empty string is replaced
                    // by replacement e.g. "abc"|replace("", ".") -> .a.b.c.
                    res = new_ + str.split("").join(new_) + new_;
                    return r.copySafeness(str, res);
                }
                var nextIndex = str.indexOf(old);
                // if # of replacements to perform is 0, or the string to does
                // not contain the old value, return the string
                if (maxCount === 0 || nextIndex === -1) return str;
                var pos = 0;
                var count = 0; // # of replacements made
                while(nextIndex > -1 && (maxCount === -1 || count < maxCount)){
                    // Grab the next chunk of src string and add it with the
                    // replacement, to the result
                    res += str.substring(pos, nextIndex) + new_;
                    // Increment our pointer in the src string
                    pos = nextIndex + old.length;
                    count++;
                    // See if there are any more replacements to be made
                    nextIndex = str.indexOf(old, pos);
                }
                // We've either reached the end, or done the max # of
                // replacements, tack on any remaining string
                if (pos < str.length) res += str.substring(pos);
                return r.copySafeness(originalStr, res);
            }
            exports.replace = replace;
            function reverse(val) {
                var arr;
                if (lib.isString(val)) arr = list(val);
                else // Copy it
                arr = lib.map(val, function(v) {
                    return v;
                });
                arr.reverse();
                if (lib.isString(val)) return r.copySafeness(val, arr.join(""));
                return arr;
            }
            exports.reverse = reverse;
            function round(val, precision, method) {
                precision = precision || 0;
                var factor = Math.pow(10, precision);
                var rounder;
                if (method === "ceil") rounder = Math.ceil;
                else if (method === "floor") rounder = Math.floor;
                else rounder = Math.round;
                return rounder(val * factor) / factor;
            }
            exports.round = round;
            function slice(arr, slices, fillWith) {
                var sliceLength = Math.floor(arr.length / slices);
                var extra = arr.length % slices;
                var res = [];
                var offset = 0;
                for(var i = 0; i < slices; i++){
                    var start = offset + i * sliceLength;
                    if (i < extra) offset++;
                    var end = offset + (i + 1) * sliceLength;
                    var currSlice = arr.slice(start, end);
                    if (fillWith && i >= extra) currSlice.push(fillWith);
                    res.push(currSlice);
                }
                return res;
            }
            exports.slice = slice;
            function sum(arr, attr, start) {
                if (start === void 0) start = 0;
                if (attr) arr = lib.map(arr, function(v) {
                    return v[attr];
                });
                return start + arr.reduce(function(a, b) {
                    return a + b;
                }, 0);
            }
            exports.sum = sum;
            exports.sort = r.makeMacro([
                "value",
                "reverse",
                "case_sensitive",
                "attribute"
            ], [], function sortFilter(arr, reversed, caseSens, attr) {
                var _this = this;
                // Copy it
                var array = lib.map(arr, function(v) {
                    return v;
                });
                var getAttribute = lib.getAttrGetter(attr);
                array.sort(function(a, b) {
                    var x = attr ? getAttribute(a) : a;
                    var y = attr ? getAttribute(b) : b;
                    if (_this.env.opts.throwOnUndefined && attr && (x === undefined || y === undefined)) throw new TypeError('sort: attribute "' + attr + '" resolved to undefined');
                    if (!caseSens && lib.isString(x) && lib.isString(y)) {
                        x = x.toLowerCase();
                        y = y.toLowerCase();
                    }
                    if (x < y) return reversed ? 1 : -1;
                    else if (x > y) return reversed ? -1 : 1;
                    else return 0;
                });
                return array;
            });
            function string(obj) {
                return r.copySafeness(obj, obj);
            }
            exports.string = string;
            function striptags(input, preserveLinebreaks) {
                input = normalize(input, "");
                var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>|<!--[\s\S]*?-->/gi;
                var trimmedInput = trim(input.replace(tags, ""));
                var res = "";
                if (preserveLinebreaks) res = trimmedInput.replace(/^ +| +$/gm, "") // remove leading and trailing spaces
                .replace(/ +/g, " ") // squash adjacent spaces
                .replace(/(\r\n)/g, "\n") // normalize linebreaks (CRLF -> LF)
                .replace(/\n\n\n+/g, "\n\n"); // squash abnormal adjacent linebreaks
                else res = trimmedInput.replace(/\s+/gi, " ");
                return r.copySafeness(input, res);
            }
            exports.striptags = striptags;
            function title(str) {
                str = normalize(str, "");
                var words = str.split(" ").map(function(word) {
                    return capitalize(word);
                });
                return r.copySafeness(str, words.join(" "));
            }
            exports.title = title;
            function trim(str) {
                return r.copySafeness(str, str.replace(/^\s*|\s*$/g, ""));
            }
            exports.trim = trim;
            function truncate(input, length, killwords, end) {
                var orig = input;
                input = normalize(input, "");
                length = length || 255;
                if (input.length <= length) return input;
                if (killwords) input = input.substring(0, length);
                else {
                    var idx = input.lastIndexOf(" ", length);
                    if (idx === -1) idx = length;
                    input = input.substring(0, idx);
                }
                input += end !== undefined && end !== null ? end : "...";
                return r.copySafeness(orig, input);
            }
            exports.truncate = truncate;
            function upper(str) {
                str = normalize(str, "");
                return str.toUpperCase();
            }
            exports.upper = upper;
            function urlencode(obj) {
                var enc = encodeURIComponent;
                if (lib.isString(obj)) return enc(obj);
                else {
                    var keyvals = lib.isArray(obj) ? obj : lib._entries(obj);
                    return keyvals.map(function(_ref2) {
                        var k = _ref2[0], v = _ref2[1];
                        return enc(k) + "=" + enc(v);
                    }).join("&");
                }
            }
            exports.urlencode = urlencode;
            // For the jinja regexp, see
            // https://github.com/mitsuhiko/jinja2/blob/f15b814dcba6aa12bc74d1f7d0c881d55f7126be/jinja2/utils.py#L20-L23
            var puncRe = /^(?:\(|<|&lt;)?(.*?)(?:\.|,|\)|\n|&gt;)?$/;
            // from http://blog.gerv.net/2011/05/html5_email_address_regexp/
            var emailRe = /^[\w.!#$%&'*+\-\/=?\^`{|}~]+@[a-z\d\-]+(\.[a-z\d\-]+)+$/i;
            var httpHttpsRe = /^https?:\/\/.*$/;
            var wwwRe = /^www\./;
            var tldRe = /\.(?:org|net|com)(?:\:|\/|$)/;
            function urlize(str, length, nofollow) {
                if (isNaN(length)) length = Infinity;
                var noFollowAttr = nofollow === true ? ' rel="nofollow"' : "";
                var words = str.split(/(\s+)/).filter(function(word) {
                    // If the word has no length, bail. This can happen for str with
                    // trailing whitespace.
                    return word && word.length;
                }).map(function(word) {
                    var matches = word.match(puncRe);
                    var possibleUrl = matches ? matches[1] : word;
                    var shortUrl = possibleUrl.substr(0, length);
                    // url that starts with http or https
                    if (httpHttpsRe.test(possibleUrl)) return '<a href="' + possibleUrl + '"' + noFollowAttr + ">" + shortUrl + "</a>";
                    // url that starts with www.
                    if (wwwRe.test(possibleUrl)) return '<a href="http://' + possibleUrl + '"' + noFollowAttr + ">" + shortUrl + "</a>";
                    // an email address of the form username@domain.tld
                    if (emailRe.test(possibleUrl)) return '<a href="mailto:' + possibleUrl + '">' + possibleUrl + "</a>";
                    // url that ends in .com, .org or .net that is not an email address
                    if (tldRe.test(possibleUrl)) return '<a href="http://' + possibleUrl + '"' + noFollowAttr + ">" + shortUrl + "</a>";
                    return word;
                });
                return words.join("");
            }
            exports.urlize = urlize;
            function wordcount(str) {
                str = normalize(str, "");
                var words = str ? str.match(/\w+/g) : null;
                return words ? words.length : null;
            }
            exports.wordcount = wordcount;
            function float(val, def) {
                var res = parseFloat(val);
                return isNaN(res) ? def : res;
            }
            exports.float = float;
            var intFilter = r.makeMacro([
                "value",
                "default",
                "base"
            ], [], function doInt(value, defaultValue, base) {
                if (base === void 0) base = 10;
                var res = parseInt(value, base);
                return isNaN(res) ? defaultValue : res;
            });
            exports.int = intFilter;
            // Aliases
            exports.d = exports.default;
            exports.e = exports.escape;
        /***/ },
        /* 19 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
                    o.__proto__ = p;
                    return o;
                };
                return _setPrototypeOf(o, p);
            }
            var Loader = __webpack_require__(6);
            var PrecompiledLoader = /*#__PURE__*/ function(_Loader) {
                _inheritsLoose(PrecompiledLoader, _Loader);
                function PrecompiledLoader(compiledTemplates) {
                    var _this;
                    _this = _Loader.call(this) || this;
                    _this.precompiled = compiledTemplates || {};
                    return _this;
                }
                var _proto = PrecompiledLoader.prototype;
                _proto.getSource = function getSource(name) {
                    if (this.precompiled[name]) return {
                        src: {
                            type: "code",
                            obj: this.precompiled[name]
                        },
                        path: name
                    };
                    return null;
                };
                return PrecompiledLoader;
            }(Loader);
            module1.exports = {
                PrecompiledLoader: PrecompiledLoader
            };
        /***/ },
        /* 20 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var SafeString = __webpack_require__(2).SafeString;
            /**
 * Returns `true` if the object is a function, otherwise `false`.
 * @param { any } value
 * @returns { boolean }
 */ function callable(value) {
                return typeof value === "function";
            }
            exports.callable = callable;
            /**
 * Returns `true` if the object is strictly not `undefined`.
 * @param { any } value
 * @returns { boolean }
 */ function defined(value) {
                return value !== undefined;
            }
            exports.defined = defined;
            /**
 * Returns `true` if the operand (one) is divisble by the test's argument
 * (two).
 * @param { number } one
 * @param { number } two
 * @returns { boolean }
 */ function divisibleby(one, two) {
                return one % two === 0;
            }
            exports.divisibleby = divisibleby;
            /**
 * Returns true if the string has been escaped (i.e., is a SafeString).
 * @param { any } value
 * @returns { boolean }
 */ function escaped(value) {
                return value instanceof SafeString;
            }
            exports.escaped = escaped;
            /**
 * Returns `true` if the arguments are strictly equal.
 * @param { any } one
 * @param { any } two
 */ function equalto(one, two) {
                return one === two;
            }
            exports.equalto = equalto;
            // Aliases
            exports.eq = exports.equalto;
            exports.sameas = exports.equalto;
            /**
 * Returns `true` if the value is evenly divisible by 2.
 * @param { number } value
 * @returns { boolean }
 */ function even(value) {
                return value % 2 === 0;
            }
            exports.even = even;
            /**
 * Returns `true` if the value is falsy - if I recall correctly, '', 0, false,
 * undefined, NaN or null. I don't know if we should stick to the default JS
 * behavior or attempt to replicate what Python believes should be falsy (i.e.,
 * empty arrays, empty dicts, not 0...).
 * @param { any } value
 * @returns { boolean }
 */ function falsy(value) {
                return !value;
            }
            exports.falsy = falsy;
            /**
 * Returns `true` if the operand (one) is greater or equal to the test's
 * argument (two).
 * @param { number } one
 * @param { number } two
 * @returns { boolean }
 */ function ge(one, two) {
                return one >= two;
            }
            exports.ge = ge;
            /**
 * Returns `true` if the operand (one) is greater than the test's argument
 * (two).
 * @param { number } one
 * @param { number } two
 * @returns { boolean }
 */ function greaterthan(one, two) {
                return one > two;
            }
            exports.greaterthan = greaterthan;
            // alias
            exports.gt = exports.greaterthan;
            /**
 * Returns `true` if the operand (one) is less than or equal to the test's
 * argument (two).
 * @param { number } one
 * @param { number } two
 * @returns { boolean }
 */ function le(one, two) {
                return one <= two;
            }
            exports.le = le;
            /**
 * Returns `true` if the operand (one) is less than the test's passed argument
 * (two).
 * @param { number } one
 * @param { number } two
 * @returns { boolean }
 */ function lessthan(one, two) {
                return one < two;
            }
            exports.lessthan = lessthan;
            // alias
            exports.lt = exports.lessthan;
            /**
 * Returns `true` if the string is lowercased.
 * @param { string } value
 * @returns { boolean }
 */ function lower(value) {
                return value.toLowerCase() === value;
            }
            exports.lower = lower;
            /**
 * Returns `true` if the operand (one) is less than or equal to the test's
 * argument (two).
 * @param { number } one
 * @param { number } two
 * @returns { boolean }
 */ function ne(one, two) {
                return one !== two;
            }
            exports.ne = ne;
            /**
 * Returns true if the value is strictly equal to `null`.
 * @param { any }
 * @returns { boolean }
 */ function nullTest(value) {
                return value === null;
            }
            exports.null = nullTest;
            /**
 * Returns true if value is a number.
 * @param { any }
 * @returns { boolean }
 */ function number(value) {
                return typeof value === "number";
            }
            exports.number = number;
            /**
 * Returns `true` if the value is *not* evenly divisible by 2.
 * @param { number } value
 * @returns { boolean }
 */ function odd(value) {
                return value % 2 === 1;
            }
            exports.odd = odd;
            /**
 * Returns `true` if the value is a string, `false` if not.
 * @param { any } value
 * @returns { boolean }
 */ function string(value) {
                return typeof value === "string";
            }
            exports.string = string;
            /**
 * Returns `true` if the value is not in the list of things considered falsy:
 * '', null, undefined, 0, NaN and false.
 * @param { any } value
 * @returns { boolean }
 */ function truthy(value) {
                return !!value;
            }
            exports.truthy = truthy;
            /**
 * Returns `true` if the value is undefined.
 * @param { any } value
 * @returns { boolean }
 */ function undefinedTest(value) {
                return value === undefined;
            }
            exports.undefined = undefinedTest;
            /**
 * Returns `true` if the string is uppercased.
 * @param { string } value
 * @returns { boolean }
 */ function upper(value) {
                return value.toUpperCase() === value;
            }
            exports.upper = upper;
            /**
 * If ES6 features are available, returns `true` if the value implements the
 * `Symbol.iterator` method. If not, it's a string or Array.
 *
 * Could potentially cause issues if a browser exists that has Set and Map but
 * not Symbol.
 *
 * @param { any } value
 * @returns { boolean }
 */ function iterable(value) {
                if (typeof Symbol !== "undefined") return !!value[Symbol.iterator];
                else return Array.isArray(value) || typeof value === "string";
            }
            exports.iterable = iterable;
            /**
 * If ES6 features are available, returns `true` if the value is an object hash
 * or an ES6 Map. Otherwise just return if it's an object hash.
 * @param { any } value
 * @returns { boolean }
 */ function mapping(value) {
                // only maps and object hashes
                var bool = value !== null && value !== undefined && typeof value === "object" && !Array.isArray(value);
                if (Set) return bool && !(value instanceof Set);
                else return bool;
            }
            exports.mapping = mapping;
        /***/ },
        /* 21 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function _cycler(items) {
                var index = -1;
                return {
                    current: null,
                    reset: function reset() {
                        index = -1;
                        this.current = null;
                    },
                    next: function next() {
                        index++;
                        if (index >= items.length) index = 0;
                        this.current = items[index];
                        return this.current;
                    }
                };
            }
            function _joiner(sep) {
                sep = sep || ",";
                var first = true;
                return function() {
                    var val = first ? "" : sep;
                    first = false;
                    return val;
                };
            }
            // Making this a function instead so it returns a new object
            // each time it's called. That way, if something like an environment
            // uses it, they will each have their own copy.
            function globals() {
                return {
                    range: function range(start, stop, step) {
                        if (typeof stop === "undefined") {
                            stop = start;
                            start = 0;
                            step = 1;
                        } else if (!step) step = 1;
                        var arr = [];
                        if (step > 0) for(var i = start; i < stop; i += step)arr.push(i);
                        else for(var _i = start; _i > stop; _i += step)// eslint-disable-line for-direction
                        arr.push(_i);
                        return arr;
                    },
                    cycler: function cycler() {
                        return _cycler(Array.prototype.slice.call(arguments));
                    },
                    joiner: function joiner(sep) {
                        return _joiner(sep);
                    }
                };
            }
            module1.exports = globals;
        /***/ },
        /* 22 */ /***/ function(module1, exports, __webpack_require__) {
            var path = __webpack_require__(4);
            module1.exports = function express(env, app) {
                function NunjucksView(name, opts) {
                    this.name = name;
                    this.path = name;
                    this.defaultEngine = opts.defaultEngine;
                    this.ext = path.extname(name);
                    if (!this.ext && !this.defaultEngine) throw new Error("No default engine was specified and no extension was provided.");
                    if (!this.ext) this.name += this.ext = (this.defaultEngine[0] !== "." ? "." : "") + this.defaultEngine;
                }
                NunjucksView.prototype.render = function render(opts, cb) {
                    env.render(this.name, opts, cb);
                };
                app.set("view", NunjucksView);
                app.set("nunjucksEnv", env);
                return env;
            };
        /***/ },
        /* 23 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            var fs = __webpack_require__(4);
            var path = __webpack_require__(4);
            var _require = __webpack_require__(0), _prettifyError = _require._prettifyError;
            var compiler = __webpack_require__(5);
            var _require2 = __webpack_require__(7), Environment = _require2.Environment;
            var precompileGlobal = __webpack_require__(24);
            function match(filename, patterns) {
                if (!Array.isArray(patterns)) return false;
                return patterns.some(function(pattern) {
                    return filename.match(pattern);
                });
            }
            function precompileString(str, opts) {
                opts = opts || {};
                opts.isString = true;
                var env = opts.env || new Environment([]);
                var wrapper = opts.wrapper || precompileGlobal;
                if (!opts.name) throw new Error('the "name" option is required when compiling a string');
                return wrapper([
                    _precompile(str, opts.name, env)
                ], opts);
            }
            function precompile(input, opts) {
                // The following options are available:
                //
                // * name: name of the template (auto-generated when compiling a directory)
                // * isString: input is a string, not a file path
                // * asFunction: generate a callable function
                // * force: keep compiling on error
                // * env: the Environment to use (gets extensions and async filters from it)
                // * include: which file/folders to include (folders are auto-included, files are auto-excluded)
                // * exclude: which file/folders to exclude (folders are auto-included, files are auto-excluded)
                // * wrapper: function(templates, opts) {...}
                //       Customize the output format to store the compiled template.
                //       By default, templates are stored in a global variable used by the runtime.
                //       A custom loader will be necessary to load your custom wrapper.
                opts = opts || {};
                var env = opts.env || new Environment([]);
                var wrapper = opts.wrapper || precompileGlobal;
                if (opts.isString) return precompileString(input, opts);
                var pathStats = fs.existsSync(input) && fs.statSync(input);
                var precompiled = [];
                var templates = [];
                function addTemplates(dir) {
                    fs.readdirSync(dir).forEach(function(file) {
                        var filepath = path.join(dir, file);
                        var subpath = filepath.substr(path.join(input, "/").length);
                        var stat = fs.statSync(filepath);
                        if (stat && stat.isDirectory()) {
                            subpath += "/";
                            if (!match(subpath, opts.exclude)) addTemplates(filepath);
                        } else if (match(subpath, opts.include)) templates.push(filepath);
                    });
                }
                if (pathStats.isFile()) precompiled.push(_precompile(fs.readFileSync(input, "utf-8"), opts.name || input, env));
                else if (pathStats.isDirectory()) {
                    addTemplates(input);
                    for(var i = 0; i < templates.length; i++){
                        var name = templates[i].replace(path.join(input, "/"), "");
                        try {
                            precompiled.push(_precompile(fs.readFileSync(templates[i], "utf-8"), name, env));
                        } catch (e) {
                            if (opts.force) // Don't stop generating the output if we're
                            // forcing compilation.
                            console.error(e); // eslint-disable-line no-console
                            else throw e;
                        }
                    }
                }
                return wrapper(precompiled, opts);
            }
            function _precompile(str, name, env) {
                env = env || new Environment([]);
                var asyncFilters = env.asyncFilters;
                var extensions = env.extensionsList;
                var template;
                name = name.replace(/\\/g, "/");
                try {
                    template = compiler.compile(str, asyncFilters, extensions, name, env.opts);
                } catch (err) {
                    throw _prettifyError(name, false, err);
                }
                return {
                    name: name,
                    template: template
                };
            }
            module1.exports = {
                precompile: precompile,
                precompileString: precompileString
            };
        /***/ },
        /* 24 */ /***/ function(module1, exports, __webpack_require__) {
            "use strict";
            function precompileGlobal(templates, opts) {
                var out = "";
                opts = opts || {};
                for(var i = 0; i < templates.length; i++){
                    var name = JSON.stringify(templates[i].name);
                    var template = templates[i].template;
                    out += "(function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})[" + name + "] = (function() {\n" + template + "\n})();\n";
                    if (opts.asFunction) out += "return function(ctx, cb) { return nunjucks.render(" + name + ", ctx, cb); }\n";
                    out += "})();\n";
                }
                return out;
            }
            module1.exports = precompileGlobal;
        /***/ },
        /* 25 */ /***/ function(module1, exports, __webpack_require__) {
            function installCompat() {
                "use strict";
                /* eslint-disable camelcase */ // This must be called like `nunjucks.installCompat` so that `this`
                // references the nunjucks instance
                var runtime = this.runtime;
                var lib = this.lib;
                // Handle slim case where these 'modules' are excluded from the built source
                var Compiler = this.compiler.Compiler;
                var Parser = this.parser.Parser;
                var nodes = this.nodes;
                var lexer = this.lexer;
                var orig_contextOrFrameLookup = runtime.contextOrFrameLookup;
                var orig_memberLookup = runtime.memberLookup;
                var orig_Compiler_assertType;
                var orig_Parser_parseAggregate;
                if (Compiler) orig_Compiler_assertType = Compiler.prototype.assertType;
                if (Parser) orig_Parser_parseAggregate = Parser.prototype.parseAggregate;
                function uninstall() {
                    runtime.contextOrFrameLookup = orig_contextOrFrameLookup;
                    runtime.memberLookup = orig_memberLookup;
                    if (Compiler) Compiler.prototype.assertType = orig_Compiler_assertType;
                    if (Parser) Parser.prototype.parseAggregate = orig_Parser_parseAggregate;
                }
                runtime.contextOrFrameLookup = function contextOrFrameLookup(context, frame, key) {
                    var val = orig_contextOrFrameLookup.apply(this, arguments);
                    if (val !== undefined) return val;
                    switch(key){
                        case "True":
                            return true;
                        case "False":
                            return false;
                        case "None":
                            return null;
                        default:
                            return undefined;
                    }
                };
                function getTokensState(tokens) {
                    return {
                        index: tokens.index,
                        lineno: tokens.lineno,
                        colno: tokens.colno
                    };
                }
                if (nodes && Compiler && Parser) {
                    // i.e., not slim mode
                    var Slice = nodes.Node.extend("Slice", {
                        fields: [
                            "start",
                            "stop",
                            "step"
                        ],
                        init: function init(lineno, colno, start, stop, step) {
                            start = start || new nodes.Literal(lineno, colno, null);
                            stop = stop || new nodes.Literal(lineno, colno, null);
                            step = step || new nodes.Literal(lineno, colno, 1);
                            this.parent(lineno, colno, start, stop, step);
                        }
                    });
                    Compiler.prototype.assertType = function assertType(node) {
                        if (node instanceof Slice) return;
                        orig_Compiler_assertType.apply(this, arguments);
                    };
                    Compiler.prototype.compileSlice = function compileSlice(node, frame) {
                        this._emit("(");
                        this._compileExpression(node.start, frame);
                        this._emit("),(");
                        this._compileExpression(node.stop, frame);
                        this._emit("),(");
                        this._compileExpression(node.step, frame);
                        this._emit(")");
                    };
                    Parser.prototype.parseAggregate = function parseAggregate() {
                        var _this = this;
                        var origState = getTokensState(this.tokens);
                        // Set back one accounting for opening bracket/parens
                        origState.colno--;
                        origState.index--;
                        try {
                            return orig_Parser_parseAggregate.apply(this);
                        } catch (e) {
                            var errState = getTokensState(this.tokens);
                            var rethrow = function rethrow() {
                                lib._assign(_this.tokens, errState);
                                return e;
                            };
                            // Reset to state before original parseAggregate called
                            lib._assign(this.tokens, origState);
                            this.peeked = false;
                            var tok = this.peekToken();
                            if (tok.type !== lexer.TOKEN_LEFT_BRACKET) throw rethrow();
                            else this.nextToken();
                            var node = new Slice(tok.lineno, tok.colno);
                            // If we don't encounter a colon while parsing, this is not a slice,
                            // so re-raise the original exception.
                            var isSlice = false;
                            for(var i = 0; i <= node.fields.length; i++){
                                if (this.skip(lexer.TOKEN_RIGHT_BRACKET)) break;
                                if (i === node.fields.length) {
                                    if (isSlice) this.fail("parseSlice: too many slice components", tok.lineno, tok.colno);
                                    else break;
                                }
                                if (this.skip(lexer.TOKEN_COLON)) isSlice = true;
                                else {
                                    var field = node.fields[i];
                                    node[field] = this.parseExpression();
                                    isSlice = this.skip(lexer.TOKEN_COLON) || isSlice;
                                }
                            }
                            if (!isSlice) throw rethrow();
                            return new nodes.Array(tok.lineno, tok.colno, [
                                node
                            ]);
                        }
                    };
                }
                function sliceLookup(obj, start, stop, step) {
                    obj = obj || [];
                    if (start === null) start = step < 0 ? obj.length - 1 : 0;
                    if (stop === null) stop = step < 0 ? -1 : obj.length;
                    else if (stop < 0) stop += obj.length;
                    if (start < 0) start += obj.length;
                    var results = [];
                    for(var i = start;; i += step){
                        if (i < 0 || i > obj.length) break;
                        if (step > 0 && i >= stop) break;
                        if (step < 0 && i <= stop) break;
                        results.push(runtime.memberLookup(obj, i));
                    }
                    return results;
                }
                function hasOwnProp(obj, key) {
                    return Object.prototype.hasOwnProperty.call(obj, key);
                }
                var ARRAY_MEMBERS = {
                    pop: function pop(index) {
                        if (index === undefined) return this.pop();
                        if (index >= this.length || index < 0) throw new Error("KeyError");
                        return this.splice(index, 1);
                    },
                    append: function append(element) {
                        return this.push(element);
                    },
                    remove: function remove(element) {
                        for(var i = 0; i < this.length; i++){
                            if (this[i] === element) return this.splice(i, 1);
                        }
                        throw new Error("ValueError");
                    },
                    count: function count(element) {
                        var count = 0;
                        for(var i = 0; i < this.length; i++)if (this[i] === element) count++;
                        return count;
                    },
                    index: function index(element) {
                        var i;
                        if ((i = this.indexOf(element)) === -1) throw new Error("ValueError");
                        return i;
                    },
                    find: function find(element) {
                        return this.indexOf(element);
                    },
                    insert: function insert(index, elem) {
                        return this.splice(index, 0, elem);
                    }
                };
                var OBJECT_MEMBERS = {
                    items: function items() {
                        return lib._entries(this);
                    },
                    values: function values() {
                        return lib._values(this);
                    },
                    keys: function keys() {
                        return lib.keys(this);
                    },
                    get: function get(key, def) {
                        var output = this[key];
                        if (output === undefined) output = def;
                        return output;
                    },
                    has_key: function has_key(key) {
                        return hasOwnProp(this, key);
                    },
                    pop: function pop(key, def) {
                        var output = this[key];
                        if (output === undefined && def !== undefined) output = def;
                        else if (output === undefined) throw new Error("KeyError");
                        else delete this[key];
                        return output;
                    },
                    popitem: function popitem() {
                        var keys = lib.keys(this);
                        if (!keys.length) throw new Error("KeyError");
                        var k = keys[0];
                        var val = this[k];
                        delete this[k];
                        return [
                            k,
                            val
                        ];
                    },
                    setdefault: function setdefault(key, def) {
                        if (def === void 0) def = null;
                        if (!(key in this)) this[key] = def;
                        return this[key];
                    },
                    update: function update(kwargs) {
                        lib._assign(this, kwargs);
                        return null; // Always returns None
                    }
                };
                OBJECT_MEMBERS.iteritems = OBJECT_MEMBERS.items;
                OBJECT_MEMBERS.itervalues = OBJECT_MEMBERS.values;
                OBJECT_MEMBERS.iterkeys = OBJECT_MEMBERS.keys;
                runtime.memberLookup = function memberLookup(obj, val, autoescape) {
                    if (arguments.length === 4) return sliceLookup.apply(this, arguments);
                    obj = obj || {};
                    // If the object is an object, return any of the methods that Python would
                    // otherwise provide.
                    if (lib.isArray(obj) && hasOwnProp(ARRAY_MEMBERS, val)) return ARRAY_MEMBERS[val].bind(obj);
                    if (lib.isObject(obj) && hasOwnProp(OBJECT_MEMBERS, val)) return OBJECT_MEMBERS[val].bind(obj);
                    return orig_memberLookup.apply(this, arguments);
                };
                return uninstall;
            }
            module1.exports = installCompat;
        /***/ }
    ]);
});


// Constants
const $383e46f26d360885$var$EVENT_ID_KEY = "job_id";
const $383e46f26d360885$var$EVENT_STATUS_KEY = "job_status";
const $383e46f26d360885$var$STATUS_SUCCESS = "SUCCESS";
const $383e46f26d360885$var$STATUS_FAILED = "FAILED";
let $383e46f26d360885$var$kafka_broker, $383e46f26d360885$var$topic_name, $383e46f26d360885$var$job_id, $383e46f26d360885$var$listener_timeout;
let $383e46f26d360885$var$authentication, $383e46f26d360885$var$sasl_username, $383e46f26d360885$var$sasl_password;
let $383e46f26d360885$var$ssl_enabled, $383e46f26d360885$var$ca_path, $383e46f26d360885$var$client_cert, $383e46f26d360885$var$client_key;
let $383e46f26d360885$var$group_id, $383e46f26d360885$var$group_prefix;
let $383e46f26d360885$var$success_when, $383e46f26d360885$var$fail_when, $383e46f26d360885$var$jinja_conditional;
try {
    $383e46f26d360885$var$kafka_broker = $9ccdc4e10588ec0a$exports.getInput("kafka_broker", {
        required: true
    });
    $383e46f26d360885$var$topic_name = $9ccdc4e10588ec0a$exports.getInput("topic_name", {
        required: true
    });
    $383e46f26d360885$var$job_id = $9ccdc4e10588ec0a$exports.getInput("job_id");
    $383e46f26d360885$var$listener_timeout = parseInt($9ccdc4e10588ec0a$exports.getInput("listener_timeout"), 10);
    $383e46f26d360885$var$authentication = $9ccdc4e10588ec0a$exports.getInput("authentication");
    $383e46f26d360885$var$ssl_enabled = $9ccdc4e10588ec0a$exports.getInput("ssl_enabled") === "true";
    $383e46f26d360885$var$group_id = $9ccdc4e10588ec0a$exports.getInput("group_id");
    $383e46f26d360885$var$group_prefix = $9ccdc4e10588ec0a$exports.getInput("group_prefix");
    $383e46f26d360885$var$success_when = $9ccdc4e10588ec0a$exports.getInput("success_when");
    $383e46f26d360885$var$fail_when = $9ccdc4e10588ec0a$exports.getInput("fail_when");
    $383e46f26d360885$var$jinja_conditional = $9ccdc4e10588ec0a$exports.getInput("jinja_conditional");
    if (!($383e46f26d360885$var$jinja_conditional || $383e46f26d360885$var$success_when || $383e46f26d360885$var$job_id)) throw new Error("At least one of jinja_conditional, success_when, or job_id must be provided to determine the job status.");
    if (!$383e46f26d360885$var$kafka_broker || !$383e46f26d360885$var$topic_name) throw new Error("kafka_broker, topic_name are mandatory action inputs and cannot be empty.");
    if ($383e46f26d360885$var$authentication && $383e46f26d360885$var$authentication.toUpperCase() === "SASL PLAIN") {
        $383e46f26d360885$var$sasl_username = $9ccdc4e10588ec0a$exports.getInput("sasl_username");
        $383e46f26d360885$var$sasl_password = $9ccdc4e10588ec0a$exports.getInput("sasl_password");
        if (!$383e46f26d360885$var$sasl_username || !$383e46f26d360885$var$sasl_password) throw new Error("sasl_username and sasl_password are mandatory when authentication is set to SASL PLAIN.");
    }
    if ($383e46f26d360885$var$ssl_enabled) {
        $383e46f26d360885$var$ca_path = $9ccdc4e10588ec0a$exports.getInput("ca_path");
        $383e46f26d360885$var$client_cert = $9ccdc4e10588ec0a$exports.getInput("client_cert");
        $383e46f26d360885$var$client_key = $9ccdc4e10588ec0a$exports.getInput("client_key");
        if ($383e46f26d360885$var$ca_path && !$4UN2M$fs.existsSync($383e46f26d360885$var$ca_path)) throw new Error(`ca certificate file does not exist at path '${$383e46f26d360885$var$ca_path}'`);
        if ($383e46f26d360885$var$client_cert && !$4UN2M$fs.existsSync($383e46f26d360885$var$client_cert)) throw new Error(`client certificate file does not exist at path '${$383e46f26d360885$var$client_cert}'`);
        if ($383e46f26d360885$var$client_key && !$4UN2M$fs.existsSync($383e46f26d360885$var$client_key)) throw new Error(`client key file does not exist at path '${$383e46f26d360885$var$client_key}'`);
    }
} catch (error) {
    $9ccdc4e10588ec0a$exports.setFailed(`[ERROR] Error while retrieving action inputs: ${error.message}`);
    $4UN2M$process.exit(1);
}
const $383e46f26d360885$var$kafkaConfig = {
    brokers: [
        $383e46f26d360885$var$kafka_broker
    ],
    ssl: $383e46f26d360885$var$ssl_enabled ? {
        rejectUnauthorized: false,
        ca: $383e46f26d360885$var$ca_path ? $4UN2M$fs.readFileSync($383e46f26d360885$var$ca_path, "utf-8") : undefined,
        cert: $383e46f26d360885$var$client_cert ? $4UN2M$fs.readFileSync($383e46f26d360885$var$client_cert, "utf-8") : undefined,
        key: $383e46f26d360885$var$client_key ? $4UN2M$fs.readFileSync($383e46f26d360885$var$client_key, "utf-8") : undefined
    } : false
};
if ($383e46f26d360885$var$authentication && $383e46f26d360885$var$authentication.toUpperCase() === "SASL PLAIN") $383e46f26d360885$var$kafkaConfig.sasl = {
    mechanism: "plain",
    username: $383e46f26d360885$var$sasl_username,
    password: $383e46f26d360885$var$sasl_password
};

(parcelRequire("e5tr3")).config();
const $383e46f26d360885$var$workflowRunId = undefined;
const $383e46f26d360885$var$currentJobName = undefined;
const $383e46f26d360885$var$group_suffix = `${$383e46f26d360885$var$workflowRunId}/${$383e46f26d360885$var$currentJobName}`;
const $383e46f26d360885$var$kafka = new $383e46f26d360885$require$Kafka($383e46f26d360885$var$kafkaConfig);
const $383e46f26d360885$var$consumer = $383e46f26d360885$var$kafka.consumer({
    groupId: $383e46f26d360885$var$group_id || `${$383e46f26d360885$var$group_prefix}${$383e46f26d360885$var$group_suffix}`
});
async function $383e46f26d360885$var$run() {
    try {
        await $383e46f26d360885$var$consumer.connect();
        await $383e46f26d360885$var$consumer.subscribe({
            topic: $383e46f26d360885$var$topic_name,
            fromBeginning: false
        });
        await $383e46f26d360885$var$consumer.run({
            eachMessage: async ({ topic: topic, partition: partition, message: message })=>{
                let value;
                try {
                    value = message.value.toString("utf8");
                } catch (error) {
                    console.error(`[ERROR] Error while converting message to string: ${error.message}`);
                }
                console.debug("[DEBUG]", topic, partition, message.offset, value);
                try {
                    const jobStatus = $383e46f26d360885$var$processMessage(value);
                    await $383e46f26d360885$var$consumer.commitOffsets([
                        {
                            topic: topic,
                            partition: partition,
                            offset: (Number(message.offset) + 1).toString()
                        }
                    ]);
                    if ([
                        $383e46f26d360885$var$STATUS_SUCCESS,
                        $383e46f26d360885$var$STATUS_FAILED
                    ].includes(jobStatus)) {
                        console.info(`[INFO] Marked current running job status as ${jobStatus}.`);
                        $9ccdc4e10588ec0a$exports.setOutput("json", value);
                        if (jobStatus === $383e46f26d360885$var$STATUS_SUCCESS) $4UN2M$process.exit(0);
                        else $4UN2M$process.exit(1);
                    }
                } catch (error) {
                    console.error(`[ERROR] Error while processing message: ${error.message}`);
                }
            }
        });
    } catch (error) {
        $9ccdc4e10588ec0a$exports.setFailed(`[ERROR] Error while running the consumer: ${error.message}`);
        $4UN2M$process.exit(1);
    }
}
function $383e46f26d360885$var$processMessage(message) {
    let event;
    try {
        event = JSON.parse(message);
    } catch (error) {
        console.error(`[ERROR] Error while parsing JSON message: ${error.message}`);
        return "";
    }
    let jobStatus;
    if ($383e46f26d360885$var$jinja_conditional) jobStatus = $383e46f26d360885$var$renderNunjucksTemplate(event, $383e46f26d360885$var$jinja_conditional);
    else if ($383e46f26d360885$var$success_when) {
        jobStatus = $383e46f26d360885$var$renderConditionalTemplate(event, $383e46f26d360885$var$success_when, $383e46f26d360885$var$STATUS_SUCCESS);
        if ($383e46f26d360885$var$fail_when && jobStatus !== $383e46f26d360885$var$STATUS_SUCCESS) jobStatus = $383e46f26d360885$var$renderConditionalTemplate(event, $383e46f26d360885$var$fail_when, $383e46f26d360885$var$STATUS_FAILED);
    } else if ($383e46f26d360885$var$job_id) jobStatus = $383e46f26d360885$var$processJobEvent(event);
    return jobStatus.trim().toUpperCase();
}
function $383e46f26d360885$var$renderNunjucksTemplate(event, templateStr) {
    try {
        const result = $b390b84af73eefa2$exports.renderString(templateStr, {
            event: event
        });
        return result;
    } catch (e) {
        return "";
    }
}
function $383e46f26d360885$var$renderConditionalTemplate(event, conditionStr, jobStatus) {
    try {
        const templateStr = `{% if ${conditionStr} %}${jobStatus}{% else %}{% endif %}`;
        const result = $b390b84af73eefa2$exports.renderString(templateStr, {
            event: event
        });
        return result;
    } catch (e) {
        return "";
    }
}
function $383e46f26d360885$var$processJobEvent(event) {
    if (event[$383e46f26d360885$var$EVENT_ID_KEY] === $383e46f26d360885$var$job_id) {
        if (event[$383e46f26d360885$var$EVENT_STATUS_KEY] === $383e46f26d360885$var$STATUS_SUCCESS) return $383e46f26d360885$var$STATUS_SUCCESS;
        else if (event[$383e46f26d360885$var$EVENT_STATUS_KEY] === $383e46f26d360885$var$STATUS_FAILED) return $383e46f26d360885$var$STATUS_FAILED;
    }
    return "";
}
$383e46f26d360885$var$run();
setTimeout(()=>{
    console.info(`[INFO] Listener timed out after waiting ${$383e46f26d360885$var$listener_timeout} minutes for target message, marked current running job status as ${$383e46f26d360885$var$STATUS_FAILED}.`);
    $4UN2M$process.exit(1);
}, $383e46f26d360885$var$listener_timeout * 60000);


//# sourceMappingURL=index.js.map
